
AD4000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2b0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  0800a5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001a528  24000040  0800a5cc  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  2401a568  0800a5cc  0002a568  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d602  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fc5  00000000  00000000  0003d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  000413f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037505  00000000  00000000  000420e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001369c  00000000  00000000  000795ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f42a  00000000  00000000  0008cc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec0b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038dc  00000000  00000000  001ec108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a530 	.word	0x0800a530

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800a530 	.word	0x0800a530

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
	//	length of the recieve buffer array
	unsigned short rxCount = COUNTOF(aRxBuffer) - 10;
 80005d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005da:	807b      	strh	r3, [r7, #2]
	//	length of transmit buffer
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005e0:	803b      	strh	r3, [r7, #0]
	//	set the transmit buffer to a known value
	for (int i = 0; i < txCount; ++i) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e018      	b.n	800061a <main+0x4a>
		aTxBuffer[i] = i % 16384;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	425a      	negs	r2, r3
 80005ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005f4:	bf58      	it	pl
 80005f6:	4253      	negpl	r3, r2
 80005f8:	b299      	uxth	r1, r3
 80005fa:	4a82      	ldr	r2, [pc, #520]	; (8000804 <main+0x234>)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aTxBufferMini[i] = aTxBuffer[i];
 8000602:	4a80      	ldr	r2, [pc, #512]	; (8000804 <main+0x234>)
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060a:	b299      	uxth	r1, r3
 800060c:	4a7e      	ldr	r2, [pc, #504]	; (8000808 <main+0x238>)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i) {
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	883b      	ldrh	r3, [r7, #0]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	429a      	cmp	r2, r3
 8000620:	dbe2      	blt.n	80005e8 <main+0x18>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000622:	4b7a      	ldr	r3, [pc, #488]	; (800080c <main+0x23c>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062a:	2b00      	cmp	r3, #0
 800062c:	d11b      	bne.n	8000666 <main+0x96>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800062e:	f3bf 8f4f 	dsb	sy
}
 8000632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000634:	f3bf 8f6f 	isb	sy
}
 8000638:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800063a:	4b74      	ldr	r3, [pc, #464]	; (800080c <main+0x23c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
}
 8000646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000648:	f3bf 8f6f 	isb	sy
}
 800064c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800064e:	4b6f      	ldr	r3, [pc, #444]	; (800080c <main+0x23c>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a6e      	ldr	r2, [pc, #440]	; (800080c <main+0x23c>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000660:	f3bf 8f6f 	isb	sy
}
 8000664:	e000      	b.n	8000668 <main+0x98>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000666:	bf00      	nop
	//	  SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000668:	f001 ffd6 	bl	8002618 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800066c:	f000 fe7a 	bl	8001364 <SystemClock_Config>

	//    initialize GPIO
	MX_GPIO_Init();
 8000670:	f001 f8a2 	bl	80017b8 <MX_GPIO_Init>

	//	turn off all the PCB LEDs
	GPIOE->BSRR = GPIO_PIN_0 | GPIO_PIN_13 | GPIO_PIN_15;
 8000674:	4b66      	ldr	r3, [pc, #408]	; (8000810 <main+0x240>)
 8000676:	f24a 0201 	movw	r2, #40961	; 0xa001
 800067a:	619a      	str	r2, [r3, #24]
	GPIOF->BSRR = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 800067c:	4b65      	ldr	r3, [pc, #404]	; (8000814 <main+0x244>)
 800067e:	f44f 4238 	mov.w	r2, #47104	; 0xb800
 8000682:	619a      	str	r2, [r3, #24]
	GPIOG->BSRR = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_14;
 8000684:	4b64      	ldr	r3, [pc, #400]	; (8000818 <main+0x248>)
 8000686:	f244 1270 	movw	r2, #16752	; 0x4170
 800068a:	619a      	str	r2, [r3, #24]
	//	initialize the compensation cell to improve slew rate
	HAL_EnableCompensationCell();
 800068c:	f002 f8a6 	bl	80027dc <HAL_EnableCompensationCell>
	//	initialize the DMA, must be done before other peripherals
	MX_DMA_Init();
 8000690:	f001 f84a 	bl	8001728 <MX_DMA_Init>

	//	initialize UART1, going to the stlink mini interface
	MX_USART1_UART_Init();
 8000694:	f000 ff9c 	bl	80015d0 <MX_USART1_UART_Init>
	//	initialize URT3, going to the STLINK interface
	MX_USART3_UART_Init();
 8000698:	f000 fff0 	bl	800167c <MX_USART3_UART_Init>
		// turn on LED 6
		GPIOE->BSRR = GPIO_PIN_0 << 16;
	}

	//	initialize SPI1 interface, going to the breadboard converter
	MX_SPI1_Init();
 800069c:	f000 fee8 	bl	8001470 <MX_SPI1_Init>
	//	initialize the SPI2 interface, going to the pcb converter
	MX_SPI2_Init();
 80006a0:	f000 ff3e 	bl	8001520 <MX_SPI2_Init>

	//  stall until the user button is pressed
	while (UserButtonStatus == 0) {
 80006a4:	e005      	b.n	80006b2 <main+0xe2>
		BSP_LED_Toggle(LED1);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f001 fe52 	bl	8002350 <BSP_LED_Toggle>
		HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f002 f845 	bl	800273c <HAL_Delay>
	while (UserButtonStatus == 0) {
 80006b2:	4b5a      	ldr	r3, [pc, #360]	; (800081c <main+0x24c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f5      	beq.n	80006a6 <main+0xd6>
	}
	//	reset the user button status
	UserButtonStatus = 0;
 80006ba:	4b58      	ldr	r3, [pc, #352]	; (800081c <main+0x24c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	//	reset LEDS
	BSP_LED_Off(LED1);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f001 fe1b 	bl	80022fc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f001 fe18 	bl	80022fc <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80006cc:	2002      	movs	r0, #2
 80006ce:	f001 fe15 	bl	80022fc <BSP_LED_Off>

	/* Configure communication direction : 1Line */
	SPI_1LINE_RX(&hspi1);
 80006d2:	4b53      	ldr	r3, [pc, #332]	; (8000820 <main+0x250>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <main+0x250>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006e0:	601a      	str	r2, [r3, #0]
	SPI_1LINE_RX(&hspi2);
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <main+0x254>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <main+0x254>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006f0:	601a      	str	r2, [r3, #0]

	//	configure the half transfer callback function to update the wTransferState value
	hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006f2:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <main+0x250>)
 80006f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006f6:	4a4c      	ldr	r2, [pc, #304]	; (8000828 <main+0x258>)
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
	hspi2.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <main+0x254>)
 80006fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006fe:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <main+0x258>)
 8000700:	641a      	str	r2, [r3, #64]	; 0x40

	//	enable the transfer complete and half transfer interupts for SPI1
	SET_BIT(SPI1_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 8000702:	4b4a      	ldr	r3, [pc, #296]	; (800082c <main+0x25c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a49      	ldr	r2, [pc, #292]	; (800082c <main+0x25c>)
 8000708:	f043 0318 	orr.w	r3, r3, #24
 800070c:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI2_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 800070e:	4b48      	ldr	r3, [pc, #288]	; (8000830 <main+0x260>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a47      	ldr	r2, [pc, #284]	; (8000830 <main+0x260>)
 8000714:	f043 0318 	orr.w	r3, r3, #24
 8000718:	6013      	str	r3, [r2, #0]
			(uint32_t) aRxBuffer + 20, rxCount) != HAL_OK) {
		Error_Handler();
	}
#else
	//	start the DMA transfer on SPI2, use HAL library to perform initial configurations
	if (HAL_DMA_Start(hspi2.hdmarx, (uint32_t) &hspi2.Instance->RXDR,
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <main+0x254>)
 800071c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800071e:	4b41      	ldr	r3, [pc, #260]	; (8000824 <main+0x254>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3330      	adds	r3, #48	; 0x30
 8000724:	4619      	mov	r1, r3
			(uint32_t) aRxBuffer + 20, rxCount) != HAL_OK) {
 8000726:	4b43      	ldr	r3, [pc, #268]	; (8000834 <main+0x264>)
	if (HAL_DMA_Start(hspi2.hdmarx, (uint32_t) &hspi2.Instance->RXDR,
 8000728:	f103 0214 	add.w	r2, r3, #20
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	f002 fd03 	bl	8003138 <HAL_DMA_Start>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <main+0x16c>
		Error_Handler();
 8000738:	f001 f985 	bl	8001a46 <Error_Handler>
	}
#endif

	//	set the transfer size to 0 (unlimited)
	MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800073c:	4b38      	ldr	r3, [pc, #224]	; (8000820 <main+0x250>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6859      	ldr	r1, [r3, #4]
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <main+0x250>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <main+0x268>)
 8000748:	400b      	ands	r3, r1
 800074a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(hspi2.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800074c:	4b35      	ldr	r3, [pc, #212]	; (8000824 <main+0x254>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6859      	ldr	r1, [r3, #4]
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <main+0x254>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <main+0x268>)
 8000758:	400b      	ands	r3, r1
 800075a:	6053      	str	r3, [r2, #4]

	//	enable DMA requests on the SPI instance
	SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <main+0x250>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <main+0x250>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800076a:	609a      	str	r2, [r3, #8]
	SET_BIT(hspi2.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <main+0x254>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <main+0x254>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800077a:	609a      	str	r2, [r3, #8]

	/* Enable the SPI Error Interrupt Bits */
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <main+0x250>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	691a      	ldr	r2, [r3, #16]
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <main+0x250>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800078a:	611a      	str	r2, [r3, #16]
	__HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <main+0x254>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	691a      	ldr	r2, [r3, #16]
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <main+0x254>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800079a:	611a      	str	r2, [r3, #16]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(&hspi1);
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <main+0x250>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <main+0x250>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f042 0201 	orr.w	r2, r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2);
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <main+0x254>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <main+0x254>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	601a      	str	r2, [r3, #0]

	//	start the SPI transfers
#ifdef USE_BREADBOARD
	SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
#else
	SET_BIT(hspi2.Instance->CR1, SPI_CR1_CSTART);
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <main+0x254>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <main+0x254>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007ca:	601a      	str	r2, [r3, #0]
#endif

	//	wait for the first half of the transfer to complete
	while (wTransferState != TRANSFER_H_COMPLETE) {
 80007cc:	e005      	b.n	80007da <main+0x20a>
		//		toggle LED2 every 20 ms
		HAL_Delay(20);
 80007ce:	2014      	movs	r0, #20
 80007d0:	f001 ffb4 	bl	800273c <HAL_Delay>
		BSP_LED_Toggle(LED3);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f001 fdbb 	bl	8002350 <BSP_LED_Toggle>
	while (wTransferState != TRANSFER_H_COMPLETE) {
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <main+0x26c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d1f5      	bne.n	80007ce <main+0x1fe>
	}
	//	reset transfer state
	wTransferState = TRANSFER_WAIT;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <main+0x26c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
	//	reset LEDs
	BSP_LED_Off(LED1);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f001 fd87 	bl	80022fc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f001 fd84 	bl	80022fc <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f001 fd81 	bl	80022fc <BSP_LED_Off>
	//	transfer data from rxbuffer to tx buffer
	//	j is the index for the rx buffer
	int j = 10;
 80007fa:	230a      	movs	r3, #10
 80007fc:	613b      	str	r3, [r7, #16]
	//	i is the index of the tx buffer
	//	j increases by the oversampling ratio for each increment in i
	for (int i = 0; i < txCount; ++i, j += 4) {
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e037      	b.n	8000874 <main+0x2a4>
 8000804:	24000080 	.word	0x24000080
 8000808:	24001080 	.word	0x24001080
 800080c:	e000ed00 	.word	0xe000ed00
 8000810:	58021000 	.word	0x58021000
 8000814:	58021400 	.word	0x58021400
 8000818:	58021800 	.word	0x58021800
 800081c:	24000060 	.word	0x24000060
 8000820:	2401a3cc 	.word	0x2401a3cc
 8000824:	2401a0bc 	.word	0x2401a0bc
 8000828:	080019ed 	.word	0x080019ed
 800082c:	40020410 	.word	0x40020410
 8000830:	40020428 	.word	0x40020428
 8000834:	24002080 	.word	0x24002080
 8000838:	ffff0000 	.word	0xffff0000
 800083c:	2400005c 	.word	0x2400005c
		aTxBuffer[i] = aRxBuffer[j] << 4;
 8000840:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <main+0x330>)
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000848:	b29b      	uxth	r3, r3
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	b299      	uxth	r1, r3
 800084e:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <main+0x334>)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aTxBufferMini[i] = aTxBuffer[i];
 8000856:	4a2b      	ldr	r2, [pc, #172]	; (8000904 <main+0x334>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	b299      	uxth	r1, r3
 8000860:	4a29      	ldr	r2, [pc, #164]	; (8000908 <main+0x338>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i, j += 4) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	3304      	adds	r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	883b      	ldrh	r3, [r7, #0]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbe1      	blt.n	8000840 <main+0x270>
	}
	//	Use the HAL driver to transmit the buffer over DMA
	//	HAL will initialize many of the settings for us
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer))
 800087c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000880:	4920      	ldr	r1, [pc, #128]	; (8000904 <main+0x334>)
 8000882:	4822      	ldr	r0, [pc, #136]	; (800090c <main+0x33c>)
 8000884:	f008 f9e6 	bl	8008c54 <HAL_UART_Transmit_DMA>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <main+0x2c2>
			!= HAL_OK) {
		//		if it fails, call our error handler
		Error_Handler();
 800088e:	f001 f8da 	bl	8001a46 <Error_Handler>
	}
	//	Use the HAL driver to transmit the buffer over DMA
	//	HAL will initialize many of the settings for us
	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) aTxBufferMini, sizeof(aTxBufferMini))
 8000892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000896:	491c      	ldr	r1, [pc, #112]	; (8000908 <main+0x338>)
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <main+0x340>)
 800089a:	f008 f9db 	bl	8008c54 <HAL_UART_Transmit_DMA>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <main+0x2d8>
			!= HAL_OK) {
		//		if it fails, call our error handler
		Error_Handler();
 80008a4:	f001 f8cf 	bl	8001a46 <Error_Handler>
	}
	//	Suspend interupts that we no longer need, for the purpose of efficiency
	//	suspend the systick
	HAL_SuspendTick();
 80008a8:	f001 ff6c 	bl	8002784 <HAL_SuspendTick>
	//	suspend UART3 interupts
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 80008ac:	2027      	movs	r0, #39	; 0x27
 80008ae:	f002 f8cc 	bl	8002a4a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 80008b2:	2025      	movs	r0, #37	; 0x25
 80008b4:	f002 f8c9 	bl	8002a4a <HAL_NVIC_DisableIRQ>
	//	suspend DMA interupts for the UART3 channel
	HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f002 f8c6 	bl	8002a4a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(USART1_DMA_IRQN);
 80008be:	200b      	movs	r0, #11
 80008c0:	f002 f8c3 	bl	8002a4a <HAL_NVIC_DisableIRQ>
	//	suspend DMA interrupts for the SPI channel
	HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 80008c4:	2038      	movs	r0, #56	; 0x38
 80008c6:	f002 f8c0 	bl	8002a4a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SPI2_DMA_IRQN);
 80008ca:	2039      	movs	r0, #57	; 0x39
 80008cc:	f002 f8bd 	bl	8002a4a <HAL_NVIC_DisableIRQ>
	//	reset LEDs
	BSP_LED_Off(LED1);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fd13 	bl	80022fc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f001 fd10 	bl	80022fc <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80008dc:	2002      	movs	r0, #2
 80008de:	f001 fd0d 	bl	80022fc <BSP_LED_Off>
	while (1) {
		//		wait for the second half of the receive buffer to finish transferring
#ifdef USE_BREADBOARD
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
#else
		while ((DMA2->LISR & DMA_FLAG_TCIF1_5) != DMA_FLAG_TCIF1_5) { }
 80008e2:	bf00      	nop
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <main+0x344>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008f0:	d1f8      	bne.n	80008e4 <main+0x314>
#endif
		//		clear the transfer complete flag of the SPI channel
		DMA2->LIFCR = DMA_FLAG_TCIF0_4 | DMA_FLAG_TCIF1_5;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <main+0x344>)
 80008f4:	f44f 6202 	mov.w	r2, #2080	; 0x820
 80008f8:	609a      	str	r2, [r3, #8]
		//		the rx buffer index starts at half way through the buffer and goes to the end
		for (int i = 0; i < txCount; ++i, j += 4) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	e216      	b.n	8000d2e <main+0x75e>
 8000900:	24002080 	.word	0x24002080
 8000904:	24000080 	.word	0x24000080
 8000908:	24001080 	.word	0x24001080
 800090c:	2401a144 	.word	0x2401a144
 8000910:	2401a33c 	.word	0x2401a33c
 8000914:	40020400 	.word	0x40020400
			yi[j] = (1.4390179415e-02) * aRxBuffer[j] + (4.3170538245e-02) * aRxBuffer[j-1] \
 8000918:	4ad7      	ldr	r2, [pc, #860]	; (8000c78 <main+0x6a8>)
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000920:	b29b      	uxth	r3, r3
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800092a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8000c50 <main+0x680>
 800092e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3b01      	subs	r3, #1
 8000936:	4ad0      	ldr	r2, [pc, #832]	; (8000c78 <main+0x6a8>)
 8000938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093c:	b29b      	uxth	r3, r3
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000946:	ed9f 5bc4 	vldr	d5, [pc, #784]	; 8000c58 <main+0x688>
 800094a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800094e:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j-2] + (1.4390179415e-02) * aRxBuffer[j-3] \
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3b02      	subs	r3, #2
 8000956:	4ac8      	ldr	r2, [pc, #800]	; (8000c78 <main+0x6a8>)
 8000958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095c:	b29b      	uxth	r3, r3
 800095e:	ee07 3a90 	vmov	s15, r3
 8000962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000966:	ed9f 5bbc 	vldr	d5, [pc, #752]	; 8000c58 <main+0x688>
 800096a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800096e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3b03      	subs	r3, #3
 8000976:	4ac0      	ldr	r2, [pc, #768]	; (8000c78 <main+0x6a8>)
 8000978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097c:	b29b      	uxth	r3, r3
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000986:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8000c50 <main+0x680>
 800098a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800098e:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j-1] - (2.2574907505e+00) * yi[j-2] \
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	3b01      	subs	r3, #1
 8000996:	4ab9      	ldr	r2, [pc, #740]	; (8000c7c <main+0x6ac>)
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a4:	ed9f 5bae 	vldr	d5, [pc, #696]	; 8000c60 <main+0x690>
 80009a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	3b02      	subs	r3, #2
 80009b4:	4ab1      	ldr	r2, [pc, #708]	; (8000c7c <main+0x6ac>)
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	edd3 7a00 	vldr	s15, [r3]
 80009be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009c2:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8000c68 <main+0x698>
 80009c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009ca:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j-3];
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	4aaa      	ldr	r2, [pc, #680]	; (8000c7c <main+0x6ac>)
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	edd3 7a00 	vldr	s15, [r3]
 80009dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e0:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8000c70 <main+0x6a0>
 80009e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j] = (1.4390179415e-02) * aRxBuffer[j] + (4.3170538245e-02) * aRxBuffer[j-1] \
 80009f0:	4aa2      	ldr	r2, [pc, #648]	; (8000c7c <main+0x6ac>)
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	edc3 7a00 	vstr	s15, [r3]

			yi[j+1] = (1.4390179415e-02) * aRxBuffer[j+1] + (4.3170538245e-02) * aRxBuffer[j] \
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a9d      	ldr	r2, [pc, #628]	; (8000c78 <main+0x6a8>)
 8000a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a10:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8000c50 <main+0x680>
 8000a14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a18:	4a97      	ldr	r2, [pc, #604]	; (8000c78 <main+0x6a8>)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	ee07 3a90 	vmov	s15, r3
 8000a26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a2a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8000c58 <main+0x688>
 8000a2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a32:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j-1] + (1.4390179415e-02) * aRxBuffer[j-2] \
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	4a8f      	ldr	r2, [pc, #572]	; (8000c78 <main+0x6a8>)
 8000a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4a:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000c58 <main+0x688>
 8000a4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	3b02      	subs	r3, #2
 8000a5a:	4a87      	ldr	r2, [pc, #540]	; (8000c78 <main+0x6a8>)
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a6a:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8000c50 <main+0x680>
 8000a6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a72:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j] - (2.2574907505e+00) * yi[j-1] \
 8000a76:	4a81      	ldr	r2, [pc, #516]	; (8000c7c <main+0x6ac>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	edd3 7a00 	vldr	s15, [r3]
 8000a82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a86:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8000c60 <main+0x690>
 8000a8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a79      	ldr	r2, [pc, #484]	; (8000c7c <main+0x6ac>)
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	edd3 7a00 	vldr	s15, [r3]
 8000aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa4:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000c68 <main+0x698>
 8000aa8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000aac:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j-2];
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	3b02      	subs	r3, #2
 8000ab4:	4a71      	ldr	r2, [pc, #452]	; (8000c7c <main+0x6ac>)
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c70 <main+0x6a0>
 8000ac6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000aca:	ee36 7b07 	vadd.f64	d7, d6, d7
			yi[j+1] = (1.4390179415e-02) * aRxBuffer[j+1] + (4.3170538245e-02) * aRxBuffer[j] \
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	3301      	adds	r3, #1
			- (-6.6173800320e-01) * yi[j-2];
 8000ad2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j+1] = (1.4390179415e-02) * aRxBuffer[j+1] + (4.3170538245e-02) * aRxBuffer[j] \
 8000ad6:	4a69      	ldr	r2, [pc, #420]	; (8000c7c <main+0x6ac>)
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	edc3 7a00 	vstr	s15, [r3]

			aTxBufferMini[i] = (uint16_t)yi[j+1];
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a65      	ldr	r2, [pc, #404]	; (8000c7c <main+0x6ac>)
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	edd3 7a00 	vldr	s15, [r3]
 8000aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af2:	ee17 3a90 	vmov	r3, s15
 8000af6:	b299      	uxth	r1, r3
 8000af8:	4a61      	ldr	r2, [pc, #388]	; (8000c80 <main+0x6b0>)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			yi[j+2] = (1.4390179415e-02) * aRxBuffer[j+2] + (4.3170538245e-02) * aRxBuffer[j+1] \
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	3302      	adds	r3, #2
 8000b04:	4a5c      	ldr	r2, [pc, #368]	; (8000c78 <main+0x6a8>)
 8000b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b14:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000c50 <main+0x680>
 8000b18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a55      	ldr	r2, [pc, #340]	; (8000c78 <main+0x6a8>)
 8000b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b30:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8000c58 <main+0x688>
 8000b34:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b38:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j] + (1.4390179415e-02) * aRxBuffer[j-1] \
 8000b3c:	4a4e      	ldr	r2, [pc, #312]	; (8000c78 <main+0x6a8>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b4e:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8000c58 <main+0x688>
 8000b52:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b56:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	4a46      	ldr	r2, [pc, #280]	; (8000c78 <main+0x6a8>)
 8000b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b6e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000c50 <main+0x680>
 8000b72:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b76:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j+1] - (2.2574907505e+00) * yi[j] \
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <main+0x6ac>)
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8c:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8000c60 <main+0x690>
 8000b90:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b98:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <main+0x6ac>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8000c68 <main+0x698>
 8000bac:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000bb0:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j-1];
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <main+0x6ac>)
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	edd3 7a00 	vldr	s15, [r3]
 8000bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000c70 <main+0x6a0>
 8000bca:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000bce:	ee36 7b07 	vadd.f64	d7, d6, d7
			yi[j+2] = (1.4390179415e-02) * aRxBuffer[j+2] + (4.3170538245e-02) * aRxBuffer[j+1] \
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3302      	adds	r3, #2
			- (-6.6173800320e-01) * yi[j-1];
 8000bd6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j+2] = (1.4390179415e-02) * aRxBuffer[j+2] + (4.3170538245e-02) * aRxBuffer[j+1] \
 8000bda:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <main+0x6ac>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	edc3 7a00 	vstr	s15, [r3]

			yi[j+3] = (1.4390179415e-02) * aRxBuffer[j+3] + (4.3170538245e-02) * aRxBuffer[j+2] \
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3303      	adds	r3, #3
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <main+0x6a8>)
 8000bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bf8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000c50 <main+0x680>
 8000bfc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	3302      	adds	r3, #2
 8000c04:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <main+0x6a8>)
 8000c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c14:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000c58 <main+0x688>
 8000c18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c1c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j+1] + (1.4390179415e-02) * aRxBuffer[j] \
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <main+0x6a8>)
 8000c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c34:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000c58 <main+0x688>
 8000c38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <main+0x6a8>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	e01b      	b.n	8000c84 <main+0x6b4>
 8000c4c:	f3af 8000 	nop.w
 8000c50:	2fc49a4b 	.word	0x2fc49a4b
 8000c54:	3f8d7899 	.word	0x3f8d7899
 8000c58:	e3d373b8 	.word	0xe3d373b8
 8000c5c:	3fa61a72 	.word	0x3fa61a72
 8000c60:	b7999e72 	.word	0xb7999e72
 8000c64:	4004b55d 	.word	0x4004b55d
 8000c68:	4f835c27 	.word	0x4f835c27
 8000c6c:	40020f57 	.word	0x40020f57
 8000c70:	2d487580 	.word	0x2d487580
 8000c74:	3fe52cf5 	.word	0x3fe52cf5
 8000c78:	24002080 	.word	0x24002080
 8000c7c:	2400a094 	.word	0x2400a094
 8000c80:	24001080 	.word	0x24001080
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c8c:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000e48 <main+0x878>
 8000c90:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c94:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j+2] - (2.2574907505e+00) * yi[j+1] \
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	4a72      	ldr	r2, [pc, #456]	; (8000e68 <main+0x898>)
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000caa:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8000e50 <main+0x880>
 8000cae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a6b      	ldr	r2, [pc, #428]	; (8000e68 <main+0x898>)
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	edd3 7a00 	vldr	s15, [r3]
 8000cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc8:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8000e58 <main+0x888>
 8000ccc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cd0:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j];
 8000cd4:	4a64      	ldr	r2, [pc, #400]	; (8000e68 <main+0x898>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	edd3 7a00 	vldr	s15, [r3]
 8000ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce4:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8000e60 <main+0x890>
 8000ce8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cec:	ee36 7b07 	vadd.f64	d7, d6, d7
			yi[j+3] = (1.4390179415e-02) * aRxBuffer[j+3] + (4.3170538245e-02) * aRxBuffer[j+2] \
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	3303      	adds	r3, #3
			- (-6.6173800320e-01) * yi[j];
 8000cf4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j+3] = (1.4390179415e-02) * aRxBuffer[j+3] + (4.3170538245e-02) * aRxBuffer[j+2] \
 8000cf8:	4a5b      	ldr	r2, [pc, #364]	; (8000e68 <main+0x898>)
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	edc3 7a00 	vstr	s15, [r3]

			aTxBuffer[i] = (uint16_t)yi[j+3];
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	3303      	adds	r3, #3
 8000d06:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <main+0x898>)
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	edd3 7a00 	vldr	s15, [r3]
 8000d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d14:	ee17 3a90 	vmov	r3, s15
 8000d18:	b299      	uxth	r1, r3
 8000d1a:	4a54      	ldr	r2, [pc, #336]	; (8000e6c <main+0x89c>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < txCount; ++i, j += 4) {
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	883b      	ldrh	r3, [r7, #0]
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	f6ff adf0 	blt.w	8000918 <main+0x348>
		}

		yi[9] = yi[16393];
 8000d38:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <main+0x898>)
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <main+0x8a0>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <main+0x898>)
 8000d42:	6253      	str	r3, [r2, #36]	; 0x24
		aRxBuffer[9] = aRxBuffer[16393];
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <main+0x8a4>)
 8000d46:	f248 0312 	movw	r3, #32786	; 0x8012
 8000d4a:	4413      	add	r3, r2
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <main+0x8a4>)
 8000d52:	825a      	strh	r2, [r3, #18]
		yi[8] = yi[16392];
 8000d54:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <main+0x898>)
 8000d56:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <main+0x8a8>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <main+0x898>)
 8000d5e:	6213      	str	r3, [r2, #32]
		aRxBuffer[8] = aRxBuffer[16392];
 8000d60:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <main+0x8a4>)
 8000d62:	f248 0310 	movw	r3, #32784	; 0x8010
 8000d66:	4413      	add	r3, r2
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <main+0x8a4>)
 8000d6e:	821a      	strh	r2, [r3, #16]
		yi[7] = yi[16391];
 8000d70:	4a3d      	ldr	r2, [pc, #244]	; (8000e68 <main+0x898>)
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <main+0x8ac>)
 8000d74:	4413      	add	r3, r2
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a3b      	ldr	r2, [pc, #236]	; (8000e68 <main+0x898>)
 8000d7a:	61d3      	str	r3, [r2, #28]
		aRxBuffer[7] = aRxBuffer[16391];
 8000d7c:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <main+0x8a4>)
 8000d7e:	f248 030e 	movw	r3, #32782	; 0x800e
 8000d82:	4413      	add	r3, r2
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <main+0x8a4>)
 8000d8a:	81da      	strh	r2, [r3, #14]
		yi[6] = yi[16390];
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <main+0x898>)
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <main+0x8b0>)
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a34      	ldr	r2, [pc, #208]	; (8000e68 <main+0x898>)
 8000d96:	6193      	str	r3, [r2, #24]
		aRxBuffer[6] = aRxBuffer[16390];
 8000d98:	4a36      	ldr	r2, [pc, #216]	; (8000e74 <main+0x8a4>)
 8000d9a:	f248 030c 	movw	r3, #32780	; 0x800c
 8000d9e:	4413      	add	r3, r2
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <main+0x8a4>)
 8000da6:	819a      	strh	r2, [r3, #12]
		yi[5] = yi[16389];
 8000da8:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <main+0x898>)
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <main+0x8b4>)
 8000dac:	4413      	add	r3, r2
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <main+0x898>)
 8000db2:	6153      	str	r3, [r2, #20]
		aRxBuffer[5] = aRxBuffer[16389];
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <main+0x8a4>)
 8000db6:	f248 030a 	movw	r3, #32778	; 0x800a
 8000dba:	4413      	add	r3, r2
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <main+0x8a4>)
 8000dc2:	815a      	strh	r2, [r3, #10]


		//		wait for the UARTs to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 8000dc4:	bf00      	nop
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <main+0x8b8>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dce:	2b40      	cmp	r3, #64	; 0x40
 8000dd0:	d1f9      	bne.n	8000dc6 <main+0x7f6>
		while ((USART1->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 8000dd2:	bf00      	nop
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <main+0x8bc>)
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	2b40      	cmp	r3, #64	; 0x40
 8000dde:	d1f9      	bne.n	8000dd4 <main+0x804>
		//		reset the UARTs transfer complete flag
		USART3->ICR = UART_CLEAR_TCF;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <main+0x8b8>)
 8000de2:	2240      	movs	r2, #64	; 0x40
 8000de4:	621a      	str	r2, [r3, #32]
		USART1->ICR = UART_CLEAR_TCF;
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <main+0x8bc>)
 8000de8:	2240      	movs	r2, #64	; 0x40
 8000dea:	621a      	str	r2, [r3, #32]
		//		reset the UART's DMA channels transfer complete and half transfer flags
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4;
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <main+0x8c0>)
 8000dee:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000df2:	609a      	str	r2, [r3, #8]
		//		reenable the UART DMA channels
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <main+0x8c4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <main+0x8c4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
		SET_BIT(USART1_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x8c8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <main+0x8c8>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
		//		start the UARTs DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <main+0x8b8>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <main+0x8b8>)
 8000e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e16:	6093      	str	r3, [r2, #8]
		SET_BIT(USART1->CR3, USART_CR3_DMAT);
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <main+0x8bc>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <main+0x8bc>)
 8000e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e22:	6093      	str	r3, [r2, #8]

		//		wait for the first half of the receive buffer to be ready
#ifdef USE_BREADBOARD
		while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4) {}
#else
		while ((DMA2->LISR & DMA_FLAG_HTIF1_5) != DMA_FLAG_HTIF1_5) {}
 8000e24:	bf00      	nop
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <main+0x8cc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e32:	d1f8      	bne.n	8000e26 <main+0x856>
#endif
		//		reset the SPI DMA channel half transfer flag
		DMA2->LIFCR = DMA_FLAG_HTIF0_4 | DMA_FLAG_HTIF1_5;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <main+0x8cc>)
 8000e36:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8000e3a:	609a      	str	r2, [r3, #8]
		//		the starting index for the recieve buffer is 0
		j = 10;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < txCount; ++i, j += 4) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	e237      	b.n	80012b6 <main+0xce6>
 8000e46:	bf00      	nop
 8000e48:	2fc49a4b 	.word	0x2fc49a4b
 8000e4c:	3f8d7899 	.word	0x3f8d7899
 8000e50:	b7999e72 	.word	0xb7999e72
 8000e54:	4004b55d 	.word	0x4004b55d
 8000e58:	4f835c27 	.word	0x4f835c27
 8000e5c:	40020f57 	.word	0x40020f57
 8000e60:	2d487580 	.word	0x2d487580
 8000e64:	3fe52cf5 	.word	0x3fe52cf5
 8000e68:	2400a094 	.word	0x2400a094
 8000e6c:	24000080 	.word	0x24000080
 8000e70:	00010024 	.word	0x00010024
 8000e74:	24002080 	.word	0x24002080
 8000e78:	00010020 	.word	0x00010020
 8000e7c:	0001001c 	.word	0x0001001c
 8000e80:	00010018 	.word	0x00010018
 8000e84:	00010014 	.word	0x00010014
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020028 	.word	0x40020028
 8000e98:	40020010 	.word	0x40020010
 8000e9c:	40020400 	.word	0x40020400
			yi[j] = (1.4390179415e-02) * aRxBuffer[j] + (4.3170538245e-02) * aRxBuffer[j-1] \
 8000ea0:	4ad7      	ldr	r2, [pc, #860]	; (8001200 <main+0xc30>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eb2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80011d8 <main+0xc08>
 8000eb6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4ad0      	ldr	r2, [pc, #832]	; (8001200 <main+0xc30>)
 8000ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ece:	ed9f 5bc4 	vldr	d5, [pc, #784]	; 80011e0 <main+0xc10>
 8000ed2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ed6:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j-2] + (1.4390179415e-02) * aRxBuffer[j-3] \
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4ac8      	ldr	r2, [pc, #800]	; (8001200 <main+0xc30>)
 8000ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eee:	ed9f 5bbc 	vldr	d5, [pc, #752]	; 80011e0 <main+0xc10>
 8000ef2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ef6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	4ac0      	ldr	r2, [pc, #768]	; (8001200 <main+0xc30>)
 8000f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f0e:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 80011d8 <main+0xc08>
 8000f12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f16:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j-1] - (2.2574907505e+00) * yi[j-2] \
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	4ab9      	ldr	r2, [pc, #740]	; (8001204 <main+0xc34>)
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2c:	ed9f 5bae 	vldr	d5, [pc, #696]	; 80011e8 <main+0xc18>
 8000f30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4ab1      	ldr	r2, [pc, #708]	; (8001204 <main+0xc34>)
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4a:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 80011f0 <main+0xc20>
 8000f4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f52:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j-3];
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	4aaa      	ldr	r2, [pc, #680]	; (8001204 <main+0xc34>)
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f68:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 80011f8 <main+0xc28>
 8000f6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j] = (1.4390179415e-02) * aRxBuffer[j] + (4.3170538245e-02) * aRxBuffer[j-1] \
 8000f78:	4aa2      	ldr	r2, [pc, #648]	; (8001204 <main+0xc34>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	edc3 7a00 	vstr	s15, [r3]

			yi[j+1] = (1.4390179415e-02) * aRxBuffer[j+1] + (4.3170538245e-02) * aRxBuffer[j] \
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a9d      	ldr	r2, [pc, #628]	; (8001200 <main+0xc30>)
 8000f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f98:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80011d8 <main+0xc08>
 8000f9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fa0:	4a97      	ldr	r2, [pc, #604]	; (8001200 <main+0xc30>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fb2:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 80011e0 <main+0xc10>
 8000fb6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fba:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j-1] + (1.4390179415e-02) * aRxBuffer[j-2] \
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	4a8f      	ldr	r2, [pc, #572]	; (8001200 <main+0xc30>)
 8000fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fd2:	ed9f 5b83 	vldr	d5, [pc, #524]	; 80011e0 <main+0xc10>
 8000fd6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fda:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3b02      	subs	r3, #2
 8000fe2:	4a87      	ldr	r2, [pc, #540]	; (8001200 <main+0xc30>)
 8000fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff2:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80011d8 <main+0xc08>
 8000ff6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ffa:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j] - (2.2574907505e+00) * yi[j-1] \
 8000ffe:	4a81      	ldr	r2, [pc, #516]	; (8001204 <main+0xc34>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80011e8 <main+0xc18>
 8001012:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001016:	ee36 6b07 	vadd.f64	d6, d6, d7
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a79      	ldr	r2, [pc, #484]	; (8001204 <main+0xc34>)
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102c:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80011f0 <main+0xc20>
 8001030:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001034:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j-2];
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3b02      	subs	r3, #2
 800103c:	4a71      	ldr	r2, [pc, #452]	; (8001204 <main+0xc34>)
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800104a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 80011f8 <main+0xc28>
 800104e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001052:	ee36 7b07 	vadd.f64	d7, d6, d7
			yi[j+1] = (1.4390179415e-02) * aRxBuffer[j+1] + (4.3170538245e-02) * aRxBuffer[j] \
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	3301      	adds	r3, #1
			- (-6.6173800320e-01) * yi[j-2];
 800105a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j+1] = (1.4390179415e-02) * aRxBuffer[j+1] + (4.3170538245e-02) * aRxBuffer[j] \
 800105e:	4a69      	ldr	r2, [pc, #420]	; (8001204 <main+0xc34>)
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	edc3 7a00 	vstr	s15, [r3]

			aTxBufferMini[i] = (uint16_t)yi[j+1];
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	4a65      	ldr	r2, [pc, #404]	; (8001204 <main+0xc34>)
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	ee17 3a90 	vmov	r3, s15
 800107e:	b299      	uxth	r1, r3
 8001080:	4a61      	ldr	r2, [pc, #388]	; (8001208 <main+0xc38>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			yi[j+2] = (1.4390179415e-02) * aRxBuffer[j+2] + (4.3170538245e-02) * aRxBuffer[j+1] \
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	3302      	adds	r3, #2
 800108c:	4a5c      	ldr	r2, [pc, #368]	; (8001200 <main+0xc30>)
 800108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001092:	b29b      	uxth	r3, r3
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800109c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80011d8 <main+0xc08>
 80010a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a55      	ldr	r2, [pc, #340]	; (8001200 <main+0xc30>)
 80010aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010b8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 80011e0 <main+0xc10>
 80010bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010c0:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j] + (1.4390179415e-02) * aRxBuffer[j-1] \
 80010c4:	4a4e      	ldr	r2, [pc, #312]	; (8001200 <main+0xc30>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010d6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 80011e0 <main+0xc10>
 80010da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	4a46      	ldr	r2, [pc, #280]	; (8001200 <main+0xc30>)
 80010e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010f6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80011d8 <main+0xc08>
 80010fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010fe:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j+1] - (2.2574907505e+00) * yi[j] \
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	3301      	adds	r3, #1
 8001106:	4a3f      	ldr	r2, [pc, #252]	; (8001204 <main+0xc34>)
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001114:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80011e8 <main+0xc18>
 8001118:	ee27 7b05 	vmul.f64	d7, d7, d5
 800111c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001120:	4a38      	ldr	r2, [pc, #224]	; (8001204 <main+0xc34>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001130:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80011f0 <main+0xc20>
 8001134:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001138:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j-1];
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3b01      	subs	r3, #1
 8001140:	4a30      	ldr	r2, [pc, #192]	; (8001204 <main+0xc34>)
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80011f8 <main+0xc28>
 8001152:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001156:	ee36 7b07 	vadd.f64	d7, d6, d7
			yi[j+2] = (1.4390179415e-02) * aRxBuffer[j+2] + (4.3170538245e-02) * aRxBuffer[j+1] \
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	3302      	adds	r3, #2
			- (-6.6173800320e-01) * yi[j-1];
 800115e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j+2] = (1.4390179415e-02) * aRxBuffer[j+2] + (4.3170538245e-02) * aRxBuffer[j+1] \
 8001162:	4a28      	ldr	r2, [pc, #160]	; (8001204 <main+0xc34>)
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	edc3 7a00 	vstr	s15, [r3]

			yi[j+3] = (1.4390179415e-02) * aRxBuffer[j+3] + (4.3170538245e-02) * aRxBuffer[j+2] \
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	3303      	adds	r3, #3
 8001170:	4a23      	ldr	r2, [pc, #140]	; (8001200 <main+0xc30>)
 8001172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001176:	b29b      	uxth	r3, r3
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001180:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80011d8 <main+0xc08>
 8001184:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	3302      	adds	r3, #2
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <main+0xc30>)
 800118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001192:	b29b      	uxth	r3, r3
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800119c:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80011e0 <main+0xc10>
 80011a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011a4:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (4.3170538245e-02) * aRxBuffer[j+1] + (1.4390179415e-02) * aRxBuffer[j] \
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <main+0xc30>)
 80011ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011bc:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80011e0 <main+0xc10>
 80011c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <main+0xc30>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	e01b      	b.n	800120c <main+0xc3c>
 80011d4:	f3af 8000 	nop.w
 80011d8:	2fc49a4b 	.word	0x2fc49a4b
 80011dc:	3f8d7899 	.word	0x3f8d7899
 80011e0:	e3d373b8 	.word	0xe3d373b8
 80011e4:	3fa61a72 	.word	0x3fa61a72
 80011e8:	b7999e72 	.word	0xb7999e72
 80011ec:	4004b55d 	.word	0x4004b55d
 80011f0:	4f835c27 	.word	0x4f835c27
 80011f4:	40020f57 	.word	0x40020f57
 80011f8:	2d487580 	.word	0x2d487580
 80011fc:	3fe52cf5 	.word	0x3fe52cf5
 8001200:	24002080 	.word	0x24002080
 8001204:	2400a094 	.word	0x2400a094
 8001208:	24001080 	.word	0x24001080
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001214:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001328 <main+0xd58>
 8001218:	ee27 7b05 	vmul.f64	d7, d7, d5
 800121c:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (-2.5885576576e+00) * yi[j+2] - (2.2574907505e+00) * yi[j+1] \
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3302      	adds	r3, #2
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <main+0xd78>)
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001232:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8001330 <main+0xd60>
 8001236:	ee27 7b05 	vmul.f64	d7, d7, d5
 800123a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	3301      	adds	r3, #1
 8001242:	4a41      	ldr	r2, [pc, #260]	; (8001348 <main+0xd78>)
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001250:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001338 <main+0xd68>
 8001254:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001258:	ee36 6b47 	vsub.f64	d6, d6, d7
			- (-6.6173800320e-01) * yi[j];
 800125c:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <main+0xd78>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800126c:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8001340 <main+0xd70>
 8001270:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001274:	ee36 7b07 	vadd.f64	d7, d6, d7
			yi[j+3] = (1.4390179415e-02) * aRxBuffer[j+3] + (4.3170538245e-02) * aRxBuffer[j+2] \
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	3303      	adds	r3, #3
			- (-6.6173800320e-01) * yi[j];
 800127c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			yi[j+3] = (1.4390179415e-02) * aRxBuffer[j+3] + (4.3170538245e-02) * aRxBuffer[j+2] \
 8001280:	4a31      	ldr	r2, [pc, #196]	; (8001348 <main+0xd78>)
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	edc3 7a00 	vstr	s15, [r3]

			aTxBuffer[i] = (uint16_t)yi[j+3];
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	3303      	adds	r3, #3
 800128e:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <main+0xd78>)
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b299      	uxth	r1, r3
 80012a2:	4a2a      	ldr	r2, [pc, #168]	; (800134c <main+0xd7c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < txCount; ++i, j += 4) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3301      	adds	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	3304      	adds	r3, #4
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	883b      	ldrh	r3, [r7, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	f6ff adf0 	blt.w	8000ea0 <main+0x8d0>
		}

		//		wait for the UARTs to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) {}
 80012c0:	bf00      	nop
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <main+0xd80>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ca:	2b40      	cmp	r3, #64	; 0x40
 80012cc:	d1f9      	bne.n	80012c2 <main+0xcf2>
		while ((USART1->ISR & UART_FLAG_TC) != UART_FLAG_TC) {}
 80012ce:	bf00      	nop
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <main+0xd84>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	2b40      	cmp	r3, #64	; 0x40
 80012da:	d1f9      	bne.n	80012d0 <main+0xd00>
		//		clear the transfer complete flag of the UARTs
		USART3->ICR = UART_CLEAR_TCF;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <main+0xd80>)
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	621a      	str	r2, [r3, #32]
		USART1->ICR = UART_CLEAR_TCF;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <main+0xd84>)
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	621a      	str	r2, [r3, #32]
		//		clear the transfer complete and half transfer flags of the UART DMA channels
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <main+0xd88>)
 80012ea:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80012ee:	609a      	str	r2, [r3, #8]
		//		enable the UART DMA channels
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <main+0xd8c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <main+0xd8c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
		SET_BIT(USART1_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <main+0xd90>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <main+0xd90>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]
		//		start the UART DMA transfers
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <main+0xd80>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a10      	ldr	r2, [pc, #64]	; (8001350 <main+0xd80>)
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	6093      	str	r3, [r2, #8]
		SET_BIT(USART1->CR3, USART_CR3_DMAT);
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <main+0xd84>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <main+0xd84>)
 800131a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131e:	6093      	str	r3, [r2, #8]
		while ((DMA2->LISR & DMA_FLAG_TCIF1_5) != DMA_FLAG_TCIF1_5) { }
 8001320:	f7ff badf 	b.w	80008e2 <main+0x312>
 8001324:	f3af 8000 	nop.w
 8001328:	2fc49a4b 	.word	0x2fc49a4b
 800132c:	3f8d7899 	.word	0x3f8d7899
 8001330:	b7999e72 	.word	0xb7999e72
 8001334:	4004b55d 	.word	0x4004b55d
 8001338:	4f835c27 	.word	0x4f835c27
 800133c:	40020f57 	.word	0x40020f57
 8001340:	2d487580 	.word	0x2d487580
 8001344:	3fe52cf5 	.word	0x3fe52cf5
 8001348:	2400a094 	.word	0x2400a094
 800134c:	24000080 	.word	0x24000080
 8001350:	40004800 	.word	0x40004800
 8001354:	40011000 	.word	0x40011000
 8001358:	40020000 	.word	0x40020000
 800135c:	40020028 	.word	0x40020028
 8001360:	40020010 	.word	0x40020010

08001364 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b09c      	sub	sp, #112	; 0x70
 8001368:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	224c      	movs	r2, #76	; 0x4c
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f009 f8d4 	bl	800a520 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2220      	movs	r2, #32
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f009 f8ce 	bl	800a520 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001384:	2002      	movs	r0, #2
 8001386:	f004 fd07 	bl	8005d98 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <SystemClock_Config+0x100>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <SystemClock_Config+0x100>)
 8001394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <SystemClock_Config+0x100>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <SystemClock_Config+0x104>)
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <SystemClock_Config+0x104>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <SystemClock_Config+0x104>)
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80013bc:	bf00      	nop
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <SystemClock_Config+0x100>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ca:	d1f8      	bne.n	80013be <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <SystemClock_Config+0x108>)
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f023 0303 	bic.w	r3, r3, #3
 80013d4:	4a25      	ldr	r2, [pc, #148]	; (800146c <SystemClock_Config+0x108>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80013dc:	2321      	movs	r3, #33	; 0x21
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	2302      	movs	r3, #2
 80013f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 115;
 80013f6:	2373      	movs	r3, #115	; 0x73
 80013f8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80013fe:	2304      	movs	r3, #4
 8001400:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001402:	2302      	movs	r3, #2
 8001404:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001406:	230c      	movs	r3, #12
 8001408:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800140a:	2300      	movs	r3, #0
 800140c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fcf8 	bl	8005e0c <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xc2>
		Error_Handler();
 8001422:	f000 fb10 	bl	8001a46 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001426:	233f      	movs	r3, #63	; 0x3f
 8001428:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2303      	movs	r3, #3
 800142c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001432:	2308      	movs	r3, #8
 8001434:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800143a:	2340      	movs	r3, #64	; 0x40
 800143c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2104      	movs	r1, #4
 800144c:	4618      	mov	r0, r3
 800144e:	f005 f8ed 	bl	800662c <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xf8>
		Error_Handler();
 8001458:	f000 faf5 	bl	8001a46 <Error_Handler>
	}

}
 800145c:	bf00      	nop
 800145e:	3770      	adds	r7, #112	; 0x70
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	58024800 	.word	0x58024800
 8001468:	58000400 	.word	0x58000400
 800146c:	58024400 	.word	0x58024400

08001470 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <MX_SPI1_Init+0xa8>)
 8001476:	4a29      	ldr	r2, [pc, #164]	; (800151c <MX_SPI1_Init+0xac>)
 8001478:	601a      	str	r2, [r3, #0]
	//	set mode to master
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_SPI1_Init+0xa8>)
 800147c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001480:	605a      	str	r2, [r3, #4]
	//	recieve only
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <MX_SPI1_Init+0xa8>)
 8001484:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001488:	609a      	str	r2, [r3, #8]
	//	14 data bits, which includes the 2 leading 0s
	hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_SPI1_Init+0xa8>)
 800148c:	220d      	movs	r2, #13
 800148e:	60da      	str	r2, [r3, #12]
	//	clock polarity is high
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_SPI1_Init+0xa8>)
 8001492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001496:	611a      	str	r2, [r3, #16]
	//	data is clocked on the first edge
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_SPI1_Init+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
	//	slave select is managed by hardware
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014a4:	619a      	str	r2, [r3, #24]
	//	peripheral clock rate is half of pll clock
	hspi1.Init.BaudRatePrescaler = SPIPRESCALER;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
	//	MSB transferred first
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
	//	not TI mode
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
	//	no CRC
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.TxCRCInitializationPattern =
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	//	the slave select pin will pulse inactive in between frames
	//	the length of the pulse is 1 cycle
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
	//	slave select active low
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
	//	request data transfer function after 1 data
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
	//	no idle time before first transfer
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	649a      	str	r2, [r3, #72]	; 0x48
	//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014ec:	2220      	movs	r2, #32
 80014ee:	64da      	str	r2, [r3, #76]	; 0x4c
	//	no auto suspend on overflow
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	651a      	str	r2, [r3, #80]	; 0x50
	//	don't fix IO state
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	655a      	str	r2, [r3, #84]	; 0x54
	//	don't swap MISO and MOSI
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_SPI1_Init+0xa8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	659a      	str	r2, [r3, #88]	; 0x58
	//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_SPI1_Init+0xa8>)
 8001504:	f006 ff80 	bl	8008408 <HAL_SPI_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_SPI1_Init+0xa2>
		Error_Handler();
 800150e:	f000 fa9a 	bl	8001a46 <Error_Handler>
	}

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2401a3cc 	.word	0x2401a3cc
 800151c:	40013000 	.word	0x40013000

08001520 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi2.Instance = SPI2;
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001526:	4a29      	ldr	r2, [pc, #164]	; (80015cc <MX_SPI2_Init+0xac>)
 8001528:	601a      	str	r2, [r3, #0]
	//	set mode to master
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800152c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001530:	605a      	str	r2, [r3, #4]
	//	recieve only
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001534:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001538:	609a      	str	r2, [r3, #8]
	//	14 data bits, which includes the 2 leading 0s
	hspi2.Init.DataSize = SPI_DATASIZE_14BIT;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800153c:	220d      	movs	r2, #13
 800153e:	60da      	str	r2, [r3, #12]
	//	clock polarity is high
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001546:	611a      	str	r2, [r3, #16]
	//	data is clocked on the first edge
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
	//	slave select is managed by hardware
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001554:	619a      	str	r2, [r3, #24]
	//	peripheral clock rate is half of pll clock
	hspi2.Init.BaudRatePrescaler = SPIPRESCALER;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
	//	MSB transferred first
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
	//	not TI mode
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
	//	no CRC
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.TxCRCInitializationPattern =
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	//	the slave select pin will pulse inactive in between frames
	//	the length of the pulse is 1 cycle
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	635a      	str	r2, [r3, #52]	; 0x34
	//	slave select active low
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800158a:	2200      	movs	r2, #0
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
	//	request data transfer function after 1 data
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001590:	2200      	movs	r2, #0
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
	//	no idle time before first transfer
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_SPI2_Init+0xa8>)
 8001596:	2200      	movs	r2, #0
 8001598:	649a      	str	r2, [r3, #72]	; 0x48
	//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_SPI2_Init+0xa8>)
 800159c:	2220      	movs	r2, #32
 800159e:	64da      	str	r2, [r3, #76]	; 0x4c
	//	no auto suspend on overflow
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_SPI2_Init+0xa8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	651a      	str	r2, [r3, #80]	; 0x50
	//	don't fix IO state
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_SPI2_Init+0xa8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
	//	don't swap MISO and MOSI
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_SPI2_Init+0xa8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	659a      	str	r2, [r3, #88]	; 0x58
	//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_SPI2_Init+0xa8>)
 80015b4:	f006 ff28 	bl	8008408 <HAL_SPI_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_SPI2_Init+0xa2>
		Error_Handler();
 80015be:	f000 fa42 	bl	8001a46 <Error_Handler>
	}

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2401a0bc 	.word	0x2401a0bc
 80015cc:	40003800 	.word	0x40003800

080015d0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <MX_USART1_UART_Init+0xa4>)
 80015d8:	601a      	str	r2, [r3, #0]
	//	baud rate is peripheral clock divided by 8, check the ioc file
	huart1.Init.BaudRate = 11978688;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <MX_USART1_UART_Init+0xa8>)
 80015de:	605a      	str	r2, [r3, #4]
	//	8 bits per word
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	//	1 stop bit
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
	//	no parity check
	huart1.Init.Parity = UART_PARITY_NONE;
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
	//	UART in both transmit and receive
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015f4:	220c      	movs	r2, #12
 80015f6:	615a      	str	r2, [r3, #20]
	//	no HW flow control
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
	//	oversample by 8
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 8001600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001604:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
	//	divide the peripheral clock by 1
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
	//	no advanced features
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
	//	initialize peripheral with HAL library
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001618:	4815      	ldr	r0, [pc, #84]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 800161a:	f007 faca 	bl	8008bb2 <HAL_UART_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001624:	f000 fa0f 	bl	8001a46 <Error_Handler>
	}
	//	initialize transfer fifo
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001628:	2100      	movs	r1, #0
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 800162c:	f008 fe89 	bl	800a342 <HAL_UARTEx_SetTxFifoThreshold>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001636:	f000 fa06 	bl	8001a46 <Error_Handler>
	}
	//	initialize receive fifo
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800163a:	2100      	movs	r1, #0
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 800163e:	f008 febe 	bl	800a3be <HAL_UARTEx_SetRxFifoThreshold>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001648:	f000 f9fd 	bl	8001a46 <Error_Handler>
	}
	//	enable fifo
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0xa0>)
 800164e:	f008 fe3d 	bl	800a2cc <HAL_UARTEx_EnableFifoMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001658:	f000 f9f5 	bl	8001a46 <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	2100      	movs	r1, #0
 8001660:	2025      	movs	r0, #37	; 0x25
 8001662:	f001 f9ca 	bl	80029fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001666:	2025      	movs	r0, #37	; 0x25
 8001668:	f001 f9e1 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2401a33c 	.word	0x2401a33c
 8001674:	40011000 	.word	0x40011000
 8001678:	00b6c7c0 	.word	0x00b6c7c0

0800167c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_USART3_UART_Init+0xa0>)
 8001682:	4a27      	ldr	r2, [pc, #156]	; (8001720 <MX_USART3_UART_Init+0xa4>)
 8001684:	601a      	str	r2, [r3, #0]
	//	baud rate is peripheral clock divided by 8, check the ioc file
	huart3.Init.BaudRate = 11978688;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_USART3_UART_Init+0xa0>)
 8001688:	4a26      	ldr	r2, [pc, #152]	; (8001724 <MX_USART3_UART_Init+0xa8>)
 800168a:	605a      	str	r2, [r3, #4]
	//	8 bits per word
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <MX_USART3_UART_Init+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
	//	1 stop bit
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_USART3_UART_Init+0xa0>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
	//	no parity check
	huart3.Init.Parity = UART_PARITY_NONE;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <MX_USART3_UART_Init+0xa0>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
	//	UART in both transmit and receive
	huart3.Init.Mode = UART_MODE_TX_RX;
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016a0:	220c      	movs	r2, #12
 80016a2:	615a      	str	r2, [r3, #20]
	//	no HW flow control
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
	//	oversample by 8
	huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
	//	divide the peripheral clock by 1
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
	//	no advanced features
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
	//	initialize peripheral with HAL library
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80016c4:	4815      	ldr	r0, [pc, #84]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016c6:	f007 fa74 	bl	8008bb2 <HAL_UART_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 80016d0:	f000 f9b9 	bl	8001a46 <Error_Handler>
	}
	//	initialize transfer fifo
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 80016d4:	2100      	movs	r1, #0
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016d8:	f008 fe33 	bl	800a342 <HAL_UARTEx_SetTxFifoThreshold>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80016e2:	f000 f9b0 	bl	8001a46 <Error_Handler>
	}
	//	initialize receive fifo
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 80016e6:	2100      	movs	r1, #0
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016ea:	f008 fe68 	bl	800a3be <HAL_UARTEx_SetRxFifoThreshold>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80016f4:	f000 f9a7 	bl	8001a46 <Error_Handler>
	}
	//	enable fifo
	if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK) {
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <MX_USART3_UART_Init+0xa0>)
 80016fa:	f008 fde7 	bl	800a2cc <HAL_UARTEx_EnableFifoMode>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8001704:	f000 f99f 	bl	8001a46 <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	2100      	movs	r1, #0
 800170c:	2027      	movs	r0, #39	; 0x27
 800170e:	f001 f974 	bl	80029fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001712:	2027      	movs	r0, #39	; 0x27
 8001714:	f001 f98b 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2401a144 	.word	0x2401a144
 8001720:	40004800 	.word	0x40004800
 8001724:	00b6c7c0 	.word	0x00b6c7c0

08001728 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_DMA_Init+0x8c>)
 8001730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <MX_DMA_Init+0x8c>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <MX_DMA_Init+0x8c>)
 8001740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_DMA_Init+0x8c>)
 800174e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <MX_DMA_Init+0x8c>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_DMA_Init+0x8c>)
 800175e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 800176a:	2201      	movs	r2, #1
 800176c:	2100      	movs	r1, #0
 800176e:	200b      	movs	r0, #11
 8001770:	f001 f943 	bl	80029fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001774:	200b      	movs	r0, #11
 8001776:	f001 f95a 	bl	8002a2e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	2100      	movs	r1, #0
 800177e:	200c      	movs	r0, #12
 8001780:	f001 f93b 	bl	80029fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001784:	200c      	movs	r0, #12
 8001786:	f001 f952 	bl	8002a2e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	2100      	movs	r1, #0
 800178e:	2038      	movs	r0, #56	; 0x38
 8001790:	f001 f933 	bl	80029fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001794:	2038      	movs	r0, #56	; 0x38
 8001796:	f001 f94a 	bl	8002a2e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	2100      	movs	r1, #0
 800179e:	2039      	movs	r0, #57	; 0x39
 80017a0:	f001 f92b 	bl	80029fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017a4:	2039      	movs	r0, #57	; 0x39
 80017a6:	f001 f942 	bl	8002a2e <HAL_NVIC_EnableIRQ>


}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	58024400 	.word	0x58024400

080017b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	4a64      	ldr	r2, [pc, #400]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001828:	4b5e      	ldr	r3, [pc, #376]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	4a5d      	ldr	r2, [pc, #372]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001846:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001864:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a4e      	ldr	r2, [pc, #312]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800186c:	f043 0320 	orr.w	r3, r3, #32
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001882:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a46      	ldr	r2, [pc, #280]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 800188a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <MX_GPIO_Init+0x1ec>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f244 0101 	movw	r1, #16385	; 0x4001
 80018c4:	4838      	ldr	r0, [pc, #224]	; (80019a8 <MX_GPIO_Init+0x1f0>)
 80018c6:	f004 fa19 	bl	8005cfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <MX_GPIO_Init+0x1f4>)
 80018d0:	f004 fa14 	bl	8005cfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4831      	ldr	r0, [pc, #196]	; (80019b0 <MX_GPIO_Init+0x1f8>)
 80018ea:	f004 f857 	bl	800599c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 80018ee:	f244 0301 	movw	r3, #16385	; 0x4001
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <MX_GPIO_Init+0x1f0>)
 8001908:	f004 f848 	bl	800599c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800190c:	2302      	movs	r3, #2
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4822      	ldr	r0, [pc, #136]	; (80019ac <MX_GPIO_Init+0x1f4>)
 8001924:	f004 f83a 	bl	800599c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIOE LEDs */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_13 | GPIO_PIN_15;
 8001928:	f24a 0301 	movw	r3, #40961	; 0xa001
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	481a      	ldr	r0, [pc, #104]	; (80019ac <MX_GPIO_Init+0x1f4>)
 8001942:	f004 f82b 	bl	800599c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIOF LEDs */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8001946:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4815      	ldr	r0, [pc, #84]	; (80019b4 <MX_GPIO_Init+0x1fc>)
 8001960:	f004 f81c 	bl	800599c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIOG LEDs */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_14;
 8001964:	f244 1370 	movw	r3, #16752	; 0x4170
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	480e      	ldr	r0, [pc, #56]	; (80019b8 <MX_GPIO_Init+0x200>)
 800197e:	f004 f80d 	bl	800599c <HAL_GPIO_Init>

	BSP_LED_Init(LED1);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fc1a 	bl	80021bc <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8001988:	2001      	movs	r0, #1
 800198a:	f000 fc17 	bl	80021bc <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800198e:	2002      	movs	r0, #2
 8001990:	f000 fc14 	bl	80021bc <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001994:	2101      	movs	r1, #1
 8001996:	2000      	movs	r0, #0
 8001998:	f000 fd04 	bl	80023a4 <BSP_PB_Init>
}
 800199c:	bf00      	nop
 800199e:	3738      	adds	r7, #56	; 0x38
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	58024400 	.word	0x58024400
 80019a8:	58020400 	.word	0x58020400
 80019ac:	58021000 	.word	0x58021000
 80019b0:	58020800 	.word	0x58020800
 80019b4:	58021400 	.word	0x58021400
 80019b8:	58021800 	.word	0x58021800

080019bc <HAL_GPIO_EXTI_Callback>:

// callback function for external GPIO interrupt
// toggles the value of UserButtonStatus
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_USER_PIN) {
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019cc:	d105      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0x1e>
		UserButtonStatus ^= 1;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80019d8:	6013      	str	r3, [r2, #0]
	}
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	24000060 	.word	0x24000060

080019ec <tx_h_complete>:

// callback for SPI DMA half transfer complete
void tx_h_complete(DMA_HandleTypeDef *hdma) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_H_COMPLETE;
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <tx_h_complete+0x1c>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2400005c 	.word	0x2400005c

08001a0c <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_SPI_ErrorCallback+0x1c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	601a      	str	r2, [r3, #0]
	Error_Handler();
 8001a1a:	f000 f814 	bl	8001a46 <Error_Handler>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2400005c 	.word	0x2400005c

08001a2c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 fc37 	bl	80022a8 <BSP_LED_On>
	Error_Handler();
 8001a3a:	f000 f804 	bl	8001a46 <Error_Handler>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
//	resume systick for HAL_Delay function
	HAL_ResumeTick();
 8001a4a:	f000 feab 	bl	80027a4 <HAL_ResumeTick>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4e:	b672      	cpsid	i
}
 8001a50:	bf00      	nop
	//	disable interrupts
	__disable_irq();
	//	toggle the red LED forever
	while (1) {
		BSP_LED_Toggle(LED3);
 8001a52:	2002      	movs	r0, #2
 8001a54:	f000 fc7c 	bl	8002350 <BSP_LED_Toggle>
		HAL_Delay(100);
 8001a58:	2064      	movs	r0, #100	; 0x64
 8001a5a:	f000 fe6f 	bl	800273c <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8001a5e:	e7f8      	b.n	8001a52 <Error_Handler+0xc>

08001a60 <HAL_MspInit>:
const unsigned short pll2_r = 2;

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_MspInit+0x30>)
 8001a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x30>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x30>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	58024400 	.word	0x58024400

08001a94 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0bc      	sub	sp, #240	; 0xf0
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	22bc      	movs	r2, #188	; 0xbc
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f008 fd33 	bl	800a520 <memset>
	if (hspi->Instance == SPI1) {
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4abd      	ldr	r2, [pc, #756]	; (8001db4 <HAL_SPI_MspInit+0x320>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f040 8096 	bne.w	8001bf2 <HAL_SPI_MspInit+0x15e>

//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	623b      	str	r3, [r7, #32]
//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001ad6:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001adc:	2308      	movs	r3, #8
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	643b      	str	r3, [r7, #64]	; 0x40
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 f923 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_SPI_MspInit+0x74>
			Error_Handler();
 8001b04:	f7ff ff9f 	bl	8001a46 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001b08:	4bab      	ldr	r3, [pc, #684]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b0e:	4aaa      	ldr	r2, [pc, #680]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b18:	4ba7      	ldr	r3, [pc, #668]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4ba4      	ldr	r3, [pc, #656]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	4aa2      	ldr	r2, [pc, #648]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b36:	4ba0      	ldr	r3, [pc, #640]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	69bb      	ldr	r3, [r7, #24]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA15 (JTDI)     ------> SPI1_NSS
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 8001b44:	f248 0360 	movw	r3, #32864	; 0x8060
 8001b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4894      	ldr	r0, [pc, #592]	; (8001dbc <HAL_SPI_MspInit+0x328>)
 8001b6c:	f003 ff16 	bl	800599c <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = SPI1_DMA_INSTANCE;
 8001b70:	4b93      	ldr	r3, [pc, #588]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b72:	4a94      	ldr	r2, [pc, #592]	; (8001dc4 <HAL_SPI_MspInit+0x330>)
 8001b74:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001b76:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b78:	2225      	movs	r2, #37	; 0x25
 8001b7a:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7c:	4b90      	ldr	r3, [pc, #576]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b82:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	4b8d      	ldr	r3, [pc, #564]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8e:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b90:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b96:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b98:	4b89      	ldr	r3, [pc, #548]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001ba0:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba6:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba8:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bae:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001bb4:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bba:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bc0:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 8001bc6:	487e      	ldr	r0, [pc, #504]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bc8:	f000 ff5a 	bl	8002a80 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_SPI_MspInit+0x142>
			Error_Handler();
 8001bd2:	f7ff ff38 	bl	8001a46 <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi1_rx);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a79      	ldr	r2, [pc, #484]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bda:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bdc:	4a78      	ldr	r2, [pc, #480]	; (8001dc0 <HAL_SPI_MspInit+0x32c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2023      	movs	r0, #35	; 0x23
 8001be8:	f000 ff07 	bl	80029fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bec:	2023      	movs	r0, #35	; 0x23
 8001bee:	f000 ff1e 	bl	8002a2e <HAL_NVIC_EnableIRQ>
	}
	if (hspi->Instance == SPI2) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a74      	ldr	r2, [pc, #464]	; (8001dc8 <HAL_SPI_MspInit+0x334>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f040 80f6 	bne.w	8001dea <HAL_SPI_MspInit+0x356>

		/** Initializes the peripherals clock
		 */
		//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c02:	623b      	str	r3, [r7, #32]
		//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	67fb      	str	r3, [r7, #124]	; 0x7c
		//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001c0e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001c14:	2308      	movs	r3, #8
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
		//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
		//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 f887 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_SPI_MspInit+0x1ac>
			Error_Handler();
 8001c3c:	f7ff ff03 	bl	8001a46 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001c40:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c46:	4a5c      	ldr	r2, [pc, #368]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	4a54      	ldr	r2, [pc, #336]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	4a45      	ldr	r2, [pc, #276]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_SPI_MspInit+0x324>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
		 PC2_C     ------> SPI2_MISO
		 PC3_C     ------> SPI2_MOSI
		 PB12     ------> SPI2_NSS
		 PD3     ------> SPI2_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001cb8:	230c      	movs	r3, #12
 8001cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cda:	4619      	mov	r1, r3
 8001cdc:	483b      	ldr	r0, [pc, #236]	; (8001dcc <HAL_SPI_MspInit+0x338>)
 8001cde:	f003 fe5d 	bl	800599c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d06:	4619      	mov	r1, r3
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <HAL_SPI_MspInit+0x33c>)
 8001d0a:	f003 fe47 	bl	800599c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d26:	2305      	movs	r3, #5
 8001d28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d30:	4619      	mov	r1, r3
 8001d32:	4828      	ldr	r0, [pc, #160]	; (8001dd4 <HAL_SPI_MspInit+0x340>)
 8001d34:	f003 fe32 	bl	800599c <HAL_GPIO_Init>

		/* SPI2 DMA Init */
		/* SPI2_RX Init */
		hdma_spi2_rx.Instance = SPI2_DMA_INSTANCE;
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d3a:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_SPI_MspInit+0x348>)
 8001d3c:	601a      	str	r2, [r3, #0]
		hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d40:	2227      	movs	r2, #39	; 0x27
 8001d42:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d56:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5e:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d66:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6e:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK) {
 8001d8e:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001d90:	f000 fe76 	bl	8002a80 <HAL_DMA_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_SPI_MspInit+0x30a>
			Error_Handler();
 8001d9a:	f7ff fe54 	bl	8001a46 <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi2_rx);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001da2:	67da      	str	r2, [r3, #124]	; 0x7c
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_SPI_MspInit+0x344>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2024      	movs	r0, #36	; 0x24
 8001db0:	e016      	b.n	8001de0 <HAL_SPI_MspInit+0x34c>
 8001db2:	bf00      	nop
 8001db4:	40013000 	.word	0x40013000
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58020000 	.word	0x58020000
 8001dc0:	2401a454 	.word	0x2401a454
 8001dc4:	40020410 	.word	0x40020410
 8001dc8:	40003800 	.word	0x40003800
 8001dcc:	58020800 	.word	0x58020800
 8001dd0:	58020400 	.word	0x58020400
 8001dd4:	58020c00 	.word	0x58020c00
 8001dd8:	2401a1d4 	.word	0x2401a1d4
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	f000 fe0b 	bl	80029fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001de4:	2024      	movs	r0, #36	; 0x24
 8001de6:	f000 fe22 	bl	8002a2e <HAL_NVIC_EnableIRQ>
	}

}
 8001dea:	bf00      	nop
 8001dec:	37f0      	adds	r7, #240	; 0xf0
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop

08001df4 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0ba      	sub	sp, #232	; 0xe8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	22bc      	movs	r2, #188	; 0xbc
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f008 fb83 	bl	800a520 <memset>
	if (huart->Instance == USART1) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a95      	ldr	r2, [pc, #596]	; (8002074 <HAL_UART_MspInit+0x280>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	f040 8099 	bne.w	8001f58 <HAL_UART_MspInit+0x164>
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
//		peripheral uses pll3q
		PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//		set m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001e30:	2304      	movs	r3, #4
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001e34:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001e38:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001e42:	2302      	movs	r3, #2
 8001e44:	64fb      	str	r3, [r7, #76]	; 0x4c
//		input clock speed is 2.08 MHz
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	653b      	str	r3, [r7, #80]	; 0x50
//		use high frequency VCO mode
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	657b      	str	r3, [r7, #84]	; 0x54
//		no fractional n
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	65bb      	str	r3, [r7, #88]	; 0x58
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 ff73 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_UART_MspInit+0x74>
			Error_Handler();
 8001e64:	f7ff fdef 	bl	8001a46 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001e68:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e6e:	4a82      	ldr	r2, [pc, #520]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e78:	4b7f      	ldr	r3, [pc, #508]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b7c      	ldr	r3, [pc, #496]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	4a7a      	ldr	r2, [pc, #488]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e96:	4b78      	ldr	r3, [pc, #480]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PB15     ------> USART1_RX
		 PB6     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	486c      	ldr	r0, [pc, #432]	; (800207c <HAL_UART_MspInit+0x288>)
 8001ecc:	f003 fd66 	bl	800599c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4861      	ldr	r0, [pc, #388]	; (800207c <HAL_UART_MspInit+0x288>)
 8001ef6:	f003 fd51 	bl	800599c <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream0;
 8001efa:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001efc:	4a61      	ldr	r2, [pc, #388]	; (8002084 <HAL_UART_MspInit+0x290>)
 8001efe:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f00:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f02:	222a      	movs	r2, #42	; 0x2a
 8001f04:	605a      	str	r2, [r3, #4]
//		set memory to peripheral transfer
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f06:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	609a      	str	r2, [r3, #8]
//		do not increment peripheral memory address
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
//		increment memory address
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f18:	611a      	str	r2, [r3, #16]
//		align data by bytes
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1a:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
//		align data by half word
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f20:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	619a      	str	r2, [r3, #24]
//		non circular mode
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f28:	4b55      	ldr	r3, [pc, #340]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2e:	4b54      	ldr	r3, [pc, #336]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
//		do not use FIFO
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f34:	4b52      	ldr	r3, [pc, #328]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
//		configure DMA with HAL library
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 8001f3a:	4851      	ldr	r0, [pc, #324]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f3c:	f000 fda0 	bl	8002a80 <HAL_DMA_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0x156>
			Error_Handler();
 8001f46:	f7ff fd7e 	bl	8001a46 <Error_Handler>
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f4e:	679a      	str	r2, [r3, #120]	; 0x78
 8001f50:	4a4b      	ldr	r2, [pc, #300]	; (8002080 <HAL_UART_MspInit+0x28c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6393      	str	r3, [r2, #56]	; 0x38
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);

	}

}
 8001f56:	e088      	b.n	800206a <HAL_UART_MspInit+0x276>
	} else if (huart->Instance == USART3) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_UART_MspInit+0x294>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	f040 8083 	bne.w	800206a <HAL_UART_MspInit+0x276>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.Usart234578ClockSelection =
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001f72:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001f76:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001f78:	2309      	movs	r3, #9
 8001f7a:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001f80:	2302      	movs	r3, #2
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f88:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fed4 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_MspInit+0x1b2>
			Error_Handler();
 8001fa2:	f7ff fd50 	bl	8001a46 <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fac:	4a32      	ldr	r2, [pc, #200]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fca:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_UART_MspInit+0x284>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8001fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002002:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002006:	4619      	mov	r1, r3
 8002008:	4820      	ldr	r0, [pc, #128]	; (800208c <HAL_UART_MspInit+0x298>)
 800200a:	f003 fcc7 	bl	800599c <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_UART_MspInit+0x2a0>)
 8002012:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002016:	222e      	movs	r2, #46	; 0x2e
 8002018:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_UART_MspInit+0x29c>)
 800201c:	2240      	movs	r2, #64	; 0x40
 800201e:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800202c:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_UART_MspInit+0x29c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0x29c>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 800204e:	4810      	ldr	r0, [pc, #64]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002050:	f000 fd16 	bl	8002a80 <HAL_DMA_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0x26a>
			Error_Handler();
 800205a:	f7ff fcf4 	bl	8001a46 <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002062:	679a      	str	r2, [r3, #120]	; 0x78
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_UART_MspInit+0x29c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6393      	str	r3, [r2, #56]	; 0x38
}
 800206a:	bf00      	nop
 800206c:	37e8      	adds	r7, #232	; 0xe8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40011000 	.word	0x40011000
 8002078:	58024400 	.word	0x58024400
 800207c:	58020400 	.word	0x58020400
 8002080:	2401a2c4 	.word	0x2401a2c4
 8002084:	40020010 	.word	0x40020010
 8002088:	40004800 	.word	0x40004800
 800208c:	58020c00 	.word	0x58020c00
 8002090:	2401a24c 	.word	0x2401a24c
 8002094:	40020028 	.word	0x40020028

08002098 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80020e4:	f000 fb0a 	bl	80026fc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
//	turn on the red LED
	BSP_LED_On(LED3);
 80020f0:	2002      	movs	r0, #2
 80020f2:	f000 f8d9 	bl	80022a8 <BSP_LED_On>
//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <DMA1_Stream0_IRQHandler+0x14>)
 80020f8:	f002 f90a 	bl	8004310 <HAL_DMA_IRQHandler>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2401a2c4 	.word	0x2401a2c4

08002104 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8002108:	2002      	movs	r0, #2
 800210a:	f000 f8cd 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800210e:	4802      	ldr	r0, [pc, #8]	; (8002118 <DMA1_Stream1_IRQHandler+0x14>)
 8002110:	f002 f8fe 	bl	8004310 <HAL_DMA_IRQHandler>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2401a24c 	.word	0x2401a24c

0800211c <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8002120:	2002      	movs	r0, #2
 8002122:	f000 f8c1 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002126:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA2_Stream0_IRQHandler+0x14>)
 8002128:	f002 f8f2 	bl	8004310 <HAL_DMA_IRQHandler>
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2401a454 	.word	0x2401a454

08002134 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8002138:	2002      	movs	r0, #2
 800213a:	f000 f8b5 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800213e:	4802      	ldr	r0, [pc, #8]	; (8002148 <DMA2_Stream1_IRQHandler+0x14>)
 8002140:	f002 f8e6 	bl	8004310 <HAL_DMA_IRQHandler>
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2401a1d4 	.word	0x2401a1d4

0800214c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles external GPIO global interrupt for user button.
 */
void EXTI15_10_IRQHandler(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

	//	call the HAL library interrupt handler
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8002150:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002154:	f003 fe05 	bl	8005d62 <HAL_GPIO_EXTI_IRQHandler>
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8002160:	2002      	movs	r0, #2
 8002162:	f000 f8a1 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart1);
 8002166:	4802      	ldr	r0, [pc, #8]	; (8002170 <USART1_IRQHandler+0x14>)
 8002168:	f006 fdf4 	bl	8008d54 <HAL_UART_IRQHandler>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	2401a33c 	.word	0x2401a33c

08002174 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8002178:	2002      	movs	r0, #2
 800217a:	f000 f895 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart3);
 800217e:	4802      	ldr	r0, [pc, #8]	; (8002188 <USART3_IRQHandler+0x14>)
 8002180:	f006 fde8 	bl	8008d54 <HAL_UART_IRQHandler>
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2401a144 	.word	0x2401a144

0800218c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8002190:	2002      	movs	r0, #2
 8002192:	f000 f889 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi1);
 8002196:	4802      	ldr	r0, [pc, #8]	; (80021a0 <SPI1_IRQHandler+0x14>)
 8002198:	f006 fa38 	bl	800860c <HAL_SPI_IRQHandler>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2401a3cc 	.word	0x2401a3cc

080021a4 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f000 f87d 	bl	80022a8 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi2);
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <SPI2_IRQHandler+0x14>)
 80021b0:	f006 fa2c 	bl	800860c <HAL_SPI_IRQHandler>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2401a0bc 	.word	0x2401a0bc

080021bc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <BSP_LED_Init+0x28>
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d006      	beq.n	80021e4 <BSP_LED_Init+0x28>
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d003      	beq.n	80021e4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021dc:	f06f 0301 	mvn.w	r3, #1
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e2:	e055      	b.n	8002290 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <BSP_LED_Init+0xe0>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <BSP_LED_Init+0xe0>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <BSP_LED_Init+0xe0>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	e021      	b.n	800224e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d10f      	bne.n	8002230 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <BSP_LED_Init+0xe0>)
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <BSP_LED_Init+0xe0>)
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <BSP_LED_Init+0xe0>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	e00e      	b.n	800224e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <BSP_LED_Init+0xe0>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <BSP_LED_Init+0xe0>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <BSP_LED_Init+0xe0>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <BSP_LED_Init+0xe4>)
 8002252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002256:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <BSP_LED_Init+0xe8>)
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	f107 0218 	add.w	r2, r7, #24
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fb92 	bl	800599c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <BSP_LED_Init+0xe8>)
 800227c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <BSP_LED_Init+0xe4>)
 8002284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	f003 fd36 	bl	8005cfc <HAL_GPIO_WritePin>
  }

  return ret;
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002292:	4618      	mov	r0, r3
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	58024400 	.word	0x58024400
 80022a0:	0800a548 	.word	0x0800a548
 80022a4:	24000000 	.word	0x24000000

080022a8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <BSP_LED_On+0x28>
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d006      	beq.n	80022d0 <BSP_LED_On+0x28>
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d003      	beq.n	80022d0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022c8:	f06f 0301 	mvn.w	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e00b      	b.n	80022e8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <BSP_LED_On+0x4c>)
 80022d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <BSP_LED_On+0x50>)
 80022dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4619      	mov	r1, r3
 80022e4:	f003 fd0a 	bl	8005cfc <HAL_GPIO_WritePin>
  }

  return ret;
 80022e8:	68fb      	ldr	r3, [r7, #12]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	24000000 	.word	0x24000000
 80022f8:	0800a548 	.word	0x0800a548

080022fc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <BSP_LED_Off+0x28>
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d006      	beq.n	8002324 <BSP_LED_Off+0x28>
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800231c:	f06f 0301 	mvn.w	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e00b      	b.n	800233c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <BSP_LED_Off+0x4c>)
 8002328:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <BSP_LED_Off+0x50>)
 8002330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002334:	2200      	movs	r2, #0
 8002336:	4619      	mov	r1, r3
 8002338:	f003 fce0 	bl	8005cfc <HAL_GPIO_WritePin>
  }

  return ret;
 800233c:	68fb      	ldr	r3, [r7, #12]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	24000000 	.word	0x24000000
 800234c:	0800a548 	.word	0x0800a548

08002350 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <BSP_LED_Toggle+0x28>
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d006      	beq.n	8002378 <BSP_LED_Toggle+0x28>
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d003      	beq.n	8002378 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002370:	f06f 0301 	mvn.w	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e00b      	b.n	8002390 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <BSP_LED_Toggle+0x4c>)
 800237c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	4907      	ldr	r1, [pc, #28]	; (80023a0 <BSP_LED_Toggle+0x50>)
 8002384:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f003 fccf 	bl	8005d2e <HAL_GPIO_TogglePin>
  }

  return ret;
 8002390:	68fb      	ldr	r3, [r7, #12]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	24000000 	.word	0x24000000
 80023a0:	0800a548 	.word	0x0800a548

080023a4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	460a      	mov	r2, r1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <BSP_PB_Init+0xc8>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a2c      	ldr	r2, [pc, #176]	; (800246c <BSP_PB_Init+0xc8>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <BSP_PB_Init+0xc8>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80023d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80023d8:	2302      	movs	r3, #2
 80023da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <BSP_PB_Init+0xcc>)
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	f107 020c 	add.w	r2, r7, #12
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 facf 	bl	800599c <HAL_GPIO_Init>
 80023fe:	e030      	b.n	8002462 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <BSP_PB_Init+0xd0>)
 8002402:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <BSP_PB_Init+0xcc>)
 8002408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240c:	f107 020c 	add.w	r2, r7, #12
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fac2 	bl	800599c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <BSP_PB_Init+0xd4>)
 800241e:	441a      	add	r2, r3
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4916      	ldr	r1, [pc, #88]	; (800247c <BSP_PB_Init+0xd8>)
 8002424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f003 faa1 	bl	8005972 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4a10      	ldr	r2, [pc, #64]	; (8002478 <BSP_PB_Init+0xd4>)
 8002436:	1898      	adds	r0, r3, r2
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	4a11      	ldr	r2, [pc, #68]	; (8002480 <BSP_PB_Init+0xdc>)
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	461a      	mov	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f003 fa76 	bl	8005934 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002448:	2028      	movs	r0, #40	; 0x28
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <BSP_PB_Init+0xe0>)
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	2200      	movs	r2, #0
 8002454:	4619      	mov	r1, r3
 8002456:	f000 fad0 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800245a:	2328      	movs	r3, #40	; 0x28
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fae6 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	2400000c 	.word	0x2400000c
 8002474:	11110000 	.word	0x11110000
 8002478:	2401a4cc 	.word	0x2401a4cc
 800247c:	0800a550 	.word	0x0800a550
 8002480:	24000010 	.word	0x24000010
 8002484:	24000014 	.word	0x24000014

08002488 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff fff0 	bl	8002488 <BSP_PB_Callback>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <SystemInit+0xec>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a38      	ldr	r2, [pc, #224]	; (8002598 <SystemInit+0xec>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <SystemInit+0xf0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d807      	bhi.n	80024dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <SystemInit+0xf0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	4a31      	ldr	r2, [pc, #196]	; (800259c <SystemInit+0xf0>)
 80024d6:	f043 0307 	orr.w	r3, r3, #7
 80024da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024dc:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <SystemInit+0xf4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <SystemInit+0xf4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <SystemInit+0xf4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <SystemInit+0xf4>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	492b      	ldr	r1, [pc, #172]	; (80025a0 <SystemInit+0xf4>)
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <SystemInit+0xf8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <SystemInit+0xf0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <SystemInit+0xf0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 030f 	bic.w	r3, r3, #15
 800250e:	4a23      	ldr	r2, [pc, #140]	; (800259c <SystemInit+0xf0>)
 8002510:	f043 0307 	orr.w	r3, r3, #7
 8002514:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <SystemInit+0xf4>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <SystemInit+0xf4>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002522:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <SystemInit+0xf4>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <SystemInit+0xf4>)
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <SystemInit+0xfc>)
 800252c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <SystemInit+0xf4>)
 8002530:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <SystemInit+0x100>)
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <SystemInit+0xf4>)
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <SystemInit+0x104>)
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <SystemInit+0xf4>)
 800253c:	2200      	movs	r2, #0
 800253e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <SystemInit+0xf4>)
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <SystemInit+0x104>)
 8002544:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <SystemInit+0xf4>)
 8002548:	2200      	movs	r2, #0
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <SystemInit+0xf4>)
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <SystemInit+0x104>)
 8002550:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <SystemInit+0xf4>)
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <SystemInit+0xf4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <SystemInit+0xf4>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <SystemInit+0xf4>)
 8002566:	2200      	movs	r2, #0
 8002568:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <SystemInit+0x108>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <SystemInit+0x10c>)
 8002570:	4013      	ands	r3, r2
 8002572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002576:	d202      	bcs.n	800257e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <SystemInit+0x110>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <SystemInit+0x114>)
 8002580:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002584:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SystemInit+0xec>)
 8002588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800258c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	52002000 	.word	0x52002000
 80025a0:	58024400 	.word	0x58024400
 80025a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80025a8:	02020200 	.word	0x02020200
 80025ac:	01ff0000 	.word	0x01ff0000
 80025b0:	01010280 	.word	0x01010280
 80025b4:	5c001000 	.word	0x5c001000
 80025b8:	ffff0000 	.word	0xffff0000
 80025bc:	51008108 	.word	0x51008108
 80025c0:	52004000 	.word	0x52004000

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025c8:	f7ff ff70 	bl	80024ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ce:	490d      	ldr	r1, [pc, #52]	; (8002604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d4:	e002      	b.n	80025dc <LoopCopyDataInit>

080025d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025da:	3304      	adds	r3, #4

080025dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e0:	d3f9      	bcc.n	80025d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e4:	4c0a      	ldr	r4, [pc, #40]	; (8002610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e8:	e001      	b.n	80025ee <LoopFillZerobss>

080025ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ec:	3204      	adds	r2, #4

080025ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f0:	d3fb      	bcc.n	80025ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025f2:	f007 ff71 	bl	800a4d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f6:	f7fd ffeb 	bl	80005d0 <main>
  bx  lr
 80025fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002600:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002604:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8002608:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 800260c:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8002610:	2401a568 	.word	0x2401a568

08002614 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC3_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261e:	2003      	movs	r0, #3
 8002620:	f000 f9e0 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002624:	f004 f9b8 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_Init+0x68>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	4913      	ldr	r1, [pc, #76]	; (8002684 <HAL_Init+0x6c>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_Init+0x68>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_Init+0x6c>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_Init+0x70>)
 800265a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_Init+0x74>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f814 	bl	8002690 <HAL_InitTick>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e002      	b.n	8002678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002672:	f7ff f9f5 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	58024400 	.word	0x58024400
 8002684:	0800a554 	.word	0x0800a554
 8002688:	2400001c 	.word	0x2400001c
 800268c:	24000018 	.word	0x24000018

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_InitTick+0x60>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e021      	b.n	80026e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_InitTick+0x64>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_InitTick+0x60>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f9d3 	bl	8002a66 <HAL_SYSTICK_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00e      	b.n	80026e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d80a      	bhi.n	80026e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f000 f98f 	bl	80029fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_InitTick+0x68>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	24000024 	.word	0x24000024
 80026f4:	24000018 	.word	0x24000018
 80026f8:	24000020 	.word	0x24000020

080026fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	24000024 	.word	0x24000024
 8002720:	2401a564 	.word	0x2401a564

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2401a564 	.word	0x2401a564

0800273c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff ffee 	bl	8002724 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d005      	beq.n	8002762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_Delay+0x44>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002762:	bf00      	nop
 8002764:	f7ff ffde 	bl	8002724 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d8f7      	bhi.n	8002764 <HAL_Delay+0x28>
  {
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	24000024 	.word	0x24000024

08002784 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_SuspendTick+0x1c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_SuspendTick+0x1c>)
 800278e:	f023 0302 	bic.w	r3, r3, #2
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_ResumeTick+0x1c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_ResumeTick+0x1c>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_GetREVID+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0c1b      	lsrs	r3, r3, #16
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	5c001000 	.word	0x5c001000

080027dc <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_EnableCompensationCell+0x1c>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_EnableCompensationCell+0x1c>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	58000400 	.word	0x58000400

080027fc <__NVIC_SetPriorityGrouping>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <__NVIC_SetPriorityGrouping+0x40>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	4313      	orrs	r3, r2
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x40>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00
 8002840:	05fa0000 	.word	0x05fa0000

08002844 <__NVIC_GetPriorityGrouping>:
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_DisableIRQ>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	db12      	blt.n	80028d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	490a      	ldr	r1, [pc, #40]	; (80028e0 <__NVIC_DisableIRQ+0x44>)
 80028b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2001      	movs	r0, #1
 80028be:	fa00 f202 	lsl.w	r2, r0, r2
 80028c2:	3320      	adds	r3, #32
 80028c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80028c8:	f3bf 8f4f 	dsb	sy
}
 80028cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028ce:	f3bf 8f6f 	isb	sy
}
 80028d2:	bf00      	nop
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff05 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff1c 	bl	8002844 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff90 	bl	8002938 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5f 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff0f 	bl	8002860 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff1f 	bl	800289c <__NVIC_DisableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff96 	bl	80029a0 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff fe4c 	bl	8002724 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e316      	b.n	80030c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a66      	ldr	r2, [pc, #408]	; (8002c38 <HAL_DMA_Init+0x1b8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d04a      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a65      	ldr	r2, [pc, #404]	; (8002c3c <HAL_DMA_Init+0x1bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d045      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <HAL_DMA_Init+0x1c0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d040      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a62      	ldr	r2, [pc, #392]	; (8002c44 <HAL_DMA_Init+0x1c4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d03b      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a60      	ldr	r2, [pc, #384]	; (8002c48 <HAL_DMA_Init+0x1c8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d036      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5f      	ldr	r2, [pc, #380]	; (8002c4c <HAL_DMA_Init+0x1cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d031      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5d      	ldr	r2, [pc, #372]	; (8002c50 <HAL_DMA_Init+0x1d0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02c      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	; (8002c54 <HAL_DMA_Init+0x1d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d027      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a5a      	ldr	r2, [pc, #360]	; (8002c58 <HAL_DMA_Init+0x1d8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d022      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a59      	ldr	r2, [pc, #356]	; (8002c5c <HAL_DMA_Init+0x1dc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01d      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a57      	ldr	r2, [pc, #348]	; (8002c60 <HAL_DMA_Init+0x1e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d018      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_DMA_Init+0x1e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <HAL_DMA_Init+0x1e8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a53      	ldr	r2, [pc, #332]	; (8002c6c <HAL_DMA_Init+0x1ec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <HAL_DMA_Init+0x1f0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_Init+0xb8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_DMA_Init+0x1f4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Init+0xbc>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_Init+0xbe>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 813b 	beq.w	8002dba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <HAL_DMA_Init+0x1b8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d04a      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a36      	ldr	r2, [pc, #216]	; (8002c3c <HAL_DMA_Init+0x1bc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d045      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <HAL_DMA_Init+0x1c0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d040      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a33      	ldr	r2, [pc, #204]	; (8002c44 <HAL_DMA_Init+0x1c4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d03b      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <HAL_DMA_Init+0x1c8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d036      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <HAL_DMA_Init+0x1cc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d031      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_DMA_Init+0x1d0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02c      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <HAL_DMA_Init+0x1d4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d027      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_DMA_Init+0x1d8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d022      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_DMA_Init+0x1dc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d01d      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_DMA_Init+0x1e0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d018      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_DMA_Init+0x1e4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <HAL_DMA_Init+0x1e8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_DMA_Init+0x1ec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d009      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_DMA_Init+0x1f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_DMA_Init+0x174>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_DMA_Init+0x1f4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <HAL_DMA_Init+0x186>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e007      	b.n	8002c16 <HAL_DMA_Init+0x196>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c16:	e02f      	b.n	8002c78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c18:	f7ff fd84 	bl	8002724 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d928      	bls.n	8002c78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e246      	b.n	80030c6 <HAL_DMA_Init+0x646>
 8002c38:	40020010 	.word	0x40020010
 8002c3c:	40020028 	.word	0x40020028
 8002c40:	40020040 	.word	0x40020040
 8002c44:	40020058 	.word	0x40020058
 8002c48:	40020070 	.word	0x40020070
 8002c4c:	40020088 	.word	0x40020088
 8002c50:	400200a0 	.word	0x400200a0
 8002c54:	400200b8 	.word	0x400200b8
 8002c58:	40020410 	.word	0x40020410
 8002c5c:	40020428 	.word	0x40020428
 8002c60:	40020440 	.word	0x40020440
 8002c64:	40020458 	.word	0x40020458
 8002c68:	40020470 	.word	0x40020470
 8002c6c:	40020488 	.word	0x40020488
 8002c70:	400204a0 	.word	0x400204a0
 8002c74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1c8      	bne.n	8002c18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4b83      	ldr	r3, [pc, #524]	; (8002ea0 <HAL_DMA_Init+0x420>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002caa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002cdc:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <HAL_DMA_Init+0x424>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b71      	ldr	r3, [pc, #452]	; (8002ea8 <HAL_DMA_Init+0x428>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce8:	d328      	bcc.n	8002d3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b28      	cmp	r3, #40	; 0x28
 8002cf0:	d903      	bls.n	8002cfa <HAL_DMA_Init+0x27a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8002cf8:	d917      	bls.n	8002d2a <HAL_DMA_Init+0x2aa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8002d00:	d903      	bls.n	8002d0a <HAL_DMA_Init+0x28a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b42      	cmp	r3, #66	; 0x42
 8002d08:	d90f      	bls.n	8002d2a <HAL_DMA_Init+0x2aa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b46      	cmp	r3, #70	; 0x46
 8002d10:	d903      	bls.n	8002d1a <HAL_DMA_Init+0x29a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b48      	cmp	r3, #72	; 0x48
 8002d18:	d907      	bls.n	8002d2a <HAL_DMA_Init+0x2aa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b4e      	cmp	r3, #78	; 0x4e
 8002d20:	d905      	bls.n	8002d2e <HAL_DMA_Init+0x2ae>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b52      	cmp	r3, #82	; 0x52
 8002d28:	d801      	bhi.n	8002d2e <HAL_DMA_Init+0x2ae>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_DMA_Init+0x2b0>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f023 0307 	bic.w	r3, r3, #7
 8002d52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d117      	bne.n	8002d96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f002 fc51 	bl	8005620 <DMA_CheckFifoParam>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e197      	b.n	80030c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f002 fb8c 	bl	80054bc <DMA_CalcBaseAndBitshift>
 8002da4:	4603      	mov	r3, r0
 8002da6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	223f      	movs	r2, #63	; 0x3f
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e0cd      	b.n	8002f56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <HAL_DMA_Init+0x42c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <HAL_DMA_Init+0x430>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a38      	ldr	r2, [pc, #224]	; (8002eb4 <HAL_DMA_Init+0x434>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a36      	ldr	r2, [pc, #216]	; (8002eb8 <HAL_DMA_Init+0x438>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <HAL_DMA_Init+0x43c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a33      	ldr	r2, [pc, #204]	; (8002ec0 <HAL_DMA_Init+0x440>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a32      	ldr	r2, [pc, #200]	; (8002ec4 <HAL_DMA_Init+0x444>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_DMA_Init+0x38a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <HAL_DMA_Init+0x448>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_DMA_Init+0x38e>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_DMA_Init+0x390>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a24      	ldr	r2, [pc, #144]	; (8002eac <HAL_DMA_Init+0x42c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d021      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <HAL_DMA_Init+0x430>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01c      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_DMA_Init+0x434>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d017      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <HAL_DMA_Init+0x438>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d012      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_DMA_Init+0x43c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00d      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <HAL_DMA_Init+0x440>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d008      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_DMA_Init+0x444>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <HAL_DMA_Init+0x3e4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <HAL_DMA_Init+0x448>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_DMA_Init+0x44c>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d020      	beq.n	8002ed0 <HAL_DMA_Init+0x450>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d102      	bne.n	8002e9c <HAL_DMA_Init+0x41c>
 8002e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e9a:	e01a      	b.n	8002ed2 <HAL_DMA_Init+0x452>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e018      	b.n	8002ed2 <HAL_DMA_Init+0x452>
 8002ea0:	fe10803f 	.word	0xfe10803f
 8002ea4:	5c001000 	.word	0x5c001000
 8002ea8:	ffff0000 	.word	0xffff0000
 8002eac:	58025408 	.word	0x58025408
 8002eb0:	5802541c 	.word	0x5802541c
 8002eb4:	58025430 	.word	0x58025430
 8002eb8:	58025444 	.word	0x58025444
 8002ebc:	58025458 	.word	0x58025458
 8002ec0:	5802546c 	.word	0x5802546c
 8002ec4:	58025480 	.word	0x58025480
 8002ec8:	58025494 	.word	0x58025494
 8002ecc:	fffe000f 	.word	0xfffe000f
 8002ed0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b6e      	ldr	r3, [pc, #440]	; (80030d0 <HAL_DMA_Init+0x650>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	4a6e      	ldr	r2, [pc, #440]	; (80030d4 <HAL_DMA_Init+0x654>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f002 fac7 	bl	80054bc <DMA_CalcBaseAndBitshift>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e008      	b.n	8002f56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0b7      	b.n	80030c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5f      	ldr	r2, [pc, #380]	; (80030d8 <HAL_DMA_Init+0x658>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d072      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_DMA_Init+0x65c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d06d      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <HAL_DMA_Init+0x660>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d068      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <HAL_DMA_Init+0x664>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d063      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a59      	ldr	r2, [pc, #356]	; (80030e8 <HAL_DMA_Init+0x668>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d05e      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	; (80030ec <HAL_DMA_Init+0x66c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d059      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a56      	ldr	r2, [pc, #344]	; (80030f0 <HAL_DMA_Init+0x670>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d054      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a54      	ldr	r2, [pc, #336]	; (80030f4 <HAL_DMA_Init+0x674>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d04f      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a53      	ldr	r2, [pc, #332]	; (80030f8 <HAL_DMA_Init+0x678>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04a      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a51      	ldr	r2, [pc, #324]	; (80030fc <HAL_DMA_Init+0x67c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d045      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_DMA_Init+0x680>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d040      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4e      	ldr	r2, [pc, #312]	; (8003104 <HAL_DMA_Init+0x684>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d03b      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <HAL_DMA_Init+0x688>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d036      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4b      	ldr	r2, [pc, #300]	; (800310c <HAL_DMA_Init+0x68c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d031      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <HAL_DMA_Init+0x690>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d02c      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_DMA_Init+0x694>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d027      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a47      	ldr	r2, [pc, #284]	; (8003118 <HAL_DMA_Init+0x698>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d022      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a45      	ldr	r2, [pc, #276]	; (800311c <HAL_DMA_Init+0x69c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01d      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a44      	ldr	r2, [pc, #272]	; (8003120 <HAL_DMA_Init+0x6a0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d018      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a42      	ldr	r2, [pc, #264]	; (8003124 <HAL_DMA_Init+0x6a4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a41      	ldr	r2, [pc, #260]	; (8003128 <HAL_DMA_Init+0x6a8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00e      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3f      	ldr	r2, [pc, #252]	; (800312c <HAL_DMA_Init+0x6ac>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <HAL_DMA_Init+0x6b0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_DMA_Init+0x5c6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3c      	ldr	r2, [pc, #240]	; (8003134 <HAL_DMA_Init+0x6b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <HAL_DMA_Init+0x5ca>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_DMA_Init+0x5cc>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f002 fb61 	bl	8005718 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d102      	bne.n	8003064 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003078:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_DMA_Init+0x624>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d80c      	bhi.n	80030a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f002 fbde 	bl	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	e008      	b.n	80030b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	a7fdabf8 	.word	0xa7fdabf8
 80030d4:	cccccccd 	.word	0xcccccccd
 80030d8:	40020010 	.word	0x40020010
 80030dc:	40020028 	.word	0x40020028
 80030e0:	40020040 	.word	0x40020040
 80030e4:	40020058 	.word	0x40020058
 80030e8:	40020070 	.word	0x40020070
 80030ec:	40020088 	.word	0x40020088
 80030f0:	400200a0 	.word	0x400200a0
 80030f4:	400200b8 	.word	0x400200b8
 80030f8:	40020410 	.word	0x40020410
 80030fc:	40020428 	.word	0x40020428
 8003100:	40020440 	.word	0x40020440
 8003104:	40020458 	.word	0x40020458
 8003108:	40020470 	.word	0x40020470
 800310c:	40020488 	.word	0x40020488
 8003110:	400204a0 	.word	0x400204a0
 8003114:	400204b8 	.word	0x400204b8
 8003118:	58025408 	.word	0x58025408
 800311c:	5802541c 	.word	0x5802541c
 8003120:	58025430 	.word	0x58025430
 8003124:	58025444 	.word	0x58025444
 8003128:	58025458 	.word	0x58025458
 800312c:	5802546c 	.word	0x5802546c
 8003130:	58025480 	.word	0x58025480
 8003134:	58025494 	.word	0x58025494

08003138 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0ec      	b.n	800332e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_DMA_Start+0x2a>
 800315e:	2302      	movs	r3, #2
 8003160:	e0e5      	b.n	800332e <HAL_DMA_Start+0x1f6>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 80d0 	bne.w	8003318 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <HAL_DMA_Start+0x200>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d04a      	beq.n	8003226 <HAL_DMA_Start+0xee>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a69      	ldr	r2, [pc, #420]	; (800333c <HAL_DMA_Start+0x204>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d045      	beq.n	8003226 <HAL_DMA_Start+0xee>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a68      	ldr	r2, [pc, #416]	; (8003340 <HAL_DMA_Start+0x208>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d040      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a66      	ldr	r2, [pc, #408]	; (8003344 <HAL_DMA_Start+0x20c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d03b      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a65      	ldr	r2, [pc, #404]	; (8003348 <HAL_DMA_Start+0x210>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d036      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a63      	ldr	r2, [pc, #396]	; (800334c <HAL_DMA_Start+0x214>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d031      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a62      	ldr	r2, [pc, #392]	; (8003350 <HAL_DMA_Start+0x218>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d02c      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_DMA_Start+0x21c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d027      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5f      	ldr	r2, [pc, #380]	; (8003358 <HAL_DMA_Start+0x220>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5d      	ldr	r2, [pc, #372]	; (800335c <HAL_DMA_Start+0x224>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_DMA_Start+0x228>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5a      	ldr	r2, [pc, #360]	; (8003364 <HAL_DMA_Start+0x22c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_DMA_Start+0xee>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a59      	ldr	r2, [pc, #356]	; (8003368 <HAL_DMA_Start+0x230>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_DMA_Start+0xee>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a57      	ldr	r2, [pc, #348]	; (800336c <HAL_DMA_Start+0x234>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_DMA_Start+0xee>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a56      	ldr	r2, [pc, #344]	; (8003370 <HAL_DMA_Start+0x238>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_DMA_Start+0xee>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a54      	ldr	r2, [pc, #336]	; (8003374 <HAL_DMA_Start+0x23c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <HAL_DMA_Start+0x100>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e007      	b.n	8003248 <HAL_DMA_Start+0x110>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f001 ff88 	bl	8005164 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a37      	ldr	r2, [pc, #220]	; (8003338 <HAL_DMA_Start+0x200>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04a      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a36      	ldr	r2, [pc, #216]	; (800333c <HAL_DMA_Start+0x204>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d045      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a34      	ldr	r2, [pc, #208]	; (8003340 <HAL_DMA_Start+0x208>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d040      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a33      	ldr	r2, [pc, #204]	; (8003344 <HAL_DMA_Start+0x20c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d03b      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a31      	ldr	r2, [pc, #196]	; (8003348 <HAL_DMA_Start+0x210>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d036      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a30      	ldr	r2, [pc, #192]	; (800334c <HAL_DMA_Start+0x214>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d031      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_DMA_Start+0x218>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02c      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_DMA_Start+0x21c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d027      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <HAL_DMA_Start+0x220>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	; (800335c <HAL_DMA_Start+0x224>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01d      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a28      	ldr	r2, [pc, #160]	; (8003360 <HAL_DMA_Start+0x228>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a27      	ldr	r2, [pc, #156]	; (8003364 <HAL_DMA_Start+0x22c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a25      	ldr	r2, [pc, #148]	; (8003368 <HAL_DMA_Start+0x230>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a24      	ldr	r2, [pc, #144]	; (800336c <HAL_DMA_Start+0x234>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_DMA_Start+0x238>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_Start+0x1bc>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_DMA_Start+0x23c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <HAL_DMA_Start+0x1ce>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e012      	b.n	800332c <HAL_DMA_Start+0x1f4>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e009      	b.n	800332c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003326:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8

08003378 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e226      	b.n	80037e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Start_IT+0x2a>
 800339e:	2302      	movs	r3, #2
 80033a0:	e21f      	b.n	80037e2 <HAL_DMA_Start_IT+0x46a>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 820a 	bne.w	80037cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_DMA_Start_IT+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_DMA_Start_IT+0x1f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a65      	ldr	r2, [pc, #404]	; (8003574 <HAL_DMA_Start_IT+0x1fc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a63      	ldr	r2, [pc, #396]	; (8003578 <HAL_DMA_Start_IT+0x200>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a62      	ldr	r2, [pc, #392]	; (800357c <HAL_DMA_Start_IT+0x204>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a60      	ldr	r2, [pc, #384]	; (8003580 <HAL_DMA_Start_IT+0x208>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a5f      	ldr	r2, [pc, #380]	; (8003584 <HAL_DMA_Start_IT+0x20c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <HAL_DMA_Start_IT+0x210>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5c      	ldr	r2, [pc, #368]	; (800358c <HAL_DMA_Start_IT+0x214>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5a      	ldr	r2, [pc, #360]	; (8003590 <HAL_DMA_Start_IT+0x218>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a59      	ldr	r2, [pc, #356]	; (8003594 <HAL_DMA_Start_IT+0x21c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a57      	ldr	r2, [pc, #348]	; (8003598 <HAL_DMA_Start_IT+0x220>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a56      	ldr	r2, [pc, #344]	; (800359c <HAL_DMA_Start_IT+0x224>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a54      	ldr	r2, [pc, #336]	; (80035a0 <HAL_DMA_Start_IT+0x228>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a53      	ldr	r2, [pc, #332]	; (80035a4 <HAL_DMA_Start_IT+0x22c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Start_IT+0xee>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_DMA_Start_IT+0x230>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <HAL_DMA_Start_IT+0x100>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e007      	b.n	8003488 <HAL_DMA_Start_IT+0x110>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f001 fe68 	bl	8005164 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a34      	ldr	r2, [pc, #208]	; (800356c <HAL_DMA_Start_IT+0x1f4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d04a      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a33      	ldr	r2, [pc, #204]	; (8003570 <HAL_DMA_Start_IT+0x1f8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d045      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_DMA_Start_IT+0x1fc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d040      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_DMA_Start_IT+0x200>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d03b      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_DMA_Start_IT+0x204>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d036      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <HAL_DMA_Start_IT+0x208>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d031      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_DMA_Start_IT+0x20c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02c      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <HAL_DMA_Start_IT+0x210>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d027      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <HAL_DMA_Start_IT+0x214>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_DMA_Start_IT+0x218>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01d      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_DMA_Start_IT+0x21c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_DMA_Start_IT+0x220>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_DMA_Start_IT+0x224>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_DMA_Start_IT+0x228>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_DMA_Start_IT+0x22c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_DMA_Start_IT+0x1bc>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_DMA_Start_IT+0x230>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Start_IT+0x1c0>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_DMA_Start_IT+0x1c2>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d036      	beq.n	80035ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 021e 	bic.w	r2, r3, #30
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0216 	orr.w	r2, r2, #22
 8003550:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03e      	beq.n	80035d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0208 	orr.w	r2, r2, #8
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e035      	b.n	80035d8 <HAL_DMA_Start_IT+0x260>
 800356c:	40020010 	.word	0x40020010
 8003570:	40020028 	.word	0x40020028
 8003574:	40020040 	.word	0x40020040
 8003578:	40020058 	.word	0x40020058
 800357c:	40020070 	.word	0x40020070
 8003580:	40020088 	.word	0x40020088
 8003584:	400200a0 	.word	0x400200a0
 8003588:	400200b8 	.word	0x400200b8
 800358c:	40020410 	.word	0x40020410
 8003590:	40020428 	.word	0x40020428
 8003594:	40020440 	.word	0x40020440
 8003598:	40020458 	.word	0x40020458
 800359c:	40020470 	.word	0x40020470
 80035a0:	40020488 	.word	0x40020488
 80035a4:	400204a0 	.word	0x400204a0
 80035a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 020e 	bic.w	r2, r3, #14
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 020a 	orr.w	r2, r2, #10
 80035be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0204 	orr.w	r2, r2, #4
 80035d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a83      	ldr	r2, [pc, #524]	; (80037ec <HAL_DMA_Start_IT+0x474>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d072      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a82      	ldr	r2, [pc, #520]	; (80037f0 <HAL_DMA_Start_IT+0x478>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d06d      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a80      	ldr	r2, [pc, #512]	; (80037f4 <HAL_DMA_Start_IT+0x47c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d068      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7f      	ldr	r2, [pc, #508]	; (80037f8 <HAL_DMA_Start_IT+0x480>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d063      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7d      	ldr	r2, [pc, #500]	; (80037fc <HAL_DMA_Start_IT+0x484>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d05e      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7c      	ldr	r2, [pc, #496]	; (8003800 <HAL_DMA_Start_IT+0x488>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d059      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <HAL_DMA_Start_IT+0x48c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d054      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a79      	ldr	r2, [pc, #484]	; (8003808 <HAL_DMA_Start_IT+0x490>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04f      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a77      	ldr	r2, [pc, #476]	; (800380c <HAL_DMA_Start_IT+0x494>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d04a      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a76      	ldr	r2, [pc, #472]	; (8003810 <HAL_DMA_Start_IT+0x498>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d045      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a74      	ldr	r2, [pc, #464]	; (8003814 <HAL_DMA_Start_IT+0x49c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d040      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a73      	ldr	r2, [pc, #460]	; (8003818 <HAL_DMA_Start_IT+0x4a0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d03b      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a71      	ldr	r2, [pc, #452]	; (800381c <HAL_DMA_Start_IT+0x4a4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d036      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a70      	ldr	r2, [pc, #448]	; (8003820 <HAL_DMA_Start_IT+0x4a8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d031      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_DMA_Start_IT+0x4ac>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d02c      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6d      	ldr	r2, [pc, #436]	; (8003828 <HAL_DMA_Start_IT+0x4b0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d027      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6b      	ldr	r2, [pc, #428]	; (800382c <HAL_DMA_Start_IT+0x4b4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <HAL_DMA_Start_IT+0x4b8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d01d      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a68      	ldr	r2, [pc, #416]	; (8003834 <HAL_DMA_Start_IT+0x4bc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a67      	ldr	r2, [pc, #412]	; (8003838 <HAL_DMA_Start_IT+0x4c0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a65      	ldr	r2, [pc, #404]	; (800383c <HAL_DMA_Start_IT+0x4c4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a64      	ldr	r2, [pc, #400]	; (8003840 <HAL_DMA_Start_IT+0x4c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a62      	ldr	r2, [pc, #392]	; (8003844 <HAL_DMA_Start_IT+0x4cc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_DMA_Start_IT+0x350>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a61      	ldr	r2, [pc, #388]	; (8003848 <HAL_DMA_Start_IT+0x4d0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_DMA_Start_IT+0x354>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_DMA_Start_IT+0x356>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d01a      	beq.n	8003708 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003706:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a37      	ldr	r2, [pc, #220]	; (80037ec <HAL_DMA_Start_IT+0x474>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a36      	ldr	r2, [pc, #216]	; (80037f0 <HAL_DMA_Start_IT+0x478>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d045      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a34      	ldr	r2, [pc, #208]	; (80037f4 <HAL_DMA_Start_IT+0x47c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d040      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a33      	ldr	r2, [pc, #204]	; (80037f8 <HAL_DMA_Start_IT+0x480>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d03b      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a31      	ldr	r2, [pc, #196]	; (80037fc <HAL_DMA_Start_IT+0x484>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d036      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a30      	ldr	r2, [pc, #192]	; (8003800 <HAL_DMA_Start_IT+0x488>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d031      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <HAL_DMA_Start_IT+0x48c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02c      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <HAL_DMA_Start_IT+0x490>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d027      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2b      	ldr	r2, [pc, #172]	; (800380c <HAL_DMA_Start_IT+0x494>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <HAL_DMA_Start_IT+0x498>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d01d      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <HAL_DMA_Start_IT+0x49c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a27      	ldr	r2, [pc, #156]	; (8003818 <HAL_DMA_Start_IT+0x4a0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_DMA_Start_IT+0x4a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_DMA_Start_IT+0x4a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_DMA_Start_IT+0x4ac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_DMA_Start_IT+0x430>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_DMA_Start_IT+0x4b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d108      	bne.n	80037ba <HAL_DMA_Start_IT+0x442>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e012      	b.n	80037e0 <HAL_DMA_Start_IT+0x468>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e009      	b.n	80037e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	40020058 	.word	0x40020058
 80037fc:	40020070 	.word	0x40020070
 8003800:	40020088 	.word	0x40020088
 8003804:	400200a0 	.word	0x400200a0
 8003808:	400200b8 	.word	0x400200b8
 800380c:	40020410 	.word	0x40020410
 8003810:	40020428 	.word	0x40020428
 8003814:	40020440 	.word	0x40020440
 8003818:	40020458 	.word	0x40020458
 800381c:	40020470 	.word	0x40020470
 8003820:	40020488 	.word	0x40020488
 8003824:	400204a0 	.word	0x400204a0
 8003828:	400204b8 	.word	0x400204b8
 800382c:	58025408 	.word	0x58025408
 8003830:	5802541c 	.word	0x5802541c
 8003834:	58025430 	.word	0x58025430
 8003838:	58025444 	.word	0x58025444
 800383c:	58025458 	.word	0x58025458
 8003840:	5802546c 	.word	0x5802546c
 8003844:	58025480 	.word	0x58025480
 8003848:	58025494 	.word	0x58025494

0800384c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003854:	f7fe ff66 	bl	8002724 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e2dc      	b.n	8003e1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d008      	beq.n	8003882 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e2cd      	b.n	8003e1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a76      	ldr	r2, [pc, #472]	; (8003a60 <HAL_DMA_Abort+0x214>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d04a      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a74      	ldr	r2, [pc, #464]	; (8003a64 <HAL_DMA_Abort+0x218>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d045      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a73      	ldr	r2, [pc, #460]	; (8003a68 <HAL_DMA_Abort+0x21c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d040      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a71      	ldr	r2, [pc, #452]	; (8003a6c <HAL_DMA_Abort+0x220>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a70      	ldr	r2, [pc, #448]	; (8003a70 <HAL_DMA_Abort+0x224>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d036      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_DMA_Abort+0x228>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6d      	ldr	r2, [pc, #436]	; (8003a78 <HAL_DMA_Abort+0x22c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d02c      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6b      	ldr	r2, [pc, #428]	; (8003a7c <HAL_DMA_Abort+0x230>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d027      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <HAL_DMA_Abort+0x234>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a68      	ldr	r2, [pc, #416]	; (8003a84 <HAL_DMA_Abort+0x238>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_DMA_Abort+0x23c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a65      	ldr	r2, [pc, #404]	; (8003a8c <HAL_DMA_Abort+0x240>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a64      	ldr	r2, [pc, #400]	; (8003a90 <HAL_DMA_Abort+0x244>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a62      	ldr	r2, [pc, #392]	; (8003a94 <HAL_DMA_Abort+0x248>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a61      	ldr	r2, [pc, #388]	; (8003a98 <HAL_DMA_Abort+0x24c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Abort+0xd6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5f      	ldr	r2, [pc, #380]	; (8003a9c <HAL_DMA_Abort+0x250>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_DMA_Abort+0xda>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_DMA_Abort+0xdc>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 021e 	bic.w	r2, r2, #30
 800393a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800394a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e00a      	b.n	800396a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3c      	ldr	r2, [pc, #240]	; (8003a60 <HAL_DMA_Abort+0x214>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d072      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <HAL_DMA_Abort+0x218>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d06d      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a39      	ldr	r2, [pc, #228]	; (8003a68 <HAL_DMA_Abort+0x21c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d068      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a37      	ldr	r2, [pc, #220]	; (8003a6c <HAL_DMA_Abort+0x220>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d063      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a36      	ldr	r2, [pc, #216]	; (8003a70 <HAL_DMA_Abort+0x224>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d05e      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <HAL_DMA_Abort+0x228>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d059      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <HAL_DMA_Abort+0x22c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d054      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a31      	ldr	r2, [pc, #196]	; (8003a7c <HAL_DMA_Abort+0x230>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d04f      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_DMA_Abort+0x234>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d04a      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_DMA_Abort+0x238>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d045      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_DMA_Abort+0x23c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d040      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <HAL_DMA_Abort+0x240>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d03b      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_DMA_Abort+0x244>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d036      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_DMA_Abort+0x248>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d031      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_DMA_Abort+0x24c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d02c      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <HAL_DMA_Abort+0x250>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d027      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <HAL_DMA_Abort+0x254>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_DMA_Abort+0x258>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_DMA_Abort+0x25c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_DMA_Abort+0x260>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_DMA_Abort+0x264>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_DMA_Abort+0x268>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_DMA_Abort+0x26c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Abort+0x20e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_DMA_Abort+0x270>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d132      	bne.n	8003ac0 <HAL_DMA_Abort+0x274>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e031      	b.n	8003ac2 <HAL_DMA_Abort+0x276>
 8003a5e:	bf00      	nop
 8003a60:	40020010 	.word	0x40020010
 8003a64:	40020028 	.word	0x40020028
 8003a68:	40020040 	.word	0x40020040
 8003a6c:	40020058 	.word	0x40020058
 8003a70:	40020070 	.word	0x40020070
 8003a74:	40020088 	.word	0x40020088
 8003a78:	400200a0 	.word	0x400200a0
 8003a7c:	400200b8 	.word	0x400200b8
 8003a80:	40020410 	.word	0x40020410
 8003a84:	40020428 	.word	0x40020428
 8003a88:	40020440 	.word	0x40020440
 8003a8c:	40020458 	.word	0x40020458
 8003a90:	40020470 	.word	0x40020470
 8003a94:	40020488 	.word	0x40020488
 8003a98:	400204a0 	.word	0x400204a0
 8003a9c:	400204b8 	.word	0x400204b8
 8003aa0:	58025408 	.word	0x58025408
 8003aa4:	5802541c 	.word	0x5802541c
 8003aa8:	58025430 	.word	0x58025430
 8003aac:	58025444 	.word	0x58025444
 8003ab0:	58025458 	.word	0x58025458
 8003ab4:	5802546c 	.word	0x5802546c
 8003ab8:	58025480 	.word	0x58025480
 8003abc:	58025494 	.word	0x58025494
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_DMA_Abort+0x444>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04a      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <HAL_DMA_Abort+0x448>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <HAL_DMA_Abort+0x44c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d040      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_DMA_Abort+0x450>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d03b      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <HAL_DMA_Abort+0x454>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d036      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_DMA_Abort+0x458>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d031      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <HAL_DMA_Abort+0x45c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d02c      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a62      	ldr	r2, [pc, #392]	; (8003cac <HAL_DMA_Abort+0x460>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d027      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <HAL_DMA_Abort+0x464>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a5f      	ldr	r2, [pc, #380]	; (8003cb4 <HAL_DMA_Abort+0x468>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01d      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5e      	ldr	r2, [pc, #376]	; (8003cb8 <HAL_DMA_Abort+0x46c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5c      	ldr	r2, [pc, #368]	; (8003cbc <HAL_DMA_Abort+0x470>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5b      	ldr	r2, [pc, #364]	; (8003cc0 <HAL_DMA_Abort+0x474>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a59      	ldr	r2, [pc, #356]	; (8003cc4 <HAL_DMA_Abort+0x478>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_DMA_Abort+0x47c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_Abort+0x32a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a56      	ldr	r2, [pc, #344]	; (8003ccc <HAL_DMA_Abort+0x480>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <HAL_DMA_Abort+0x33c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e007      	b.n	8003b98 <HAL_DMA_Abort+0x34c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b98:	e013      	b.n	8003bc2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b9a:	f7fe fdc3 	bl	8002724 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d90c      	bls.n	8003bc2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e12d      	b.n	8003e1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e5      	bne.n	8003b9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <HAL_DMA_Abort+0x444>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d04a      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <HAL_DMA_Abort+0x448>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d045      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <HAL_DMA_Abort+0x44c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d040      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2a      	ldr	r2, [pc, #168]	; (8003c9c <HAL_DMA_Abort+0x450>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d03b      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <HAL_DMA_Abort+0x454>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d036      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <HAL_DMA_Abort+0x458>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d031      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <HAL_DMA_Abort+0x45c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d02c      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_DMA_Abort+0x460>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d027      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_DMA_Abort+0x464>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <HAL_DMA_Abort+0x468>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_DMA_Abort+0x46c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <HAL_DMA_Abort+0x470>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_DMA_Abort+0x474>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1b      	ldr	r2, [pc, #108]	; (8003cc4 <HAL_DMA_Abort+0x478>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_DMA_Abort+0x47c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_DMA_Abort+0x422>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_DMA_Abort+0x480>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <HAL_DMA_Abort+0x426>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_DMA_Abort+0x428>
 8003c72:	2300      	movs	r3, #0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02b      	beq.n	8003cd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	223f      	movs	r2, #63	; 0x3f
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	e02a      	b.n	8003ce6 <HAL_DMA_Abort+0x49a>
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4f      	ldr	r2, [pc, #316]	; (8003e28 <HAL_DMA_Abort+0x5dc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d072      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a4d      	ldr	r2, [pc, #308]	; (8003e2c <HAL_DMA_Abort+0x5e0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d06d      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4c      	ldr	r2, [pc, #304]	; (8003e30 <HAL_DMA_Abort+0x5e4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d068      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a4a      	ldr	r2, [pc, #296]	; (8003e34 <HAL_DMA_Abort+0x5e8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d063      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a49      	ldr	r2, [pc, #292]	; (8003e38 <HAL_DMA_Abort+0x5ec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d05e      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a47      	ldr	r2, [pc, #284]	; (8003e3c <HAL_DMA_Abort+0x5f0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d059      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a46      	ldr	r2, [pc, #280]	; (8003e40 <HAL_DMA_Abort+0x5f4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d054      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a44      	ldr	r2, [pc, #272]	; (8003e44 <HAL_DMA_Abort+0x5f8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d04f      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a43      	ldr	r2, [pc, #268]	; (8003e48 <HAL_DMA_Abort+0x5fc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d04a      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <HAL_DMA_Abort+0x600>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d045      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <HAL_DMA_Abort+0x604>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d040      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a3e      	ldr	r2, [pc, #248]	; (8003e54 <HAL_DMA_Abort+0x608>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d03b      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3d      	ldr	r2, [pc, #244]	; (8003e58 <HAL_DMA_Abort+0x60c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d036      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <HAL_DMA_Abort+0x610>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <HAL_DMA_Abort+0x614>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02c      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a38      	ldr	r2, [pc, #224]	; (8003e64 <HAL_DMA_Abort+0x618>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d027      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <HAL_DMA_Abort+0x61c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <HAL_DMA_Abort+0x620>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a34      	ldr	r2, [pc, #208]	; (8003e70 <HAL_DMA_Abort+0x624>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d018      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <HAL_DMA_Abort+0x628>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <HAL_DMA_Abort+0x62c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2f      	ldr	r2, [pc, #188]	; (8003e7c <HAL_DMA_Abort+0x630>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <HAL_DMA_Abort+0x634>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_DMA_Abort+0x58a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <HAL_DMA_Abort+0x638>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <HAL_DMA_Abort+0x58e>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_DMA_Abort+0x590>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003de8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	58025408 	.word	0x58025408
 8003e6c:	5802541c 	.word	0x5802541c
 8003e70:	58025430 	.word	0x58025430
 8003e74:	58025444 	.word	0x58025444
 8003e78:	58025458 	.word	0x58025458
 8003e7c:	5802546c 	.word	0x5802546c
 8003e80:	58025480 	.word	0x58025480
 8003e84:	58025494 	.word	0x58025494

08003e88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e205      	b.n	80042a6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e1fa      	b.n	80042a6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a8c      	ldr	r2, [pc, #560]	; (80040e8 <HAL_DMA_Abort_IT+0x260>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d04a      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a8b      	ldr	r2, [pc, #556]	; (80040ec <HAL_DMA_Abort_IT+0x264>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d045      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a89      	ldr	r2, [pc, #548]	; (80040f0 <HAL_DMA_Abort_IT+0x268>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d040      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a88      	ldr	r2, [pc, #544]	; (80040f4 <HAL_DMA_Abort_IT+0x26c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d03b      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a86      	ldr	r2, [pc, #536]	; (80040f8 <HAL_DMA_Abort_IT+0x270>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d036      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a85      	ldr	r2, [pc, #532]	; (80040fc <HAL_DMA_Abort_IT+0x274>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d031      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a83      	ldr	r2, [pc, #524]	; (8004100 <HAL_DMA_Abort_IT+0x278>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02c      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a82      	ldr	r2, [pc, #520]	; (8004104 <HAL_DMA_Abort_IT+0x27c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d027      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a80      	ldr	r2, [pc, #512]	; (8004108 <HAL_DMA_Abort_IT+0x280>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7f      	ldr	r2, [pc, #508]	; (800410c <HAL_DMA_Abort_IT+0x284>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01d      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7d      	ldr	r2, [pc, #500]	; (8004110 <HAL_DMA_Abort_IT+0x288>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7c      	ldr	r2, [pc, #496]	; (8004114 <HAL_DMA_Abort_IT+0x28c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a7a      	ldr	r2, [pc, #488]	; (8004118 <HAL_DMA_Abort_IT+0x290>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a79      	ldr	r2, [pc, #484]	; (800411c <HAL_DMA_Abort_IT+0x294>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_DMA_Abort_IT+0x298>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_DMA_Abort_IT+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a76      	ldr	r2, [pc, #472]	; (8004124 <HAL_DMA_Abort_IT+0x29c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_DMA_Abort_IT+0xcc>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_DMA_Abort_IT+0xce>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d065      	beq.n	8004026 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a60      	ldr	r2, [pc, #384]	; (80040e8 <HAL_DMA_Abort_IT+0x260>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d04a      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5e      	ldr	r2, [pc, #376]	; (80040ec <HAL_DMA_Abort_IT+0x264>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d045      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5d      	ldr	r2, [pc, #372]	; (80040f0 <HAL_DMA_Abort_IT+0x268>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d040      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5b      	ldr	r2, [pc, #364]	; (80040f4 <HAL_DMA_Abort_IT+0x26c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d03b      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_DMA_Abort_IT+0x270>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d036      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a58      	ldr	r2, [pc, #352]	; (80040fc <HAL_DMA_Abort_IT+0x274>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_DMA_Abort_IT+0x278>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d02c      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a55      	ldr	r2, [pc, #340]	; (8004104 <HAL_DMA_Abort_IT+0x27c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d027      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a54      	ldr	r2, [pc, #336]	; (8004108 <HAL_DMA_Abort_IT+0x280>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_DMA_Abort_IT+0x284>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a51      	ldr	r2, [pc, #324]	; (8004110 <HAL_DMA_Abort_IT+0x288>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d018      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_DMA_Abort_IT+0x28c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4e      	ldr	r2, [pc, #312]	; (8004118 <HAL_DMA_Abort_IT+0x290>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a4c      	ldr	r2, [pc, #304]	; (800411c <HAL_DMA_Abort_IT+0x294>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_DMA_Abort_IT+0x298>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_DMA_Abort_IT+0x17a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a49      	ldr	r2, [pc, #292]	; (8004124 <HAL_DMA_Abort_IT+0x29c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_DMA_Abort_IT+0x18c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e147      	b.n	80042a4 <HAL_DMA_Abort_IT+0x41c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e13e      	b.n	80042a4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 020e 	bic.w	r2, r2, #14
 8004034:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <HAL_DMA_Abort_IT+0x260>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d04a      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <HAL_DMA_Abort_IT+0x264>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d045      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <HAL_DMA_Abort_IT+0x268>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <HAL_DMA_Abort_IT+0x26c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d03b      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_DMA_Abort_IT+0x270>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d036      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <HAL_DMA_Abort_IT+0x274>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d031      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a22      	ldr	r2, [pc, #136]	; (8004100 <HAL_DMA_Abort_IT+0x278>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d02c      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <HAL_DMA_Abort_IT+0x27c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d027      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <HAL_DMA_Abort_IT+0x280>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1d      	ldr	r2, [pc, #116]	; (800410c <HAL_DMA_Abort_IT+0x284>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01d      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <HAL_DMA_Abort_IT+0x288>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <HAL_DMA_Abort_IT+0x28c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_DMA_Abort_IT+0x290>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_DMA_Abort_IT+0x294>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_DMA_Abort_IT+0x298>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x24e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a14      	ldr	r2, [pc, #80]	; (8004124 <HAL_DMA_Abort_IT+0x29c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d128      	bne.n	8004128 <HAL_DMA_Abort_IT+0x2a0>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e027      	b.n	8004138 <HAL_DMA_Abort_IT+0x2b0>
 80040e8:	40020010 	.word	0x40020010
 80040ec:	40020028 	.word	0x40020028
 80040f0:	40020040 	.word	0x40020040
 80040f4:	40020058 	.word	0x40020058
 80040f8:	40020070 	.word	0x40020070
 80040fc:	40020088 	.word	0x40020088
 8004100:	400200a0 	.word	0x400200a0
 8004104:	400200b8 	.word	0x400200b8
 8004108:	40020410 	.word	0x40020410
 800410c:	40020428 	.word	0x40020428
 8004110:	40020440 	.word	0x40020440
 8004114:	40020458 	.word	0x40020458
 8004118:	40020470 	.word	0x40020470
 800411c:	40020488 	.word	0x40020488
 8004120:	400204a0 	.word	0x400204a0
 8004124:	400204b8 	.word	0x400204b8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5c      	ldr	r2, [pc, #368]	; (80042b0 <HAL_DMA_Abort_IT+0x428>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d072      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5b      	ldr	r2, [pc, #364]	; (80042b4 <HAL_DMA_Abort_IT+0x42c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d06d      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a59      	ldr	r2, [pc, #356]	; (80042b8 <HAL_DMA_Abort_IT+0x430>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d068      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_DMA_Abort_IT+0x434>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d063      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a56      	ldr	r2, [pc, #344]	; (80042c0 <HAL_DMA_Abort_IT+0x438>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d05e      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a55      	ldr	r2, [pc, #340]	; (80042c4 <HAL_DMA_Abort_IT+0x43c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d059      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a53      	ldr	r2, [pc, #332]	; (80042c8 <HAL_DMA_Abort_IT+0x440>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d054      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a52      	ldr	r2, [pc, #328]	; (80042cc <HAL_DMA_Abort_IT+0x444>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04f      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a50      	ldr	r2, [pc, #320]	; (80042d0 <HAL_DMA_Abort_IT+0x448>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d04a      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4f      	ldr	r2, [pc, #316]	; (80042d4 <HAL_DMA_Abort_IT+0x44c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d045      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a4d      	ldr	r2, [pc, #308]	; (80042d8 <HAL_DMA_Abort_IT+0x450>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d040      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4c      	ldr	r2, [pc, #304]	; (80042dc <HAL_DMA_Abort_IT+0x454>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d03b      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a4a      	ldr	r2, [pc, #296]	; (80042e0 <HAL_DMA_Abort_IT+0x458>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d036      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a49      	ldr	r2, [pc, #292]	; (80042e4 <HAL_DMA_Abort_IT+0x45c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d031      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a47      	ldr	r2, [pc, #284]	; (80042e8 <HAL_DMA_Abort_IT+0x460>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02c      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a46      	ldr	r2, [pc, #280]	; (80042ec <HAL_DMA_Abort_IT+0x464>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d027      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a44      	ldr	r2, [pc, #272]	; (80042f0 <HAL_DMA_Abort_IT+0x468>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a43      	ldr	r2, [pc, #268]	; (80042f4 <HAL_DMA_Abort_IT+0x46c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d01d      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a41      	ldr	r2, [pc, #260]	; (80042f8 <HAL_DMA_Abort_IT+0x470>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <HAL_DMA_Abort_IT+0x474>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3e      	ldr	r2, [pc, #248]	; (8004300 <HAL_DMA_Abort_IT+0x478>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <HAL_DMA_Abort_IT+0x47c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <HAL_DMA_Abort_IT+0x480>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_DMA_Abort_IT+0x3a0>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <HAL_DMA_Abort_IT+0x484>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_DMA_Abort_IT+0x3a4>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_DMA_Abort_IT+0x3a6>
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d028      	beq.n	8004284 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004240:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2201      	movs	r2, #1
 8004252:	409a      	lsls	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004260:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004278:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004282:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40020010 	.word	0x40020010
 80042b4:	40020028 	.word	0x40020028
 80042b8:	40020040 	.word	0x40020040
 80042bc:	40020058 	.word	0x40020058
 80042c0:	40020070 	.word	0x40020070
 80042c4:	40020088 	.word	0x40020088
 80042c8:	400200a0 	.word	0x400200a0
 80042cc:	400200b8 	.word	0x400200b8
 80042d0:	40020410 	.word	0x40020410
 80042d4:	40020428 	.word	0x40020428
 80042d8:	40020440 	.word	0x40020440
 80042dc:	40020458 	.word	0x40020458
 80042e0:	40020470 	.word	0x40020470
 80042e4:	40020488 	.word	0x40020488
 80042e8:	400204a0 	.word	0x400204a0
 80042ec:	400204b8 	.word	0x400204b8
 80042f0:	58025408 	.word	0x58025408
 80042f4:	5802541c 	.word	0x5802541c
 80042f8:	58025430 	.word	0x58025430
 80042fc:	58025444 	.word	0x58025444
 8004300:	58025458 	.word	0x58025458
 8004304:	5802546c 	.word	0x5802546c
 8004308:	58025480 	.word	0x58025480
 800430c:	58025494 	.word	0x58025494

08004310 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800431c:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_DMA_IRQHandler+0x1ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a67      	ldr	r2, [pc, #412]	; (80044c0 <HAL_DMA_IRQHandler+0x1b0>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0a9b      	lsrs	r3, r3, #10
 8004328:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5f      	ldr	r2, [pc, #380]	; (80044c4 <HAL_DMA_IRQHandler+0x1b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04a      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <HAL_DMA_IRQHandler+0x1b8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d045      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_DMA_IRQHandler+0x1bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d040      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_DMA_IRQHandler+0x1c0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a59      	ldr	r2, [pc, #356]	; (80044d4 <HAL_DMA_IRQHandler+0x1c4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d036      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a57      	ldr	r2, [pc, #348]	; (80044d8 <HAL_DMA_IRQHandler+0x1c8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d031      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a56      	ldr	r2, [pc, #344]	; (80044dc <HAL_DMA_IRQHandler+0x1cc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d02c      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <HAL_DMA_IRQHandler+0x1d0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d027      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a53      	ldr	r2, [pc, #332]	; (80044e4 <HAL_DMA_IRQHandler+0x1d4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a51      	ldr	r2, [pc, #324]	; (80044e8 <HAL_DMA_IRQHandler+0x1d8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a50      	ldr	r2, [pc, #320]	; (80044ec <HAL_DMA_IRQHandler+0x1dc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a4e      	ldr	r2, [pc, #312]	; (80044f0 <HAL_DMA_IRQHandler+0x1e0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a4d      	ldr	r2, [pc, #308]	; (80044f4 <HAL_DMA_IRQHandler+0x1e4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_DMA_IRQHandler+0x1e8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_DMA_IRQHandler+0x1ec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xd2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a48      	ldr	r2, [pc, #288]	; (8004500 <HAL_DMA_IRQHandler+0x1f0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_DMA_IRQHandler+0xd6>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_DMA_IRQHandler+0xd8>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 842b 	beq.w	8004c44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2208      	movs	r2, #8
 80043f8:	409a      	lsls	r2, r3
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a2 	beq.w	8004548 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2e      	ldr	r2, [pc, #184]	; (80044c4 <HAL_DMA_IRQHandler+0x1b4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d04a      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <HAL_DMA_IRQHandler+0x1b8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d045      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_DMA_IRQHandler+0x1bc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d040      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2a      	ldr	r2, [pc, #168]	; (80044d0 <HAL_DMA_IRQHandler+0x1c0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d03b      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a28      	ldr	r2, [pc, #160]	; (80044d4 <HAL_DMA_IRQHandler+0x1c4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d036      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <HAL_DMA_IRQHandler+0x1c8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d031      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a25      	ldr	r2, [pc, #148]	; (80044dc <HAL_DMA_IRQHandler+0x1cc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02c      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <HAL_DMA_IRQHandler+0x1d0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d027      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <HAL_DMA_IRQHandler+0x1d4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d022      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_DMA_IRQHandler+0x1d8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d01d      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_DMA_IRQHandler+0x1dc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d018      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_DMA_IRQHandler+0x1e0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d013      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_DMA_IRQHandler+0x1e4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00e      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_DMA_IRQHandler+0x1e8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d009      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <HAL_DMA_IRQHandler+0x1ec>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x194>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_DMA_IRQHandler+0x1f0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d12f      	bne.n	8004504 <HAL_DMA_IRQHandler+0x1f4>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e02e      	b.n	8004518 <HAL_DMA_IRQHandler+0x208>
 80044ba:	bf00      	nop
 80044bc:	24000018 	.word	0x24000018
 80044c0:	1b4e81b5 	.word	0x1b4e81b5
 80044c4:	40020010 	.word	0x40020010
 80044c8:	40020028 	.word	0x40020028
 80044cc:	40020040 	.word	0x40020040
 80044d0:	40020058 	.word	0x40020058
 80044d4:	40020070 	.word	0x40020070
 80044d8:	40020088 	.word	0x40020088
 80044dc:	400200a0 	.word	0x400200a0
 80044e0:	400200b8 	.word	0x400200b8
 80044e4:	40020410 	.word	0x40020410
 80044e8:	40020428 	.word	0x40020428
 80044ec:	40020440 	.word	0x40020440
 80044f0:	40020458 	.word	0x40020458
 80044f4:	40020470 	.word	0x40020470
 80044f8:	40020488 	.word	0x40020488
 80044fc:	400204a0 	.word	0x400204a0
 8004500:	400204b8 	.word	0x400204b8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0204 	bic.w	r2, r2, #4
 800452a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2208      	movs	r2, #8
 8004536:	409a      	lsls	r2, r3
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d06e      	beq.n	800463c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a69      	ldr	r2, [pc, #420]	; (8004708 <HAL_DMA_IRQHandler+0x3f8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d04a      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a67      	ldr	r2, [pc, #412]	; (800470c <HAL_DMA_IRQHandler+0x3fc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d045      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a66      	ldr	r2, [pc, #408]	; (8004710 <HAL_DMA_IRQHandler+0x400>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d040      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a64      	ldr	r2, [pc, #400]	; (8004714 <HAL_DMA_IRQHandler+0x404>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d03b      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a63      	ldr	r2, [pc, #396]	; (8004718 <HAL_DMA_IRQHandler+0x408>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d036      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a61      	ldr	r2, [pc, #388]	; (800471c <HAL_DMA_IRQHandler+0x40c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d031      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a60      	ldr	r2, [pc, #384]	; (8004720 <HAL_DMA_IRQHandler+0x410>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d02c      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5e      	ldr	r2, [pc, #376]	; (8004724 <HAL_DMA_IRQHandler+0x414>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d027      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5d      	ldr	r2, [pc, #372]	; (8004728 <HAL_DMA_IRQHandler+0x418>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_DMA_IRQHandler+0x41c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01d      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5a      	ldr	r2, [pc, #360]	; (8004730 <HAL_DMA_IRQHandler+0x420>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a58      	ldr	r2, [pc, #352]	; (8004734 <HAL_DMA_IRQHandler+0x424>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a57      	ldr	r2, [pc, #348]	; (8004738 <HAL_DMA_IRQHandler+0x428>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a55      	ldr	r2, [pc, #340]	; (800473c <HAL_DMA_IRQHandler+0x42c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a54      	ldr	r2, [pc, #336]	; (8004740 <HAL_DMA_IRQHandler+0x430>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2ee>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_DMA_IRQHandler+0x434>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d10a      	bne.n	8004614 <HAL_DMA_IRQHandler+0x304>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e003      	b.n	800461c <HAL_DMA_IRQHandler+0x30c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0202 	orr.w	r2, r3, #2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2204      	movs	r2, #4
 8004646:	409a      	lsls	r2, r3
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 808f 	beq.w	8004770 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <HAL_DMA_IRQHandler+0x3f8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d04a      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2a      	ldr	r2, [pc, #168]	; (800470c <HAL_DMA_IRQHandler+0x3fc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d045      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <HAL_DMA_IRQHandler+0x400>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d040      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <HAL_DMA_IRQHandler+0x404>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d03b      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a26      	ldr	r2, [pc, #152]	; (8004718 <HAL_DMA_IRQHandler+0x408>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d036      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a24      	ldr	r2, [pc, #144]	; (800471c <HAL_DMA_IRQHandler+0x40c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d031      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_DMA_IRQHandler+0x410>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d02c      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a21      	ldr	r2, [pc, #132]	; (8004724 <HAL_DMA_IRQHandler+0x414>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d027      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a20      	ldr	r2, [pc, #128]	; (8004728 <HAL_DMA_IRQHandler+0x418>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1e      	ldr	r2, [pc, #120]	; (800472c <HAL_DMA_IRQHandler+0x41c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01d      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <HAL_DMA_IRQHandler+0x420>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d018      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_DMA_IRQHandler+0x424>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_DMA_IRQHandler+0x428>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_DMA_IRQHandler+0x42c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <HAL_DMA_IRQHandler+0x430>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x3e2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a15      	ldr	r2, [pc, #84]	; (8004744 <HAL_DMA_IRQHandler+0x434>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d12a      	bne.n	8004748 <HAL_DMA_IRQHandler+0x438>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e023      	b.n	8004750 <HAL_DMA_IRQHandler+0x440>
 8004708:	40020010 	.word	0x40020010
 800470c:	40020028 	.word	0x40020028
 8004710:	40020040 	.word	0x40020040
 8004714:	40020058 	.word	0x40020058
 8004718:	40020070 	.word	0x40020070
 800471c:	40020088 	.word	0x40020088
 8004720:	400200a0 	.word	0x400200a0
 8004724:	400200b8 	.word	0x400200b8
 8004728:	40020410 	.word	0x40020410
 800472c:	40020428 	.word	0x40020428
 8004730:	40020440 	.word	0x40020440
 8004734:	40020458 	.word	0x40020458
 8004738:	40020470 	.word	0x40020470
 800473c:	40020488 	.word	0x40020488
 8004740:	400204a0 	.word	0x400204a0
 8004744:	400204b8 	.word	0x400204b8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2204      	movs	r2, #4
 800475e:	409a      	lsls	r2, r3
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f043 0204 	orr.w	r2, r3, #4
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2210      	movs	r2, #16
 800477a:	409a      	lsls	r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80a6 	beq.w	80048d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a85      	ldr	r2, [pc, #532]	; (80049a0 <HAL_DMA_IRQHandler+0x690>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d04a      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a83      	ldr	r2, [pc, #524]	; (80049a4 <HAL_DMA_IRQHandler+0x694>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d045      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a82      	ldr	r2, [pc, #520]	; (80049a8 <HAL_DMA_IRQHandler+0x698>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d040      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_DMA_IRQHandler+0x69c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d03b      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7f      	ldr	r2, [pc, #508]	; (80049b0 <HAL_DMA_IRQHandler+0x6a0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d036      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a7d      	ldr	r2, [pc, #500]	; (80049b4 <HAL_DMA_IRQHandler+0x6a4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d031      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a7c      	ldr	r2, [pc, #496]	; (80049b8 <HAL_DMA_IRQHandler+0x6a8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d02c      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a7a      	ldr	r2, [pc, #488]	; (80049bc <HAL_DMA_IRQHandler+0x6ac>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d027      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a79      	ldr	r2, [pc, #484]	; (80049c0 <HAL_DMA_IRQHandler+0x6b0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d022      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a77      	ldr	r2, [pc, #476]	; (80049c4 <HAL_DMA_IRQHandler+0x6b4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01d      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a76      	ldr	r2, [pc, #472]	; (80049c8 <HAL_DMA_IRQHandler+0x6b8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d018      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a74      	ldr	r2, [pc, #464]	; (80049cc <HAL_DMA_IRQHandler+0x6bc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a73      	ldr	r2, [pc, #460]	; (80049d0 <HAL_DMA_IRQHandler+0x6c0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a71      	ldr	r2, [pc, #452]	; (80049d4 <HAL_DMA_IRQHandler+0x6c4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a70      	ldr	r2, [pc, #448]	; (80049d8 <HAL_DMA_IRQHandler+0x6c8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_DMA_IRQHandler+0x516>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a6e      	ldr	r2, [pc, #440]	; (80049dc <HAL_DMA_IRQHandler+0x6cc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10a      	bne.n	800483c <HAL_DMA_IRQHandler+0x52c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e009      	b.n	8004850 <HAL_DMA_IRQHandler+0x540>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d03e      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2210      	movs	r2, #16
 800485e:	409a      	lsls	r2, r3
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d018      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d024      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
 8004890:	e01f      	b.n	80048d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01b      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
 80048a2:	e016      	b.n	80048d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0208 	bic.w	r2, r2, #8
 80048c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2220      	movs	r2, #32
 80048dc:	409a      	lsls	r2, r3
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8110 	beq.w	8004b08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <HAL_DMA_IRQHandler+0x690>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d04a      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_DMA_IRQHandler+0x694>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d045      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <HAL_DMA_IRQHandler+0x698>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d040      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a28      	ldr	r2, [pc, #160]	; (80049ac <HAL_DMA_IRQHandler+0x69c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d03b      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <HAL_DMA_IRQHandler+0x6a0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d036      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <HAL_DMA_IRQHandler+0x6a4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d031      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_DMA_IRQHandler+0x6a8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d02c      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a22      	ldr	r2, [pc, #136]	; (80049bc <HAL_DMA_IRQHandler+0x6ac>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d027      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <HAL_DMA_IRQHandler+0x6b0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d022      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <HAL_DMA_IRQHandler+0x6b4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d01d      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_DMA_IRQHandler+0x6b8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d018      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_DMA_IRQHandler+0x6bc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_DMA_IRQHandler+0x6c0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00e      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_DMA_IRQHandler+0x6c4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_DMA_IRQHandler+0x6c8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_DMA_IRQHandler+0x678>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a16      	ldr	r2, [pc, #88]	; (80049dc <HAL_DMA_IRQHandler+0x6cc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d12b      	bne.n	80049e0 <HAL_DMA_IRQHandler+0x6d0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e02a      	b.n	80049f4 <HAL_DMA_IRQHandler+0x6e4>
 800499e:	bf00      	nop
 80049a0:	40020010 	.word	0x40020010
 80049a4:	40020028 	.word	0x40020028
 80049a8:	40020040 	.word	0x40020040
 80049ac:	40020058 	.word	0x40020058
 80049b0:	40020070 	.word	0x40020070
 80049b4:	40020088 	.word	0x40020088
 80049b8:	400200a0 	.word	0x400200a0
 80049bc:	400200b8 	.word	0x400200b8
 80049c0:	40020410 	.word	0x40020410
 80049c4:	40020428 	.word	0x40020428
 80049c8:	40020440 	.word	0x40020440
 80049cc:	40020458 	.word	0x40020458
 80049d0:	40020470 	.word	0x40020470
 80049d4:	40020488 	.word	0x40020488
 80049d8:	400204a0 	.word	0x400204a0
 80049dc:	400204b8 	.word	0x400204b8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8087 	beq.w	8004b08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2220      	movs	r2, #32
 8004a04:	409a      	lsls	r2, r3
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d139      	bne.n	8004a8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0216 	bic.w	r2, r2, #22
 8004a24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <HAL_DMA_IRQHandler+0x736>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0208 	bic.w	r2, r2, #8
 8004a54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	223f      	movs	r2, #63	; 0x3f
 8004a60:	409a      	lsls	r2, r3
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 834a 	beq.w	8005114 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
          }
          return;
 8004a88:	e344      	b.n	8005114 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d018      	beq.n	8004aca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02c      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
 8004ab6:	e027      	b.n	8004b08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d023      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
 8004ac8:	e01e      	b.n	8004b08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10f      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0210 	bic.w	r2, r2, #16
 8004ae6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8306 	beq.w	800511e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8088 	beq.w	8004c30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2204      	movs	r2, #4
 8004b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a7a      	ldr	r2, [pc, #488]	; (8004d18 <HAL_DMA_IRQHandler+0xa08>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d04a      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a79      	ldr	r2, [pc, #484]	; (8004d1c <HAL_DMA_IRQHandler+0xa0c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d045      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a77      	ldr	r2, [pc, #476]	; (8004d20 <HAL_DMA_IRQHandler+0xa10>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d040      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a76      	ldr	r2, [pc, #472]	; (8004d24 <HAL_DMA_IRQHandler+0xa14>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d03b      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a74      	ldr	r2, [pc, #464]	; (8004d28 <HAL_DMA_IRQHandler+0xa18>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d036      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a73      	ldr	r2, [pc, #460]	; (8004d2c <HAL_DMA_IRQHandler+0xa1c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d031      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a71      	ldr	r2, [pc, #452]	; (8004d30 <HAL_DMA_IRQHandler+0xa20>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d02c      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a70      	ldr	r2, [pc, #448]	; (8004d34 <HAL_DMA_IRQHandler+0xa24>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d027      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6e      	ldr	r2, [pc, #440]	; (8004d38 <HAL_DMA_IRQHandler+0xa28>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d022      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6d      	ldr	r2, [pc, #436]	; (8004d3c <HAL_DMA_IRQHandler+0xa2c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d01d      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a6b      	ldr	r2, [pc, #428]	; (8004d40 <HAL_DMA_IRQHandler+0xa30>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d018      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <HAL_DMA_IRQHandler+0xa34>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d013      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a68      	ldr	r2, [pc, #416]	; (8004d48 <HAL_DMA_IRQHandler+0xa38>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00e      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a67      	ldr	r2, [pc, #412]	; (8004d4c <HAL_DMA_IRQHandler+0xa3c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <HAL_DMA_IRQHandler+0xa40>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x8b8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a64      	ldr	r2, [pc, #400]	; (8004d54 <HAL_DMA_IRQHandler+0xa44>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d108      	bne.n	8004bda <HAL_DMA_IRQHandler+0x8ca>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e007      	b.n	8004bea <HAL_DMA_IRQHandler+0x8da>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d307      	bcc.n	8004c06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f2      	bne.n	8004bea <HAL_DMA_IRQHandler+0x8da>
 8004c04:	e000      	b.n	8004c08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c06:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c26:	e003      	b.n	8004c30 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8272 	beq.w	800511e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
 8004c42:	e26c      	b.n	800511e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a43      	ldr	r2, [pc, #268]	; (8004d58 <HAL_DMA_IRQHandler+0xa48>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d022      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a42      	ldr	r2, [pc, #264]	; (8004d5c <HAL_DMA_IRQHandler+0xa4c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <HAL_DMA_IRQHandler+0xa50>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3f      	ldr	r2, [pc, #252]	; (8004d64 <HAL_DMA_IRQHandler+0xa54>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3d      	ldr	r2, [pc, #244]	; (8004d68 <HAL_DMA_IRQHandler+0xa58>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <HAL_DMA_IRQHandler+0xa5c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <HAL_DMA_IRQHandler+0xa60>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x984>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a39      	ldr	r2, [pc, #228]	; (8004d74 <HAL_DMA_IRQHandler+0xa64>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d101      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x988>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_DMA_IRQHandler+0x98a>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 823f 	beq.w	800511e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80cd 	beq.w	8004e58 <HAL_DMA_IRQHandler+0xb48>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80c7 	beq.w	8004e58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d049      	beq.n	8004d78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8210 	beq.w	8005118 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d00:	e20a      	b.n	8005118 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8206 	beq.w	8005118 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d14:	e200      	b.n	8005118 <HAL_DMA_IRQHandler+0xe08>
 8004d16:	bf00      	nop
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	40020058 	.word	0x40020058
 8004d28:	40020070 	.word	0x40020070
 8004d2c:	40020088 	.word	0x40020088
 8004d30:	400200a0 	.word	0x400200a0
 8004d34:	400200b8 	.word	0x400200b8
 8004d38:	40020410 	.word	0x40020410
 8004d3c:	40020428 	.word	0x40020428
 8004d40:	40020440 	.word	0x40020440
 8004d44:	40020458 	.word	0x40020458
 8004d48:	40020470 	.word	0x40020470
 8004d4c:	40020488 	.word	0x40020488
 8004d50:	400204a0 	.word	0x400204a0
 8004d54:	400204b8 	.word	0x400204b8
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d160      	bne.n	8004e44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a8c      	ldr	r2, [pc, #560]	; (8004fb8 <HAL_DMA_IRQHandler+0xca8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d04a      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a8a      	ldr	r2, [pc, #552]	; (8004fbc <HAL_DMA_IRQHandler+0xcac>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d045      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a89      	ldr	r2, [pc, #548]	; (8004fc0 <HAL_DMA_IRQHandler+0xcb0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d040      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a87      	ldr	r2, [pc, #540]	; (8004fc4 <HAL_DMA_IRQHandler+0xcb4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d03b      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a86      	ldr	r2, [pc, #536]	; (8004fc8 <HAL_DMA_IRQHandler+0xcb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d036      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a84      	ldr	r2, [pc, #528]	; (8004fcc <HAL_DMA_IRQHandler+0xcbc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d031      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a83      	ldr	r2, [pc, #524]	; (8004fd0 <HAL_DMA_IRQHandler+0xcc0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d02c      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a81      	ldr	r2, [pc, #516]	; (8004fd4 <HAL_DMA_IRQHandler+0xcc4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d027      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a80      	ldr	r2, [pc, #512]	; (8004fd8 <HAL_DMA_IRQHandler+0xcc8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7e      	ldr	r2, [pc, #504]	; (8004fdc <HAL_DMA_IRQHandler+0xccc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01d      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7d      	ldr	r2, [pc, #500]	; (8004fe0 <HAL_DMA_IRQHandler+0xcd0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7b      	ldr	r2, [pc, #492]	; (8004fe4 <HAL_DMA_IRQHandler+0xcd4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7a      	ldr	r2, [pc, #488]	; (8004fe8 <HAL_DMA_IRQHandler+0xcd8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a78      	ldr	r2, [pc, #480]	; (8004fec <HAL_DMA_IRQHandler+0xcdc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a77      	ldr	r2, [pc, #476]	; (8004ff0 <HAL_DMA_IRQHandler+0xce0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xb12>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a75      	ldr	r2, [pc, #468]	; (8004ff4 <HAL_DMA_IRQHandler+0xce4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <HAL_DMA_IRQHandler+0xb24>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0208 	bic.w	r2, r2, #8
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e007      	b.n	8004e44 <HAL_DMA_IRQHandler+0xb34>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0204 	bic.w	r2, r2, #4
 8004e42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8165 	beq.w	8005118 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e56:	e15f      	b.n	8005118 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2202      	movs	r2, #2
 8004e62:	409a      	lsls	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80c5 	beq.w	8004ff8 <HAL_DMA_IRQHandler+0xce8>
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80bf 	beq.w	8004ff8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2202      	movs	r2, #2
 8004e84:	409a      	lsls	r2, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d018      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 813a 	beq.w	800511c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	e134      	b.n	800511c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8130 	beq.w	800511c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec4:	e12a      	b.n	800511c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d168      	bne.n	8004fa2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a38      	ldr	r2, [pc, #224]	; (8004fb8 <HAL_DMA_IRQHandler+0xca8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d04a      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a37      	ldr	r2, [pc, #220]	; (8004fbc <HAL_DMA_IRQHandler+0xcac>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d045      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <HAL_DMA_IRQHandler+0xcb0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d040      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <HAL_DMA_IRQHandler+0xcb4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d03b      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <HAL_DMA_IRQHandler+0xcb8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d036      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <HAL_DMA_IRQHandler+0xcbc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d031      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <HAL_DMA_IRQHandler+0xcc0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02c      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <HAL_DMA_IRQHandler+0xcc4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d027      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <HAL_DMA_IRQHandler+0xcc8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d022      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <HAL_DMA_IRQHandler+0xccc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01d      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <HAL_DMA_IRQHandler+0xcd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d018      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <HAL_DMA_IRQHandler+0xcd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_DMA_IRQHandler+0xcd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a25      	ldr	r2, [pc, #148]	; (8004fec <HAL_DMA_IRQHandler+0xcdc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <HAL_DMA_IRQHandler+0xce0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_DMA_IRQHandler+0xc60>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <HAL_DMA_IRQHandler+0xce4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d108      	bne.n	8004f82 <HAL_DMA_IRQHandler+0xc72>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0214 	bic.w	r2, r2, #20
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e007      	b.n	8004f92 <HAL_DMA_IRQHandler+0xc82>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 020a 	bic.w	r2, r2, #10
 8004f90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80b8 	beq.w	800511c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb4:	e0b2      	b.n	800511c <HAL_DMA_IRQHandler+0xe0c>
 8004fb6:	bf00      	nop
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2208      	movs	r2, #8
 8005002:	409a      	lsls	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8088 	beq.w	800511e <HAL_DMA_IRQHandler+0xe0e>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8082 	beq.w	800511e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a41      	ldr	r2, [pc, #260]	; (8005124 <HAL_DMA_IRQHandler+0xe14>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d04a      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <HAL_DMA_IRQHandler+0xe18>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d045      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3e      	ldr	r2, [pc, #248]	; (800512c <HAL_DMA_IRQHandler+0xe1c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d040      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <HAL_DMA_IRQHandler+0xe20>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d03b      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <HAL_DMA_IRQHandler+0xe24>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d036      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a39      	ldr	r2, [pc, #228]	; (8005138 <HAL_DMA_IRQHandler+0xe28>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d031      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a38      	ldr	r2, [pc, #224]	; (800513c <HAL_DMA_IRQHandler+0xe2c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d02c      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a36      	ldr	r2, [pc, #216]	; (8005140 <HAL_DMA_IRQHandler+0xe30>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d027      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a35      	ldr	r2, [pc, #212]	; (8005144 <HAL_DMA_IRQHandler+0xe34>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a33      	ldr	r2, [pc, #204]	; (8005148 <HAL_DMA_IRQHandler+0xe38>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01d      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a32      	ldr	r2, [pc, #200]	; (800514c <HAL_DMA_IRQHandler+0xe3c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d018      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a30      	ldr	r2, [pc, #192]	; (8005150 <HAL_DMA_IRQHandler+0xe40>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2f      	ldr	r2, [pc, #188]	; (8005154 <HAL_DMA_IRQHandler+0xe44>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2d      	ldr	r2, [pc, #180]	; (8005158 <HAL_DMA_IRQHandler+0xe48>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2c      	ldr	r2, [pc, #176]	; (800515c <HAL_DMA_IRQHandler+0xe4c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_DMA_IRQHandler+0xdaa>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <HAL_DMA_IRQHandler+0xe50>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <HAL_DMA_IRQHandler+0xdbc>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 021c 	bic.w	r2, r2, #28
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e007      	b.n	80050dc <HAL_DMA_IRQHandler+0xdcc>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 020e 	bic.w	r2, r2, #14
 80050da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	2201      	movs	r2, #1
 80050e6:	409a      	lsls	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
 8005112:	e004      	b.n	800511e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800511c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800511e:	3728      	adds	r7, #40	; 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40020010 	.word	0x40020010
 8005128:	40020028 	.word	0x40020028
 800512c:	40020040 	.word	0x40020040
 8005130:	40020058 	.word	0x40020058
 8005134:	40020070 	.word	0x40020070
 8005138:	40020088 	.word	0x40020088
 800513c:	400200a0 	.word	0x400200a0
 8005140:	400200b8 	.word	0x400200b8
 8005144:	40020410 	.word	0x40020410
 8005148:	40020428 	.word	0x40020428
 800514c:	40020440 	.word	0x40020440
 8005150:	40020458 	.word	0x40020458
 8005154:	40020470 	.word	0x40020470
 8005158:	40020488 	.word	0x40020488
 800515c:	400204a0 	.word	0x400204a0
 8005160:	400204b8 	.word	0x400204b8

08005164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a84      	ldr	r2, [pc, #528]	; (8005394 <DMA_SetConfig+0x230>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d072      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a82      	ldr	r2, [pc, #520]	; (8005398 <DMA_SetConfig+0x234>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d06d      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a81      	ldr	r2, [pc, #516]	; (800539c <DMA_SetConfig+0x238>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d068      	beq.n	800526e <DMA_SetConfig+0x10a>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a7f      	ldr	r2, [pc, #508]	; (80053a0 <DMA_SetConfig+0x23c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d063      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a7e      	ldr	r2, [pc, #504]	; (80053a4 <DMA_SetConfig+0x240>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d05e      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a7c      	ldr	r2, [pc, #496]	; (80053a8 <DMA_SetConfig+0x244>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d059      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7b      	ldr	r2, [pc, #492]	; (80053ac <DMA_SetConfig+0x248>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d054      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a79      	ldr	r2, [pc, #484]	; (80053b0 <DMA_SetConfig+0x24c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d04f      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a78      	ldr	r2, [pc, #480]	; (80053b4 <DMA_SetConfig+0x250>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04a      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a76      	ldr	r2, [pc, #472]	; (80053b8 <DMA_SetConfig+0x254>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d045      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a75      	ldr	r2, [pc, #468]	; (80053bc <DMA_SetConfig+0x258>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d040      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a73      	ldr	r2, [pc, #460]	; (80053c0 <DMA_SetConfig+0x25c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d03b      	beq.n	800526e <DMA_SetConfig+0x10a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a72      	ldr	r2, [pc, #456]	; (80053c4 <DMA_SetConfig+0x260>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d036      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a70      	ldr	r2, [pc, #448]	; (80053c8 <DMA_SetConfig+0x264>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <DMA_SetConfig+0x10a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6f      	ldr	r2, [pc, #444]	; (80053cc <DMA_SetConfig+0x268>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d02c      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a6d      	ldr	r2, [pc, #436]	; (80053d0 <DMA_SetConfig+0x26c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <DMA_SetConfig+0x10a>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a6c      	ldr	r2, [pc, #432]	; (80053d4 <DMA_SetConfig+0x270>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6a      	ldr	r2, [pc, #424]	; (80053d8 <DMA_SetConfig+0x274>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a69      	ldr	r2, [pc, #420]	; (80053dc <DMA_SetConfig+0x278>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a67      	ldr	r2, [pc, #412]	; (80053e0 <DMA_SetConfig+0x27c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a66      	ldr	r2, [pc, #408]	; (80053e4 <DMA_SetConfig+0x280>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a64      	ldr	r2, [pc, #400]	; (80053e8 <DMA_SetConfig+0x284>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a63      	ldr	r2, [pc, #396]	; (80053ec <DMA_SetConfig+0x288>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a61      	ldr	r2, [pc, #388]	; (80053f0 <DMA_SetConfig+0x28c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <DMA_SetConfig+0x10e>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <DMA_SetConfig+0x110>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005280:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005292:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3e      	ldr	r2, [pc, #248]	; (8005394 <DMA_SetConfig+0x230>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d04a      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a3d      	ldr	r2, [pc, #244]	; (8005398 <DMA_SetConfig+0x234>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d045      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3b      	ldr	r2, [pc, #236]	; (800539c <DMA_SetConfig+0x238>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d040      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a3a      	ldr	r2, [pc, #232]	; (80053a0 <DMA_SetConfig+0x23c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d03b      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <DMA_SetConfig+0x240>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d036      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a37      	ldr	r2, [pc, #220]	; (80053a8 <DMA_SetConfig+0x244>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d031      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a35      	ldr	r2, [pc, #212]	; (80053ac <DMA_SetConfig+0x248>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02c      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <DMA_SetConfig+0x24c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d027      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <DMA_SetConfig+0x250>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d022      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a31      	ldr	r2, [pc, #196]	; (80053b8 <DMA_SetConfig+0x254>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01d      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <DMA_SetConfig+0x258>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2e      	ldr	r2, [pc, #184]	; (80053c0 <DMA_SetConfig+0x25c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <DMA_SetConfig+0x260>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <DMA_SetConfig+0x264>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <DMA_SetConfig+0x268>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <DMA_SetConfig+0x1d0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <DMA_SetConfig+0x26c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d101      	bne.n	8005338 <DMA_SetConfig+0x1d4>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <DMA_SetConfig+0x1d6>
 8005338:	2300      	movs	r3, #0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d05a      	beq.n	80053f4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	223f      	movs	r2, #63	; 0x3f
 8005348:	409a      	lsls	r2, r3
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800535c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d108      	bne.n	8005380 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800537e:	e087      	b.n	8005490 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]
}
 8005390:	e07e      	b.n	8005490 <DMA_SetConfig+0x32c>
 8005392:	bf00      	nop
 8005394:	40020010 	.word	0x40020010
 8005398:	40020028 	.word	0x40020028
 800539c:	40020040 	.word	0x40020040
 80053a0:	40020058 	.word	0x40020058
 80053a4:	40020070 	.word	0x40020070
 80053a8:	40020088 	.word	0x40020088
 80053ac:	400200a0 	.word	0x400200a0
 80053b0:	400200b8 	.word	0x400200b8
 80053b4:	40020410 	.word	0x40020410
 80053b8:	40020428 	.word	0x40020428
 80053bc:	40020440 	.word	0x40020440
 80053c0:	40020458 	.word	0x40020458
 80053c4:	40020470 	.word	0x40020470
 80053c8:	40020488 	.word	0x40020488
 80053cc:	400204a0 	.word	0x400204a0
 80053d0:	400204b8 	.word	0x400204b8
 80053d4:	58025408 	.word	0x58025408
 80053d8:	5802541c 	.word	0x5802541c
 80053dc:	58025430 	.word	0x58025430
 80053e0:	58025444 	.word	0x58025444
 80053e4:	58025458 	.word	0x58025458
 80053e8:	5802546c 	.word	0x5802546c
 80053ec:	58025480 	.word	0x58025480
 80053f0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <DMA_SetConfig+0x338>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <DMA_SetConfig+0x33c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d01d      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <DMA_SetConfig+0x340>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <DMA_SetConfig+0x344>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <DMA_SetConfig+0x348>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <DMA_SetConfig+0x34c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <DMA_SetConfig+0x350>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <DMA_SetConfig+0x2e0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <DMA_SetConfig+0x354>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <DMA_SetConfig+0x2e4>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <DMA_SetConfig+0x2e6>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2201      	movs	r2, #1
 8005458:	409a      	lsls	r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	d108      	bne.n	8005480 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	60da      	str	r2, [r3, #12]
}
 800547e:	e007      	b.n	8005490 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	58025408 	.word	0x58025408
 80054a0:	5802541c 	.word	0x5802541c
 80054a4:	58025430 	.word	0x58025430
 80054a8:	58025444 	.word	0x58025444
 80054ac:	58025458 	.word	0x58025458
 80054b0:	5802546c 	.word	0x5802546c
 80054b4:	58025480 	.word	0x58025480
 80054b8:	58025494 	.word	0x58025494

080054bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a42      	ldr	r2, [pc, #264]	; (80055d4 <DMA_CalcBaseAndBitshift+0x118>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04a      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a41      	ldr	r2, [pc, #260]	; (80055d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d045      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a3f      	ldr	r2, [pc, #252]	; (80055dc <DMA_CalcBaseAndBitshift+0x120>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d040      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a3e      	ldr	r2, [pc, #248]	; (80055e0 <DMA_CalcBaseAndBitshift+0x124>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d03b      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a3c      	ldr	r2, [pc, #240]	; (80055e4 <DMA_CalcBaseAndBitshift+0x128>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d036      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3b      	ldr	r2, [pc, #236]	; (80055e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d031      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a39      	ldr	r2, [pc, #228]	; (80055ec <DMA_CalcBaseAndBitshift+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02c      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a38      	ldr	r2, [pc, #224]	; (80055f0 <DMA_CalcBaseAndBitshift+0x134>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d027      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a36      	ldr	r2, [pc, #216]	; (80055f4 <DMA_CalcBaseAndBitshift+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d022      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a35      	ldr	r2, [pc, #212]	; (80055f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d01d      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a33      	ldr	r2, [pc, #204]	; (80055fc <DMA_CalcBaseAndBitshift+0x140>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a32      	ldr	r2, [pc, #200]	; (8005600 <DMA_CalcBaseAndBitshift+0x144>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a30      	ldr	r2, [pc, #192]	; (8005604 <DMA_CalcBaseAndBitshift+0x148>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <DMA_CalcBaseAndBitshift+0x14c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2d      	ldr	r2, [pc, #180]	; (800560c <DMA_CalcBaseAndBitshift+0x150>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <DMA_CalcBaseAndBitshift+0xa8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <DMA_CalcBaseAndBitshift+0x154>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d101      	bne.n	8005568 <DMA_CalcBaseAndBitshift+0xac>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <DMA_CalcBaseAndBitshift+0xae>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d024      	beq.n	80055b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	3b10      	subs	r3, #16
 8005576:	4a27      	ldr	r2, [pc, #156]	; (8005614 <DMA_CalcBaseAndBitshift+0x158>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	4a24      	ldr	r2, [pc, #144]	; (8005618 <DMA_CalcBaseAndBitshift+0x15c>)
 8005588:	5cd3      	ldrb	r3, [r2, r3]
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b03      	cmp	r3, #3
 8005594:	d908      	bls.n	80055a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	4b1f      	ldr	r3, [pc, #124]	; (800561c <DMA_CalcBaseAndBitshift+0x160>)
 800559e:	4013      	ands	r3, r2
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	659a      	str	r2, [r3, #88]	; 0x58
 80055a6:	e00d      	b.n	80055c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <DMA_CalcBaseAndBitshift+0x160>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6593      	str	r3, [r2, #88]	; 0x58
 80055b6:	e005      	b.n	80055c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40020010 	.word	0x40020010
 80055d8:	40020028 	.word	0x40020028
 80055dc:	40020040 	.word	0x40020040
 80055e0:	40020058 	.word	0x40020058
 80055e4:	40020070 	.word	0x40020070
 80055e8:	40020088 	.word	0x40020088
 80055ec:	400200a0 	.word	0x400200a0
 80055f0:	400200b8 	.word	0x400200b8
 80055f4:	40020410 	.word	0x40020410
 80055f8:	40020428 	.word	0x40020428
 80055fc:	40020440 	.word	0x40020440
 8005600:	40020458 	.word	0x40020458
 8005604:	40020470 	.word	0x40020470
 8005608:	40020488 	.word	0x40020488
 800560c:	400204a0 	.word	0x400204a0
 8005610:	400204b8 	.word	0x400204b8
 8005614:	aaaaaaab 	.word	0xaaaaaaab
 8005618:	0800a564 	.word	0x0800a564
 800561c:	fffffc00 	.word	0xfffffc00

08005620 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d120      	bne.n	8005676 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	2b03      	cmp	r3, #3
 800563a:	d858      	bhi.n	80056ee <DMA_CheckFifoParam+0xce>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <DMA_CheckFifoParam+0x24>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005655 	.word	0x08005655
 8005648:	08005667 	.word	0x08005667
 800564c:	08005655 	.word	0x08005655
 8005650:	080056ef 	.word	0x080056ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d048      	beq.n	80056f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005664:	e045      	b.n	80056f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800566e:	d142      	bne.n	80056f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005674:	e03f      	b.n	80056f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567e:	d123      	bne.n	80056c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	2b03      	cmp	r3, #3
 8005686:	d838      	bhi.n	80056fa <DMA_CheckFifoParam+0xda>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <DMA_CheckFifoParam+0x70>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056a7 	.word	0x080056a7
 8005698:	080056a1 	.word	0x080056a1
 800569c:	080056b9 	.word	0x080056b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
        break;
 80056a4:	e030      	b.n	8005708 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d025      	beq.n	80056fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056b6:	e022      	b.n	80056fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056c0:	d11f      	bne.n	8005702 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056c6:	e01c      	b.n	8005702 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d902      	bls.n	80056d6 <DMA_CheckFifoParam+0xb6>
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d003      	beq.n	80056dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056d4:	e018      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
        break;
 80056da:	e015      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
    break;
 80056ec:	e00b      	b.n	8005706 <DMA_CheckFifoParam+0xe6>
        break;
 80056ee:	bf00      	nop
 80056f0:	e00a      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e008      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        break;
 80056f6:	bf00      	nop
 80056f8:	e006      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
    break;
 8005706:	bf00      	nop
    }
  }

  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a36      	ldr	r2, [pc, #216]	; (8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a35      	ldr	r2, [pc, #212]	; (8005814 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a33      	ldr	r2, [pc, #204]	; (8005818 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a32      	ldr	r2, [pc, #200]	; (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a30      	ldr	r2, [pc, #192]	; (8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2d      	ldr	r2, [pc, #180]	; (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	3b08      	subs	r3, #8
 8005788:	4a28      	ldr	r2, [pc, #160]	; (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4b26      	ldr	r3, [pc, #152]	; (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a24      	ldr	r2, [pc, #144]	; (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057b4:	e024      	b.n	8005800 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3b10      	subs	r3, #16
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d806      	bhi.n	80057de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d902      	bls.n	80057de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3308      	adds	r3, #8
 80057dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4b18      	ldr	r3, [pc, #96]	; (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	461a      	mov	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80057f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	2201      	movs	r2, #1
 80057fa:	409a      	lsls	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	58025408 	.word	0x58025408
 8005810:	5802541c 	.word	0x5802541c
 8005814:	58025430 	.word	0x58025430
 8005818:	58025444 	.word	0x58025444
 800581c:	58025458 	.word	0x58025458
 8005820:	5802546c 	.word	0x5802546c
 8005824:	58025480 	.word	0x58025480
 8005828:	58025494 	.word	0x58025494
 800582c:	cccccccd 	.word	0xcccccccd
 8005830:	16009600 	.word	0x16009600
 8005834:	58025880 	.word	0x58025880
 8005838:	aaaaaaab 	.word	0xaaaaaaab
 800583c:	400204b8 	.word	0x400204b8
 8005840:	4002040f 	.word	0x4002040f
 8005844:	10008200 	.word	0x10008200
 8005848:	40020880 	.word	0x40020880

0800584c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d04a      	beq.n	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d847      	bhi.n	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a25      	ldr	r2, [pc, #148]	; (8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d022      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a24      	ldr	r2, [pc, #144]	; (8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d01d      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a22      	ldr	r2, [pc, #136]	; (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d018      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a21      	ldr	r2, [pc, #132]	; (8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d009      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	461a      	mov	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058d4:	671a      	str	r2, [r3, #112]	; 0x70
 80058d6:	e009      	b.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80058ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	2201      	movs	r2, #1
 80058f2:	409a      	lsls	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	58025408 	.word	0x58025408
 8005908:	5802541c 	.word	0x5802541c
 800590c:	58025430 	.word	0x58025430
 8005910:	58025444 	.word	0x58025444
 8005914:	58025458 	.word	0x58025458
 8005918:	5802546c 	.word	0x5802546c
 800591c:	58025480 	.word	0x58025480
 8005920:	58025494 	.word	0x58025494
 8005924:	1600963f 	.word	0x1600963f
 8005928:	58025940 	.word	0x58025940
 800592c:	1000823f 	.word	0x1000823f
 8005930:	40020940 	.word	0x40020940

08005934 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	460b      	mov	r3, r1
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e00a      	b.n	8005966 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	605a      	str	r2, [r3, #4]
      break;
 800595c:	e002      	b.n	8005964 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	75fb      	strb	r3, [r7, #23]
      break;
 8005962:	bf00      	nop
  }

  return status;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e003      	b.n	800598e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800598c:	2300      	movs	r3, #0
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059aa:	4b89      	ldr	r3, [pc, #548]	; (8005bd0 <HAL_GPIO_Init+0x234>)
 80059ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059ae:	e194      	b.n	8005cda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	2101      	movs	r1, #1
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8186 	beq.w	8005cd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d00b      	beq.n	80059e8 <HAL_GPIO_Init+0x4c>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d007      	beq.n	80059e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059dc:	2b11      	cmp	r3, #17
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b12      	cmp	r3, #18
 80059e6:	d130      	bne.n	8005a4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	2203      	movs	r2, #3
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a1e:	2201      	movs	r2, #1
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 0201 	and.w	r2, r3, #1
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	2203      	movs	r2, #3
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_Init+0xee>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b12      	cmp	r3, #18
 8005a88:	d123      	bne.n	8005ad2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	08da      	lsrs	r2, r3, #3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3208      	adds	r2, #8
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	08da      	lsrs	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3208      	adds	r2, #8
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	2203      	movs	r2, #3
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f003 0203 	and.w	r2, r3, #3
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80e0 	beq.w	8005cd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b14:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <HAL_GPIO_Init+0x238>)
 8005b16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b1a:	4a2e      	ldr	r2, [pc, #184]	; (8005bd4 <HAL_GPIO_Init+0x238>)
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <HAL_GPIO_Init+0x238>)
 8005b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b32:	4a29      	ldr	r2, [pc, #164]	; (8005bd8 <HAL_GPIO_Init+0x23c>)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	3302      	adds	r3, #2
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	220f      	movs	r2, #15
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <HAL_GPIO_Init+0x240>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d052      	beq.n	8005c04 <HAL_GPIO_Init+0x268>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <HAL_GPIO_Init+0x244>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d031      	beq.n	8005bca <HAL_GPIO_Init+0x22e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <HAL_GPIO_Init+0x248>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02b      	beq.n	8005bc6 <HAL_GPIO_Init+0x22a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1d      	ldr	r2, [pc, #116]	; (8005be8 <HAL_GPIO_Init+0x24c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d025      	beq.n	8005bc2 <HAL_GPIO_Init+0x226>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <HAL_GPIO_Init+0x250>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01f      	beq.n	8005bbe <HAL_GPIO_Init+0x222>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_GPIO_Init+0x254>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d019      	beq.n	8005bba <HAL_GPIO_Init+0x21e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <HAL_GPIO_Init+0x258>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_GPIO_Init+0x21a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_GPIO_Init+0x25c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00d      	beq.n	8005bb2 <HAL_GPIO_Init+0x216>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <HAL_GPIO_Init+0x260>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <HAL_GPIO_Init+0x212>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <HAL_GPIO_Init+0x264>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_GPIO_Init+0x20e>
 8005ba6:	2309      	movs	r3, #9
 8005ba8:	e02d      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005baa:	230a      	movs	r3, #10
 8005bac:	e02b      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	e029      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bb2:	2307      	movs	r3, #7
 8005bb4:	e027      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bb6:	2306      	movs	r3, #6
 8005bb8:	e025      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bba:	2305      	movs	r3, #5
 8005bbc:	e023      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	e021      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e01f      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e01d      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e01b      	b.n	8005c06 <HAL_GPIO_Init+0x26a>
 8005bce:	bf00      	nop
 8005bd0:	58000080 	.word	0x58000080
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	58000400 	.word	0x58000400
 8005bdc:	58020000 	.word	0x58020000
 8005be0:	58020400 	.word	0x58020400
 8005be4:	58020800 	.word	0x58020800
 8005be8:	58020c00 	.word	0x58020c00
 8005bec:	58021000 	.word	0x58021000
 8005bf0:	58021400 	.word	0x58021400
 8005bf4:	58021800 	.word	0x58021800
 8005bf8:	58021c00 	.word	0x58021c00
 8005bfc:	58022000 	.word	0x58022000
 8005c00:	58022400 	.word	0x58022400
 8005c04:	2300      	movs	r3, #0
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	f002 0203 	and.w	r2, r2, #3
 8005c0c:	0092      	lsls	r2, r2, #2
 8005c0e:	4093      	lsls	r3, r2
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c16:	4938      	ldr	r1, [pc, #224]	; (8005cf8 <HAL_GPIO_Init+0x35c>)
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4013      	ands	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f47f ae63 	bne.w	80059b0 <HAL_GPIO_Init+0x14>
  }
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3724      	adds	r7, #36	; 0x24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	58000400 	.word	0x58000400

08005cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d0c:	787b      	ldrb	r3, [r7, #1]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d12:	887a      	ldrh	r2, [r7, #2]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d18:	e003      	b.n	8005d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d1a:	887b      	ldrh	r3, [r7, #2]
 8005d1c:	041a      	lsls	r2, r3, #16
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	619a      	str	r2, [r3, #24]
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d40:	887a      	ldrh	r2, [r7, #2]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4013      	ands	r3, r2
 8005d46:	041a      	lsls	r2, r3, #16
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	43d9      	mvns	r1, r3
 8005d4c:	887b      	ldrh	r3, [r7, #2]
 8005d4e:	400b      	ands	r3, r1
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	619a      	str	r2, [r3, #24]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	4603      	mov	r3, r0
 8005d6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fb fe17 	bl	80019bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d00a      	beq.n	8005dc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dac:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d001      	beq.n	8005dbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e01f      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e01d      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f023 0207 	bic.w	r2, r3, #7
 8005dca:	490f      	ldr	r1, [pc, #60]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dd2:	f7fc fca7 	bl	8002724 <HAL_GetTick>
 8005dd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dd8:	e009      	b.n	8005dee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dda:	f7fc fca3 	bl	8002724 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de8:	d901      	bls.n	8005dee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e007      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfa:	d1ee      	bne.n	8005dda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	58024800 	.word	0x58024800

08005e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08c      	sub	sp, #48	; 0x30
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e3ff      	b.n	800661e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8087 	beq.w	8005f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e2c:	4b99      	ldr	r3, [pc, #612]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e36:	4b97      	ldr	r3, [pc, #604]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d007      	beq.n	8005e52 <HAL_RCC_OscConfig+0x46>
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	2b18      	cmp	r3, #24
 8005e46:	d110      	bne.n	8005e6a <HAL_RCC_OscConfig+0x5e>
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d10b      	bne.n	8005e6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e52:	4b90      	ldr	r3, [pc, #576]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d06c      	beq.n	8005f38 <HAL_RCC_OscConfig+0x12c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d168      	bne.n	8005f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e3d9      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e72:	d106      	bne.n	8005e82 <HAL_RCC_OscConfig+0x76>
 8005e74:	4b87      	ldr	r3, [pc, #540]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a86      	ldr	r2, [pc, #536]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	e02e      	b.n	8005ee0 <HAL_RCC_OscConfig+0xd4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x98>
 8005e8a:	4b82      	ldr	r3, [pc, #520]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a81      	ldr	r2, [pc, #516]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b7f      	ldr	r3, [pc, #508]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7e      	ldr	r2, [pc, #504]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xd4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xbc>
 8005eae:	4b79      	ldr	r3, [pc, #484]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a78      	ldr	r2, [pc, #480]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b76      	ldr	r3, [pc, #472]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a75      	ldr	r2, [pc, #468]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xd4>
 8005ec8:	4b72      	ldr	r3, [pc, #456]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a71      	ldr	r2, [pc, #452]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b6f      	ldr	r3, [pc, #444]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6e      	ldr	r2, [pc, #440]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fc fc1c 	bl	8002724 <HAL_GetTick>
 8005eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fc fc18 	bl	8002724 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e38d      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f02:	4b64      	ldr	r3, [pc, #400]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xe4>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fc fc08 	bl	8002724 <HAL_GetTick>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fc fc04 	bl	8002724 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e379      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f2a:	4b5a      	ldr	r3, [pc, #360]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x10c>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80ae 	beq.w	80060a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f48:	4b52      	ldr	r3, [pc, #328]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f52:	4b50      	ldr	r3, [pc, #320]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_RCC_OscConfig+0x162>
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b18      	cmp	r3, #24
 8005f62:	d13a      	bne.n	8005fda <HAL_RCC_OscConfig+0x1ce>
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d135      	bne.n	8005fda <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6e:	4b49      	ldr	r3, [pc, #292]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCC_OscConfig+0x17a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e34b      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f86:	f7fc fc1d 	bl	80027c4 <HAL_GetREVID>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d817      	bhi.n	8005fc4 <HAL_RCC_OscConfig+0x1b8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d108      	bne.n	8005fae <HAL_RCC_OscConfig+0x1a2>
 8005f9c:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fa4:	4a3b      	ldr	r2, [pc, #236]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005faa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fac:	e07a      	b.n	80060a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fae:	4b39      	ldr	r3, [pc, #228]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	031b      	lsls	r3, r3, #12
 8005fbc:	4935      	ldr	r1, [pc, #212]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fc2:	e06f      	b.n	80060a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc4:	4b33      	ldr	r3, [pc, #204]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	4930      	ldr	r1, [pc, #192]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fd8:	e064      	b.n	80060a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d045      	beq.n	800606e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fe2:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 0219 	bic.w	r2, r3, #25
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4929      	ldr	r1, [pc, #164]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fc fb96 	bl	8002724 <HAL_GetTick>
 8005ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ffc:	f7fc fb92 	bl	8002724 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e307      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800600e:	4b21      	ldr	r3, [pc, #132]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601a:	f7fc fbd3 	bl	80027c4 <HAL_GetREVID>
 800601e:	4603      	mov	r3, r0
 8006020:	f241 0203 	movw	r2, #4099	; 0x1003
 8006024:	4293      	cmp	r3, r2
 8006026:	d817      	bhi.n	8006058 <HAL_RCC_OscConfig+0x24c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d108      	bne.n	8006042 <HAL_RCC_OscConfig+0x236>
 8006030:	4b18      	ldr	r3, [pc, #96]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006038:	4a16      	ldr	r2, [pc, #88]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 800603a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800603e:	6053      	str	r3, [r2, #4]
 8006040:	e030      	b.n	80060a4 <HAL_RCC_OscConfig+0x298>
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	031b      	lsls	r3, r3, #12
 8006050:	4910      	ldr	r1, [pc, #64]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006052:	4313      	orrs	r3, r2
 8006054:	604b      	str	r3, [r1, #4]
 8006056:	e025      	b.n	80060a4 <HAL_RCC_OscConfig+0x298>
 8006058:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	490b      	ldr	r1, [pc, #44]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
 800606c:	e01a      	b.n	80060a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <HAL_RCC_OscConfig+0x288>)
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fc fb53 	bl	8002724 <HAL_GetTick>
 800607e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006080:	e00a      	b.n	8006098 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006082:	f7fc fb4f 	bl	8002724 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d903      	bls.n	8006098 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e2c4      	b.n	800661e <HAL_RCC_OscConfig+0x812>
 8006094:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006098:	4ba4      	ldr	r3, [pc, #656]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1ee      	bne.n	8006082 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80a9 	beq.w	8006204 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b2:	4b9e      	ldr	r3, [pc, #632]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060bc:	4b9b      	ldr	r3, [pc, #620]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d007      	beq.n	80060d8 <HAL_RCC_OscConfig+0x2cc>
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b18      	cmp	r3, #24
 80060cc:	d13a      	bne.n	8006144 <HAL_RCC_OscConfig+0x338>
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d135      	bne.n	8006144 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060d8:	4b94      	ldr	r3, [pc, #592]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_OscConfig+0x2e4>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e296      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060f0:	f7fc fb68 	bl	80027c4 <HAL_GetREVID>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d817      	bhi.n	800612e <HAL_RCC_OscConfig+0x322>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	2b20      	cmp	r3, #32
 8006104:	d108      	bne.n	8006118 <HAL_RCC_OscConfig+0x30c>
 8006106:	4b89      	ldr	r3, [pc, #548]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800610e:	4a87      	ldr	r2, [pc, #540]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006114:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006116:	e075      	b.n	8006204 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006118:	4b84      	ldr	r3, [pc, #528]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	069b      	lsls	r3, r3, #26
 8006126:	4981      	ldr	r1, [pc, #516]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800612c:	e06a      	b.n	8006204 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800612e:	4b7f      	ldr	r3, [pc, #508]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	061b      	lsls	r3, r3, #24
 800613c:	497b      	ldr	r1, [pc, #492]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800613e:	4313      	orrs	r3, r2
 8006140:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006142:	e05f      	b.n	8006204 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d042      	beq.n	80061d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800614c:	4b77      	ldr	r3, [pc, #476]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a76      	ldr	r2, [pc, #472]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fc fae4 	bl	8002724 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006160:	f7fc fae0 	bl	8002724 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e255      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006172:	4b6e      	ldr	r3, [pc, #440]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800617e:	f7fc fb21 	bl	80027c4 <HAL_GetREVID>
 8006182:	4603      	mov	r3, r0
 8006184:	f241 0203 	movw	r2, #4099	; 0x1003
 8006188:	4293      	cmp	r3, r2
 800618a:	d817      	bhi.n	80061bc <HAL_RCC_OscConfig+0x3b0>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	2b20      	cmp	r3, #32
 8006192:	d108      	bne.n	80061a6 <HAL_RCC_OscConfig+0x39a>
 8006194:	4b65      	ldr	r3, [pc, #404]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800619c:	4a63      	ldr	r2, [pc, #396]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800619e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a2:	6053      	str	r3, [r2, #4]
 80061a4:	e02e      	b.n	8006204 <HAL_RCC_OscConfig+0x3f8>
 80061a6:	4b61      	ldr	r3, [pc, #388]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	069b      	lsls	r3, r3, #26
 80061b4:	495d      	ldr	r1, [pc, #372]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	604b      	str	r3, [r1, #4]
 80061ba:	e023      	b.n	8006204 <HAL_RCC_OscConfig+0x3f8>
 80061bc:	4b5b      	ldr	r3, [pc, #364]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	4958      	ldr	r1, [pc, #352]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60cb      	str	r3, [r1, #12]
 80061d0:	e018      	b.n	8006204 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061d2:	4b56      	ldr	r3, [pc, #344]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a55      	ldr	r2, [pc, #340]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061de:	f7fc faa1 	bl	8002724 <HAL_GetTick>
 80061e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061e4:	e008      	b.n	80061f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061e6:	f7fc fa9d 	bl	8002724 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e212      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061f8:	4b4c      	ldr	r3, [pc, #304]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f0      	bne.n	80061e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d036      	beq.n	800627e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d019      	beq.n	800624c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006218:	4b44      	ldr	r3, [pc, #272]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800621a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621c:	4a43      	ldr	r2, [pc, #268]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fc fa7e 	bl	8002724 <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800622c:	f7fc fa7a 	bl	8002724 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e1ef      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800623e:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x420>
 800624a:	e018      	b.n	800627e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800624c:	4b37      	ldr	r3, [pc, #220]	; (800632c <HAL_RCC_OscConfig+0x520>)
 800624e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006250:	4a36      	ldr	r2, [pc, #216]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006258:	f7fc fa64 	bl	8002724 <HAL_GetTick>
 800625c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006260:	f7fc fa60 	bl	8002724 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e1d5      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f0      	bne.n	8006260 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d036      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d019      	beq.n	80062c6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a25      	ldr	r2, [pc, #148]	; (800632c <HAL_RCC_OscConfig+0x520>)
 8006298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800629c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800629e:	f7fc fa41 	bl	8002724 <HAL_GetTick>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062a6:	f7fc fa3d 	bl	8002724 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e1b2      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062b8:	4b1c      	ldr	r3, [pc, #112]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x49a>
 80062c4:	e018      	b.n	80062f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062c6:	4b19      	ldr	r3, [pc, #100]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80062cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062d2:	f7fc fa27 	bl	8002724 <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062da:	f7fc fa23 	bl	8002724 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e198      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <HAL_RCC_OscConfig+0x520>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f0      	bne.n	80062da <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8085 	beq.w	8006410 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006306:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <HAL_RCC_OscConfig+0x524>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a09      	ldr	r2, [pc, #36]	; (8006330 <HAL_RCC_OscConfig+0x524>)
 800630c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006310:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006312:	f7fc fa07 	bl	8002724 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006318:	e00c      	b.n	8006334 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800631a:	f7fc fa03 	bl	8002724 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b64      	cmp	r3, #100	; 0x64
 8006326:	d905      	bls.n	8006334 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e178      	b.n	800661e <HAL_RCC_OscConfig+0x812>
 800632c:	58024400 	.word	0x58024400
 8006330:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006334:	4b96      	ldr	r3, [pc, #600]	; (8006590 <HAL_RCC_OscConfig+0x784>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ec      	beq.n	800631a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d106      	bne.n	8006356 <HAL_RCC_OscConfig+0x54a>
 8006348:	4b92      	ldr	r3, [pc, #584]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a91      	ldr	r2, [pc, #580]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	e02d      	b.n	80063b2 <HAL_RCC_OscConfig+0x5a6>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10c      	bne.n	8006378 <HAL_RCC_OscConfig+0x56c>
 800635e:	4b8d      	ldr	r3, [pc, #564]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	4a8c      	ldr	r2, [pc, #560]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	6713      	str	r3, [r2, #112]	; 0x70
 800636a:	4b8a      	ldr	r3, [pc, #552]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	4a89      	ldr	r2, [pc, #548]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006370:	f023 0304 	bic.w	r3, r3, #4
 8006374:	6713      	str	r3, [r2, #112]	; 0x70
 8006376:	e01c      	b.n	80063b2 <HAL_RCC_OscConfig+0x5a6>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b05      	cmp	r3, #5
 800637e:	d10c      	bne.n	800639a <HAL_RCC_OscConfig+0x58e>
 8006380:	4b84      	ldr	r3, [pc, #528]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006384:	4a83      	ldr	r2, [pc, #524]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006386:	f043 0304 	orr.w	r3, r3, #4
 800638a:	6713      	str	r3, [r2, #112]	; 0x70
 800638c:	4b81      	ldr	r3, [pc, #516]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	4a80      	ldr	r2, [pc, #512]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	6713      	str	r3, [r2, #112]	; 0x70
 8006398:	e00b      	b.n	80063b2 <HAL_RCC_OscConfig+0x5a6>
 800639a:	4b7e      	ldr	r3, [pc, #504]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	4a7d      	ldr	r2, [pc, #500]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	6713      	str	r3, [r2, #112]	; 0x70
 80063a6:	4b7b      	ldr	r3, [pc, #492]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	4a7a      	ldr	r2, [pc, #488]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d015      	beq.n	80063e6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ba:	f7fc f9b3 	bl	8002724 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fc f9af 	bl	8002724 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e122      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d8:	4b6e      	ldr	r3, [pc, #440]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ee      	beq.n	80063c2 <HAL_RCC_OscConfig+0x5b6>
 80063e4:	e014      	b.n	8006410 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e6:	f7fc f99d 	bl	8002724 <HAL_GetTick>
 80063ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063ec:	e00a      	b.n	8006404 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ee:	f7fc f999 	bl	8002724 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e10c      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006404:	4b63      	ldr	r3, [pc, #396]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ee      	bne.n	80063ee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8101 	beq.w	800661c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800641a:	4b5e      	ldr	r3, [pc, #376]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006422:	2b18      	cmp	r3, #24
 8006424:	f000 80bc 	beq.w	80065a0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b02      	cmp	r3, #2
 800642e:	f040 8095 	bne.w	800655c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006432:	4b58      	ldr	r3, [pc, #352]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a57      	ldr	r2, [pc, #348]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800643c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643e:	f7fc f971 	bl	8002724 <HAL_GetTick>
 8006442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006446:	f7fc f96d 	bl	8002724 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e0e2      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006458:	4b4e      	ldr	r3, [pc, #312]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f0      	bne.n	8006446 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006464:	4b4b      	ldr	r3, [pc, #300]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006468:	4b4b      	ldr	r3, [pc, #300]	; (8006598 <HAL_RCC_OscConfig+0x78c>)
 800646a:	4013      	ands	r3, r2
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006474:	0112      	lsls	r2, r2, #4
 8006476:	430a      	orrs	r2, r1
 8006478:	4946      	ldr	r1, [pc, #280]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800647a:	4313      	orrs	r3, r2
 800647c:	628b      	str	r3, [r1, #40]	; 0x28
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	3b01      	subs	r3, #1
 8006484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	3b01      	subs	r3, #1
 800648e:	025b      	lsls	r3, r3, #9
 8006490:	b29b      	uxth	r3, r3
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	3b01      	subs	r3, #1
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	3b01      	subs	r3, #1
 80064a8:	061b      	lsls	r3, r3, #24
 80064aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064ae:	4939      	ldr	r1, [pc, #228]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80064b4:	4b37      	ldr	r3, [pc, #220]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a36      	ldr	r2, [pc, #216]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064c0:	4b34      	ldr	r3, [pc, #208]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c4:	4b35      	ldr	r3, [pc, #212]	; (800659c <HAL_RCC_OscConfig+0x790>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064cc:	00d2      	lsls	r2, r2, #3
 80064ce:	4931      	ldr	r1, [pc, #196]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064d4:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f023 020c 	bic.w	r2, r3, #12
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	492c      	ldr	r1, [pc, #176]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064e6:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	f023 0202 	bic.w	r2, r3, #2
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	4928      	ldr	r1, [pc, #160]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064f8:	4b26      	ldr	r3, [pc, #152]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	4a25      	ldr	r2, [pc, #148]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 80064fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b23      	ldr	r3, [pc, #140]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a22      	ldr	r2, [pc, #136]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006510:	4b20      	ldr	r3, [pc, #128]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a19      	ldr	r2, [pc, #100]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800652e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fc f8f6 	bl	8002724 <HAL_GetTick>
 8006538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800653c:	f7fc f8f2 	bl	8002724 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e067      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800654e:	4b11      	ldr	r3, [pc, #68]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0x730>
 800655a:	e05f      	b.n	800661c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0c      	ldr	r2, [pc, #48]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fc f8dc 	bl	8002724 <HAL_GetTick>
 800656c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006570:	f7fc f8d8 	bl	8002724 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e04d      	b.n	800661e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006582:	4b04      	ldr	r3, [pc, #16]	; (8006594 <HAL_RCC_OscConfig+0x788>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f0      	bne.n	8006570 <HAL_RCC_OscConfig+0x764>
 800658e:	e045      	b.n	800661c <HAL_RCC_OscConfig+0x810>
 8006590:	58024800 	.word	0x58024800
 8006594:	58024400 	.word	0x58024400
 8006598:	fffffc0c 	.word	0xfffffc0c
 800659c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065a0:	4b21      	ldr	r3, [pc, #132]	; (8006628 <HAL_RCC_OscConfig+0x81c>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065a6:	4b20      	ldr	r3, [pc, #128]	; (8006628 <HAL_RCC_OscConfig+0x81c>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d031      	beq.n	8006618 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f003 0203 	and.w	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d12a      	bne.n	8006618 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d122      	bne.n	8006618 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d11a      	bne.n	8006618 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	0a5b      	lsrs	r3, r3, #9
 80065e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d111      	bne.n	8006618 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d108      	bne.n	8006618 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	0e1b      	lsrs	r3, r3, #24
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006612:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3730      	adds	r7, #48	; 0x30
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400

0800662c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e19c      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006640:	4b8a      	ldr	r3, [pc, #552]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d910      	bls.n	8006670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b87      	ldr	r3, [pc, #540]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 020f 	bic.w	r2, r3, #15
 8006656:	4985      	ldr	r1, [pc, #532]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b83      	ldr	r3, [pc, #524]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e184      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	4b7b      	ldr	r3, [pc, #492]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006688:	429a      	cmp	r2, r3
 800668a:	d908      	bls.n	800669e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800668c:	4b78      	ldr	r3, [pc, #480]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4975      	ldr	r1, [pc, #468]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 800669a:	4313      	orrs	r3, r2
 800669c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	4b70      	ldr	r3, [pc, #448]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d908      	bls.n	80066cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ba:	4b6d      	ldr	r3, [pc, #436]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	496a      	ldr	r1, [pc, #424]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b64      	ldr	r3, [pc, #400]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d908      	bls.n	80066fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066e8:	4b61      	ldr	r3, [pc, #388]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	495e      	ldr	r1, [pc, #376]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	4b59      	ldr	r3, [pc, #356]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006712:	429a      	cmp	r2, r3
 8006714:	d908      	bls.n	8006728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006716:	4b56      	ldr	r3, [pc, #344]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	4953      	ldr	r1, [pc, #332]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	429a      	cmp	r2, r3
 8006742:	d908      	bls.n	8006756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b4a      	ldr	r3, [pc, #296]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f023 020f 	bic.w	r2, r3, #15
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4947      	ldr	r1, [pc, #284]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006752:	4313      	orrs	r3, r2
 8006754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d055      	beq.n	800680e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006762:	4b43      	ldr	r3, [pc, #268]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4940      	ldr	r1, [pc, #256]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006770:	4313      	orrs	r3, r2
 8006772:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800677c:	4b3c      	ldr	r3, [pc, #240]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d121      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0f6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006794:	4b36      	ldr	r3, [pc, #216]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0ea      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ac:	4b30      	ldr	r3, [pc, #192]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0de      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067bc:	4b2c      	ldr	r3, [pc, #176]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0d6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067cc:	4b28      	ldr	r3, [pc, #160]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f023 0207 	bic.w	r2, r3, #7
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4925      	ldr	r1, [pc, #148]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067de:	f7fb ffa1 	bl	8002724 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e6:	f7fb ff9d 	bl	8002724 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0be      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	4b1c      	ldr	r3, [pc, #112]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	429a      	cmp	r2, r3
 800680c:	d1eb      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d010      	beq.n	800683c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b14      	ldr	r3, [pc, #80]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	429a      	cmp	r2, r3
 8006828:	d208      	bcs.n	800683c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682a:	4b11      	ldr	r3, [pc, #68]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	490e      	ldr	r1, [pc, #56]	; (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006838:	4313      	orrs	r3, r2
 800683a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800683c:	4b0b      	ldr	r3, [pc, #44]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d214      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 020f 	bic.w	r2, r3, #15
 8006852:	4906      	ldr	r1, [pc, #24]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <HAL_RCC_ClockConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e086      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
 800686c:	52002000 	.word	0x52002000
 8006870:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	4b3f      	ldr	r3, [pc, #252]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800688c:	429a      	cmp	r2, r3
 800688e:	d208      	bcs.n	80068a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006890:	4b3c      	ldr	r3, [pc, #240]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	4939      	ldr	r1, [pc, #228]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	4b34      	ldr	r3, [pc, #208]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d208      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	492e      	ldr	r1, [pc, #184]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d208      	bcs.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ec:	4b25      	ldr	r3, [pc, #148]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4922      	ldr	r1, [pc, #136]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006916:	429a      	cmp	r2, r3
 8006918:	d208      	bcs.n	800692c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800691a:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	4917      	ldr	r1, [pc, #92]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006928:	4313      	orrs	r3, r2
 800692a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800692c:	f000 f834 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4912      	ldr	r1, [pc, #72]	; (8006988 <HAL_RCC_ClockConfig+0x35c>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800694a:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <HAL_RCC_ClockConfig+0x358>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	4a0d      	ldr	r2, [pc, #52]	; (8006988 <HAL_RCC_ClockConfig+0x35c>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <HAL_RCC_ClockConfig+0x360>)
 8006962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006964:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <HAL_RCC_ClockConfig+0x364>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <HAL_RCC_ClockConfig+0x368>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fb fe8e 	bl	8002690 <HAL_InitTick>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
 8006988:	0800a554 	.word	0x0800a554
 800698c:	2400001c 	.word	0x2400001c
 8006990:	24000018 	.word	0x24000018
 8006994:	24000020 	.word	0x24000020

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800699e:	4bb3      	ldr	r3, [pc, #716]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	f200 8155 	bhi.w	8006c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006c57 	.word	0x08006c57
 80069bc:	08006c57 	.word	0x08006c57
 80069c0:	08006c57 	.word	0x08006c57
 80069c4:	08006c57 	.word	0x08006c57
 80069c8:	08006c57 	.word	0x08006c57
 80069cc:	08006c57 	.word	0x08006c57
 80069d0:	08006c57 	.word	0x08006c57
 80069d4:	08006a3f 	.word	0x08006a3f
 80069d8:	08006c57 	.word	0x08006c57
 80069dc:	08006c57 	.word	0x08006c57
 80069e0:	08006c57 	.word	0x08006c57
 80069e4:	08006c57 	.word	0x08006c57
 80069e8:	08006c57 	.word	0x08006c57
 80069ec:	08006c57 	.word	0x08006c57
 80069f0:	08006c57 	.word	0x08006c57
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006c57 	.word	0x08006c57
 80069fc:	08006c57 	.word	0x08006c57
 8006a00:	08006c57 	.word	0x08006c57
 8006a04:	08006c57 	.word	0x08006c57
 8006a08:	08006c57 	.word	0x08006c57
 8006a0c:	08006c57 	.word	0x08006c57
 8006a10:	08006c57 	.word	0x08006c57
 8006a14:	08006a4b 	.word	0x08006a4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a18:	4b94      	ldr	r3, [pc, #592]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a24:	4b91      	ldr	r3, [pc, #580]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	4a90      	ldr	r2, [pc, #576]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a36:	e111      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a38:	4b8d      	ldr	r3, [pc, #564]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a3a:	61bb      	str	r3, [r7, #24]
    break;
 8006a3c:	e10e      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a40:	61bb      	str	r3, [r7, #24]
    break;
 8006a42:	e10b      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a44:	4b8c      	ldr	r3, [pc, #560]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a46:	61bb      	str	r3, [r7, #24]
    break;
 8006a48:	e108      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a4a:	4b88      	ldr	r3, [pc, #544]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a54:	4b85      	ldr	r3, [pc, #532]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a60:	4b82      	ldr	r3, [pc, #520]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a6a:	4b80      	ldr	r3, [pc, #512]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80e1 	beq.w	8006c50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f000 8083 	beq.w	8006b9c <HAL_RCC_GetSysClockFreq+0x204>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f200 80a1 	bhi.w	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x114>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d056      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006aaa:	e099      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b6f      	ldr	r3, [pc, #444]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02d      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a6b      	ldr	r2, [pc, #428]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	4b62      	ldr	r3, [pc, #392]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b12:	e087      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b56:	e065      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b40      	ldr	r3, [pc, #256]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9a:	e043      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b2f      	ldr	r3, [pc, #188]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bde:	e021      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c24:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2e:	3301      	adds	r3, #1
 8006c30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 3a90 	vmov	r3, s15
 8006c4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c4e:	e005      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61bb      	str	r3, [r7, #24]
    break;
 8006c54:	e002      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c58:	61bb      	str	r3, [r7, #24]
    break;
 8006c5a:	bf00      	nop
  }

  return sysclockfreq;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	; 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	03d09000 	.word	0x03d09000
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	007f2815 	.word	0x007f2815
 8006c7c:	46000000 	.word	0x46000000
 8006c80:	4c742400 	.word	0x4c742400
 8006c84:	4a742400 	.word	0x4a742400
 8006c88:	4afe502a 	.word	0x4afe502a

08006c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c92:	f7ff fe81 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490f      	ldr	r1, [pc, #60]	; (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cba:	5cd3      	ldrb	r3, [r2, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cca:	4a07      	ldr	r2, [pc, #28]	; (8006ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	0800a554 	.word	0x0800a554
 8006ce4:	2400001c 	.word	0x2400001c
 8006ce8:	24000018 	.word	0x24000018

08006cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cf0:	f7ff ffcc 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4904      	ldr	r1, [pc, #16]	; (8006d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	0800a554 	.word	0x0800a554

08006d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d1c:	f7ff ffb6 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4904      	ldr	r1, [pc, #16]	; (8006d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d2e:	5ccb      	ldrb	r3, [r1, r3]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	0800a554 	.word	0x0800a554

08006d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d50:	2300      	movs	r3, #0
 8006d52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d03f      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d68:	d02a      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d6e:	d824      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d74:	d018      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d7a:	d81e      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d84:	d007      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006d86:	e018      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d88:	4bab      	ldr	r3, [pc, #684]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	4aaa      	ldr	r2, [pc, #680]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d94:	e015      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f9cf 	bl	8008140 <RCCEx_PLL2_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006da6:	e00c      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	2102      	movs	r1, #2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fa78 	bl	80082a4 <RCCEx_PLL3_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006db8:	e003      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dc8:	4b9b      	ldr	r3, [pc, #620]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd4:	4998      	ldr	r1, [pc, #608]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8006dda:	e001      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d03d      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d826      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006df4:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006e11 	.word	0x08006e11
 8006e00:	08006e1f 	.word	0x08006e1f
 8006e04:	08006e31 	.word	0x08006e31
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e49 	.word	0x08006e49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e10:	4b89      	ldr	r3, [pc, #548]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	4a88      	ldr	r2, [pc, #544]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e1c:	e015      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3304      	adds	r3, #4
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 f98b 	bl	8008140 <RCCEx_PLL2_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e2e:	e00c      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fa34 	bl	80082a4 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e40:	e003      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
      break;
 8006e46:	e000      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d109      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e50:	4b79      	ldr	r3, [pc, #484]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	f023 0207 	bic.w	r2, r3, #7
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	4976      	ldr	r1, [pc, #472]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	650b      	str	r3, [r1, #80]	; 0x50
 8006e62:	e001      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d042      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	d02b      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e82:	d825      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e84:	2bc0      	cmp	r3, #192	; 0xc0
 8006e86:	d028      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e88:	2bc0      	cmp	r3, #192	; 0xc0
 8006e8a:	d821      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d016      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d81d      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d007      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006e9c:	e018      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9e:	4b66      	ldr	r3, [pc, #408]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a65      	ldr	r2, [pc, #404]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eaa:	e017      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f944 	bl	8008140 <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ebc:	e00e      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3324      	adds	r3, #36	; 0x24
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f9ed 	bl	80082a4 <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ece:	e005      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ee2:	4b55      	ldr	r3, [pc, #340]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eee:	4952      	ldr	r1, [pc, #328]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ef4:	e001      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d049      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f10:	d030      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006f12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f16:	d82a      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f1c:	d02c      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006f1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f22:	d824      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f28:	d018      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f2e:	d81e      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f38:	d007      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f3a:	e018      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b3e      	ldr	r3, [pc, #248]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	4a3d      	ldr	r2, [pc, #244]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f48:	e017      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2100      	movs	r1, #0
 8006f50:	4618      	mov	r0, r3
 8006f52:	f001 f8f5 	bl	8008140 <RCCEx_PLL2_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f5a:	e00e      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 f99e 	bl	80082a4 <RCCEx_PLL3_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f6c:	e005      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
      break;
 8006f72:	e002      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f74:	bf00      	nop
 8006f76:	e000      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f80:	4b2d      	ldr	r3, [pc, #180]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f8e:	492a      	ldr	r1, [pc, #168]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	658b      	str	r3, [r1, #88]	; 0x58
 8006f94:	e001      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d04c      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fb0:	d030      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fb6:	d82a      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fbc:	d02c      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006fbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fc2:	d824      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc8:	d018      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fce:	d81e      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fd8:	d007      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006fda:	e018      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	4a15      	ldr	r2, [pc, #84]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fe8:	e017      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 f8a5 	bl	8008140 <RCCEx_PLL2_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ffa:	e00e      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f94e 	bl	80082a4 <RCCEx_PLL3_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800700c:	e005      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]
      break;
 8007012:	e002      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800702e:	4902      	ldr	r1, [pc, #8]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007030:	4313      	orrs	r3, r2
 8007032:	658b      	str	r3, [r1, #88]	; 0x58
 8007034:	e004      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d032      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007050:	2b30      	cmp	r3, #48	; 0x30
 8007052:	d01c      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007054:	2b30      	cmp	r3, #48	; 0x30
 8007056:	d817      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007058:	2b20      	cmp	r3, #32
 800705a:	d00c      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800705c:	2b20      	cmp	r3, #32
 800705e:	d813      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d016      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007064:	2b10      	cmp	r3, #16
 8007066:	d10f      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007068:	4baf      	ldr	r3, [pc, #700]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4aae      	ldr	r2, [pc, #696]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007074:	e00e      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f001 f85f 	bl	8008140 <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007086:	e005      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
      break;
 800708c:	e002      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800708e:	bf00      	nop
 8007090:	e000      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800709a:	4ba3      	ldr	r3, [pc, #652]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a6:	49a0      	ldr	r1, [pc, #640]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070ac:	e001      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d047      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c6:	d030      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80070c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070cc:	d82a      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80070ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070d2:	d02c      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80070d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070d8:	d824      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80070da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070de:	d018      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80070e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e4:	d81e      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ee:	d007      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80070f0:	e018      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f2:	4b8d      	ldr	r3, [pc, #564]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	4a8c      	ldr	r2, [pc, #560]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070fe:	e017      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f001 f81a 	bl	8008140 <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007110:	e00e      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f8c3 	bl	80082a4 <RCCEx_PLL3_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007122:	e005      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
      break;
 8007128:	e002      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800712e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007136:	4b7c      	ldr	r3, [pc, #496]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	4979      	ldr	r1, [pc, #484]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007144:	4313      	orrs	r3, r2
 8007146:	650b      	str	r3, [r1, #80]	; 0x50
 8007148:	e001      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d049      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007162:	d02e      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007168:	d828      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800716a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800716e:	d02a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007174:	d822      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007176:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800717a:	d026      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x486>
 800717c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007180:	d81c      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007186:	d010      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800718c:	d816      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01d      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007196:	d111      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	2101      	movs	r1, #1
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ffce 	bl	8008140 <RCCEx_PLL2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071a8:	e012      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3324      	adds	r3, #36	; 0x24
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 f877 	bl	80082a4 <RCCEx_PLL3_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071ba:	e009      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071c2:	bf00      	nop
 80071c4:	e004      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071d6:	4b54      	ldr	r3, [pc, #336]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e2:	4951      	ldr	r1, [pc, #324]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	650b      	str	r3, [r1, #80]	; 0x50
 80071e8:	e001      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d04b      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007204:	d02e      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800720a:	d828      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007210:	d02a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007216:	d822      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800721c:	d026      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800721e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007222:	d81c      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007228:	d010      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800722e:	d816      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01d      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007238:	d111      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	2101      	movs	r1, #1
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ff7d 	bl	8008140 <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800724a:	e012      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3324      	adds	r3, #36	; 0x24
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f001 f826 	bl	80082a4 <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800725c:	e009      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
      break;
 8007262:	e006      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007264:	bf00      	nop
 8007266:	e004      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007268:	bf00      	nop
 800726a:	e002      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800726c:	bf00      	nop
 800726e:	e000      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007278:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800727a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007286:	4928      	ldr	r1, [pc, #160]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007288:	4313      	orrs	r3, r2
 800728a:	658b      	str	r3, [r1, #88]	; 0x58
 800728c:	e001      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d02f      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a6:	d00e      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80072a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ac:	d814      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d015      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80072b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b6:	d10f      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072c4:	e00c      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3304      	adds	r3, #4
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 ff37 	bl	8008140 <RCCEx_PLL2_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072d6:	e003      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80072de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	490d      	ldr	r1, [pc, #52]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	650b      	str	r3, [r1, #80]	; 0x50
 80072f8:	e001      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d033      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	2b03      	cmp	r3, #3
 8007310:	d81c      	bhi.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007353 	.word	0x08007353
 800731c:	0800732d 	.word	0x0800732d
 8007320:	0800733b 	.word	0x0800733b
 8007324:	08007353 	.word	0x08007353
 8007328:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800732c:	4bb8      	ldr	r3, [pc, #736]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	4ab7      	ldr	r2, [pc, #732]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007338:	e00c      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fefd 	bl	8008140 <RCCEx_PLL2_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800734a:	e003      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
      break;
 8007350:	e000      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800735a:	4bad      	ldr	r3, [pc, #692]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	f023 0203 	bic.w	r2, r3, #3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007366:	49aa      	ldr	r1, [pc, #680]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007368:	4313      	orrs	r3, r2
 800736a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800736c:	e001      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8086 	beq.w	800748c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007380:	4ba4      	ldr	r3, [pc, #656]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4aa3      	ldr	r2, [pc, #652]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800738a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800738c:	f7fb f9ca 	bl	8002724 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007392:	e009      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007394:	f7fb f9c6 	bl	8002724 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d902      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	75fb      	strb	r3, [r7, #23]
        break;
 80073a6:	e005      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a8:	4b9a      	ldr	r3, [pc, #616]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0ef      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d166      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073ba:	4b95      	ldr	r3, [pc, #596]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073c4:	4053      	eors	r3, r2
 80073c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d013      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ce:	4b90      	ldr	r3, [pc, #576]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d8:	4b8d      	ldr	r3, [pc, #564]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073dc:	4a8c      	ldr	r2, [pc, #560]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073e4:	4b8a      	ldr	r3, [pc, #552]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	4a89      	ldr	r2, [pc, #548]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073f0:	4a87      	ldr	r2, [pc, #540]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007400:	d115      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fb f98f 	bl	8002724 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007408:	e00b      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fb f98b 	bl	8002724 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	; 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d902      	bls.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	75fb      	strb	r3, [r7, #23]
            break;
 8007420:	e005      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007422:	4b7b      	ldr	r3, [pc, #492]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0ed      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d126      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007442:	d10d      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007444:	4b72      	ldr	r3, [pc, #456]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007452:	0919      	lsrs	r1, r3, #4
 8007454:	4b70      	ldr	r3, [pc, #448]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007456:	400b      	ands	r3, r1
 8007458:	496d      	ldr	r1, [pc, #436]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800745a:	4313      	orrs	r3, r2
 800745c:	610b      	str	r3, [r1, #16]
 800745e:	e005      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007460:	4b6b      	ldr	r3, [pc, #428]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	4a6a      	ldr	r2, [pc, #424]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007466:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800746a:	6113      	str	r3, [r2, #16]
 800746c:	4b68      	ldr	r3, [pc, #416]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800746e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747a:	4965      	ldr	r1, [pc, #404]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800747c:	4313      	orrs	r3, r2
 800747e:	670b      	str	r3, [r1, #112]	; 0x70
 8007480:	e004      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	75bb      	strb	r3, [r7, #22]
 8007486:	e001      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d07e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800749c:	2b28      	cmp	r3, #40	; 0x28
 800749e:	d867      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	08007577 	.word	0x08007577
 80074ac:	08007571 	.word	0x08007571
 80074b0:	08007571 	.word	0x08007571
 80074b4:	08007571 	.word	0x08007571
 80074b8:	08007571 	.word	0x08007571
 80074bc:	08007571 	.word	0x08007571
 80074c0:	08007571 	.word	0x08007571
 80074c4:	08007571 	.word	0x08007571
 80074c8:	0800754d 	.word	0x0800754d
 80074cc:	08007571 	.word	0x08007571
 80074d0:	08007571 	.word	0x08007571
 80074d4:	08007571 	.word	0x08007571
 80074d8:	08007571 	.word	0x08007571
 80074dc:	08007571 	.word	0x08007571
 80074e0:	08007571 	.word	0x08007571
 80074e4:	08007571 	.word	0x08007571
 80074e8:	0800755f 	.word	0x0800755f
 80074ec:	08007571 	.word	0x08007571
 80074f0:	08007571 	.word	0x08007571
 80074f4:	08007571 	.word	0x08007571
 80074f8:	08007571 	.word	0x08007571
 80074fc:	08007571 	.word	0x08007571
 8007500:	08007571 	.word	0x08007571
 8007504:	08007571 	.word	0x08007571
 8007508:	08007577 	.word	0x08007577
 800750c:	08007571 	.word	0x08007571
 8007510:	08007571 	.word	0x08007571
 8007514:	08007571 	.word	0x08007571
 8007518:	08007571 	.word	0x08007571
 800751c:	08007571 	.word	0x08007571
 8007520:	08007571 	.word	0x08007571
 8007524:	08007571 	.word	0x08007571
 8007528:	08007577 	.word	0x08007577
 800752c:	08007571 	.word	0x08007571
 8007530:	08007571 	.word	0x08007571
 8007534:	08007571 	.word	0x08007571
 8007538:	08007571 	.word	0x08007571
 800753c:	08007571 	.word	0x08007571
 8007540:	08007571 	.word	0x08007571
 8007544:	08007571 	.word	0x08007571
 8007548:	08007577 	.word	0x08007577
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3304      	adds	r3, #4
 8007550:	2101      	movs	r1, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fdf4 	bl	8008140 <RCCEx_PLL2_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800755c:	e00c      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3324      	adds	r3, #36	; 0x24
 8007562:	2101      	movs	r1, #1
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fe9d 	bl	80082a4 <RCCEx_PLL3_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800756e:	e003      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	75fb      	strb	r3, [r7, #23]
      break;
 8007574:	e000      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800757e:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758a:	4921      	ldr	r1, [pc, #132]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758c:	4313      	orrs	r3, r2
 800758e:	654b      	str	r3, [r1, #84]	; 0x54
 8007590:	e001      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03e      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	d820      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075f3 	.word	0x080075f3
 80075b4:	080075c9 	.word	0x080075c9
 80075b8:	080075db 	.word	0x080075db
 80075bc:	080075f3 	.word	0x080075f3
 80075c0:	080075f3 	.word	0x080075f3
 80075c4:	080075f3 	.word	0x080075f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3304      	adds	r3, #4
 80075cc:	2101      	movs	r1, #1
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fdb6 	bl	8008140 <RCCEx_PLL2_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075d8:	e00c      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3324      	adds	r3, #36	; 0x24
 80075de:	2101      	movs	r1, #1
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fe5f 	bl	80082a4 <RCCEx_PLL3_Config>
 80075e6:	4603      	mov	r3, r0
 80075e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	75fb      	strb	r3, [r7, #23]
      break;
 80075f0:	e000      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80075f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d110      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fe:	f023 0207 	bic.w	r2, r3, #7
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007606:	4902      	ldr	r1, [pc, #8]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007608:	4313      	orrs	r3, r2
 800760a:	654b      	str	r3, [r1, #84]	; 0x54
 800760c:	e008      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	58024800 	.word	0x58024800
 8007618:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d039      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	2b05      	cmp	r3, #5
 8007634:	d820      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	0800767f 	.word	0x0800767f
 8007640:	08007655 	.word	0x08007655
 8007644:	08007667 	.word	0x08007667
 8007648:	0800767f 	.word	0x0800767f
 800764c:	0800767f 	.word	0x0800767f
 8007650:	0800767f 	.word	0x0800767f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	2101      	movs	r1, #1
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd70 	bl	8008140 <RCCEx_PLL2_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007664:	e00c      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3324      	adds	r3, #36	; 0x24
 800766a:	2101      	movs	r1, #1
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fe19 	bl	80082a4 <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007676:	e003      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800767e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007686:	4bb7      	ldr	r3, [pc, #732]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	f023 0207 	bic.w	r2, r3, #7
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007694:	49b3      	ldr	r1, [pc, #716]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007696:	4313      	orrs	r3, r2
 8007698:	658b      	str	r3, [r1, #88]	; 0x58
 800769a:	e001      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d04b      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076b6:	d02e      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80076b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076bc:	d828      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c2:	d02a      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80076c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c8:	d822      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076ce:	d026      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80076d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076d4:	d81c      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076da:	d010      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80076dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e0:	d816      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01d      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80076e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ea:	d111      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fd24 	bl	8008140 <RCCEx_PLL2_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076fc:	e012      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3324      	adds	r3, #36	; 0x24
 8007702:	2102      	movs	r1, #2
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fdcd 	bl	80082a4 <RCCEx_PLL3_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800770e:	e009      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	e006      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007716:	bf00      	nop
 8007718:	e004      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800771a:	bf00      	nop
 800771c:	e002      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800771e:	bf00      	nop
 8007720:	e000      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800772a:	4b8e      	ldr	r3, [pc, #568]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007738:	498a      	ldr	r1, [pc, #552]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800773a:	4313      	orrs	r3, r2
 800773c:	654b      	str	r3, [r1, #84]	; 0x54
 800773e:	e001      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d04b      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007756:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800775a:	d02e      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800775c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007760:	d828      	bhi.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007766:	d02a      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776c:	d822      	bhi.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800776e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007772:	d026      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007778:	d81c      	bhi.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800777a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777e:	d010      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007784:	d816      	bhi.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01d      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	d111      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3304      	adds	r3, #4
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fcd2 	bl	8008140 <RCCEx_PLL2_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077a0:	e012      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3324      	adds	r3, #36	; 0x24
 80077a6:	2102      	movs	r1, #2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fd7b 	bl	80082a4 <RCCEx_PLL3_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077b2:	e009      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75fb      	strb	r3, [r7, #23]
      break;
 80077b8:	e006      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077ba:	bf00      	nop
 80077bc:	e004      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077be:	bf00      	nop
 80077c0:	e002      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077ce:	4b65      	ldr	r3, [pc, #404]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077dc:	4961      	ldr	r1, [pc, #388]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	658b      	str	r3, [r1, #88]	; 0x58
 80077e2:	e001      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d04b      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077fe:	d02e      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007800:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007804:	d828      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800780a:	d02a      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800780c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007810:	d822      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007812:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007816:	d026      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007818:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800781c:	d81c      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800781e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007822:	d010      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007828:	d816      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01d      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800782e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007832:	d111      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fc80 	bl	8008140 <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007844:	e012      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	2102      	movs	r1, #2
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fd29 	bl	80082a4 <RCCEx_PLL3_Config>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007856:	e009      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
      break;
 800785c:	e006      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800785e:	bf00      	nop
 8007860:	e004      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007862:	bf00      	nop
 8007864:	e002      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800786a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007872:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007880:	4938      	ldr	r1, [pc, #224]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007882:	4313      	orrs	r3, r2
 8007884:	658b      	str	r3, [r1, #88]	; 0x58
 8007886:	e001      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01a      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	d10a      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	2102      	movs	r1, #2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fcfa 	bl	80082a4 <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078ba:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c8:	4926      	ldr	r1, [pc, #152]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e4:	d10a      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fcd9 	bl	80082a4 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	4916      	ldr	r1, [pc, #88]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800790c:	4313      	orrs	r3, r2
 800790e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d036      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007926:	d01f      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800792c:	d817      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007936:	d009      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007938:	e011      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fbfd 	bl	8008140 <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800794a:	e00e      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fca6 	bl	80082a4 <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800795c:	e005      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
      break;
 8007962:	e002      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007964:	58024400 	.word	0x58024400
      break;
 8007968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007970:	4b93      	ldr	r3, [pc, #588]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800797e:	4990      	ldr	r1, [pc, #576]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007980:	4313      	orrs	r3, r2
 8007982:	658b      	str	r3, [r1, #88]	; 0x58
 8007984:	e001      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d033      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079a0:	d01c      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80079a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079a6:	d816      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80079a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ac:	d003      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80079ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079b2:	d007      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80079b4:	e00f      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b6:	4b82      	ldr	r3, [pc, #520]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4a81      	ldr	r2, [pc, #516]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079c2:	e00c      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3324      	adds	r3, #36	; 0x24
 80079c8:	2101      	movs	r1, #1
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fc6a 	bl	80082a4 <RCCEx_PLL3_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079d4:	e003      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
      break;
 80079da:	e000      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80079dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079e4:	4b76      	ldr	r3, [pc, #472]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f2:	4973      	ldr	r1, [pc, #460]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	654b      	str	r3, [r1, #84]	; 0x54
 80079f8:	e001      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d029      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a16:	d007      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007a18:	e00f      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1a:	4b69      	ldr	r3, [pc, #420]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	4a68      	ldr	r2, [pc, #416]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a26:	e00b      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fb86 	bl	8008140 <RCCEx_PLL2_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a38:	e002      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a46:	4b5e      	ldr	r3, [pc, #376]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a52:	495b      	ldr	r1, [pc, #364]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a58:	e001      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3324      	adds	r3, #36	; 0x24
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fc17 	bl	80082a4 <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d030      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a94:	d017      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a9a:	d811      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa0:	d013      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa6:	d80b      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d010      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab2:	4b43      	ldr	r3, [pc, #268]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	4a42      	ldr	r2, [pc, #264]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007abe:	e007      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	e004      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ad6:	4b3a      	ldr	r3, [pc, #232]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae2:	4937      	ldr	r1, [pc, #220]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	654b      	str	r3, [r1, #84]	; 0x54
 8007ae8:	e001      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007afa:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b06:	492e      	ldr	r1, [pc, #184]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b18:	4b29      	ldr	r3, [pc, #164]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b26:	4926      	ldr	r1, [pc, #152]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b38:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b44:	491e      	ldr	r1, [pc, #120]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00d      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b56:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	4a19      	ldr	r2, [pc, #100]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b60:	6113      	str	r3, [r2, #16]
 8007b62:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b6c:	4914      	ldr	r1, [pc, #80]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da08      	bge.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b86:	490e      	ldr	r1, [pc, #56]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d009      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	4906      	ldr	r1, [pc, #24]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007bac:	7dbb      	ldrb	r3, [r7, #22]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	58024400 	.word	0x58024400

08007bc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007bc8:	f7ff f860 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	091b      	lsrs	r3, r3, #4
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	4904      	ldr	r1, [pc, #16]	; (8007bec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bda:	5ccb      	ldrb	r3, [r1, r3]
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	58024400 	.word	0x58024400
 8007bec:	0800a554 	.word	0x0800a554

08007bf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	; 0x24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bf8:	4ba1      	ldr	r3, [pc, #644]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007c02:	4b9f      	ldr	r3, [pc, #636]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	0b1b      	lsrs	r3, r3, #12
 8007c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c0e:	4b9c      	ldr	r3, [pc, #624]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	091b      	lsrs	r3, r3, #4
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c1a:	4b99      	ldr	r3, [pc, #612]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	08db      	lsrs	r3, r3, #3
 8007c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8111 	beq.w	8007e60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f000 8083 	beq.w	8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	f200 80a1 	bhi.w	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d056      	beq.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c5a:	e099      	b.n	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c5c:	4b88      	ldr	r3, [pc, #544]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02d      	beq.n	8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c68:	4b85      	ldr	r3, [pc, #532]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	08db      	lsrs	r3, r3, #3
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	4a84      	ldr	r2, [pc, #528]	; (8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
 8007c78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b7b      	ldr	r3, [pc, #492]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007cc2:	e087      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b6a      	ldr	r3, [pc, #424]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d06:	e065      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1a:	4b59      	ldr	r3, [pc, #356]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d4a:	e043      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5e:	4b48      	ldr	r3, [pc, #288]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d8e:	e021      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da2:	4b37      	ldr	r3, [pc, #220]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007dd4:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	0a5b      	lsrs	r3, r3, #9
 8007dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfa:	ee17 2a90 	vmov	r2, s15
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007e02:	4b1f      	ldr	r3, [pc, #124]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e28:	ee17 2a90 	vmov	r2, s15
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007e30:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	0e1b      	lsrs	r3, r3, #24
 8007e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e56:	ee17 2a90 	vmov	r2, s15
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e5e:	e008      	b.n	8007e72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	609a      	str	r2, [r3, #8]
}
 8007e72:	bf00      	nop
 8007e74:	3724      	adds	r7, #36	; 0x24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400
 8007e84:	03d09000 	.word	0x03d09000
 8007e88:	46000000 	.word	0x46000000
 8007e8c:	4c742400 	.word	0x4c742400
 8007e90:	4a742400 	.word	0x4a742400
 8007e94:	4afe502a 	.word	0x4afe502a

08007e98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b089      	sub	sp, #36	; 0x24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ea0:	4ba1      	ldr	r3, [pc, #644]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007eaa:	4b9f      	ldr	r3, [pc, #636]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	0d1b      	lsrs	r3, r3, #20
 8007eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007eb6:	4b9c      	ldr	r3, [pc, #624]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ec2:	4b99      	ldr	r3, [pc, #612]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8111 	beq.w	8008108 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	f000 8083 	beq.w	8007ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	f200 80a1 	bhi.w	8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d056      	beq.n	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f02:	e099      	b.n	8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f04:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02d      	beq.n	8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f10:	4b85      	ldr	r3, [pc, #532]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a84      	ldr	r2, [pc, #528]	; (800812c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3a:	4b7b      	ldr	r3, [pc, #492]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f6a:	e087      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008134 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7e:	4b6a      	ldr	r3, [pc, #424]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fae:	e065      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc2:	4b59      	ldr	r3, [pc, #356]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ff2:	e043      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800813c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008006:	4b48      	ldr	r3, [pc, #288]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008016:	ed97 6a03 	vldr	s12, [r7, #12]
 800801a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800801e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800802a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008036:	e021      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804a:	4b37      	ldr	r3, [pc, #220]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805a:	ed97 6a03 	vldr	s12, [r7, #12]
 800805e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800807a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	0a5b      	lsrs	r3, r3, #9
 8008082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008096:	edd7 6a07 	vldr	s13, [r7, #28]
 800809a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a2:	ee17 2a90 	vmov	r2, s15
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80080aa:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	0c1b      	lsrs	r3, r3, #16
 80080b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d0:	ee17 2a90 	vmov	r2, s15
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008106:	e008      	b.n	800811a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
}
 800811a:	bf00      	nop
 800811c:	3724      	adds	r7, #36	; 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	03d09000 	.word	0x03d09000
 8008130:	46000000 	.word	0x46000000
 8008134:	4c742400 	.word	0x4c742400
 8008138:	4a742400 	.word	0x4a742400
 800813c:	4afe502a 	.word	0x4afe502a

08008140 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800814e:	4b53      	ldr	r3, [pc, #332]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d101      	bne.n	800815e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e099      	b.n	8008292 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800815e:	4b4f      	ldr	r3, [pc, #316]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a4e      	ldr	r2, [pc, #312]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7fa fadb 	bl	8002724 <HAL_GetTick>
 800816e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008170:	e008      	b.n	8008184 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008172:	f7fa fad7 	bl	8002724 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e086      	b.n	8008292 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008184:	4b45      	ldr	r3, [pc, #276]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008190:	4b42      	ldr	r3, [pc, #264]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	031b      	lsls	r3, r3, #12
 800819e:	493f      	ldr	r1, [pc, #252]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	628b      	str	r3, [r1, #40]	; 0x28
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	025b      	lsls	r3, r3, #9
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	3b01      	subs	r3, #1
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081d4:	4931      	ldr	r1, [pc, #196]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081da:	4b30      	ldr	r3, [pc, #192]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	492d      	ldr	r1, [pc, #180]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081ec:	4b2b      	ldr	r3, [pc, #172]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	f023 0220 	bic.w	r2, r3, #32
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4928      	ldr	r1, [pc, #160]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	4a26      	ldr	r2, [pc, #152]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008204:	f023 0310 	bic.w	r3, r3, #16
 8008208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800820a:	4b24      	ldr	r3, [pc, #144]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 800820c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <RCCEx_PLL2_Config+0x160>)
 8008210:	4013      	ands	r3, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	69d2      	ldr	r2, [r2, #28]
 8008216:	00d2      	lsls	r2, r2, #3
 8008218:	4920      	ldr	r1, [pc, #128]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800821e:	4b1f      	ldr	r3, [pc, #124]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	4a1e      	ldr	r2, [pc, #120]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008224:	f043 0310 	orr.w	r3, r3, #16
 8008228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008230:	4b1a      	ldr	r3, [pc, #104]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a19      	ldr	r2, [pc, #100]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800823a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800823c:	e00f      	b.n	800825e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d106      	bne.n	8008252 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	4a14      	ldr	r2, [pc, #80]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008250:	e005      	b.n	800825e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	4a11      	ldr	r2, [pc, #68]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800825c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826a:	f7fa fa5b 	bl	8002724 <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008270:	e008      	b.n	8008284 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008272:	f7fa fa57 	bl	8002724 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e006      	b.n	8008292 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	58024400 	.word	0x58024400
 80082a0:	ffff0007 	.word	0xffff0007

080082a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082b2:	4b53      	ldr	r3, [pc, #332]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d101      	bne.n	80082c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e099      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082c2:	4b4f      	ldr	r3, [pc, #316]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a4e      	ldr	r2, [pc, #312]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ce:	f7fa fa29 	bl	8002724 <HAL_GetTick>
 80082d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d4:	e008      	b.n	80082e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082d6:	f7fa fa25 	bl	8002724 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e086      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082e8:	4b45      	ldr	r3, [pc, #276]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f0      	bne.n	80082d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082f4:	4b42      	ldr	r3, [pc, #264]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	051b      	lsls	r3, r3, #20
 8008302:	493f      	ldr	r1, [pc, #252]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	628b      	str	r3, [r1, #40]	; 0x28
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	3b01      	subs	r3, #1
 800830e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	3b01      	subs	r3, #1
 8008318:	025b      	lsls	r3, r3, #9
 800831a:	b29b      	uxth	r3, r3
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	3b01      	subs	r3, #1
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	3b01      	subs	r3, #1
 8008332:	061b      	lsls	r3, r3, #24
 8008334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008338:	4931      	ldr	r1, [pc, #196]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800833e:	4b30      	ldr	r3, [pc, #192]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	492d      	ldr	r1, [pc, #180]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800834c:	4313      	orrs	r3, r2
 800834e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008350:	4b2b      	ldr	r3, [pc, #172]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	4928      	ldr	r1, [pc, #160]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008362:	4b27      	ldr	r3, [pc, #156]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a26      	ldr	r2, [pc, #152]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800836e:	4b24      	ldr	r3, [pc, #144]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <RCCEx_PLL3_Config+0x160>)
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	69d2      	ldr	r2, [r2, #28]
 800837a:	00d2      	lsls	r2, r2, #3
 800837c:	4920      	ldr	r1, [pc, #128]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008382:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	4a1e      	ldr	r2, [pc, #120]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800838c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800839a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800839e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083a0:	e00f      	b.n	80083c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	4a14      	ldr	r2, [pc, #80]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083b4:	e005      	b.n	80083c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083b6:	4b12      	ldr	r3, [pc, #72]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4a11      	ldr	r2, [pc, #68]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083c2:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a0e      	ldr	r2, [pc, #56]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ce:	f7fa f9a9 	bl	8002724 <HAL_GetTick>
 80083d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083d4:	e008      	b.n	80083e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083d6:	f7fa f9a5 	bl	8002724 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e006      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0f0      	beq.n	80083d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	58024400 	.word	0x58024400
 8008404:	ffff0007 	.word	0xffff0007

08008408 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0eb      	b.n	80085f6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a75      	ldr	r2, [pc, #468]	; (8008600 <HAL_SPI_Init+0x1f8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00f      	beq.n	800844e <HAL_SPI_Init+0x46>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a74      	ldr	r2, [pc, #464]	; (8008604 <HAL_SPI_Init+0x1fc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00a      	beq.n	800844e <HAL_SPI_Init+0x46>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a72      	ldr	r2, [pc, #456]	; (8008608 <HAL_SPI_Init+0x200>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d005      	beq.n	800844e <HAL_SPI_Init+0x46>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d901      	bls.n	800844e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e0d3      	b.n	80085f6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb94 	bl	8008b7c <SPI_GetPacketSize>
 8008454:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a69      	ldr	r2, [pc, #420]	; (8008600 <HAL_SPI_Init+0x1f8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00c      	beq.n	800847a <HAL_SPI_Init+0x72>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a67      	ldr	r2, [pc, #412]	; (8008604 <HAL_SPI_Init+0x1fc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d007      	beq.n	800847a <HAL_SPI_Init+0x72>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a66      	ldr	r2, [pc, #408]	; (8008608 <HAL_SPI_Init+0x200>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d002      	beq.n	800847a <HAL_SPI_Init+0x72>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b08      	cmp	r3, #8
 8008478:	d811      	bhi.n	800849e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800847e:	4a60      	ldr	r2, [pc, #384]	; (8008600 <HAL_SPI_Init+0x1f8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d009      	beq.n	8008498 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a5e      	ldr	r2, [pc, #376]	; (8008604 <HAL_SPI_Init+0x1fc>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d004      	beq.n	8008498 <HAL_SPI_Init+0x90>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a5d      	ldr	r2, [pc, #372]	; (8008608 <HAL_SPI_Init+0x200>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d104      	bne.n	80084a2 <HAL_SPI_Init+0x9a>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b10      	cmp	r3, #16
 800849c:	d901      	bls.n	80084a2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e0a9      	b.n	80085f6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 faec 	bl	8001a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0201 	bic.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084dc:	d119      	bne.n	8008512 <HAL_SPI_Init+0x10a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084e6:	d103      	bne.n	80084f0 <HAL_SPI_Init+0xe8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10c      	bne.n	8008512 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008500:	d107      	bne.n	8008512 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008510:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69da      	ldr	r2, [r3, #28]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	431a      	orrs	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	ea42 0103 	orr.w	r1, r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008566:	431a      	orrs	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008572:	ea42 0103 	orr.w	r1, r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d113      	bne.n	80085b2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	40013000 	.word	0x40013000
 8008604:	40003800 	.word	0x40003800
 8008608:	40003c00 	.word	0x40003c00

0800860c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008624:	6a3a      	ldr	r2, [r7, #32]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4013      	ands	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008634:	2300      	movs	r3, #0
 8008636:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800863e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3330      	adds	r3, #48	; 0x30
 8008646:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d113      	bne.n	800867a <HAL_SPI_IRQHandler+0x6e>
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	f003 0320 	and.w	r3, r3, #32
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10e      	bne.n	800867a <HAL_SPI_IRQHandler+0x6e>
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
    handled = 1UL;
 8008676:	2301      	movs	r3, #1
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10f      	bne.n	80086a4 <HAL_SPI_IRQHandler+0x98>
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_SPI_IRQHandler+0x98>
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
    handled = 1UL;
 80086a0:	2301      	movs	r3, #1
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10f      	bne.n	80086ce <HAL_SPI_IRQHandler+0xc2>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <HAL_SPI_IRQHandler+0xc2>
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
    handled = 1UL;
 80086ca:	2301      	movs	r3, #1
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f040 816f 	bne.w	80089b4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80a0 	beq.w	8008822 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0208 	orr.w	r2, r2, #8
 80086f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699a      	ldr	r2, [r3, #24]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0210 	orr.w	r2, r2, #16
 8008700:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008710:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0208 	bic.w	r2, r2, #8
 8008720:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00f      	beq.n	800874c <HAL_SPI_IRQHandler+0x140>
 800872c:	7cfb      	ldrb	r3, [r7, #19]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d004      	beq.n	800873c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <HAL_SPI_IRQHandler+0x140>
 800873c:	7cfb      	ldrb	r3, [r7, #19]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d059      	beq.n	80087f6 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d154      	bne.n	80087f6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d13d      	bne.n	80087d6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800875a:	e036      	b.n	80087ca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	2b0f      	cmp	r3, #15
 8008762:	d90b      	bls.n	800877c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800876e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008774:	1d1a      	adds	r2, r3, #4
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	665a      	str	r2, [r3, #100]	; 0x64
 800877a:	e01d      	b.n	80087b8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b07      	cmp	r3, #7
 8008782:	d90b      	bls.n	800879c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	8812      	ldrh	r2, [r2, #0]
 800878c:	b292      	uxth	r2, r2
 800878e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008794:	1c9a      	adds	r2, r3, #2
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	665a      	str	r2, [r3, #100]	; 0x64
 800879a:	e00d      	b.n	80087b8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a8:	7812      	ldrb	r2, [r2, #0]
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1c2      	bne.n	800875c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f930 	bl	8008a3c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7f9 f90c 	bl	8001a0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80087f4:	e0e3      	b.n	80089be <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80087f6:	7cfb      	ldrb	r3, [r7, #19]
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	d103      	bne.n	8008804 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f8f9 	bl	80089f4 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8008802:	e0d9      	b.n	80089b8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008804:	7cfb      	ldrb	r3, [r7, #19]
 8008806:	2b04      	cmp	r3, #4
 8008808:	d103      	bne.n	8008812 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8e8 	bl	80089e0 <HAL_SPI_RxCpltCallback>
    return;
 8008810:	e0d2      	b.n	80089b8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008812:	7cfb      	ldrb	r3, [r7, #19]
 8008814:	2b03      	cmp	r3, #3
 8008816:	f040 80cf 	bne.w	80089b8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8d6 	bl	80089cc <HAL_SPI_TxCpltCallback>
    return;
 8008820:	e0ca      	b.n	80089b8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00d      	beq.n	8008848 <HAL_SPI_IRQHandler+0x23c>
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	f003 0308 	and.w	r3, r3, #8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008844:	619a      	str	r2, [r3, #24]

    return;
 8008846:	e0ba      	b.n	80089be <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80b5 	beq.w	80089be <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00f      	beq.n	800887e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008864:	f043 0204 	orr.w	r2, r3, #4
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800887c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00f      	beq.n	80088a8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888e:	f043 0201 	orr.w	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00f      	beq.n	80088d2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b8:	f043 0208 	orr.w	r2, r3, #8
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	f003 0320 	and.w	r3, r3, #32
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00f      	beq.n	80088fc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0220 	orr.w	r2, r2, #32
 80088fa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008902:	2b00      	cmp	r3, #0
 8008904:	d05a      	beq.n	80089bc <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0201 	bic.w	r2, r2, #1
 8008914:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6919      	ldr	r1, [r3, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <HAL_SPI_IRQHandler+0x3b8>)
 8008922:	400b      	ands	r3, r1
 8008924:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800892c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008930:	d138      	bne.n	80089a4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008940:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d013      	beq.n	8008972 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800894e:	4a1e      	ldr	r2, [pc, #120]	; (80089c8 <HAL_SPI_IRQHandler+0x3bc>)
 8008950:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008956:	4618      	mov	r0, r3
 8008958:	f7fb fa96 	bl	8003e88 <HAL_DMA_Abort_IT>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008976:	2b00      	cmp	r3, #0
 8008978:	d020      	beq.n	80089bc <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800897e:	4a12      	ldr	r2, [pc, #72]	; (80089c8 <HAL_SPI_IRQHandler+0x3bc>)
 8008980:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008986:	4618      	mov	r0, r3
 8008988:	f7fb fa7e 	bl	8003e88 <HAL_DMA_Abort_IT>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d014      	beq.n	80089bc <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008998:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80089a2:	e00b      	b.n	80089bc <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7f9 f82d 	bl	8001a0c <HAL_SPI_ErrorCallback>
    return;
 80089b2:	e003      	b.n	80089bc <HAL_SPI_IRQHandler+0x3b0>
    return;
 80089b4:	bf00      	nop
 80089b6:	e002      	b.n	80089be <HAL_SPI_IRQHandler+0x3b2>
    return;
 80089b8:	bf00      	nop
 80089ba:	e000      	b.n	80089be <HAL_SPI_IRQHandler+0x3b2>
    return;
 80089bc:	bf00      	nop
  }
}
 80089be:	3728      	adds	r7, #40	; 0x28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	fffffc94 	.word	0xfffffc94
 80089c8:	08008a09 	.word	0x08008a09

080089cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7f8 ffec 	bl	8001a0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0208 	orr.w	r2, r2, #8
 8008a5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0210 	orr.w	r2, r2, #16
 8008a6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6919      	ldr	r1, [r3, #16]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b3c      	ldr	r3, [pc, #240]	; (8008b78 <SPI_CloseTransfer+0x13c>)
 8008a88:	400b      	ands	r3, r1
 8008a8a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008a9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d014      	beq.n	8008ad2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00f      	beq.n	8008ad2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699a      	ldr	r2, [r3, #24]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0220 	orr.w	r2, r2, #32
 8008ad0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d014      	beq.n	8008b08 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00f      	beq.n	8008b08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aee:	f043 0204 	orr.w	r2, r3, #4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	699a      	ldr	r2, [r3, #24]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00f      	beq.n	8008b32 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b18:	f043 0201 	orr.w	r2, r3, #1
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00f      	beq.n	8008b5c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b42:	f043 0208 	orr.w	r2, r3, #8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	fffffc90 	.word	0xfffffc90

08008b7c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3307      	adds	r3, #7
 8008b9a:	08db      	lsrs	r3, r3, #3
 8008b9c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e042      	b.n	8008c4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7f9 f90c 	bl	8001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2224      	movs	r2, #36	; 0x24
 8008be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0201 	bic.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fb87 	bl	8009308 <UART_SetConfig>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e022      	b.n	8008c4a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 f8db 	bl	8009dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f042 0201 	orr.w	r2, r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 f962 	bl	8009f0c <UART_CheckIdleState>
 8008c48:	4603      	mov	r3, r0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d168      	bne.n	8008d3e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_UART_Transmit_DMA+0x24>
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e061      	b.n	8008d40 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_UART_Transmit_DMA+0x36>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e05a      	b.n	8008d40 <HAL_UART_Transmit_DMA+0xec>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	88fa      	ldrh	r2, [r7, #6]
 8008c9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	88fa      	ldrh	r2, [r7, #6]
 8008ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2221      	movs	r2, #33	; 0x21
 8008cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d02c      	beq.n	8008d1a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cc4:	4a20      	ldr	r2, [pc, #128]	; (8008d48 <HAL_UART_Transmit_DMA+0xf4>)
 8008cc6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ccc:	4a1f      	ldr	r2, [pc, #124]	; (8008d4c <HAL_UART_Transmit_DMA+0xf8>)
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cd4:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <HAL_UART_Transmit_DMA+0xfc>)
 8008cd6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cdc:	2200      	movs	r2, #0
 8008cde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	4619      	mov	r1, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3328      	adds	r3, #40	; 0x28
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	f7fa fb40 	bl	8003378 <HAL_DMA_Start_IT>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00d      	beq.n	8008d1a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2210      	movs	r2, #16
 8008d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e012      	b.n	8008d40 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2240      	movs	r2, #64	; 0x40
 8008d20:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d38:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e000      	b.n	8008d40 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008d3e:	2302      	movs	r3, #2
  }
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	0800a145 	.word	0x0800a145
 8008d4c:	0800a195 	.word	0x0800a195
 8008d50:	0800a1b1 	.word	0x0800a1b1

08008d54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d118      	bne.n	8008db6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d013      	beq.n	8008db6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d104      	bne.n	8008da2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d009      	beq.n	8008db6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8282 	beq.w	80092b0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
      }
      return;
 8008db4:	e27c      	b.n	80092b0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 80ef 	beq.w	8008f9c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4b73      	ldr	r3, [pc, #460]	; (8008f90 <HAL_UART_IRQHandler+0x23c>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	4b72      	ldr	r3, [pc, #456]	; (8008f94 <HAL_UART_IRQHandler+0x240>)
 8008dcc:	4013      	ands	r3, r2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80e4 	beq.w	8008f9c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d010      	beq.n	8008e00 <HAL_UART_IRQHandler+0xac>
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2201      	movs	r2, #1
 8008dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df6:	f043 0201 	orr.w	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d010      	beq.n	8008e2c <HAL_UART_IRQHandler+0xd8>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e22:	f043 0204 	orr.w	r2, r3, #4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d010      	beq.n	8008e58 <HAL_UART_IRQHandler+0x104>
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2204      	movs	r2, #4
 8008e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	f043 0202 	orr.w	r2, r3, #2
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d015      	beq.n	8008e8e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4b48      	ldr	r3, [pc, #288]	; (8008f90 <HAL_UART_IRQHandler+0x23c>)
 8008e70:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00b      	beq.n	8008e8e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e84:	f043 0208 	orr.w	r2, r3, #8
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d011      	beq.n	8008ebc <HAL_UART_IRQHandler+0x168>
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00c      	beq.n	8008ebc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb2:	f043 0220 	orr.w	r2, r3, #32
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 81f6 	beq.w	80092b4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d011      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d104      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d007      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008efc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d004      	beq.n	8008f16 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d031      	beq.n	8008f7a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 f8e2 	bl	800a0e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b40      	cmp	r3, #64	; 0x40
 8008f28:	d123      	bne.n	8008f72 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d013      	beq.n	8008f6a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f46:	4a14      	ldr	r2, [pc, #80]	; (8008f98 <HAL_UART_IRQHandler+0x244>)
 8008f48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fa ff9a 	bl	8003e88 <HAL_DMA_Abort_IT>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d017      	beq.n	8008f8a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008f64:	4610      	mov	r0, r2
 8008f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f68:	e00f      	b.n	8008f8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7f8 fd5e 	bl	8001a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	e00b      	b.n	8008f8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7f8 fd5a 	bl	8001a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	e007      	b.n	8008f8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7f8 fd56 	bl	8001a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008f88:	e194      	b.n	80092b4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8a:	bf00      	nop
    return;
 8008f8c:	e192      	b.n	80092b4 <HAL_UART_IRQHandler+0x560>
 8008f8e:	bf00      	nop
 8008f90:	10000001 	.word	0x10000001
 8008f94:	04000120 	.word	0x04000120
 8008f98:	0800a231 	.word	0x0800a231

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	f040 810f 	bne.w	80091c4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 8109 	beq.w	80091c4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8103 	beq.w	80091c4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2210      	movs	r2, #16
 8008fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	f040 80bb 	bne.w	800914c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a96      	ldr	r2, [pc, #600]	; (8009238 <HAL_UART_IRQHandler+0x4e4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d059      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a94      	ldr	r2, [pc, #592]	; (800923c <HAL_UART_IRQHandler+0x4e8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d053      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a92      	ldr	r2, [pc, #584]	; (8009240 <HAL_UART_IRQHandler+0x4ec>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d04d      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a90      	ldr	r2, [pc, #576]	; (8009244 <HAL_UART_IRQHandler+0x4f0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d047      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a8e      	ldr	r2, [pc, #568]	; (8009248 <HAL_UART_IRQHandler+0x4f4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d041      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a8c      	ldr	r2, [pc, #560]	; (800924c <HAL_UART_IRQHandler+0x4f8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d03b      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a8a      	ldr	r2, [pc, #552]	; (8009250 <HAL_UART_IRQHandler+0x4fc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d035      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a88      	ldr	r2, [pc, #544]	; (8009254 <HAL_UART_IRQHandler+0x500>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d02f      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a86      	ldr	r2, [pc, #536]	; (8009258 <HAL_UART_IRQHandler+0x504>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d029      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a84      	ldr	r2, [pc, #528]	; (800925c <HAL_UART_IRQHandler+0x508>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d023      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a82      	ldr	r2, [pc, #520]	; (8009260 <HAL_UART_IRQHandler+0x50c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d01d      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a80      	ldr	r2, [pc, #512]	; (8009264 <HAL_UART_IRQHandler+0x510>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d017      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a7e      	ldr	r2, [pc, #504]	; (8009268 <HAL_UART_IRQHandler+0x514>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d011      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a7c      	ldr	r2, [pc, #496]	; (800926c <HAL_UART_IRQHandler+0x518>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00b      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a7a      	ldr	r2, [pc, #488]	; (8009270 <HAL_UART_IRQHandler+0x51c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d005      	beq.n	8009096 <HAL_UART_IRQHandler+0x342>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a78      	ldr	r2, [pc, #480]	; (8009274 <HAL_UART_IRQHandler+0x520>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d105      	bne.n	80090a2 <HAL_UART_IRQHandler+0x34e>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	e004      	b.n	80090ac <HAL_UART_IRQHandler+0x358>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80090ae:	893b      	ldrh	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8101 	beq.w	80092b8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090bc:	893a      	ldrh	r2, [r7, #8]
 80090be:	429a      	cmp	r2, r3
 80090c0:	f080 80fa 	bcs.w	80092b8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	893a      	ldrh	r2, [r7, #8]
 80090c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d6:	d02b      	beq.n	8009130 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0201 	bic.w	r2, r2, #1
 80090f6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009106:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0210 	bic.w	r2, r2, #16
 8009124:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800912a:	4618      	mov	r0, r3
 800912c:	f7fa fb8e 	bl	800384c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800913c:	b29b      	uxth	r3, r3
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	b29b      	uxth	r3, r3
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f8d3 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800914a:	e0b5      	b.n	80092b8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009158:	b29b      	uxth	r3, r3
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 80a8 	beq.w	80092bc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800916c:	897b      	ldrh	r3, [r7, #10]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 80a4 	beq.w	80092bc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009182:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6899      	ldr	r1, [r3, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4b3a      	ldr	r3, [pc, #232]	; (8009278 <HAL_UART_IRQHandler+0x524>)
 8009190:	400b      	ands	r3, r1
 8009192:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0210 	bic.w	r2, r2, #16
 80091b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091b8:	897b      	ldrh	r3, [r7, #10]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f897 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091c2:	e07b      	b.n	80092bc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00d      	beq.n	80091ea <HAL_UART_IRQHandler+0x496>
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d008      	beq.n	80091ea <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 f854 	bl	800a290 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091e8:	e06b      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d012      	beq.n	800921a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800920c:	2b00      	cmp	r3, #0
 800920e:	d057      	beq.n	80092c0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
    }
    return;
 8009218:	e052      	b.n	80092c0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d02b      	beq.n	800927c <HAL_UART_IRQHandler+0x528>
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d026      	beq.n	800927c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f001 f814 	bl	800a25c <UART_EndTransmit_IT>
    return;
 8009234:	e045      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
 8009236:	bf00      	nop
 8009238:	40020010 	.word	0x40020010
 800923c:	40020028 	.word	0x40020028
 8009240:	40020040 	.word	0x40020040
 8009244:	40020058 	.word	0x40020058
 8009248:	40020070 	.word	0x40020070
 800924c:	40020088 	.word	0x40020088
 8009250:	400200a0 	.word	0x400200a0
 8009254:	400200b8 	.word	0x400200b8
 8009258:	40020410 	.word	0x40020410
 800925c:	40020428 	.word	0x40020428
 8009260:	40020440 	.word	0x40020440
 8009264:	40020458 	.word	0x40020458
 8009268:	40020470 	.word	0x40020470
 800926c:	40020488 	.word	0x40020488
 8009270:	400204a0 	.word	0x400204a0
 8009274:	400204b8 	.word	0x400204b8
 8009278:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <HAL_UART_IRQHandler+0x544>
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f811 	bl	800a2b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009296:	e014      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00f      	beq.n	80092c2 <HAL_UART_IRQHandler+0x56e>
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	da0c      	bge.n	80092c2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fffb 	bl	800a2a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ae:	e008      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
      return;
 80092b0:	bf00      	nop
 80092b2:	e006      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
    return;
 80092b4:	bf00      	nop
 80092b6:	e004      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
      return;
 80092b8:	bf00      	nop
 80092ba:	e002      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
      return;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <HAL_UART_IRQHandler+0x56e>
    return;
 80092c0:	bf00      	nop
  }
}
 80092c2:	3720      	adds	r7, #32
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009308:	b5b0      	push	{r4, r5, r7, lr}
 800930a:	b08e      	sub	sp, #56	; 0x38
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	4313      	orrs	r3, r2
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	4bbf      	ldr	r3, [pc, #764]	; (8009634 <UART_SetConfig+0x32c>)
 8009336:	4013      	ands	r3, r2
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800933e:	430b      	orrs	r3, r1
 8009340:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4ab5      	ldr	r2, [pc, #724]	; (8009638 <UART_SetConfig+0x330>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d004      	beq.n	8009372 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800936e:	4313      	orrs	r3, r2
 8009370:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	4bb0      	ldr	r3, [pc, #704]	; (800963c <UART_SetConfig+0x334>)
 800937a:	4013      	ands	r3, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009382:	430b      	orrs	r3, r1
 8009384:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	f023 010f 	bic.w	r1, r3, #15
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4aa7      	ldr	r2, [pc, #668]	; (8009640 <UART_SetConfig+0x338>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d176      	bne.n	8009494 <UART_SetConfig+0x18c>
 80093a6:	4ba7      	ldr	r3, [pc, #668]	; (8009644 <UART_SetConfig+0x33c>)
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ae:	2b28      	cmp	r3, #40	; 0x28
 80093b0:	d86c      	bhi.n	800948c <UART_SetConfig+0x184>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0xb0>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	0800945d 	.word	0x0800945d
 80093bc:	0800948d 	.word	0x0800948d
 80093c0:	0800948d 	.word	0x0800948d
 80093c4:	0800948d 	.word	0x0800948d
 80093c8:	0800948d 	.word	0x0800948d
 80093cc:	0800948d 	.word	0x0800948d
 80093d0:	0800948d 	.word	0x0800948d
 80093d4:	0800948d 	.word	0x0800948d
 80093d8:	08009465 	.word	0x08009465
 80093dc:	0800948d 	.word	0x0800948d
 80093e0:	0800948d 	.word	0x0800948d
 80093e4:	0800948d 	.word	0x0800948d
 80093e8:	0800948d 	.word	0x0800948d
 80093ec:	0800948d 	.word	0x0800948d
 80093f0:	0800948d 	.word	0x0800948d
 80093f4:	0800948d 	.word	0x0800948d
 80093f8:	0800946d 	.word	0x0800946d
 80093fc:	0800948d 	.word	0x0800948d
 8009400:	0800948d 	.word	0x0800948d
 8009404:	0800948d 	.word	0x0800948d
 8009408:	0800948d 	.word	0x0800948d
 800940c:	0800948d 	.word	0x0800948d
 8009410:	0800948d 	.word	0x0800948d
 8009414:	0800948d 	.word	0x0800948d
 8009418:	08009475 	.word	0x08009475
 800941c:	0800948d 	.word	0x0800948d
 8009420:	0800948d 	.word	0x0800948d
 8009424:	0800948d 	.word	0x0800948d
 8009428:	0800948d 	.word	0x0800948d
 800942c:	0800948d 	.word	0x0800948d
 8009430:	0800948d 	.word	0x0800948d
 8009434:	0800948d 	.word	0x0800948d
 8009438:	0800947d 	.word	0x0800947d
 800943c:	0800948d 	.word	0x0800948d
 8009440:	0800948d 	.word	0x0800948d
 8009444:	0800948d 	.word	0x0800948d
 8009448:	0800948d 	.word	0x0800948d
 800944c:	0800948d 	.word	0x0800948d
 8009450:	0800948d 	.word	0x0800948d
 8009454:	0800948d 	.word	0x0800948d
 8009458:	08009485 	.word	0x08009485
 800945c:	2301      	movs	r3, #1
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e222      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009464:	2304      	movs	r3, #4
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e21e      	b.n	80098aa <UART_SetConfig+0x5a2>
 800946c:	2308      	movs	r3, #8
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e21a      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009474:	2310      	movs	r3, #16
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e216      	b.n	80098aa <UART_SetConfig+0x5a2>
 800947c:	2320      	movs	r3, #32
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	e212      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009484:	2340      	movs	r3, #64	; 0x40
 8009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800948a:	e20e      	b.n	80098aa <UART_SetConfig+0x5a2>
 800948c:	2380      	movs	r3, #128	; 0x80
 800948e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009492:	e20a      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a6b      	ldr	r2, [pc, #428]	; (8009648 <UART_SetConfig+0x340>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d130      	bne.n	8009500 <UART_SetConfig+0x1f8>
 800949e:	4b69      	ldr	r3, [pc, #420]	; (8009644 <UART_SetConfig+0x33c>)
 80094a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	2b05      	cmp	r3, #5
 80094a8:	d826      	bhi.n	80094f8 <UART_SetConfig+0x1f0>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <UART_SetConfig+0x1a8>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c9 	.word	0x080094c9
 80094b4:	080094d1 	.word	0x080094d1
 80094b8:	080094d9 	.word	0x080094d9
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094e9 	.word	0x080094e9
 80094c4:	080094f1 	.word	0x080094f1
 80094c8:	2300      	movs	r3, #0
 80094ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ce:	e1ec      	b.n	80098aa <UART_SetConfig+0x5a2>
 80094d0:	2304      	movs	r3, #4
 80094d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d6:	e1e8      	b.n	80098aa <UART_SetConfig+0x5a2>
 80094d8:	2308      	movs	r3, #8
 80094da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094de:	e1e4      	b.n	80098aa <UART_SetConfig+0x5a2>
 80094e0:	2310      	movs	r3, #16
 80094e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e6:	e1e0      	b.n	80098aa <UART_SetConfig+0x5a2>
 80094e8:	2320      	movs	r3, #32
 80094ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ee:	e1dc      	b.n	80098aa <UART_SetConfig+0x5a2>
 80094f0:	2340      	movs	r3, #64	; 0x40
 80094f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f6:	e1d8      	b.n	80098aa <UART_SetConfig+0x5a2>
 80094f8:	2380      	movs	r3, #128	; 0x80
 80094fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094fe:	e1d4      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a51      	ldr	r2, [pc, #324]	; (800964c <UART_SetConfig+0x344>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d130      	bne.n	800956c <UART_SetConfig+0x264>
 800950a:	4b4e      	ldr	r3, [pc, #312]	; (8009644 <UART_SetConfig+0x33c>)
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	f003 0307 	and.w	r3, r3, #7
 8009512:	2b05      	cmp	r3, #5
 8009514:	d826      	bhi.n	8009564 <UART_SetConfig+0x25c>
 8009516:	a201      	add	r2, pc, #4	; (adr r2, 800951c <UART_SetConfig+0x214>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	08009535 	.word	0x08009535
 8009520:	0800953d 	.word	0x0800953d
 8009524:	08009545 	.word	0x08009545
 8009528:	0800954d 	.word	0x0800954d
 800952c:	08009555 	.word	0x08009555
 8009530:	0800955d 	.word	0x0800955d
 8009534:	2300      	movs	r3, #0
 8009536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953a:	e1b6      	b.n	80098aa <UART_SetConfig+0x5a2>
 800953c:	2304      	movs	r3, #4
 800953e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009542:	e1b2      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009544:	2308      	movs	r3, #8
 8009546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954a:	e1ae      	b.n	80098aa <UART_SetConfig+0x5a2>
 800954c:	2310      	movs	r3, #16
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e1aa      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009554:	2320      	movs	r3, #32
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e1a6      	b.n	80098aa <UART_SetConfig+0x5a2>
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e1a2      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009564:	2380      	movs	r3, #128	; 0x80
 8009566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956a:	e19e      	b.n	80098aa <UART_SetConfig+0x5a2>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a37      	ldr	r2, [pc, #220]	; (8009650 <UART_SetConfig+0x348>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d130      	bne.n	80095d8 <UART_SetConfig+0x2d0>
 8009576:	4b33      	ldr	r3, [pc, #204]	; (8009644 <UART_SetConfig+0x33c>)
 8009578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	2b05      	cmp	r3, #5
 8009580:	d826      	bhi.n	80095d0 <UART_SetConfig+0x2c8>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <UART_SetConfig+0x280>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	080095a1 	.word	0x080095a1
 800958c:	080095a9 	.word	0x080095a9
 8009590:	080095b1 	.word	0x080095b1
 8009594:	080095b9 	.word	0x080095b9
 8009598:	080095c1 	.word	0x080095c1
 800959c:	080095c9 	.word	0x080095c9
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a6:	e180      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095a8:	2304      	movs	r3, #4
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e17c      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095b0:	2308      	movs	r3, #8
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e178      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095b8:	2310      	movs	r3, #16
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e174      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095c0:	2320      	movs	r3, #32
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e170      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095c8:	2340      	movs	r3, #64	; 0x40
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e16c      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095d0:	2380      	movs	r3, #128	; 0x80
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e168      	b.n	80098aa <UART_SetConfig+0x5a2>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <UART_SetConfig+0x34c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d142      	bne.n	8009668 <UART_SetConfig+0x360>
 80095e2:	4b18      	ldr	r3, [pc, #96]	; (8009644 <UART_SetConfig+0x33c>)
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	d838      	bhi.n	8009660 <UART_SetConfig+0x358>
 80095ee:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <UART_SetConfig+0x2ec>)
 80095f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f4:	0800960d 	.word	0x0800960d
 80095f8:	08009615 	.word	0x08009615
 80095fc:	0800961d 	.word	0x0800961d
 8009600:	08009625 	.word	0x08009625
 8009604:	0800962d 	.word	0x0800962d
 8009608:	08009659 	.word	0x08009659
 800960c:	2300      	movs	r3, #0
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e14a      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009614:	2304      	movs	r3, #4
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e146      	b.n	80098aa <UART_SetConfig+0x5a2>
 800961c:	2308      	movs	r3, #8
 800961e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009622:	e142      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009624:	2310      	movs	r3, #16
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	e13e      	b.n	80098aa <UART_SetConfig+0x5a2>
 800962c:	2320      	movs	r3, #32
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e13a      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009634:	cfff69f3 	.word	0xcfff69f3
 8009638:	58000c00 	.word	0x58000c00
 800963c:	11fff4ff 	.word	0x11fff4ff
 8009640:	40011000 	.word	0x40011000
 8009644:	58024400 	.word	0x58024400
 8009648:	40004400 	.word	0x40004400
 800964c:	40004800 	.word	0x40004800
 8009650:	40004c00 	.word	0x40004c00
 8009654:	40005000 	.word	0x40005000
 8009658:	2340      	movs	r3, #64	; 0x40
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e124      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009660:	2380      	movs	r3, #128	; 0x80
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e120      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4acc      	ldr	r2, [pc, #816]	; (80099a0 <UART_SetConfig+0x698>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d176      	bne.n	8009760 <UART_SetConfig+0x458>
 8009672:	4bcc      	ldr	r3, [pc, #816]	; (80099a4 <UART_SetConfig+0x69c>)
 8009674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800967a:	2b28      	cmp	r3, #40	; 0x28
 800967c:	d86c      	bhi.n	8009758 <UART_SetConfig+0x450>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <UART_SetConfig+0x37c>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	08009729 	.word	0x08009729
 8009688:	08009759 	.word	0x08009759
 800968c:	08009759 	.word	0x08009759
 8009690:	08009759 	.word	0x08009759
 8009694:	08009759 	.word	0x08009759
 8009698:	08009759 	.word	0x08009759
 800969c:	08009759 	.word	0x08009759
 80096a0:	08009759 	.word	0x08009759
 80096a4:	08009731 	.word	0x08009731
 80096a8:	08009759 	.word	0x08009759
 80096ac:	08009759 	.word	0x08009759
 80096b0:	08009759 	.word	0x08009759
 80096b4:	08009759 	.word	0x08009759
 80096b8:	08009759 	.word	0x08009759
 80096bc:	08009759 	.word	0x08009759
 80096c0:	08009759 	.word	0x08009759
 80096c4:	08009739 	.word	0x08009739
 80096c8:	08009759 	.word	0x08009759
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009759 	.word	0x08009759
 80096d4:	08009759 	.word	0x08009759
 80096d8:	08009759 	.word	0x08009759
 80096dc:	08009759 	.word	0x08009759
 80096e0:	08009759 	.word	0x08009759
 80096e4:	08009741 	.word	0x08009741
 80096e8:	08009759 	.word	0x08009759
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009759 	.word	0x08009759
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009759 	.word	0x08009759
 80096fc:	08009759 	.word	0x08009759
 8009700:	08009759 	.word	0x08009759
 8009704:	08009749 	.word	0x08009749
 8009708:	08009759 	.word	0x08009759
 800970c:	08009759 	.word	0x08009759
 8009710:	08009759 	.word	0x08009759
 8009714:	08009759 	.word	0x08009759
 8009718:	08009759 	.word	0x08009759
 800971c:	08009759 	.word	0x08009759
 8009720:	08009759 	.word	0x08009759
 8009724:	08009751 	.word	0x08009751
 8009728:	2301      	movs	r3, #1
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e0bc      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009730:	2304      	movs	r3, #4
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e0b8      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e0b4      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009740:	2310      	movs	r3, #16
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e0b0      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009748:	2320      	movs	r3, #32
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e0ac      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009750:	2340      	movs	r3, #64	; 0x40
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e0a8      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009758:	2380      	movs	r3, #128	; 0x80
 800975a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975e:	e0a4      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a90      	ldr	r2, [pc, #576]	; (80099a8 <UART_SetConfig+0x6a0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d130      	bne.n	80097cc <UART_SetConfig+0x4c4>
 800976a:	4b8e      	ldr	r3, [pc, #568]	; (80099a4 <UART_SetConfig+0x69c>)
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	2b05      	cmp	r3, #5
 8009774:	d826      	bhi.n	80097c4 <UART_SetConfig+0x4bc>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <UART_SetConfig+0x474>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	08009795 	.word	0x08009795
 8009780:	0800979d 	.word	0x0800979d
 8009784:	080097a5 	.word	0x080097a5
 8009788:	080097ad 	.word	0x080097ad
 800978c:	080097b5 	.word	0x080097b5
 8009790:	080097bd 	.word	0x080097bd
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979a:	e086      	b.n	80098aa <UART_SetConfig+0x5a2>
 800979c:	2304      	movs	r3, #4
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e082      	b.n	80098aa <UART_SetConfig+0x5a2>
 80097a4:	2308      	movs	r3, #8
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e07e      	b.n	80098aa <UART_SetConfig+0x5a2>
 80097ac:	2310      	movs	r3, #16
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e07a      	b.n	80098aa <UART_SetConfig+0x5a2>
 80097b4:	2320      	movs	r3, #32
 80097b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ba:	e076      	b.n	80098aa <UART_SetConfig+0x5a2>
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c2:	e072      	b.n	80098aa <UART_SetConfig+0x5a2>
 80097c4:	2380      	movs	r3, #128	; 0x80
 80097c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ca:	e06e      	b.n	80098aa <UART_SetConfig+0x5a2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a76      	ldr	r2, [pc, #472]	; (80099ac <UART_SetConfig+0x6a4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d130      	bne.n	8009838 <UART_SetConfig+0x530>
 80097d6:	4b73      	ldr	r3, [pc, #460]	; (80099a4 <UART_SetConfig+0x69c>)
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	2b05      	cmp	r3, #5
 80097e0:	d826      	bhi.n	8009830 <UART_SetConfig+0x528>
 80097e2:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <UART_SetConfig+0x4e0>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	08009801 	.word	0x08009801
 80097ec:	08009809 	.word	0x08009809
 80097f0:	08009811 	.word	0x08009811
 80097f4:	08009819 	.word	0x08009819
 80097f8:	08009821 	.word	0x08009821
 80097fc:	08009829 	.word	0x08009829
 8009800:	2300      	movs	r3, #0
 8009802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009806:	e050      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009808:	2304      	movs	r3, #4
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e04c      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009810:	2308      	movs	r3, #8
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e048      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009818:	2310      	movs	r3, #16
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e044      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009820:	2320      	movs	r3, #32
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e040      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e03c      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009830:	2380      	movs	r3, #128	; 0x80
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e038      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a5c      	ldr	r2, [pc, #368]	; (80099b0 <UART_SetConfig+0x6a8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d130      	bne.n	80098a4 <UART_SetConfig+0x59c>
 8009842:	4b58      	ldr	r3, [pc, #352]	; (80099a4 <UART_SetConfig+0x69c>)
 8009844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	2b05      	cmp	r3, #5
 800984c:	d826      	bhi.n	800989c <UART_SetConfig+0x594>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <UART_SetConfig+0x54c>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	0800986d 	.word	0x0800986d
 8009858:	08009875 	.word	0x08009875
 800985c:	0800987d 	.word	0x0800987d
 8009860:	08009885 	.word	0x08009885
 8009864:	0800988d 	.word	0x0800988d
 8009868:	08009895 	.word	0x08009895
 800986c:	2302      	movs	r3, #2
 800986e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009872:	e01a      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009874:	2304      	movs	r3, #4
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e016      	b.n	80098aa <UART_SetConfig+0x5a2>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e012      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009884:	2310      	movs	r3, #16
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e00e      	b.n	80098aa <UART_SetConfig+0x5a2>
 800988c:	2320      	movs	r3, #32
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e00a      	b.n	80098aa <UART_SetConfig+0x5a2>
 8009894:	2340      	movs	r3, #64	; 0x40
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e006      	b.n	80098aa <UART_SetConfig+0x5a2>
 800989c:	2380      	movs	r3, #128	; 0x80
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e002      	b.n	80098aa <UART_SetConfig+0x5a2>
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a40      	ldr	r2, [pc, #256]	; (80099b0 <UART_SetConfig+0x6a8>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	f040 80ef 	bne.w	8009a94 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	dc46      	bgt.n	800994c <UART_SetConfig+0x644>
 80098be:	2b02      	cmp	r3, #2
 80098c0:	f2c0 8081 	blt.w	80099c6 <UART_SetConfig+0x6be>
 80098c4:	3b02      	subs	r3, #2
 80098c6:	2b1e      	cmp	r3, #30
 80098c8:	d87d      	bhi.n	80099c6 <UART_SetConfig+0x6be>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x5c8>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009953 	.word	0x08009953
 80098d4:	080099c7 	.word	0x080099c7
 80098d8:	0800995b 	.word	0x0800995b
 80098dc:	080099c7 	.word	0x080099c7
 80098e0:	080099c7 	.word	0x080099c7
 80098e4:	080099c7 	.word	0x080099c7
 80098e8:	0800996b 	.word	0x0800996b
 80098ec:	080099c7 	.word	0x080099c7
 80098f0:	080099c7 	.word	0x080099c7
 80098f4:	080099c7 	.word	0x080099c7
 80098f8:	080099c7 	.word	0x080099c7
 80098fc:	080099c7 	.word	0x080099c7
 8009900:	080099c7 	.word	0x080099c7
 8009904:	080099c7 	.word	0x080099c7
 8009908:	0800997b 	.word	0x0800997b
 800990c:	080099c7 	.word	0x080099c7
 8009910:	080099c7 	.word	0x080099c7
 8009914:	080099c7 	.word	0x080099c7
 8009918:	080099c7 	.word	0x080099c7
 800991c:	080099c7 	.word	0x080099c7
 8009920:	080099c7 	.word	0x080099c7
 8009924:	080099c7 	.word	0x080099c7
 8009928:	080099c7 	.word	0x080099c7
 800992c:	080099c7 	.word	0x080099c7
 8009930:	080099c7 	.word	0x080099c7
 8009934:	080099c7 	.word	0x080099c7
 8009938:	080099c7 	.word	0x080099c7
 800993c:	080099c7 	.word	0x080099c7
 8009940:	080099c7 	.word	0x080099c7
 8009944:	080099c7 	.word	0x080099c7
 8009948:	080099b9 	.word	0x080099b9
 800994c:	2b40      	cmp	r3, #64	; 0x40
 800994e:	d036      	beq.n	80099be <UART_SetConfig+0x6b6>
 8009950:	e039      	b.n	80099c6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009952:	f7fe f937 	bl	8007bc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009956:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009958:	e03b      	b.n	80099d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995a:	f107 0314 	add.w	r3, r7, #20
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe f946 	bl	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009968:	e033      	b.n	80099d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800996a:	f107 0308 	add.w	r3, r7, #8
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fa92 	bl	8007e98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009978:	e02b      	b.n	80099d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800997a:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <UART_SetConfig+0x69c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0320 	and.w	r3, r3, #32
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009986:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <UART_SetConfig+0x69c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	4a08      	ldr	r2, [pc, #32]	; (80099b4 <UART_SetConfig+0x6ac>)
 8009992:	fa22 f303 	lsr.w	r3, r2, r3
 8009996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009998:	e01b      	b.n	80099d2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800999a:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <UART_SetConfig+0x6ac>)
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800999e:	e018      	b.n	80099d2 <UART_SetConfig+0x6ca>
 80099a0:	40011400 	.word	0x40011400
 80099a4:	58024400 	.word	0x58024400
 80099a8:	40007800 	.word	0x40007800
 80099ac:	40007c00 	.word	0x40007c00
 80099b0:	58000c00 	.word	0x58000c00
 80099b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099b8:	4bc4      	ldr	r3, [pc, #784]	; (8009ccc <UART_SetConfig+0x9c4>)
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099bc:	e009      	b.n	80099d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099c4:	e005      	b.n	80099d2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 81da 	beq.w	8009d8e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	4abc      	ldr	r2, [pc, #752]	; (8009cd0 <UART_SetConfig+0x9c8>)
 80099e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099e4:	461a      	mov	r2, r3
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	4413      	add	r3, r2
 80099f8:	6a3a      	ldr	r2, [r7, #32]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d305      	bcc.n	8009a0a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a04:	6a3a      	ldr	r2, [r7, #32]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d903      	bls.n	8009a12 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a10:	e1bd      	b.n	8009d8e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	4618      	mov	r0, r3
 8009a16:	f04f 0100 	mov.w	r1, #0
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	4aac      	ldr	r2, [pc, #688]	; (8009cd0 <UART_SetConfig+0x9c8>)
 8009a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	f04f 0300 	mov.w	r3, #0
 8009a2a:	f7f6 fc55 	bl	80002d8 <__aeabi_uldivmod>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4610      	mov	r0, r2
 8009a34:	4619      	mov	r1, r3
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	020b      	lsls	r3, r1, #8
 8009a40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a44:	0202      	lsls	r2, r0, #8
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	6849      	ldr	r1, [r1, #4]
 8009a4a:	0849      	lsrs	r1, r1, #1
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	f04f 0100 	mov.w	r1, #0
 8009a52:	1814      	adds	r4, r2, r0
 8009a54:	eb43 0501 	adc.w	r5, r3, r1
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f04f 0300 	mov.w	r3, #0
 8009a62:	4620      	mov	r0, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7f6 fc37 	bl	80002d8 <__aeabi_uldivmod>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4613      	mov	r3, r2
 8009a70:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a78:	d308      	bcc.n	8009a8c <UART_SetConfig+0x784>
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a80:	d204      	bcs.n	8009a8c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a88:	60da      	str	r2, [r3, #12]
 8009a8a:	e180      	b.n	8009d8e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a92:	e17c      	b.n	8009d8e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a9c:	f040 80bf 	bne.w	8009c1e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	dc49      	bgt.n	8009b3c <UART_SetConfig+0x834>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db7c      	blt.n	8009ba6 <UART_SetConfig+0x89e>
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d87a      	bhi.n	8009ba6 <UART_SetConfig+0x89e>
 8009ab0:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <UART_SetConfig+0x7b0>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009b43 	.word	0x08009b43
 8009abc:	08009b4b 	.word	0x08009b4b
 8009ac0:	08009ba7 	.word	0x08009ba7
 8009ac4:	08009ba7 	.word	0x08009ba7
 8009ac8:	08009b53 	.word	0x08009b53
 8009acc:	08009ba7 	.word	0x08009ba7
 8009ad0:	08009ba7 	.word	0x08009ba7
 8009ad4:	08009ba7 	.word	0x08009ba7
 8009ad8:	08009b63 	.word	0x08009b63
 8009adc:	08009ba7 	.word	0x08009ba7
 8009ae0:	08009ba7 	.word	0x08009ba7
 8009ae4:	08009ba7 	.word	0x08009ba7
 8009ae8:	08009ba7 	.word	0x08009ba7
 8009aec:	08009ba7 	.word	0x08009ba7
 8009af0:	08009ba7 	.word	0x08009ba7
 8009af4:	08009ba7 	.word	0x08009ba7
 8009af8:	08009b73 	.word	0x08009b73
 8009afc:	08009ba7 	.word	0x08009ba7
 8009b00:	08009ba7 	.word	0x08009ba7
 8009b04:	08009ba7 	.word	0x08009ba7
 8009b08:	08009ba7 	.word	0x08009ba7
 8009b0c:	08009ba7 	.word	0x08009ba7
 8009b10:	08009ba7 	.word	0x08009ba7
 8009b14:	08009ba7 	.word	0x08009ba7
 8009b18:	08009ba7 	.word	0x08009ba7
 8009b1c:	08009ba7 	.word	0x08009ba7
 8009b20:	08009ba7 	.word	0x08009ba7
 8009b24:	08009ba7 	.word	0x08009ba7
 8009b28:	08009ba7 	.word	0x08009ba7
 8009b2c:	08009ba7 	.word	0x08009ba7
 8009b30:	08009ba7 	.word	0x08009ba7
 8009b34:	08009ba7 	.word	0x08009ba7
 8009b38:	08009b99 	.word	0x08009b99
 8009b3c:	2b40      	cmp	r3, #64	; 0x40
 8009b3e:	d02e      	beq.n	8009b9e <UART_SetConfig+0x896>
 8009b40:	e031      	b.n	8009ba6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b42:	f7fd f8d3 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 8009b46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b48:	e033      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b4a:	f7fd f8e5 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 8009b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b50:	e02f      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b52:	f107 0314 	add.w	r3, r7, #20
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe f84a 	bl	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b60:	e027      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe f996 	bl	8007e98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b70:	e01f      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b72:	4b58      	ldr	r3, [pc, #352]	; (8009cd4 <UART_SetConfig+0x9cc>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b7e:	4b55      	ldr	r3, [pc, #340]	; (8009cd4 <UART_SetConfig+0x9cc>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	08db      	lsrs	r3, r3, #3
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	4a53      	ldr	r2, [pc, #332]	; (8009cd8 <UART_SetConfig+0x9d0>)
 8009b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b90:	e00f      	b.n	8009bb2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009b92:	4b51      	ldr	r3, [pc, #324]	; (8009cd8 <UART_SetConfig+0x9d0>)
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b96:	e00c      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b98:	4b4c      	ldr	r3, [pc, #304]	; (8009ccc <UART_SetConfig+0x9c4>)
 8009b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b9c:	e009      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ba4:	e005      	b.n	8009bb2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 80ea 	beq.w	8009d8e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	4a44      	ldr	r2, [pc, #272]	; (8009cd0 <UART_SetConfig+0x9c8>)
 8009bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bcc:	005a      	lsls	r2, r3, #1
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	441a      	add	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	2b0f      	cmp	r3, #15
 8009be6:	d916      	bls.n	8009c16 <UART_SetConfig+0x90e>
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bee:	d212      	bcs.n	8009c16 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	f023 030f 	bic.w	r3, r3, #15
 8009bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	085b      	lsrs	r3, r3, #1
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	f003 0307 	and.w	r3, r3, #7
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c12:	60da      	str	r2, [r3, #12]
 8009c14:	e0bb      	b.n	8009d8e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c1c:	e0b7      	b.n	8009d8e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	dc4a      	bgt.n	8009cbc <UART_SetConfig+0x9b4>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f2c0 8086 	blt.w	8009d38 <UART_SetConfig+0xa30>
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	f200 8083 	bhi.w	8009d38 <UART_SetConfig+0xa30>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <UART_SetConfig+0x930>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009cc3 	.word	0x08009cc3
 8009c3c:	08009cdd 	.word	0x08009cdd
 8009c40:	08009d39 	.word	0x08009d39
 8009c44:	08009d39 	.word	0x08009d39
 8009c48:	08009ce5 	.word	0x08009ce5
 8009c4c:	08009d39 	.word	0x08009d39
 8009c50:	08009d39 	.word	0x08009d39
 8009c54:	08009d39 	.word	0x08009d39
 8009c58:	08009cf5 	.word	0x08009cf5
 8009c5c:	08009d39 	.word	0x08009d39
 8009c60:	08009d39 	.word	0x08009d39
 8009c64:	08009d39 	.word	0x08009d39
 8009c68:	08009d39 	.word	0x08009d39
 8009c6c:	08009d39 	.word	0x08009d39
 8009c70:	08009d39 	.word	0x08009d39
 8009c74:	08009d39 	.word	0x08009d39
 8009c78:	08009d05 	.word	0x08009d05
 8009c7c:	08009d39 	.word	0x08009d39
 8009c80:	08009d39 	.word	0x08009d39
 8009c84:	08009d39 	.word	0x08009d39
 8009c88:	08009d39 	.word	0x08009d39
 8009c8c:	08009d39 	.word	0x08009d39
 8009c90:	08009d39 	.word	0x08009d39
 8009c94:	08009d39 	.word	0x08009d39
 8009c98:	08009d39 	.word	0x08009d39
 8009c9c:	08009d39 	.word	0x08009d39
 8009ca0:	08009d39 	.word	0x08009d39
 8009ca4:	08009d39 	.word	0x08009d39
 8009ca8:	08009d39 	.word	0x08009d39
 8009cac:	08009d39 	.word	0x08009d39
 8009cb0:	08009d39 	.word	0x08009d39
 8009cb4:	08009d39 	.word	0x08009d39
 8009cb8:	08009d2b 	.word	0x08009d2b
 8009cbc:	2b40      	cmp	r3, #64	; 0x40
 8009cbe:	d037      	beq.n	8009d30 <UART_SetConfig+0xa28>
 8009cc0:	e03a      	b.n	8009d38 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cc2:	f7fd f813 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 8009cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cc8:	e03c      	b.n	8009d44 <UART_SetConfig+0xa3c>
 8009cca:	bf00      	nop
 8009ccc:	003d0900 	.word	0x003d0900
 8009cd0:	0800a56c 	.word	0x0800a56c
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cdc:	f7fd f81c 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 8009ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ce2:	e02f      	b.n	8009d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce4:	f107 0314 	add.w	r3, r7, #20
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fd ff81 	bl	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf2:	e027      	b.n	8009d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cf4:	f107 0308 	add.w	r3, r7, #8
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe f8cd 	bl	8007e98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d02:	e01f      	b.n	8009d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d04:	4b2c      	ldr	r3, [pc, #176]	; (8009db8 <UART_SetConfig+0xab0>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d009      	beq.n	8009d24 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d10:	4b29      	ldr	r3, [pc, #164]	; (8009db8 <UART_SetConfig+0xab0>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	08db      	lsrs	r3, r3, #3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	4a28      	ldr	r2, [pc, #160]	; (8009dbc <UART_SetConfig+0xab4>)
 8009d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d22:	e00f      	b.n	8009d44 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009d24:	4b25      	ldr	r3, [pc, #148]	; (8009dbc <UART_SetConfig+0xab4>)
 8009d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d28:	e00c      	b.n	8009d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d2a:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <UART_SetConfig+0xab8>)
 8009d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d2e:	e009      	b.n	8009d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d36:	e005      	b.n	8009d44 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d42:	bf00      	nop
    }

    if (pclk != 0U)
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d021      	beq.n	8009d8e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	4a1d      	ldr	r2, [pc, #116]	; (8009dc4 <UART_SetConfig+0xabc>)
 8009d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	085b      	lsrs	r3, r3, #1
 8009d62:	441a      	add	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	2b0f      	cmp	r3, #15
 8009d74:	d908      	bls.n	8009d88 <UART_SetConfig+0xa80>
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d7c:	d204      	bcs.n	8009d88 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d84:	60da      	str	r2, [r3, #12]
 8009d86:	e002      	b.n	8009d8e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009daa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3738      	adds	r7, #56	; 0x38
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bdb0      	pop	{r4, r5, r7, pc}
 8009db6:	bf00      	nop
 8009db8:	58024400 	.word	0x58024400
 8009dbc:	03d09000 	.word	0x03d09000
 8009dc0:	003d0900 	.word	0x003d0900
 8009dc4:	0800a56c 	.word	0x0800a56c

08009dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00a      	beq.n	8009df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	430a      	orrs	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3a:	f003 0308 	and.w	r3, r3, #8
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	f003 0320 	and.w	r3, r3, #32
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01a      	beq.n	8009ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ec6:	d10a      	bne.n	8009ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	605a      	str	r2, [r3, #4]
  }
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f1c:	f7f8 fc02 	bl	8002724 <HAL_GetTick>
 8009f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0308 	and.w	r3, r3, #8
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d10e      	bne.n	8009f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f82f 	bl	8009fa2 <UART_WaitOnFlagUntilTimeout>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e025      	b.n	8009f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d10e      	bne.n	8009f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f819 	bl	8009fa2 <UART_WaitOnFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e00f      	b.n	8009f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	603b      	str	r3, [r7, #0]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fb2:	e062      	b.n	800a07a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fba:	d05e      	beq.n	800a07a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fbc:	f7f8 fbb2 	bl	8002724 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d302      	bcc.n	8009fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d11d      	bne.n	800a00e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fe0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0201 	bic.w	r2, r2, #1
 8009ff0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e045      	b.n	800a09a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d02e      	beq.n	800a07a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a02a:	d126      	bne.n	800a07a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 0201 	bic.w	r2, r2, #1
 800a054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2220      	movs	r2, #32
 800a06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e00f      	b.n	800a09a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	69da      	ldr	r2, [r3, #28]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4013      	ands	r3, r2
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	429a      	cmp	r2, r3
 800a088:	bf0c      	ite	eq
 800a08a:	2301      	moveq	r3, #1
 800a08c:	2300      	movne	r3, #0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	429a      	cmp	r2, r3
 800a096:	d08d      	beq.n	8009fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a0b8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a0c8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6899      	ldr	r1, [r3, #8]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b0f      	ldr	r3, [pc, #60]	; (800a140 <UART_EndRxTransfer+0x60>)
 800a104:	400b      	ands	r3, r1
 800a106:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d107      	bne.n	800a120 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0210 	bic.w	r2, r2, #16
 800a11e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2220      	movs	r2, #32
 800a124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	effffffe 	.word	0xeffffffe

0800a144 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15a:	d014      	beq.n	800a186 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a172:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a182:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a184:	e002      	b.n	800a18c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff f89e 	bl	80092c8 <HAL_UART_TxCpltCallback>
}
 800a18c:	bf00      	nop
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7ff f89a 	bl	80092dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1a8:	bf00      	nop
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d8:	2b80      	cmp	r3, #128	; 0x80
 800a1da:	d109      	bne.n	800a1f0 <UART_DMAError+0x40>
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b21      	cmp	r3, #33	; 0x21
 800a1e0:	d106      	bne.n	800a1f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	f7ff ff59 	bl	800a0a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fa:	2b40      	cmp	r3, #64	; 0x40
 800a1fc:	d109      	bne.n	800a212 <UART_DMAError+0x62>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b22      	cmp	r3, #34	; 0x22
 800a202:	d106      	bne.n	800a212 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2200      	movs	r2, #0
 800a208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a20c:	6978      	ldr	r0, [r7, #20]
 800a20e:	f7ff ff67 	bl	800a0e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a218:	f043 0210 	orr.w	r2, r3, #16
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a222:	6978      	ldr	r0, [r7, #20]
 800a224:	f7f7 fc02 	bl	8001a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a228:	bf00      	nop
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f7f7 fbec 	bl	8001a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a272:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2220      	movs	r2, #32
 800a278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7ff f820 	bl	80092c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UARTEx_EnableFifoMode+0x16>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e02b      	b.n	800a33a <HAL_UARTEx_EnableFifoMode+0x6e>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2224      	movs	r2, #36	; 0x24
 800a2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0201 	bic.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a318:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f88a 	bl	800a43c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a356:	2302      	movs	r3, #2
 800a358:	e02d      	b.n	800a3b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2224      	movs	r2, #36	; 0x24
 800a366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0201 	bic.w	r2, r2, #1
 800a380:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f850 	bl	800a43c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d101      	bne.n	800a3d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e02d      	b.n	800a432 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2224      	movs	r2, #36	; 0x24
 800a3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0201 	bic.w	r2, r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f812 	bl	800a43c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2220      	movs	r2, #32
 800a424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d108      	bne.n	800a45e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a45c:	e031      	b.n	800a4c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a45e:	2310      	movs	r3, #16
 800a460:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a462:	2310      	movs	r3, #16
 800a464:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	0e5b      	lsrs	r3, r3, #25
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	0f5b      	lsrs	r3, r3, #29
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0307 	and.w	r3, r3, #7
 800a484:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	7b3a      	ldrb	r2, [r7, #12]
 800a48a:	4911      	ldr	r1, [pc, #68]	; (800a4d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a48c:	5c8a      	ldrb	r2, [r1, r2]
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a492:	7b3a      	ldrb	r2, [r7, #12]
 800a494:	490f      	ldr	r1, [pc, #60]	; (800a4d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a496:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a498:	fb93 f3f2 	sdiv	r3, r3, r2
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	7b7a      	ldrb	r2, [r7, #13]
 800a4a8:	4909      	ldr	r1, [pc, #36]	; (800a4d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a4aa:	5c8a      	ldrb	r2, [r1, r2]
 800a4ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4b0:	7b7a      	ldrb	r2, [r7, #13]
 800a4b2:	4908      	ldr	r1, [pc, #32]	; (800a4d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4c2:	bf00      	nop
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	0800a584 	.word	0x0800a584
 800a4d4:	0800a58c 	.word	0x0800a58c

0800a4d8 <__libc_init_array>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	4d0d      	ldr	r5, [pc, #52]	; (800a510 <__libc_init_array+0x38>)
 800a4dc:	4c0d      	ldr	r4, [pc, #52]	; (800a514 <__libc_init_array+0x3c>)
 800a4de:	1b64      	subs	r4, r4, r5
 800a4e0:	10a4      	asrs	r4, r4, #2
 800a4e2:	2600      	movs	r6, #0
 800a4e4:	42a6      	cmp	r6, r4
 800a4e6:	d109      	bne.n	800a4fc <__libc_init_array+0x24>
 800a4e8:	4d0b      	ldr	r5, [pc, #44]	; (800a518 <__libc_init_array+0x40>)
 800a4ea:	4c0c      	ldr	r4, [pc, #48]	; (800a51c <__libc_init_array+0x44>)
 800a4ec:	f000 f820 	bl	800a530 <_init>
 800a4f0:	1b64      	subs	r4, r4, r5
 800a4f2:	10a4      	asrs	r4, r4, #2
 800a4f4:	2600      	movs	r6, #0
 800a4f6:	42a6      	cmp	r6, r4
 800a4f8:	d105      	bne.n	800a506 <__libc_init_array+0x2e>
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a500:	4798      	blx	r3
 800a502:	3601      	adds	r6, #1
 800a504:	e7ee      	b.n	800a4e4 <__libc_init_array+0xc>
 800a506:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50a:	4798      	blx	r3
 800a50c:	3601      	adds	r6, #1
 800a50e:	e7f2      	b.n	800a4f6 <__libc_init_array+0x1e>
 800a510:	0800a59c 	.word	0x0800a59c
 800a514:	0800a59c 	.word	0x0800a59c
 800a518:	0800a59c 	.word	0x0800a59c
 800a51c:	0800a5a0 	.word	0x0800a5a0

0800a520 <memset>:
 800a520:	4402      	add	r2, r0
 800a522:	4603      	mov	r3, r0
 800a524:	4293      	cmp	r3, r2
 800a526:	d100      	bne.n	800a52a <memset+0xa>
 800a528:	4770      	bx	lr
 800a52a:	f803 1b01 	strb.w	r1, [r3], #1
 800a52e:	e7f9      	b.n	800a524 <memset+0x4>

0800a530 <_init>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr

0800a53c <_fini>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr
