
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009704  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  080099f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cec  24000040  08009a20  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24001d2c  08009a20  00021d2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5d4  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fb4  00000000  00000000  0003d62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000db8  00000000  00000000  000405e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ce0  00000000  00000000  00041398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037505  00000000  00000000  00042078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012ed6  00000000  00000000  0007957d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f415  00000000  00000000  0008c453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001eb868  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000388c  00000000  00000000  001eb8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009984 	.word	0x08009984

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009984 	.word	0x08009984

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
//	length of the recieve buffer array
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005da:	817b      	strh	r3, [r7, #10]
//	length of a half transfer of recieve buffer
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
//	length of transmit buffer
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
//	set the transmit buffer to a known value
	for (int i = 0; i < txCount; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e00f      	b.n	800060e <main+0x3e>
		aTxBuffer[i] = i % 16384;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4aa9      	ldr	r2, [pc, #676]	; (80008a8 <main+0x2d8>)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i) {
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	69fa      	ldr	r2, [r7, #28]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4ba5      	ldr	r3, [pc, #660]	; (80008ac <main+0x2dc>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b9f      	ldr	r3, [pc, #636]	; (80008ac <main+0x2dc>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b9a      	ldr	r3, [pc, #616]	; (80008ac <main+0x2dc>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a99      	ldr	r2, [pc, #612]	; (80008ac <main+0x2dc>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
	//  SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f001 fa16 	bl	8001a8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f976 	bl	8000950 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

//    initialize GPIO
	MX_GPIO_Init();
 8000664:	f000 fb90 	bl	8000d88 <MX_GPIO_Init>
//	initialize the compensation cell to improve slew rate
	HAL_EnableCompensationCell();
 8000668:	f001 fae2 	bl	8001c30 <HAL_EnableCompensationCell>
//	initialize the DMA, must be done before other peripherals
	MX_DMA_Init();
 800066c:	f000 fb4c 	bl	8000d08 <MX_DMA_Init>
//	initialize UART1, going to the ft232 interface
	MX_USART1_UART_Init();
 8000670:	f000 faa2 	bl	8000bb8 <MX_USART1_UART_Init>
//	initialize URT3, going to the STLINK interface
	MX_USART3_UART_Init();
 8000674:	f000 faee 	bl	8000c54 <MX_USART3_UART_Init>

//	initialize SPI1 interface, going to the breadboard converter
	MX_SPI1_Init();
 8000678:	f000 f9f0 	bl	8000a5c <MX_SPI1_Init>
//	initialize the SPI2 interface, going to the pcb converter
    MX_SPI2_Init();
 800067c:	f000 fa46 	bl	8000b0c <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

//  stall until the user button is pressed
	while (UserButtonStatus == 0) {
 8000680:	e005      	b.n	800068e <main+0xbe>
		BSP_LED_Toggle(LED1);
 8000682:	2000      	movs	r0, #0
 8000684:	f001 f89e 	bl	80017c4 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f001 fa91 	bl	8001bb0 <HAL_Delay>
	while (UserButtonStatus == 0) {
 800068e:	4b88      	ldr	r3, [pc, #544]	; (80008b0 <main+0x2e0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f5      	beq.n	8000682 <main+0xb2>
	}
//	reset the user button status
	UserButtonStatus = 0;
 8000696:	4b86      	ldr	r3, [pc, #536]	; (80008b0 <main+0x2e0>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
//	reset LEDS
	BSP_LED_Off(LED1);
 800069c:	2000      	movs	r0, #0
 800069e:	f001 f867 	bl	8001770 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f864 	bl	8001770 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f001 f861 	bl	8001770 <BSP_LED_Off>

	/* Configure communication direction : 1Line */
	SPI_1LINE_RX(&hspi1);
 80006ae:	4b81      	ldr	r3, [pc, #516]	; (80008b4 <main+0x2e4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b7f      	ldr	r3, [pc, #508]	; (80008b4 <main+0x2e4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006bc:	601a      	str	r2, [r3, #0]

//	configure the half transfer callback function to update the wTransferState value
	hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006be:	4b7d      	ldr	r3, [pc, #500]	; (80008b4 <main+0x2e4>)
 80006c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006c2:	4a7d      	ldr	r2, [pc, #500]	; (80008b8 <main+0x2e8>)
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40

//	enable the transfer complete and half transfer interupts for SPI1
	SET_BIT(SPI1_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <main+0x2ec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a7c      	ldr	r2, [pc, #496]	; (80008bc <main+0x2ec>)
 80006cc:	f043 0318 	orr.w	r3, r3, #24
 80006d0:	6013      	str	r3, [r2, #0]
//	start the DMA transfer on SPI1, use HAL library to perform initial configurations
	if (HAL_DMA_Start(hspi1.hdmarx, (uint32_t) &hspi1.Instance->RXDR,
 80006d2:	4b78      	ldr	r3, [pc, #480]	; (80008b4 <main+0x2e4>)
 80006d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80006d6:	4b77      	ldr	r3, [pc, #476]	; (80008b4 <main+0x2e4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3330      	adds	r3, #48	; 0x30
 80006dc:	4619      	mov	r1, r3
 80006de:	4a78      	ldr	r2, [pc, #480]	; (80008c0 <main+0x2f0>)
 80006e0:	897b      	ldrh	r3, [r7, #10]
 80006e2:	f001 ff53 	bl	800258c <HAL_DMA_Start>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00d      	beq.n	8000708 <main+0x138>
					(uint32_t) aRxBuffer, rxCount) != HAL_OK) {
//		if the DMA initalization was not OK, set the error bit
		SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80006ec:	4b71      	ldr	r3, [pc, #452]	; (80008b4 <main+0x2e4>)
 80006ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	4a6f      	ldr	r2, [pc, #444]	; (80008b4 <main+0x2e4>)
 80006f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
//		reset SPI ready state
		hspi1.State = HAL_SPI_STATE_READY;
 80006fc:	4b6d      	ldr	r3, [pc, #436]	; (80008b4 <main+0x2e4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
//		call our custom error handler
		Error_Handler();
 8000704:	f000 fc47 	bl	8000f96 <Error_Handler>
	}

//	set the transfer size to 0 (unlimited)
	MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8000708:	4b6a      	ldr	r3, [pc, #424]	; (80008b4 <main+0x2e4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6859      	ldr	r1, [r3, #4]
 800070e:	4b69      	ldr	r3, [pc, #420]	; (80008b4 <main+0x2e4>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <main+0x2f4>)
 8000714:	400b      	ands	r3, r1
 8000716:	6053      	str	r3, [r2, #4]

//	enable DMA requests on the SPI instance
	SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000718:	4b66      	ldr	r3, [pc, #408]	; (80008b4 <main+0x2e4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	4b65      	ldr	r3, [pc, #404]	; (80008b4 <main+0x2e4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000726:	609a      	str	r2, [r3, #8]

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000728:	4b62      	ldr	r3, [pc, #392]	; (80008b4 <main+0x2e4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	691a      	ldr	r2, [r3, #16]
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <main+0x2e4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000736:	611a      	str	r2, [r3, #16]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(&hspi1);
 8000738:	4b5e      	ldr	r3, [pc, #376]	; (80008b4 <main+0x2e4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b5d      	ldr	r3, [pc, #372]	; (80008b4 <main+0x2e4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	601a      	str	r2, [r3, #0]

//	start the SPI transfers
	SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000748:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <main+0x2e4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <main+0x2e4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000756:	601a      	str	r2, [r3, #0]

//	wait for the first half of the transfer to complete
	while (wTransferState != TRANSFER_H_COMPLETE) {
 8000758:	e005      	b.n	8000766 <main+0x196>
//		toggle LED2 every 20 ms
		HAL_Delay(20);
 800075a:	2014      	movs	r0, #20
 800075c:	f001 fa28 	bl	8001bb0 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8000760:	2002      	movs	r0, #2
 8000762:	f001 f82f 	bl	80017c4 <BSP_LED_Toggle>
	while (wTransferState != TRANSFER_H_COMPLETE) {
 8000766:	4b58      	ldr	r3, [pc, #352]	; (80008c8 <main+0x2f8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d1f5      	bne.n	800075a <main+0x18a>
	}
//	reset transfer state
	wTransferState = TRANSFER_WAIT;
 800076e:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <main+0x2f8>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
//	reset LEDs
	BSP_LED_Off(LED1);
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fffb 	bl	8001770 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fff8 	bl	8001770 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000780:	2002      	movs	r0, #2
 8000782:	f000 fff5 	bl	8001770 <BSP_LED_Off>
	int j = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
	aTxBuffer[0] = aRxBuffer[0];
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <main+0x2f0>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <main+0x2d8>)
 8000792:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < txCount; ++i, j += OVERSAMPLING) {
 8000794:	2301      	movs	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e011      	b.n	80007be <main+0x1ee>
		j += OVERSAMPLING;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	3301      	adds	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
		aTxBuffer[i] = aRxBuffer[j];
 80007a0:	4a47      	ldr	r2, [pc, #284]	; (80008c0 <main+0x2f0>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	b299      	uxth	r1, r3
 80007aa:	4a3f      	ldr	r2, [pc, #252]	; (80008a8 <main+0x2d8>)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < txCount; ++i, j += OVERSAMPLING) {
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbe9      	blt.n	800079a <main+0x1ca>
	}
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer))
 80007c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ca:	4937      	ldr	r1, [pc, #220]	; (80008a8 <main+0x2d8>)
 80007cc:	483f      	ldr	r0, [pc, #252]	; (80008cc <main+0x2fc>)
 80007ce:	f007 fc6b 	bl	80080a8 <HAL_UART_Transmit_DMA>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <main+0x20c>
			!= HAL_OK) {
		Error_Handler();
 80007d8:	f000 fbdd 	bl	8000f96 <Error_Handler>
	}
	HAL_SuspendTick();
 80007dc:	f001 fa0c 	bl	8001bf8 <HAL_SuspendTick>
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 80007e0:	2027      	movs	r0, #39	; 0x27
 80007e2:	f001 fb5c 	bl	8001e9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 80007e6:	200c      	movs	r0, #12
 80007e8:	f001 fb59 	bl	8001e9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 80007ec:	2038      	movs	r0, #56	; 0x38
 80007ee:	f001 fb56 	bl	8001e9e <HAL_NVIC_DisableIRQ>
	BSP_LED_Off(LED3);
 80007f2:	2002      	movs	r0, #2
 80007f4:	f000 ffbc 	bl	8001770 <BSP_LED_Off>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
 80007f8:	bf00      	nop
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <main+0x300>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	2b20      	cmp	r3, #32
 8000804:	d1f9      	bne.n	80007fa <main+0x22a>
		DMA2->LIFCR = DMA_FLAG_TCIF0_4;
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <main+0x300>)
 8000808:	2220      	movs	r2, #32
 800080a:	609a      	str	r2, [r3, #8]
		j = rxOffset;
 800080c:	893b      	ldrh	r3, [r7, #8]
 800080e:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[j];
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <main+0x2f0>)
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <main+0x2d8>)
 800081c:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e00e      	b.n	8000842 <main+0x272>
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
			j += OVERSAMPLING;
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	3301      	adds	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <main+0x2f0>)
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000832:	b299      	uxth	r1, r3
 8000834:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <main+0x2d8>)
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	3301      	adds	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	429a      	cmp	r2, r3
 8000848:	dbec      	blt.n	8000824 <main+0x254>
		}

		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 800084a:	bf00      	nop
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <main+0x304>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000854:	2b40      	cmp	r3, #64	; 0x40
 8000856:	d1f9      	bne.n	800084c <main+0x27c>
		USART3->ICR = UART_CLEAR_TCF;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <main+0x304>)
 800085a:	2240      	movs	r2, #64	; 0x40
 800085c:	621a      	str	r2, [r3, #32]
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <main+0x308>)
 8000860:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000864:	609a      	str	r2, [r3, #8]
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <main+0x30c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <main+0x30c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6013      	str	r3, [r2, #0]
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <main+0x304>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <main+0x304>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6093      	str	r3, [r2, #8]

		while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4) {
 800087e:	bf00      	nop
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <main+0x300>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	2b10      	cmp	r3, #16
 800088a:	d1f9      	bne.n	8000880 <main+0x2b0>
		}
		DMA2->LIFCR = DMA_FLAG_HTIF0_4;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <main+0x300>)
 800088e:	2210      	movs	r2, #16
 8000890:	609a      	str	r2, [r3, #8]
		j = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[0];
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <main+0x2f0>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <main+0x2d8>)
 800089e:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 80008a0:	2301      	movs	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e02b      	b.n	80008fe <main+0x32e>
 80008a6:	bf00      	nop
 80008a8:	24000080 	.word	0x24000080
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	24000060 	.word	0x24000060
 80008b4:	24001b90 	.word	0x24001b90
 80008b8:	08000f3d 	.word	0x08000f3d
 80008bc:	40020410 	.word	0x40020410
 80008c0:	24000880 	.word	0x24000880
 80008c4:	ffff0000 	.word	0xffff0000
 80008c8:	2400005c 	.word	0x2400005c
 80008cc:	24001908 	.word	0x24001908
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40004800 	.word	0x40004800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020028 	.word	0x40020028
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
			j += OVERSAMPLING;
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	3301      	adds	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <main+0x36c>)
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ee:	b299      	uxth	r1, r3
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <main+0x370>)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbec      	blt.n	80008e0 <main+0x310>
		}

		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) {
 8000906:	bf00      	nop
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <main+0x374>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000910:	2b40      	cmp	r3, #64	; 0x40
 8000912:	d1f9      	bne.n	8000908 <main+0x338>
		}
		USART3->ICR = UART_CLEAR_TCF;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <main+0x374>)
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	621a      	str	r2, [r3, #32]
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <main+0x378>)
 800091c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000920:	609a      	str	r2, [r3, #8]
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <main+0x37c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <main+0x37c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6013      	str	r3, [r2, #0]
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <main+0x374>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <main+0x374>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6093      	str	r3, [r2, #8]
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
 800093a:	e75d      	b.n	80007f8 <main+0x228>
 800093c:	24000880 	.word	0x24000880
 8000940:	24000080 	.word	0x24000080
 8000944:	40004800 	.word	0x40004800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020028 	.word	0x40020028

08000950 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	224c      	movs	r2, #76	; 0x4c
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f009 f808 	bl	8009974 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2220      	movs	r2, #32
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f009 f802 	bl	8009974 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000970:	2002      	movs	r0, #2
 8000972:	f004 fc3b 	bl	80051ec <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <SystemClock_Config+0x100>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <SystemClock_Config+0x100>)
 8000980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <SystemClock_Config+0x100>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <SystemClock_Config+0x104>)
 8000992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <SystemClock_Config+0x104>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <SystemClock_Config+0x104>)
 800099e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80009a8:	bf00      	nop
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemClock_Config+0x100>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b6:	d1f8      	bne.n	80009aa <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <SystemClock_Config+0x108>)
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	f023 0303 	bic.w	r3, r3, #3
 80009c0:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <SystemClock_Config+0x108>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80009c8:	2321      	movs	r3, #33	; 0x21
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009d2:	2301      	movs	r3, #1
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	2302      	movs	r3, #2
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 115;
 80009e2:	2373      	movs	r3, #115	; 0x73
 80009e4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f2:	230c      	movs	r3, #12
 80009f4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fc2c 	bl	8005260 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a0e:	f000 fac2 	bl	8000f96 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a12:	233f      	movs	r3, #63	; 0x3f
 8000a14:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2303      	movs	r3, #3
 8000a18:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2104      	movs	r1, #4
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 f821 	bl	8005a80 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xf8>
		Error_Handler();
 8000a44:	f000 faa7 	bl	8000f96 <Error_Handler>
	}

}
 8000a48:	bf00      	nop
 8000a4a:	3770      	adds	r7, #112	; 0x70
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024800 	.word	0x58024800
 8000a54:	58000400 	.word	0x58000400
 8000a58:	58024400 	.word	0x58024400

08000a5c <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a62:	4a29      	ldr	r2, [pc, #164]	; (8000b08 <MX_SPI1_Init+0xac>)
 8000a64:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a6c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a74:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a78:	220d      	movs	r2, #13
 8000a7a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a82:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a90:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ad8:	2220      	movs	r2, #32
 8000ada:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000af0:	f006 feb4 	bl	800785c <HAL_SPI_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_SPI1_Init+0xa2>
		Error_Handler();
 8000afa:	f000 fa4c 	bl	8000f96 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	24001b90 	.word	0x24001b90
 8000b08:	40013000 	.word	0x40013000

08000b0c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b12:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <MX_SPI2_Init+0xa8>)
 8000b14:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b1c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b26:	220f      	movs	r2, #15
 8000b28:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b3c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b9c:	f006 fe5e 	bl	800785c <HAL_SPI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI2_Init+0x9e>
		Error_Handler();
 8000ba6:	f000 f9f6 	bl	8000f96 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	24001880 	.word	0x24001880
 8000bb4:	40003800 	.word	0x40003800

08000bb8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bc0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 12000000;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <MX_USART1_UART_Init+0x98>)
 8000bc6:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bdc:	220c      	movs	r2, #12
 8000bde:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000be8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bec:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c02:	f007 fa00 	bl	8008006 <HAL_UART_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000c0c:	f000 f9c3 	bl	8000f96 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000c10:	2100      	movs	r1, #0
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c14:	f008 fdbf 	bl	8009796 <HAL_UARTEx_SetTxFifoThreshold>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000c1e:	f000 f9ba 	bl	8000f96 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c26:	f008 fdf4 	bl	8009812 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000c30:	f000 f9b1 	bl	8000f96 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c36:	f008 fd73 	bl	8009720 <HAL_UARTEx_EnableFifoMode>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000c40:	f000 f9a9 	bl	8000f96 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24001b00 	.word	0x24001b00
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	00b71b00 	.word	0x00b71b00

08000c54 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <MX_USART3_UART_Init+0xac>)
 8000c5c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 11978688;
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <MX_USART3_UART_Init+0xb0>)
 8000c62:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6a:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c78:	220c      	movs	r2, #12
 8000c7a:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c88:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
	huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ca2:	4816      	ldr	r0, [pc, #88]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000ca4:	f007 f9af 	bl	8008006 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART3_UART_Init+0x5e>
		Error_Handler();
 8000cae:	f000 f972 	bl	8000f96 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000cb6:	f008 fd6e 	bl	8009796 <HAL_UARTEx_SetTxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000cc0:	f000 f969 	bl	8000f96 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000cc8:	f008 fda3 	bl	8009812 <HAL_UARTEx_SetRxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x82>
			!= HAL_OK) {
		Error_Handler();
 8000cd2:	f000 f960 	bl	8000f96 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK) {
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <MX_USART3_UART_Init+0xa8>)
 8000cd8:	f008 fd22 	bl	8009720 <HAL_UARTEx_EnableFifoMode>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART3_UART_Init+0x92>
		Error_Handler();
 8000ce2:	f000 f958 	bl	8000f96 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2027      	movs	r0, #39	; 0x27
 8000cec:	f001 f8af 	bl	8001e4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf0:	2027      	movs	r0, #39	; 0x27
 8000cf2:	f001 f8c6 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24001908 	.word	0x24001908
 8000d00:	40004800 	.word	0x40004800
 8000d04:	00b6c7c0 	.word	0x00b6c7c0

08000d08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_DMA_Init+0x7c>)
 8000d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <MX_DMA_Init+0x7c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_DMA_Init+0x7c>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_DMA_Init+0x7c>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <MX_DMA_Init+0x7c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_DMA_Init+0x7c>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200b      	movs	r0, #11
 8000d50:	f001 f87d 	bl	8001e4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d54:	200b      	movs	r0, #11
 8000d56:	f001 f894 	bl	8001e82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200c      	movs	r0, #12
 8000d60:	f001 f875 	bl	8001e4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d64:	200c      	movs	r0, #12
 8000d66:	f001 f88c 	bl	8001e82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2038      	movs	r0, #56	; 0x38
 8000d70:	f001 f86d 	bl	8001e4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d74:	2038      	movs	r0, #56	; 0x38
 8000d76:	f001 f884 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58024400 	.word	0x58024400

08000d88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <MX_GPIO_Init+0x174>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a55      	ldr	r2, [pc, #340]	; (8000efc <MX_GPIO_Init+0x174>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <MX_GPIO_Init+0x174>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <MX_GPIO_Init+0x174>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <MX_GPIO_Init+0x174>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <MX_GPIO_Init+0x174>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b48      	ldr	r3, [pc, #288]	; (8000efc <MX_GPIO_Init+0x174>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4a46      	ldr	r2, [pc, #280]	; (8000efc <MX_GPIO_Init+0x174>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4b44      	ldr	r3, [pc, #272]	; (8000efc <MX_GPIO_Init+0x174>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b40      	ldr	r3, [pc, #256]	; (8000efc <MX_GPIO_Init+0x174>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a3f      	ldr	r2, [pc, #252]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a37      	ldr	r2, [pc, #220]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a30      	ldr	r2, [pc, #192]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_GPIO_Init+0x174>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e76:	4822      	ldr	r0, [pc, #136]	; (8000f00 <MX_GPIO_Init+0x178>)
 8000e78:	f004 f96a 	bl	8005150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <MX_GPIO_Init+0x17c>)
 8000e82:	f004 f965 	bl	8005150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_GPIO_Init+0x180>)
 8000e9c:	f003 ffa8 	bl	8004df0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000ea0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ea4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_GPIO_Init+0x178>)
 8000eba:	f003 ff99 	bl	8004df0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <MX_GPIO_Init+0x17c>)
 8000ed6:	f003 ff8b 	bl	8004df0 <HAL_GPIO_Init>

	BSP_LED_Init(LED1);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 fba8 	bl	8001630 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 fba5 	bl	8001630 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 fba2 	bl	8001630 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000eec:	2101      	movs	r1, #1
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 fc92 	bl	8001818 <BSP_PB_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020400 	.word	0x58020400
 8000f04:	58021000 	.word	0x58021000
 8000f08:	58020800 	.word	0x58020800

08000f0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_USER_PIN) {
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f1c:	d105      	bne.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1e>
		UserButtonStatus ^= 1;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f28:	6013      	str	r3, [r2, #0]
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	24000060 	.word	0x24000060

08000f3c <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_H_COMPLETE;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <tx_h_complete+0x1c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2400005c 	.word	0x2400005c

08000f5c <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_SPI_ErrorCallback+0x1c>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2400005c 	.word	0x2400005c

08000f7c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000f84:	2002      	movs	r0, #2
 8000f86:	f000 fbc9 	bl	800171c <BSP_LED_On>
	Error_Handler();
 8000f8a:	f000 f804 	bl	8000f96 <Error_Handler>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9a:	b672      	cpsid	i
}
 8000f9c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		BSP_LED_Toggle(LED3);
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 fc10 	bl	80017c4 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fe03 	bl	8001bb0 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8000faa:	e7f8      	b.n	8000f9e <Error_Handler+0x8>

08000fac <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_MspInit+0x30>)
 8000fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x30>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x30>)
 8000fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	58024400 	.word	0x58024400

08000fe0 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0bc      	sub	sp, #240	; 0xf0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fe8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	22bc      	movs	r2, #188	; 0xbc
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f008 fcb7 	bl	8009974 <memset>
	if (hspi->Instance == SPI1) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4aa0      	ldr	r2, [pc, #640]	; (800128c <HAL_SPI_MspInit+0x2ac>)
 800100c:	4293      	cmp	r3, r2
 800100e:	f040 8096 	bne.w	800113e <HAL_SPI_MspInit+0x15e>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	623b      	str	r3, [r7, #32]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	67fb      	str	r3, [r7, #124]	; 0x7c
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800101e:	2304      	movs	r3, #4
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001022:	f240 1317 	movw	r3, #279	; 0x117
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001028:	2320      	movs	r3, #32
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 800102c:	2302      	movs	r3, #2
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001030:	2302      	movs	r3, #2
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001034:	2340      	movs	r3, #64	; 0x40
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4618      	mov	r0, r3
 8001046:	f005 f8a7 	bl	8006198 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_SPI_MspInit+0x74>
			Error_Handler();
 8001050:	f7ff ffa1 	bl	8000f96 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001054:	4b8e      	ldr	r3, [pc, #568]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 8001056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800105a:	4a8d      	ldr	r2, [pc, #564]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001060:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001064:	4b8a      	ldr	r3, [pc, #552]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 8001066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800106a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b87      	ldr	r3, [pc, #540]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a85      	ldr	r2, [pc, #532]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b83      	ldr	r3, [pc, #524]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	69bb      	ldr	r3, [r7, #24]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA15 (JTDI)     ------> SPI1_NSS
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 8001090:	f248 0360 	movw	r3, #32864	; 0x8060
 8001094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b4:	4619      	mov	r1, r3
 80010b6:	4877      	ldr	r0, [pc, #476]	; (8001294 <HAL_SPI_MspInit+0x2b4>)
 80010b8:	f003 fe9a 	bl	8004df0 <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = DMA2_Stream0;
 80010bc:	4b76      	ldr	r3, [pc, #472]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010be:	4a77      	ldr	r2, [pc, #476]	; (800129c <HAL_SPI_MspInit+0x2bc>)
 80010c0:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010c2:	4b75      	ldr	r3, [pc, #468]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010c4:	2225      	movs	r2, #37	; 0x25
 80010c6:	605a      	str	r2, [r3, #4]
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ce:	4b72      	ldr	r3, [pc, #456]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d4:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010da:	611a      	str	r2, [r3, #16]
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010dc:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e2:	615a      	str	r2, [r3, #20]
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e4:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	619a      	str	r2, [r3, #24]
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f2:	61da      	str	r2, [r3, #28]
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001100:	4b65      	ldr	r3, [pc, #404]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001106:	4b64      	ldr	r3, [pc, #400]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800110c:	4b62      	ldr	r3, [pc, #392]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 8001112:	4861      	ldr	r0, [pc, #388]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 8001114:	f000 fede 	bl	8001ed4 <HAL_DMA_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_SPI_MspInit+0x142>
			Error_Handler();
 800111e:	f7ff ff3a 	bl	8000f96 <Error_Handler>
		}

		__HAL_LINKDMA(hspi, hdmarx, hdma_spi1_rx);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 8001126:	67da      	str	r2, [r3, #124]	; 0x7c
 8001128:	4a5b      	ldr	r2, [pc, #364]	; (8001298 <HAL_SPI_MspInit+0x2b8>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2023      	movs	r0, #35	; 0x23
 8001134:	f000 fe8b 	bl	8001e4e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001138:	2023      	movs	r0, #35	; 0x23
 800113a:	f000 fea2 	bl	8001e82 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}
	if (hspi->Instance == SPI2) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a57      	ldr	r2, [pc, #348]	; (80012a0 <HAL_SPI_MspInit+0x2c0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f040 809d 	bne.w	8001284 <HAL_SPI_MspInit+0x2a4>
		/* USER CODE BEGIN SPI2_MspInit 0 */

		/* USER CODE END SPI2_MspInit 0 */
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	623b      	str	r3, [r7, #32]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	67fb      	str	r3, [r7, #124]	; 0x7c
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001156:	2304      	movs	r3, #4
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800115a:	f240 1317 	movw	r3, #279	; 0x117
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001160:	2320      	movs	r3, #32
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001164:	2302      	movs	r3, #2
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001170:	2300      	movs	r3, #0
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f80b 	bl	8006198 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_SPI_MspInit+0x1ac>
			Error_Handler();
 8001188:	f7ff ff05 	bl	8000f96 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 800118e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001192:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 800119e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4a37      	ldr	r2, [pc, #220]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a28      	ldr	r2, [pc, #160]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_SPI_MspInit+0x2b0>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
		 PC2_C     ------> SPI2_MISO
		 PC3_C     ------> SPI2_MOSI
		 PB12     ------> SPI2_NSS
		 PD3     ------> SPI2_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001204:	230c      	movs	r3, #12
 8001206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121c:	2305      	movs	r3, #5
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001222:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001226:	4619      	mov	r1, r3
 8001228:	481e      	ldr	r0, [pc, #120]	; (80012a4 <HAL_SPI_MspInit+0x2c4>)
 800122a:	f003 fde1 	bl	8004df0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001248:	2305      	movs	r3, #5
 800124a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <HAL_SPI_MspInit+0x2c8>)
 8001256:	f003 fdcb 	bl	8004df0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800125a:	2308      	movs	r3, #8
 800125c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001272:	2305      	movs	r3, #5
 8001274:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001278:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800127c:	4619      	mov	r1, r3
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <HAL_SPI_MspInit+0x2cc>)
 8001280:	f003 fdb6 	bl	8004df0 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}

}
 8001284:	bf00      	nop
 8001286:	37f0      	adds	r7, #240	; 0xf0
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40013000 	.word	0x40013000
 8001290:	58024400 	.word	0x58024400
 8001294:	58020000 	.word	0x58020000
 8001298:	24001c18 	.word	0x24001c18
 800129c:	40020410 	.word	0x40020410
 80012a0:	40003800 	.word	0x40003800
 80012a4:	58020800 	.word	0x58020800
 80012a8:	58020400 	.word	0x58020400
 80012ac:	58020c00 	.word	0x58020c00

080012b0 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0ba      	sub	sp, #232	; 0xe8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	22bc      	movs	r2, #188	; 0xbc
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 fb4f 	bl	8009974 <memset>
	if (huart->Instance == USART1) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a94      	ldr	r2, [pc, #592]	; (800152c <HAL_UART_MspInit+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	f040 8098 	bne.w	8001412 <HAL_UART_MspInit+0x162>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80012e6:	2304      	movs	r3, #4
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80012ea:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80012f0:	2309      	movs	r3, #9
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80012f4:	2308      	movs	r3, #8
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001302:	2300      	movs	r3, #0
 8001304:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	65bb      	str	r3, [r7, #88]	; 0x58
		PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800130a:	2310      	movs	r3, #16
 800130c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f004 ff3f 	bl	8006198 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_UART_MspInit+0x74>
			Error_Handler();
 8001320:	f7ff fe39 	bl	8000f96 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001324:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800132a:	4a81      	ldr	r2, [pc, #516]	; (8001530 <HAL_UART_MspInit+0x280>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001334:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <HAL_UART_MspInit+0x280>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001352:	4b77      	ldr	r3, [pc, #476]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PB15     ------> USART1_RX
		 PB6     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800137a:	2304      	movs	r3, #4
 800137c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001384:	4619      	mov	r1, r3
 8001386:	486b      	ldr	r0, [pc, #428]	; (8001534 <HAL_UART_MspInit+0x284>)
 8001388:	f003 fd32 	bl	8004df0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a4:	2307      	movs	r3, #7
 80013a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4860      	ldr	r0, [pc, #384]	; (8001534 <HAL_UART_MspInit+0x284>)
 80013b2:	f003 fd1d 	bl	8004df0 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream0;
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013b8:	4a60      	ldr	r2, [pc, #384]	; (800153c <HAL_UART_MspInit+0x28c>)
 80013ba:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013be:	222a      	movs	r2, #42	; 0x2a
 80013c0:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013c4:	2240      	movs	r2, #64	; 0x40
 80013c6:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d4:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d6:	4b58      	ldr	r3, [pc, #352]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013e2:	4b55      	ldr	r3, [pc, #340]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80013f4:	4850      	ldr	r0, [pc, #320]	; (8001538 <HAL_UART_MspInit+0x288>)
 80013f6:	f000 fd6d 	bl	8001ed4 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_UART_MspInit+0x154>
			Error_Handler();
 8001400:	f7ff fdc9 	bl	8000f96 <Error_Handler>
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_UART_MspInit+0x288>)
 8001408:	679a      	str	r2, [r3, #120]	; 0x78
 800140a:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <HAL_UART_MspInit+0x288>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6393      	str	r3, [r2, #56]	; 0x38
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8001410:	e088      	b.n	8001524 <HAL_UART_MspInit+0x274>
	} else if (huart->Instance == USART3) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_UART_MspInit+0x290>)
 8001418:	4293      	cmp	r3, r2
 800141a:	f040 8083 	bne.w	8001524 <HAL_UART_MspInit+0x274>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001422:	2304      	movs	r3, #4
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001426:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 800142c:	2309      	movs	r3, #9
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001430:	2308      	movs	r3, #8
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001434:	2302      	movs	r3, #2
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800143e:	2300      	movs	r3, #0
 8001440:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	65bb      	str	r3, [r7, #88]	; 0x58
		PeriphClkInitStruct.Usart234578ClockSelection =
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fea1 	bl	8006198 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_MspInit+0x1b0>
			Error_Handler();
 800145c:	f7ff fd9b 	bl	8000f96 <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_UART_MspInit+0x280>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 800149c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b6:	2307      	movs	r3, #7
 80014b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4820      	ldr	r0, [pc, #128]	; (8001544 <HAL_UART_MspInit+0x294>)
 80014c4:	f003 fc94 	bl	8004df0 <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014ca:	4a20      	ldr	r2, [pc, #128]	; (800154c <HAL_UART_MspInit+0x29c>)
 80014cc:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014d0:	222e      	movs	r2, #46	; 0x2e
 80014d2:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f4:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_UART_MspInit+0x298>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_UART_MspInit+0x298>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 8001508:	480f      	ldr	r0, [pc, #60]	; (8001548 <HAL_UART_MspInit+0x298>)
 800150a:	f000 fce3 	bl	8001ed4 <HAL_DMA_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0x268>
			Error_Handler();
 8001514:	f7ff fd3f 	bl	8000f96 <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_UART_MspInit+0x298>)
 800151c:	679a      	str	r2, [r3, #120]	; 0x78
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_UART_MspInit+0x298>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001524:	bf00      	nop
 8001526:	37e8      	adds	r7, #232	; 0xe8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40011000 	.word	0x40011000
 8001530:	58024400 	.word	0x58024400
 8001534:	58020400 	.word	0x58020400
 8001538:	24001a88 	.word	0x24001a88
 800153c:	40020010 	.word	0x40020010
 8001540:	40004800 	.word	0x40004800
 8001544:	58020c00 	.word	0x58020c00
 8001548:	24001a10 	.word	0x24001a10
 800154c:	40020028 	.word	0x40020028

08001550 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800159c:	f000 fae8 	bl	8001b70 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	BSP_LED_On(LED3);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 f8b7 	bl	800171c <BSP_LED_On>
	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015ae:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA1_Stream0_IRQHandler+0x14>)
 80015b0:	f002 f8d8 	bl	8003764 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	24001a88 	.word	0x24001a88

080015bc <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f000 f8ab 	bl	800171c <BSP_LED_On>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_usart3_tx);
	DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <DMA1_Stream1_IRQHandler+0x18>)
 80015c8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80015cc:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020000 	.word	0x40020000

080015d8 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	BSP_LED_On(LED3);
 80015dc:	2002      	movs	r0, #2
 80015de:	f000 f89d 	bl	800171c <BSP_LED_On>
	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA2_Stream0_IRQHandler+0x14>)
 80015e4:	f002 f8be 	bl	8003764 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24001c18 	.word	0x24001c18

080015f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 80015f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015f8:	f003 fddd 	bl	80051b6 <HAL_GPIO_EXTI_IRQHandler>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001604:	2002      	movs	r0, #2
 8001606:	f000 f889 	bl	800171c <BSP_LED_On>
	HAL_UART_IRQHandler(&huart3);
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <USART3_IRQHandler+0x14>)
 800160c:	f006 fdcc 	bl	80081a8 <HAL_UART_IRQHandler>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24001908 	.word	0x24001908

08001618 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 800161c:	2002      	movs	r0, #2
 800161e:	f000 f87d 	bl	800171c <BSP_LED_On>
	HAL_SPI_IRQHandler(&hspi1);
 8001622:	4802      	ldr	r0, [pc, #8]	; (800162c <SPI1_IRQHandler+0x14>)
 8001624:	f006 fa1c 	bl	8007a60 <HAL_SPI_IRQHandler>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	24001b90 	.word	0x24001b90

08001630 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d009      	beq.n	8001658 <BSP_LED_Init+0x28>
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d006      	beq.n	8001658 <BSP_LED_Init+0x28>
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d003      	beq.n	8001658 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001650:	f06f 0301 	mvn.w	r3, #1
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001656:	e055      	b.n	8001704 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10f      	bne.n	800167e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <BSP_LED_Init+0xe0>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	4a2a      	ldr	r2, [pc, #168]	; (8001710 <BSP_LED_Init+0xe0>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <BSP_LED_Init+0xe0>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	e021      	b.n	80016c2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10f      	bne.n	80016a4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <BSP_LED_Init+0xe0>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	4a21      	ldr	r2, [pc, #132]	; (8001710 <BSP_LED_Init+0xe0>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <BSP_LED_Init+0xe0>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	e00e      	b.n	80016c2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <BSP_LED_Init+0xe0>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <BSP_LED_Init+0xe0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <BSP_LED_Init+0xe0>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4a13      	ldr	r2, [pc, #76]	; (8001714 <BSP_LED_Init+0xe4>)
 80016c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ca:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <BSP_LED_Init+0xe8>)
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	f107 0218 	add.w	r2, r7, #24
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fb82 	bl	8004df0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <BSP_LED_Init+0xe8>)
 80016f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4a07      	ldr	r2, [pc, #28]	; (8001714 <BSP_LED_Init+0xe4>)
 80016f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	f003 fd26 	bl	8005150 <HAL_GPIO_WritePin>
  }

  return ret;
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001706:	4618      	mov	r0, r3
 8001708:	3730      	adds	r7, #48	; 0x30
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	58024400 	.word	0x58024400
 8001714:	0800999c 	.word	0x0800999c
 8001718:	24000000 	.word	0x24000000

0800171c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d009      	beq.n	8001744 <BSP_LED_On+0x28>
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d006      	beq.n	8001744 <BSP_LED_On+0x28>
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d003      	beq.n	8001744 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800173c:	f06f 0301 	mvn.w	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e00b      	b.n	800175c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <BSP_LED_On+0x4c>)
 8001748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <BSP_LED_On+0x50>)
 8001750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	f003 fcfa 	bl	8005150 <HAL_GPIO_WritePin>
  }

  return ret;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24000000 	.word	0x24000000
 800176c:	0800999c 	.word	0x0800999c

08001770 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <BSP_LED_Off+0x28>
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d006      	beq.n	8001798 <BSP_LED_Off+0x28>
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d003      	beq.n	8001798 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001790:	f06f 0301 	mvn.w	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00b      	b.n	80017b0 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <BSP_LED_Off+0x4c>)
 800179c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <BSP_LED_Off+0x50>)
 80017a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	f003 fcd0 	bl	8005150 <HAL_GPIO_WritePin>
  }

  return ret;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24000000 	.word	0x24000000
 80017c0:	0800999c 	.word	0x0800999c

080017c4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <BSP_LED_Toggle+0x28>
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d006      	beq.n	80017ec <BSP_LED_Toggle+0x28>
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d003      	beq.n	80017ec <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017e4:	f06f 0301 	mvn.w	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e00b      	b.n	8001804 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <BSP_LED_Toggle+0x4c>)
 80017f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4907      	ldr	r1, [pc, #28]	; (8001814 <BSP_LED_Toggle+0x50>)
 80017f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4610      	mov	r0, r2
 8001800:	f003 fcbf 	bl	8005182 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000000 	.word	0x24000000
 8001814:	0800999c 	.word	0x0800999c

08001818 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <BSP_PB_Init+0xc8>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	4a2c      	ldr	r2, [pc, #176]	; (80018e0 <BSP_PB_Init+0xc8>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <BSP_PB_Init+0xc8>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800184c:	2302      	movs	r3, #2
 800184e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <BSP_PB_Init+0xcc>)
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	f107 020c 	add.w	r2, r7, #12
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fabf 	bl	8004df0 <HAL_GPIO_Init>
 8001872:	e030      	b.n	80018d6 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <BSP_PB_Init+0xd0>)
 8001876:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <BSP_PB_Init+0xcc>)
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	f107 020c 	add.w	r2, r7, #12
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fab2 	bl	8004df0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4a16      	ldr	r2, [pc, #88]	; (80018ec <BSP_PB_Init+0xd4>)
 8001892:	441a      	add	r2, r3
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4916      	ldr	r1, [pc, #88]	; (80018f0 <BSP_PB_Init+0xd8>)
 8001898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f003 fa91 	bl	8004dc6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4a10      	ldr	r2, [pc, #64]	; (80018ec <BSP_PB_Init+0xd4>)
 80018aa:	1898      	adds	r0, r3, r2
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <BSP_PB_Init+0xdc>)
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	461a      	mov	r2, r3
 80018b6:	2100      	movs	r1, #0
 80018b8:	f003 fa66 	bl	8004d88 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018bc:	2028      	movs	r0, #40	; 0x28
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <BSP_PB_Init+0xe0>)
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	f000 fac0 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018ce:	2328      	movs	r3, #40	; 0x28
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fad6 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	58024400 	.word	0x58024400
 80018e4:	2400000c 	.word	0x2400000c
 80018e8:	11110000 	.word	0x11110000
 80018ec:	24001c90 	.word	0x24001c90
 80018f0:	080099a4 	.word	0x080099a4
 80018f4:	24000010 	.word	0x24000010
 80018f8:	24000014 	.word	0x24000014

080018fc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fff0 	bl	80018fc <BSP_PB_Callback>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <SystemInit+0xec>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <SystemInit+0xec>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <SystemInit+0xf0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	2b06      	cmp	r3, #6
 800193e:	d807      	bhi.n	8001950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <SystemInit+0xf0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <SystemInit+0xf0>)
 800194a:	f043 0307 	orr.w	r3, r3, #7
 800194e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <SystemInit+0xf4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <SystemInit+0xf4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <SystemInit+0xf4>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <SystemInit+0xf4>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	492b      	ldr	r1, [pc, #172]	; (8001a14 <SystemInit+0xf4>)
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <SystemInit+0xf8>)
 800196a:	4013      	ands	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <SystemInit+0xf0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <SystemInit+0xf0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 030f 	bic.w	r3, r3, #15
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <SystemInit+0xf0>)
 8001984:	f043 0307 	orr.w	r3, r3, #7
 8001988:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <SystemInit+0xf4>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <SystemInit+0xf4>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <SystemInit+0xf4>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <SystemInit+0xf4>)
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <SystemInit+0xfc>)
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <SystemInit+0xf4>)
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <SystemInit+0x100>)
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <SystemInit+0xf4>)
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <SystemInit+0x104>)
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <SystemInit+0xf4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <SystemInit+0xf4>)
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <SystemInit+0x104>)
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <SystemInit+0xf4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <SystemInit+0xf4>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <SystemInit+0x104>)
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SystemInit+0xf4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <SystemInit+0xf4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <SystemInit+0xf4>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <SystemInit+0xf4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <SystemInit+0x108>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <SystemInit+0x10c>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ea:	d202      	bcs.n	80019f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <SystemInit+0x110>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <SystemInit+0x114>)
 80019f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SystemInit+0xec>)
 80019fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	52002000 	.word	0x52002000
 8001a14:	58024400 	.word	0x58024400
 8001a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a1c:	02020200 	.word	0x02020200
 8001a20:	01ff0000 	.word	0x01ff0000
 8001a24:	01010280 	.word	0x01010280
 8001a28:	5c001000 	.word	0x5c001000
 8001a2c:	ffff0000 	.word	0xffff0000
 8001a30:	51008108 	.word	0x51008108
 8001a34:	52004000 	.word	0x52004000

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a3c:	f7ff ff70 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a42:	490d      	ldr	r1, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a58:	4c0a      	ldr	r4, [pc, #40]	; (8001a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f007 ff61 	bl	800992c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7fe fdb1 	bl	80005d0 <main>
  bx  lr
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a78:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001a7c:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 8001a80:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001a84:	24001d2c 	.word	0x24001d2c

08001a88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC3_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a92:	2003      	movs	r0, #3
 8001a94:	f000 f9d0 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a98:	f004 f9a8 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_Init+0x68>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	4913      	ldr	r1, [pc, #76]	; (8001af8 <HAL_Init+0x6c>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_Init+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_Init+0x6c>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_Init+0x70>)
 8001ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_Init+0x74>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f814 	bl	8001b04 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e002      	b.n	8001aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fa61 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	58024400 	.word	0x58024400
 8001af8:	080099a8 	.word	0x080099a8
 8001afc:	2400001c 	.word	0x2400001c
 8001b00:	24000018 	.word	0x24000018

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_InitTick+0x60>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e021      	b.n	8001b5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_InitTick+0x64>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_InitTick+0x60>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f9c3 	bl	8001eba <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 f97f 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x68>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	24000024 	.word	0x24000024
 8001b68:	24000018 	.word	0x24000018
 8001b6c:	24000020 	.word	0x24000020

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	24000024 	.word	0x24000024
 8001b94:	24001d28 	.word	0x24001d28

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	24001d28 	.word	0x24001d28

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	24000024 	.word	0x24000024

08001bf8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_SuspendTick+0x1c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_SuspendTick+0x1c>)
 8001c02:	f023 0302 	bic.w	r3, r3, #2
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetREVID+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0c1b      	lsrs	r3, r3, #16
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	5c001000 	.word	0x5c001000

08001c30 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_EnableCompensationCell+0x1c>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_EnableCompensationCell+0x1c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	58000400 	.word	0x58000400

08001c50 <__NVIC_SetPriorityGrouping>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	05fa0000 	.word	0x05fa0000

08001c98 <__NVIC_GetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_DisableIRQ>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db12      	blt.n	8001d28 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	490a      	ldr	r1, [pc, #40]	; (8001d34 <__NVIC_DisableIRQ+0x44>)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	3320      	adds	r3, #32
 8001d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1c:	f3bf 8f4f 	dsb	sy
}
 8001d20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d22:	f3bf 8f6f 	isb	sy
}
 8001d26:	bf00      	nop
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff05 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff1c 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff0f 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff1f 	bl	8001cf0 <__NVIC_DisableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff96 	bl	8001df4 <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff fe5c 	bl	8001b98 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e316      	b.n	800251a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a66      	ldr	r2, [pc, #408]	; (800208c <HAL_DMA_Init+0x1b8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d04a      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a65      	ldr	r2, [pc, #404]	; (8002090 <HAL_DMA_Init+0x1bc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d045      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_DMA_Init+0x1c0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d040      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a62      	ldr	r2, [pc, #392]	; (8002098 <HAL_DMA_Init+0x1c4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d03b      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a60      	ldr	r2, [pc, #384]	; (800209c <HAL_DMA_Init+0x1c8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d036      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5f      	ldr	r2, [pc, #380]	; (80020a0 <HAL_DMA_Init+0x1cc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d031      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_DMA_Init+0x1d0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02c      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <HAL_DMA_Init+0x1d4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d027      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5a      	ldr	r2, [pc, #360]	; (80020ac <HAL_DMA_Init+0x1d8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d022      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a59      	ldr	r2, [pc, #356]	; (80020b0 <HAL_DMA_Init+0x1dc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01d      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a57      	ldr	r2, [pc, #348]	; (80020b4 <HAL_DMA_Init+0x1e0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d018      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_DMA_Init+0x1e4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a54      	ldr	r2, [pc, #336]	; (80020bc <HAL_DMA_Init+0x1e8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00e      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a53      	ldr	r2, [pc, #332]	; (80020c0 <HAL_DMA_Init+0x1ec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	; (80020c4 <HAL_DMA_Init+0x1f0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_DMA_Init+0xb8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <HAL_DMA_Init+0x1f4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0xbc>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_Init+0xbe>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 813b 	beq.w	800220e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a37      	ldr	r2, [pc, #220]	; (800208c <HAL_DMA_Init+0x1b8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d04a      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a36      	ldr	r2, [pc, #216]	; (8002090 <HAL_DMA_Init+0x1bc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d045      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_DMA_Init+0x1c0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d040      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <HAL_DMA_Init+0x1c4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d03b      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a31      	ldr	r2, [pc, #196]	; (800209c <HAL_DMA_Init+0x1c8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d036      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_DMA_Init+0x1cc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d031      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2e      	ldr	r2, [pc, #184]	; (80020a4 <HAL_DMA_Init+0x1d0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02c      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_DMA_Init+0x1d4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d027      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <HAL_DMA_Init+0x1d8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d022      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <HAL_DMA_Init+0x1dc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d01d      	beq.n	8002048 <HAL_DMA_Init+0x174>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <HAL_DMA_Init+0x1e0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d018      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_DMA_Init+0x1e4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a25      	ldr	r2, [pc, #148]	; (80020bc <HAL_DMA_Init+0x1e8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00e      	beq.n	8002048 <HAL_DMA_Init+0x174>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_DMA_Init+0x1ec>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_DMA_Init+0x174>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <HAL_DMA_Init+0x1f0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_DMA_Init+0x174>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <HAL_DMA_Init+0x1f4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d108      	bne.n	800205a <HAL_DMA_Init+0x186>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e007      	b.n	800206a <HAL_DMA_Init+0x196>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800206a:	e02f      	b.n	80020cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206c:	f7ff fd94 	bl	8001b98 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b05      	cmp	r3, #5
 8002078:	d928      	bls.n	80020cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e246      	b.n	800251a <HAL_DMA_Init+0x646>
 800208c:	40020010 	.word	0x40020010
 8002090:	40020028 	.word	0x40020028
 8002094:	40020040 	.word	0x40020040
 8002098:	40020058 	.word	0x40020058
 800209c:	40020070 	.word	0x40020070
 80020a0:	40020088 	.word	0x40020088
 80020a4:	400200a0 	.word	0x400200a0
 80020a8:	400200b8 	.word	0x400200b8
 80020ac:	40020410 	.word	0x40020410
 80020b0:	40020428 	.word	0x40020428
 80020b4:	40020440 	.word	0x40020440
 80020b8:	40020458 	.word	0x40020458
 80020bc:	40020470 	.word	0x40020470
 80020c0:	40020488 	.word	0x40020488
 80020c4:	400204a0 	.word	0x400204a0
 80020c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1c8      	bne.n	800206c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_DMA_Init+0x420>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2b04      	cmp	r3, #4
 800211e:	d107      	bne.n	8002130 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4313      	orrs	r3, r2
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002130:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <HAL_DMA_Init+0x424>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b71      	ldr	r3, [pc, #452]	; (80022fc <HAL_DMA_Init+0x428>)
 8002136:	4013      	ands	r3, r2
 8002138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800213c:	d328      	bcc.n	8002190 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b28      	cmp	r3, #40	; 0x28
 8002144:	d903      	bls.n	800214e <HAL_DMA_Init+0x27a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b2e      	cmp	r3, #46	; 0x2e
 800214c:	d917      	bls.n	800217e <HAL_DMA_Init+0x2aa>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b3e      	cmp	r3, #62	; 0x3e
 8002154:	d903      	bls.n	800215e <HAL_DMA_Init+0x28a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b42      	cmp	r3, #66	; 0x42
 800215c:	d90f      	bls.n	800217e <HAL_DMA_Init+0x2aa>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b46      	cmp	r3, #70	; 0x46
 8002164:	d903      	bls.n	800216e <HAL_DMA_Init+0x29a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b48      	cmp	r3, #72	; 0x48
 800216c:	d907      	bls.n	800217e <HAL_DMA_Init+0x2aa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b4e      	cmp	r3, #78	; 0x4e
 8002174:	d905      	bls.n	8002182 <HAL_DMA_Init+0x2ae>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b52      	cmp	r3, #82	; 0x52
 800217c:	d801      	bhi.n	8002182 <HAL_DMA_Init+0x2ae>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_DMA_Init+0x2b0>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d117      	bne.n	80021ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f002 fc51 	bl	8004a74 <DMA_CheckFifoParam>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e197      	b.n	800251a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 fb8c 	bl	8004910 <DMA_CalcBaseAndBitshift>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	223f      	movs	r2, #63	; 0x3f
 8002206:	409a      	lsls	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	e0cd      	b.n	80023aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3b      	ldr	r2, [pc, #236]	; (8002300 <HAL_DMA_Init+0x42c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <HAL_DMA_Init+0x38a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a39      	ldr	r2, [pc, #228]	; (8002304 <HAL_DMA_Init+0x430>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01d      	beq.n	800225e <HAL_DMA_Init+0x38a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a38      	ldr	r2, [pc, #224]	; (8002308 <HAL_DMA_Init+0x434>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d018      	beq.n	800225e <HAL_DMA_Init+0x38a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a36      	ldr	r2, [pc, #216]	; (800230c <HAL_DMA_Init+0x438>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_DMA_Init+0x38a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <HAL_DMA_Init+0x43c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Init+0x38a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_DMA_Init+0x440>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_DMA_Init+0x38a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_DMA_Init+0x444>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_DMA_Init+0x38a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_DMA_Init+0x448>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_DMA_Init+0x38e>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_DMA_Init+0x390>
 8002262:	2300      	movs	r3, #0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8097 	beq.w	8002398 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a24      	ldr	r2, [pc, #144]	; (8002300 <HAL_DMA_Init+0x42c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d021      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_DMA_Init+0x430>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01c      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_DMA_Init+0x434>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d017      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_DMA_Init+0x438>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d012      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_DMA_Init+0x43c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00d      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_DMA_Init+0x440>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d008      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_DMA_Init+0x444>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_Init+0x3e4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_DMA_Init+0x448>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_DMA_Init+0x44c>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d020      	beq.n	8002324 <HAL_DMA_Init+0x450>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b80      	cmp	r3, #128	; 0x80
 80022e8:	d102      	bne.n	80022f0 <HAL_DMA_Init+0x41c>
 80022ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ee:	e01a      	b.n	8002326 <HAL_DMA_Init+0x452>
 80022f0:	2300      	movs	r3, #0
 80022f2:	e018      	b.n	8002326 <HAL_DMA_Init+0x452>
 80022f4:	fe10803f 	.word	0xfe10803f
 80022f8:	5c001000 	.word	0x5c001000
 80022fc:	ffff0000 	.word	0xffff0000
 8002300:	58025408 	.word	0x58025408
 8002304:	5802541c 	.word	0x5802541c
 8002308:	58025430 	.word	0x58025430
 800230c:	58025444 	.word	0x58025444
 8002310:	58025458 	.word	0x58025458
 8002314:	5802546c 	.word	0x5802546c
 8002318:	58025480 	.word	0x58025480
 800231c:	58025494 	.word	0x58025494
 8002320:	fffe000f 	.word	0xfffe000f
 8002324:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68d2      	ldr	r2, [r2, #12]
 800232a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800232c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800233c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800234c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002354:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b6e      	ldr	r3, [pc, #440]	; (8002524 <HAL_DMA_Init+0x650>)
 800236c:	4413      	add	r3, r2
 800236e:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_DMA_Init+0x654>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f002 fac7 	bl	8004910 <DMA_CalcBaseAndBitshift>
 8002382:	4603      	mov	r3, r0
 8002384:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2201      	movs	r2, #1
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e008      	b.n	80023aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0b7      	b.n	800251a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_DMA_Init+0x658>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d072      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5d      	ldr	r2, [pc, #372]	; (8002530 <HAL_DMA_Init+0x65c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d06d      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <HAL_DMA_Init+0x660>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d068      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5a      	ldr	r2, [pc, #360]	; (8002538 <HAL_DMA_Init+0x664>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d063      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a59      	ldr	r2, [pc, #356]	; (800253c <HAL_DMA_Init+0x668>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_DMA_Init+0x66c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d059      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a56      	ldr	r2, [pc, #344]	; (8002544 <HAL_DMA_Init+0x670>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d054      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a54      	ldr	r2, [pc, #336]	; (8002548 <HAL_DMA_Init+0x674>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04f      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a53      	ldr	r2, [pc, #332]	; (800254c <HAL_DMA_Init+0x678>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04a      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a51      	ldr	r2, [pc, #324]	; (8002550 <HAL_DMA_Init+0x67c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d045      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_DMA_Init+0x680>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d040      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a4e      	ldr	r2, [pc, #312]	; (8002558 <HAL_DMA_Init+0x684>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03b      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a4d      	ldr	r2, [pc, #308]	; (800255c <HAL_DMA_Init+0x688>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4b      	ldr	r2, [pc, #300]	; (8002560 <HAL_DMA_Init+0x68c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <HAL_DMA_Init+0x690>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_DMA_Init+0x694>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d027      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_DMA_Init+0x698>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a45      	ldr	r2, [pc, #276]	; (8002570 <HAL_DMA_Init+0x69c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_DMA_Init+0x6a0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d018      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a42      	ldr	r2, [pc, #264]	; (8002578 <HAL_DMA_Init+0x6a4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a41      	ldr	r2, [pc, #260]	; (800257c <HAL_DMA_Init+0x6a8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3f      	ldr	r2, [pc, #252]	; (8002580 <HAL_DMA_Init+0x6ac>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3e      	ldr	r2, [pc, #248]	; (8002584 <HAL_DMA_Init+0x6b0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Init+0x5c6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <HAL_DMA_Init+0x6b4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_DMA_Init+0x5ca>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_DMA_Init+0x5cc>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d032      	beq.n	800250a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f002 fb61 	bl	8004b6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	d102      	bne.n	80024b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_DMA_Init+0x624>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d80c      	bhi.n	80024f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f002 fbde 	bl	8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	e008      	b.n	800250a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	a7fdabf8 	.word	0xa7fdabf8
 8002528:	cccccccd 	.word	0xcccccccd
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
 800256c:	58025408 	.word	0x58025408
 8002570:	5802541c 	.word	0x5802541c
 8002574:	58025430 	.word	0x58025430
 8002578:	58025444 	.word	0x58025444
 800257c:	58025458 	.word	0x58025458
 8002580:	5802546c 	.word	0x5802546c
 8002584:	58025480 	.word	0x58025480
 8002588:	58025494 	.word	0x58025494

0800258c <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0ec      	b.n	8002782 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Start+0x2a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0e5      	b.n	8002782 <HAL_DMA_Start+0x1f6>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 80d0 	bne.w	800276c <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6b      	ldr	r2, [pc, #428]	; (800278c <HAL_DMA_Start+0x200>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d04a      	beq.n	800267a <HAL_DMA_Start+0xee>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a69      	ldr	r2, [pc, #420]	; (8002790 <HAL_DMA_Start+0x204>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d045      	beq.n	800267a <HAL_DMA_Start+0xee>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a68      	ldr	r2, [pc, #416]	; (8002794 <HAL_DMA_Start+0x208>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d040      	beq.n	800267a <HAL_DMA_Start+0xee>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a66      	ldr	r2, [pc, #408]	; (8002798 <HAL_DMA_Start+0x20c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d03b      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a65      	ldr	r2, [pc, #404]	; (800279c <HAL_DMA_Start+0x210>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d036      	beq.n	800267a <HAL_DMA_Start+0xee>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_DMA_Start+0x214>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d031      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a62      	ldr	r2, [pc, #392]	; (80027a4 <HAL_DMA_Start+0x218>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d02c      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <HAL_DMA_Start+0x21c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d027      	beq.n	800267a <HAL_DMA_Start+0xee>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <HAL_DMA_Start+0x220>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d022      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5d      	ldr	r2, [pc, #372]	; (80027b0 <HAL_DMA_Start+0x224>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01d      	beq.n	800267a <HAL_DMA_Start+0xee>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_DMA_Start+0x228>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d018      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5a      	ldr	r2, [pc, #360]	; (80027b8 <HAL_DMA_Start+0x22c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a59      	ldr	r2, [pc, #356]	; (80027bc <HAL_DMA_Start+0x230>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00e      	beq.n	800267a <HAL_DMA_Start+0xee>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a57      	ldr	r2, [pc, #348]	; (80027c0 <HAL_DMA_Start+0x234>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a56      	ldr	r2, [pc, #344]	; (80027c4 <HAL_DMA_Start+0x238>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_DMA_Start+0xee>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_DMA_Start+0x23c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d108      	bne.n	800268c <HAL_DMA_Start+0x100>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e007      	b.n	800269c <HAL_DMA_Start+0x110>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f001 ff88 	bl	80045b8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a37      	ldr	r2, [pc, #220]	; (800278c <HAL_DMA_Start+0x200>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d04a      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a36      	ldr	r2, [pc, #216]	; (8002790 <HAL_DMA_Start+0x204>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d045      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a34      	ldr	r2, [pc, #208]	; (8002794 <HAL_DMA_Start+0x208>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d040      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a33      	ldr	r2, [pc, #204]	; (8002798 <HAL_DMA_Start+0x20c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d03b      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <HAL_DMA_Start+0x210>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d036      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <HAL_DMA_Start+0x214>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2e      	ldr	r2, [pc, #184]	; (80027a4 <HAL_DMA_Start+0x218>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02c      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <HAL_DMA_Start+0x21c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d027      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_DMA_Start+0x220>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d022      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <HAL_DMA_Start+0x224>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d01d      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <HAL_DMA_Start+0x228>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <HAL_DMA_Start+0x22c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_DMA_Start+0x230>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_DMA_Start+0x234>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <HAL_DMA_Start+0x238>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_DMA_Start+0x1bc>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_DMA_Start+0x23c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <HAL_DMA_Start+0x1ce>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e012      	b.n	8002780 <HAL_DMA_Start+0x1f4>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e009      	b.n	8002780 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800277a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002780:	7dfb      	ldrb	r3, [r7, #23]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8

080027cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e226      	b.n	8002c36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Start_IT+0x2a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e21f      	b.n	8002c36 <HAL_DMA_Start_IT+0x46a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 820a 	bne.w	8002c20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a68      	ldr	r2, [pc, #416]	; (80029c0 <HAL_DMA_Start_IT+0x1f4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d04a      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a66      	ldr	r2, [pc, #408]	; (80029c4 <HAL_DMA_Start_IT+0x1f8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d045      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a65      	ldr	r2, [pc, #404]	; (80029c8 <HAL_DMA_Start_IT+0x1fc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d040      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_DMA_Start_IT+0x200>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d03b      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a62      	ldr	r2, [pc, #392]	; (80029d0 <HAL_DMA_Start_IT+0x204>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d036      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a60      	ldr	r2, [pc, #384]	; (80029d4 <HAL_DMA_Start_IT+0x208>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5f      	ldr	r2, [pc, #380]	; (80029d8 <HAL_DMA_Start_IT+0x20c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d02c      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_DMA_Start_IT+0x210>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d027      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_DMA_Start_IT+0x214>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5a      	ldr	r2, [pc, #360]	; (80029e4 <HAL_DMA_Start_IT+0x218>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a59      	ldr	r2, [pc, #356]	; (80029e8 <HAL_DMA_Start_IT+0x21c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a57      	ldr	r2, [pc, #348]	; (80029ec <HAL_DMA_Start_IT+0x220>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_DMA_Start_IT+0x224>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a54      	ldr	r2, [pc, #336]	; (80029f4 <HAL_DMA_Start_IT+0x228>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a53      	ldr	r2, [pc, #332]	; (80029f8 <HAL_DMA_Start_IT+0x22c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_DMA_Start_IT+0x230>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <HAL_DMA_Start_IT+0x100>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e007      	b.n	80028dc <HAL_DMA_Start_IT+0x110>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f001 fe68 	bl	80045b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_DMA_Start_IT+0x1f4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d04a      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <HAL_DMA_Start_IT+0x1f8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d045      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_DMA_Start_IT+0x1fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d040      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_DMA_Start_IT+0x200>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d03b      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <HAL_DMA_Start_IT+0x204>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d036      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2d      	ldr	r2, [pc, #180]	; (80029d4 <HAL_DMA_Start_IT+0x208>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d031      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <HAL_DMA_Start_IT+0x20c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02c      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <HAL_DMA_Start_IT+0x210>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d027      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <HAL_DMA_Start_IT+0x214>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d022      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_DMA_Start_IT+0x218>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d01d      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <HAL_DMA_Start_IT+0x21c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d018      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a24      	ldr	r2, [pc, #144]	; (80029ec <HAL_DMA_Start_IT+0x220>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_DMA_Start_IT+0x224>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_DMA_Start_IT+0x228>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_DMA_Start_IT+0x22c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_DMA_Start_IT+0x230>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_DMA_Start_IT+0x1c0>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_DMA_Start_IT+0x1c2>
 800298c:	2300      	movs	r3, #0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d036      	beq.n	8002a00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 021e 	bic.w	r2, r3, #30
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0216 	orr.w	r2, r2, #22
 80029a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d03e      	beq.n	8002a2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0208 	orr.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e035      	b.n	8002a2c <HAL_DMA_Start_IT+0x260>
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020e 	bic.w	r2, r3, #14
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 020a 	orr.w	r2, r2, #10
 8002a12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0204 	orr.w	r2, r2, #4
 8002a2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	; (8002c40 <HAL_DMA_Start_IT+0x474>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d072      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <HAL_DMA_Start_IT+0x478>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d06d      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a80      	ldr	r2, [pc, #512]	; (8002c48 <HAL_DMA_Start_IT+0x47c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d068      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7f      	ldr	r2, [pc, #508]	; (8002c4c <HAL_DMA_Start_IT+0x480>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d063      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7d      	ldr	r2, [pc, #500]	; (8002c50 <HAL_DMA_Start_IT+0x484>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d05e      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_DMA_Start_IT+0x488>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d059      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	; (8002c58 <HAL_DMA_Start_IT+0x48c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d054      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a79      	ldr	r2, [pc, #484]	; (8002c5c <HAL_DMA_Start_IT+0x490>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04f      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a77      	ldr	r2, [pc, #476]	; (8002c60 <HAL_DMA_Start_IT+0x494>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04a      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a76      	ldr	r2, [pc, #472]	; (8002c64 <HAL_DMA_Start_IT+0x498>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a74      	ldr	r2, [pc, #464]	; (8002c68 <HAL_DMA_Start_IT+0x49c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d040      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_DMA_Start_IT+0x4a0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d03b      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a71      	ldr	r2, [pc, #452]	; (8002c70 <HAL_DMA_Start_IT+0x4a4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a70      	ldr	r2, [pc, #448]	; (8002c74 <HAL_DMA_Start_IT+0x4a8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_DMA_Start_IT+0x4ac>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02c      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6d      	ldr	r2, [pc, #436]	; (8002c7c <HAL_DMA_Start_IT+0x4b0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d027      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <HAL_DMA_Start_IT+0x4b4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d022      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6a      	ldr	r2, [pc, #424]	; (8002c84 <HAL_DMA_Start_IT+0x4b8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01d      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a68      	ldr	r2, [pc, #416]	; (8002c88 <HAL_DMA_Start_IT+0x4bc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a67      	ldr	r2, [pc, #412]	; (8002c8c <HAL_DMA_Start_IT+0x4c0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_DMA_Start_IT+0x4c4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a64      	ldr	r2, [pc, #400]	; (8002c94 <HAL_DMA_Start_IT+0x4c8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a62      	ldr	r2, [pc, #392]	; (8002c98 <HAL_DMA_Start_IT+0x4cc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <HAL_DMA_Start_IT+0x4d0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Start_IT+0x354>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_Start_IT+0x356>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HAL_DMA_Start_IT+0x474>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <HAL_DMA_Start_IT+0x478>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d045      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <HAL_DMA_Start_IT+0x47c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d040      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a33      	ldr	r2, [pc, #204]	; (8002c4c <HAL_DMA_Start_IT+0x480>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d03b      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_DMA_Start_IT+0x484>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a30      	ldr	r2, [pc, #192]	; (8002c54 <HAL_DMA_Start_IT+0x488>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2e      	ldr	r2, [pc, #184]	; (8002c58 <HAL_DMA_Start_IT+0x48c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2d      	ldr	r2, [pc, #180]	; (8002c5c <HAL_DMA_Start_IT+0x490>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d027      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <HAL_DMA_Start_IT+0x494>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_DMA_Start_IT+0x498>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_DMA_Start_IT+0x49c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_DMA_Start_IT+0x4a0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_DMA_Start_IT+0x4a4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_DMA_Start_IT+0x4a8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_DMA_Start_IT+0x4ac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_DMA_Start_IT+0x4b0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <HAL_DMA_Start_IT+0x442>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e012      	b.n	8002c34 <HAL_DMA_Start_IT+0x468>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e009      	b.n	8002c34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40020010 	.word	0x40020010
 8002c44:	40020028 	.word	0x40020028
 8002c48:	40020040 	.word	0x40020040
 8002c4c:	40020058 	.word	0x40020058
 8002c50:	40020070 	.word	0x40020070
 8002c54:	40020088 	.word	0x40020088
 8002c58:	400200a0 	.word	0x400200a0
 8002c5c:	400200b8 	.word	0x400200b8
 8002c60:	40020410 	.word	0x40020410
 8002c64:	40020428 	.word	0x40020428
 8002c68:	40020440 	.word	0x40020440
 8002c6c:	40020458 	.word	0x40020458
 8002c70:	40020470 	.word	0x40020470
 8002c74:	40020488 	.word	0x40020488
 8002c78:	400204a0 	.word	0x400204a0
 8002c7c:	400204b8 	.word	0x400204b8
 8002c80:	58025408 	.word	0x58025408
 8002c84:	5802541c 	.word	0x5802541c
 8002c88:	58025430 	.word	0x58025430
 8002c8c:	58025444 	.word	0x58025444
 8002c90:	58025458 	.word	0x58025458
 8002c94:	5802546c 	.word	0x5802546c
 8002c98:	58025480 	.word	0x58025480
 8002c9c:	58025494 	.word	0x58025494

08002ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7fe ff76 	bl	8001b98 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e2dc      	b.n	8003272 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d008      	beq.n	8002cd6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e2cd      	b.n	8003272 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a76      	ldr	r2, [pc, #472]	; (8002eb4 <HAL_DMA_Abort+0x214>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d04a      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <HAL_DMA_Abort+0x218>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d045      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a73      	ldr	r2, [pc, #460]	; (8002ebc <HAL_DMA_Abort+0x21c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d040      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_DMA_Abort+0x220>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d03b      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a70      	ldr	r2, [pc, #448]	; (8002ec4 <HAL_DMA_Abort+0x224>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d036      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_DMA_Abort+0x228>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d031      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6d      	ldr	r2, [pc, #436]	; (8002ecc <HAL_DMA_Abort+0x22c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d02c      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6b      	ldr	r2, [pc, #428]	; (8002ed0 <HAL_DMA_Abort+0x230>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d027      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_DMA_Abort+0x234>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_DMA_Abort+0x238>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01d      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a67      	ldr	r2, [pc, #412]	; (8002edc <HAL_DMA_Abort+0x23c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_DMA_Abort+0x240>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a64      	ldr	r2, [pc, #400]	; (8002ee4 <HAL_DMA_Abort+0x244>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a62      	ldr	r2, [pc, #392]	; (8002ee8 <HAL_DMA_Abort+0x248>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_DMA_Abort+0x24c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5f      	ldr	r2, [pc, #380]	; (8002ef0 <HAL_DMA_Abort+0x250>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Abort+0xda>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_DMA_Abort+0xdc>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 021e 	bic.w	r2, r2, #30
 8002d8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e00a      	b.n	8002dbe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 020e 	bic.w	r2, r2, #14
 8002db6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_DMA_Abort+0x214>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d072      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <HAL_DMA_Abort+0x218>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d06d      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_DMA_Abort+0x21c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d068      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <HAL_DMA_Abort+0x220>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d063      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <HAL_DMA_Abort+0x224>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05e      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_DMA_Abort+0x228>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d059      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <HAL_DMA_Abort+0x22c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d054      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_DMA_Abort+0x230>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d04f      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_DMA_Abort+0x234>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_DMA_Abort+0x238>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HAL_DMA_Abort+0x23c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <HAL_DMA_Abort+0x240>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_DMA_Abort+0x244>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_DMA_Abort+0x248>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_DMA_Abort+0x24c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_DMA_Abort+0x250>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_DMA_Abort+0x254>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_DMA_Abort+0x258>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a21      	ldr	r2, [pc, #132]	; (8002efc <HAL_DMA_Abort+0x25c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_DMA_Abort+0x260>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_DMA_Abort+0x264>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_DMA_Abort+0x268>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <HAL_DMA_Abort+0x26c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_DMA_Abort+0x270>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d132      	bne.n	8002f14 <HAL_DMA_Abort+0x274>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e031      	b.n	8002f16 <HAL_DMA_Abort+0x276>
 8002eb2:	bf00      	nop
 8002eb4:	40020010 	.word	0x40020010
 8002eb8:	40020028 	.word	0x40020028
 8002ebc:	40020040 	.word	0x40020040
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	40020070 	.word	0x40020070
 8002ec8:	40020088 	.word	0x40020088
 8002ecc:	400200a0 	.word	0x400200a0
 8002ed0:	400200b8 	.word	0x400200b8
 8002ed4:	40020410 	.word	0x40020410
 8002ed8:	40020428 	.word	0x40020428
 8002edc:	40020440 	.word	0x40020440
 8002ee0:	40020458 	.word	0x40020458
 8002ee4:	40020470 	.word	0x40020470
 8002ee8:	40020488 	.word	0x40020488
 8002eec:	400204a0 	.word	0x400204a0
 8002ef0:	400204b8 	.word	0x400204b8
 8002ef4:	58025408 	.word	0x58025408
 8002ef8:	5802541c 	.word	0x5802541c
 8002efc:	58025430 	.word	0x58025430
 8002f00:	58025444 	.word	0x58025444
 8002f04:	58025458 	.word	0x58025458
 8002f08:	5802546c 	.word	0x5802546c
 8002f0c:	58025480 	.word	0x58025480
 8002f10:	58025494 	.word	0x58025494
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6d      	ldr	r2, [pc, #436]	; (80030e4 <HAL_DMA_Abort+0x444>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04a      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <HAL_DMA_Abort+0x448>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d045      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6a      	ldr	r2, [pc, #424]	; (80030ec <HAL_DMA_Abort+0x44c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d040      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a68      	ldr	r2, [pc, #416]	; (80030f0 <HAL_DMA_Abort+0x450>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03b      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a67      	ldr	r2, [pc, #412]	; (80030f4 <HAL_DMA_Abort+0x454>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a65      	ldr	r2, [pc, #404]	; (80030f8 <HAL_DMA_Abort+0x458>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a64      	ldr	r2, [pc, #400]	; (80030fc <HAL_DMA_Abort+0x45c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02c      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a62      	ldr	r2, [pc, #392]	; (8003100 <HAL_DMA_Abort+0x460>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a61      	ldr	r2, [pc, #388]	; (8003104 <HAL_DMA_Abort+0x464>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5f      	ldr	r2, [pc, #380]	; (8003108 <HAL_DMA_Abort+0x468>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_DMA_Abort+0x46c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5c      	ldr	r2, [pc, #368]	; (8003110 <HAL_DMA_Abort+0x470>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	; (8003114 <HAL_DMA_Abort+0x474>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a59      	ldr	r2, [pc, #356]	; (8003118 <HAL_DMA_Abort+0x478>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_DMA_Abort+0x47c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a56      	ldr	r2, [pc, #344]	; (8003120 <HAL_DMA_Abort+0x480>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <HAL_DMA_Abort+0x33c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <HAL_DMA_Abort+0x34c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fec:	e013      	b.n	8003016 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7fe fdd3 	bl	8001b98 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d90c      	bls.n	8003016 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e12d      	b.n	8003272 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e5      	bne.n	8002fee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2f      	ldr	r2, [pc, #188]	; (80030e4 <HAL_DMA_Abort+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04a      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_DMA_Abort+0x448>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <HAL_DMA_Abort+0x44c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_DMA_Abort+0x450>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d03b      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <HAL_DMA_Abort+0x454>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d036      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_DMA_Abort+0x458>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_DMA_Abort+0x45c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d02c      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <HAL_DMA_Abort+0x460>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <HAL_DMA_Abort+0x464>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_DMA_Abort+0x468>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a20      	ldr	r2, [pc, #128]	; (800310c <HAL_DMA_Abort+0x46c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_DMA_Abort+0x470>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_DMA_Abort+0x474>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_DMA_Abort+0x478>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1a      	ldr	r2, [pc, #104]	; (800311c <HAL_DMA_Abort+0x47c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_DMA_Abort+0x480>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Abort+0x426>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_Abort+0x428>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02b      	beq.n	8003124 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	223f      	movs	r2, #63	; 0x3f
 80030dc:	409a      	lsls	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e02a      	b.n	800313a <HAL_DMA_Abort+0x49a>
 80030e4:	40020010 	.word	0x40020010
 80030e8:	40020028 	.word	0x40020028
 80030ec:	40020040 	.word	0x40020040
 80030f0:	40020058 	.word	0x40020058
 80030f4:	40020070 	.word	0x40020070
 80030f8:	40020088 	.word	0x40020088
 80030fc:	400200a0 	.word	0x400200a0
 8003100:	400200b8 	.word	0x400200b8
 8003104:	40020410 	.word	0x40020410
 8003108:	40020428 	.word	0x40020428
 800310c:	40020440 	.word	0x40020440
 8003110:	40020458 	.word	0x40020458
 8003114:	40020470 	.word	0x40020470
 8003118:	40020488 	.word	0x40020488
 800311c:	400204a0 	.word	0x400204a0
 8003120:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_DMA_Abort+0x5dc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d072      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <HAL_DMA_Abort+0x5e0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d06d      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4c      	ldr	r2, [pc, #304]	; (8003284 <HAL_DMA_Abort+0x5e4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d068      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4a      	ldr	r2, [pc, #296]	; (8003288 <HAL_DMA_Abort+0x5e8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d063      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a49      	ldr	r2, [pc, #292]	; (800328c <HAL_DMA_Abort+0x5ec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d05e      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a47      	ldr	r2, [pc, #284]	; (8003290 <HAL_DMA_Abort+0x5f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d059      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a46      	ldr	r2, [pc, #280]	; (8003294 <HAL_DMA_Abort+0x5f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d054      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a44      	ldr	r2, [pc, #272]	; (8003298 <HAL_DMA_Abort+0x5f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04f      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_DMA_Abort+0x5fc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <HAL_DMA_Abort+0x600>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <HAL_DMA_Abort+0x604>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3e      	ldr	r2, [pc, #248]	; (80032a8 <HAL_DMA_Abort+0x608>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <HAL_DMA_Abort+0x60c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3b      	ldr	r2, [pc, #236]	; (80032b0 <HAL_DMA_Abort+0x610>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_DMA_Abort+0x614>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_DMA_Abort+0x618>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_DMA_Abort+0x61c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_DMA_Abort+0x620>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_DMA_Abort+0x624>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <HAL_DMA_Abort+0x628>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <HAL_DMA_Abort+0x62c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <HAL_DMA_Abort+0x630>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2e      	ldr	r2, [pc, #184]	; (80032d4 <HAL_DMA_Abort+0x634>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <HAL_DMA_Abort+0x638>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_DMA_Abort+0x58e>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_DMA_Abort+0x590>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800323c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00c      	beq.n	8003260 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003254:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800325e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	58025408 	.word	0x58025408
 80032c0:	5802541c 	.word	0x5802541c
 80032c4:	58025430 	.word	0x58025430
 80032c8:	58025444 	.word	0x58025444
 80032cc:	58025458 	.word	0x58025458
 80032d0:	5802546c 	.word	0x5802546c
 80032d4:	58025480 	.word	0x58025480
 80032d8:	58025494 	.word	0x58025494

080032dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e205      	b.n	80036fa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e1fa      	b.n	80036fa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a8c      	ldr	r2, [pc, #560]	; (800353c <HAL_DMA_Abort_IT+0x260>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04a      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a8b      	ldr	r2, [pc, #556]	; (8003540 <HAL_DMA_Abort_IT+0x264>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d045      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a89      	ldr	r2, [pc, #548]	; (8003544 <HAL_DMA_Abort_IT+0x268>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a88      	ldr	r2, [pc, #544]	; (8003548 <HAL_DMA_Abort_IT+0x26c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03b      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a86      	ldr	r2, [pc, #536]	; (800354c <HAL_DMA_Abort_IT+0x270>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a85      	ldr	r2, [pc, #532]	; (8003550 <HAL_DMA_Abort_IT+0x274>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	; (8003554 <HAL_DMA_Abort_IT+0x278>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_DMA_Abort_IT+0x27c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a80      	ldr	r2, [pc, #512]	; (800355c <HAL_DMA_Abort_IT+0x280>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7f      	ldr	r2, [pc, #508]	; (8003560 <HAL_DMA_Abort_IT+0x284>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_DMA_Abort_IT+0x288>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_DMA_Abort_IT+0x28c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7a      	ldr	r2, [pc, #488]	; (800356c <HAL_DMA_Abort_IT+0x290>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a79      	ldr	r2, [pc, #484]	; (8003570 <HAL_DMA_Abort_IT+0x294>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_DMA_Abort_IT+0x298>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a76      	ldr	r2, [pc, #472]	; (8003578 <HAL_DMA_Abort_IT+0x29c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA_Abort_IT+0xcc>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_DMA_Abort_IT+0xce>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d065      	beq.n	800347a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a60      	ldr	r2, [pc, #384]	; (800353c <HAL_DMA_Abort_IT+0x260>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5e      	ldr	r2, [pc, #376]	; (8003540 <HAL_DMA_Abort_IT+0x264>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <HAL_DMA_Abort_IT+0x268>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5b      	ldr	r2, [pc, #364]	; (8003548 <HAL_DMA_Abort_IT+0x26c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5a      	ldr	r2, [pc, #360]	; (800354c <HAL_DMA_Abort_IT+0x270>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_DMA_Abort_IT+0x274>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a57      	ldr	r2, [pc, #348]	; (8003554 <HAL_DMA_Abort_IT+0x278>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a55      	ldr	r2, [pc, #340]	; (8003558 <HAL_DMA_Abort_IT+0x27c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_DMA_Abort_IT+0x280>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_DMA_Abort_IT+0x284>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_DMA_Abort_IT+0x288>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_DMA_Abort_IT+0x28c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4e      	ldr	r2, [pc, #312]	; (800356c <HAL_DMA_Abort_IT+0x290>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <HAL_DMA_Abort_IT+0x294>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4b      	ldr	r2, [pc, #300]	; (8003574 <HAL_DMA_Abort_IT+0x298>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a49      	ldr	r2, [pc, #292]	; (8003578 <HAL_DMA_Abort_IT+0x29c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d108      	bne.n	8003468 <HAL_DMA_Abort_IT+0x18c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e147      	b.n	80036f8 <HAL_DMA_Abort_IT+0x41c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e13e      	b.n	80036f8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 020e 	bic.w	r2, r2, #14
 8003488:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_DMA_Abort_IT+0x260>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d04a      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_DMA_Abort_IT+0x264>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d045      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_DMA_Abort_IT+0x268>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d040      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_DMA_Abort_IT+0x26c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d03b      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a25      	ldr	r2, [pc, #148]	; (800354c <HAL_DMA_Abort_IT+0x270>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d036      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_DMA_Abort_IT+0x274>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d031      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a22      	ldr	r2, [pc, #136]	; (8003554 <HAL_DMA_Abort_IT+0x278>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d02c      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <HAL_DMA_Abort_IT+0x27c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d027      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_DMA_Abort_IT+0x280>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_DMA_Abort_IT+0x284>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01d      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_DMA_Abort_IT+0x288>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d018      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_DMA_Abort_IT+0x28c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_DMA_Abort_IT+0x290>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_DMA_Abort_IT+0x294>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_DMA_Abort_IT+0x298>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_DMA_Abort_IT+0x29c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d128      	bne.n	800357c <HAL_DMA_Abort_IT+0x2a0>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e027      	b.n	800358c <HAL_DMA_Abort_IT+0x2b0>
 800353c:	40020010 	.word	0x40020010
 8003540:	40020028 	.word	0x40020028
 8003544:	40020040 	.word	0x40020040
 8003548:	40020058 	.word	0x40020058
 800354c:	40020070 	.word	0x40020070
 8003550:	40020088 	.word	0x40020088
 8003554:	400200a0 	.word	0x400200a0
 8003558:	400200b8 	.word	0x400200b8
 800355c:	40020410 	.word	0x40020410
 8003560:	40020428 	.word	0x40020428
 8003564:	40020440 	.word	0x40020440
 8003568:	40020458 	.word	0x40020458
 800356c:	40020470 	.word	0x40020470
 8003570:	40020488 	.word	0x40020488
 8003574:	400204a0 	.word	0x400204a0
 8003578:	400204b8 	.word	0x400204b8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <HAL_DMA_Abort_IT+0x428>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d072      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_DMA_Abort_IT+0x42c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d06d      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a59      	ldr	r2, [pc, #356]	; (800370c <HAL_DMA_Abort_IT+0x430>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d068      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_DMA_Abort_IT+0x434>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d063      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_DMA_Abort_IT+0x438>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d05e      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_DMA_Abort_IT+0x43c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d059      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a53      	ldr	r2, [pc, #332]	; (800371c <HAL_DMA_Abort_IT+0x440>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d054      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_DMA_Abort_IT+0x444>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04f      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_DMA_Abort_IT+0x448>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a4f      	ldr	r2, [pc, #316]	; (8003728 <HAL_DMA_Abort_IT+0x44c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4d      	ldr	r2, [pc, #308]	; (800372c <HAL_DMA_Abort_IT+0x450>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <HAL_DMA_Abort_IT+0x454>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_DMA_Abort_IT+0x458>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a49      	ldr	r2, [pc, #292]	; (8003738 <HAL_DMA_Abort_IT+0x45c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a47      	ldr	r2, [pc, #284]	; (800373c <HAL_DMA_Abort_IT+0x460>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a46      	ldr	r2, [pc, #280]	; (8003740 <HAL_DMA_Abort_IT+0x464>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a44      	ldr	r2, [pc, #272]	; (8003744 <HAL_DMA_Abort_IT+0x468>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_DMA_Abort_IT+0x46c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a41      	ldr	r2, [pc, #260]	; (800374c <HAL_DMA_Abort_IT+0x470>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <HAL_DMA_Abort_IT+0x474>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3e      	ldr	r2, [pc, #248]	; (8003754 <HAL_DMA_Abort_IT+0x478>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_DMA_Abort_IT+0x47c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_DMA_Abort_IT+0x480>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_DMA_Abort_IT+0x484>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_DMA_Abort_IT+0x3a4>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_DMA_Abort_IT+0x3a6>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d028      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494

08003764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_DMA_IRQHandler+0x1ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_DMA_IRQHandler+0x1b0>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5f      	ldr	r2, [pc, #380]	; (8003918 <HAL_DMA_IRQHandler+0x1b4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_DMA_IRQHandler+0x1b8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <HAL_DMA_IRQHandler+0x1bc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5a      	ldr	r2, [pc, #360]	; (8003924 <HAL_DMA_IRQHandler+0x1c0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a59      	ldr	r2, [pc, #356]	; (8003928 <HAL_DMA_IRQHandler+0x1c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a57      	ldr	r2, [pc, #348]	; (800392c <HAL_DMA_IRQHandler+0x1c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a56      	ldr	r2, [pc, #344]	; (8003930 <HAL_DMA_IRQHandler+0x1cc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a54      	ldr	r2, [pc, #336]	; (8003934 <HAL_DMA_IRQHandler+0x1d0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a53      	ldr	r2, [pc, #332]	; (8003938 <HAL_DMA_IRQHandler+0x1d4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a51      	ldr	r2, [pc, #324]	; (800393c <HAL_DMA_IRQHandler+0x1d8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a50      	ldr	r2, [pc, #320]	; (8003940 <HAL_DMA_IRQHandler+0x1dc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4e      	ldr	r2, [pc, #312]	; (8003944 <HAL_DMA_IRQHandler+0x1e0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4d      	ldr	r2, [pc, #308]	; (8003948 <HAL_DMA_IRQHandler+0x1e4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_DMA_IRQHandler+0x1e8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_DMA_IRQHandler+0x1ec>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_DMA_IRQHandler+0x1f0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_DMA_IRQHandler+0xd6>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_DMA_IRQHandler+0xd8>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 842b 	beq.w	8004098 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2208      	movs	r2, #8
 800384c:	409a      	lsls	r2, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a2 	beq.w	800399c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <HAL_DMA_IRQHandler+0x1b4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04a      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2d      	ldr	r2, [pc, #180]	; (800391c <HAL_DMA_IRQHandler+0x1b8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d045      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <HAL_DMA_IRQHandler+0x1bc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <HAL_DMA_IRQHandler+0x1c0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03b      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <HAL_DMA_IRQHandler+0x1c4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d036      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <HAL_DMA_IRQHandler+0x1c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <HAL_DMA_IRQHandler+0x1cc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02c      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a24      	ldr	r2, [pc, #144]	; (8003934 <HAL_DMA_IRQHandler+0x1d0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_DMA_IRQHandler+0x1d4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_DMA_IRQHandler+0x1d8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <HAL_DMA_IRQHandler+0x1dc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_DMA_IRQHandler+0x1e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_DMA_IRQHandler+0x1e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_DMA_IRQHandler+0x1e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_DMA_IRQHandler+0x1ec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_DMA_IRQHandler+0x1f0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d12f      	bne.n	8003958 <HAL_DMA_IRQHandler+0x1f4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e02e      	b.n	800396c <HAL_DMA_IRQHandler+0x208>
 800390e:	bf00      	nop
 8003910:	24000018 	.word	0x24000018
 8003914:	1b4e81b5 	.word	0x1b4e81b5
 8003918:	40020010 	.word	0x40020010
 800391c:	40020028 	.word	0x40020028
 8003920:	40020040 	.word	0x40020040
 8003924:	40020058 	.word	0x40020058
 8003928:	40020070 	.word	0x40020070
 800392c:	40020088 	.word	0x40020088
 8003930:	400200a0 	.word	0x400200a0
 8003934:	400200b8 	.word	0x400200b8
 8003938:	40020410 	.word	0x40020410
 800393c:	40020428 	.word	0x40020428
 8003940:	40020440 	.word	0x40020440
 8003944:	40020458 	.word	0x40020458
 8003948:	40020470 	.word	0x40020470
 800394c:	40020488 	.word	0x40020488
 8003950:	400204a0 	.word	0x400204a0
 8003954:	400204b8 	.word	0x400204b8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2208      	movs	r2, #8
 800398a:	409a      	lsls	r2, r3
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06e      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a69      	ldr	r2, [pc, #420]	; (8003b5c <HAL_DMA_IRQHandler+0x3f8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_DMA_IRQHandler+0x3fc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a66      	ldr	r2, [pc, #408]	; (8003b64 <HAL_DMA_IRQHandler+0x400>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a64      	ldr	r2, [pc, #400]	; (8003b68 <HAL_DMA_IRQHandler+0x404>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a63      	ldr	r2, [pc, #396]	; (8003b6c <HAL_DMA_IRQHandler+0x408>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a61      	ldr	r2, [pc, #388]	; (8003b70 <HAL_DMA_IRQHandler+0x40c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a60      	ldr	r2, [pc, #384]	; (8003b74 <HAL_DMA_IRQHandler+0x410>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_DMA_IRQHandler+0x414>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <HAL_DMA_IRQHandler+0x418>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <HAL_DMA_IRQHandler+0x41c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_DMA_IRQHandler+0x420>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_DMA_IRQHandler+0x424>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_DMA_IRQHandler+0x428>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a55      	ldr	r2, [pc, #340]	; (8003b90 <HAL_DMA_IRQHandler+0x42c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a54      	ldr	r2, [pc, #336]	; (8003b94 <HAL_DMA_IRQHandler+0x430>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_DMA_IRQHandler+0x434>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10a      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x304>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e003      	b.n	8003a70 <HAL_DMA_IRQHandler+0x30c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2204      	movs	r2, #4
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 808f 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <HAL_DMA_IRQHandler+0x3f8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d04a      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_DMA_IRQHandler+0x3fc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d045      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <HAL_DMA_IRQHandler+0x400>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d040      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMA_IRQHandler+0x404>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03b      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_DMA_IRQHandler+0x408>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d036      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_DMA_IRQHandler+0x40c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <HAL_DMA_IRQHandler+0x410>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d02c      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_DMA_IRQHandler+0x414>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d027      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <HAL_DMA_IRQHandler+0x418>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_DMA_IRQHandler+0x41c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_DMA_IRQHandler+0x420>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d018      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_DMA_IRQHandler+0x424>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_DMA_IRQHandler+0x428>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_DMA_IRQHandler+0x42c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_DMA_IRQHandler+0x430>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <HAL_DMA_IRQHandler+0x434>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12a      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x438>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e023      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x440>
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2210      	movs	r2, #16
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a6 	beq.w	8003d26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a85      	ldr	r2, [pc, #532]	; (8003df4 <HAL_DMA_IRQHandler+0x690>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <HAL_DMA_IRQHandler+0x694>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a82      	ldr	r2, [pc, #520]	; (8003dfc <HAL_DMA_IRQHandler+0x698>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_DMA_IRQHandler+0x69c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7f      	ldr	r2, [pc, #508]	; (8003e04 <HAL_DMA_IRQHandler+0x6a0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_DMA_IRQHandler+0x6a4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <HAL_DMA_IRQHandler+0x6a8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7a      	ldr	r2, [pc, #488]	; (8003e10 <HAL_DMA_IRQHandler+0x6ac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a79      	ldr	r2, [pc, #484]	; (8003e14 <HAL_DMA_IRQHandler+0x6b0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <HAL_DMA_IRQHandler+0x6b4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_DMA_IRQHandler+0x6b8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a74      	ldr	r2, [pc, #464]	; (8003e20 <HAL_DMA_IRQHandler+0x6bc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a73      	ldr	r2, [pc, #460]	; (8003e24 <HAL_DMA_IRQHandler+0x6c0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a71      	ldr	r2, [pc, #452]	; (8003e28 <HAL_DMA_IRQHandler+0x6c4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_DMA_IRQHandler+0x6c8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_DMA_IRQHandler+0x6cc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10a      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x52c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e009      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x540>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d03e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d024      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
 8003ce4:	e01f      	b.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
 8003cf6:	e016      	b.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2220      	movs	r2, #32
 8003d30:	409a      	lsls	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8110 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <HAL_DMA_IRQHandler+0x690>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_DMA_IRQHandler+0x694>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <HAL_DMA_IRQHandler+0x698>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <HAL_DMA_IRQHandler+0x69c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_DMA_IRQHandler+0x6a0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_DMA_IRQHandler+0x6a4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <HAL_DMA_IRQHandler+0x6a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_DMA_IRQHandler+0x6ac>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <HAL_DMA_IRQHandler+0x6b0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_DMA_IRQHandler+0x6b4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_DMA_IRQHandler+0x6b8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_DMA_IRQHandler+0x6bc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <HAL_DMA_IRQHandler+0x6c0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_DMA_IRQHandler+0x6c4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_DMA_IRQHandler+0x6c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <HAL_DMA_IRQHandler+0x6cc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d12b      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x6d0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02a      	b.n	8003e48 <HAL_DMA_IRQHandler+0x6e4>
 8003df2:	bf00      	nop
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8087 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2220      	movs	r2, #32
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d139      	bne.n	8003ede <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0216 	bic.w	r2, r2, #22
 8003e78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x736>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	223f      	movs	r2, #63	; 0x3f
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 834a 	beq.w	8004568 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
          }
          return;
 8003edc:	e344      	b.n	8004568 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02c      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	e027      	b.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	e01e      	b.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0210 	bic.w	r2, r2, #16
 8003f3a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8306 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8088 	beq.w	8004084 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2204      	movs	r2, #4
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7a      	ldr	r2, [pc, #488]	; (800416c <HAL_DMA_IRQHandler+0xa08>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a79      	ldr	r2, [pc, #484]	; (8004170 <HAL_DMA_IRQHandler+0xa0c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d045      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a77      	ldr	r2, [pc, #476]	; (8004174 <HAL_DMA_IRQHandler+0xa10>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d040      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a76      	ldr	r2, [pc, #472]	; (8004178 <HAL_DMA_IRQHandler+0xa14>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d03b      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a74      	ldr	r2, [pc, #464]	; (800417c <HAL_DMA_IRQHandler+0xa18>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d036      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a73      	ldr	r2, [pc, #460]	; (8004180 <HAL_DMA_IRQHandler+0xa1c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a71      	ldr	r2, [pc, #452]	; (8004184 <HAL_DMA_IRQHandler+0xa20>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a70      	ldr	r2, [pc, #448]	; (8004188 <HAL_DMA_IRQHandler+0xa24>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_DMA_IRQHandler+0xa28>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	; (8004190 <HAL_DMA_IRQHandler+0xa2c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6b      	ldr	r2, [pc, #428]	; (8004194 <HAL_DMA_IRQHandler+0xa30>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6a      	ldr	r2, [pc, #424]	; (8004198 <HAL_DMA_IRQHandler+0xa34>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a68      	ldr	r2, [pc, #416]	; (800419c <HAL_DMA_IRQHandler+0xa38>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a67      	ldr	r2, [pc, #412]	; (80041a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_DMA_IRQHandler+0xa40>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <HAL_DMA_IRQHandler+0xa44>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <HAL_DMA_IRQHandler+0x8ca>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e007      	b.n	800403e <HAL_DMA_IRQHandler+0x8da>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	429a      	cmp	r2, r3
 8004048:	d307      	bcc.n	800405a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f2      	bne.n	800403e <HAL_DMA_IRQHandler+0x8da>
 8004058:	e000      	b.n	800405c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800405a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2203      	movs	r2, #3
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800407a:	e003      	b.n	8004084 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8272 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e26c      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a43      	ldr	r2, [pc, #268]	; (80041ac <HAL_DMA_IRQHandler+0xa48>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <HAL_DMA_IRQHandler+0xa4c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a40      	ldr	r2, [pc, #256]	; (80041b4 <HAL_DMA_IRQHandler+0xa50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3f      	ldr	r2, [pc, #252]	; (80041b8 <HAL_DMA_IRQHandler+0xa54>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3d      	ldr	r2, [pc, #244]	; (80041bc <HAL_DMA_IRQHandler+0xa58>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3c      	ldr	r2, [pc, #240]	; (80041c0 <HAL_DMA_IRQHandler+0xa5c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_DMA_IRQHandler+0xa60>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a39      	ldr	r2, [pc, #228]	; (80041c8 <HAL_DMA_IRQHandler+0xa64>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_IRQHandler+0x988>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_DMA_IRQHandler+0x98a>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 823f 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2204      	movs	r2, #4
 8004106:	409a      	lsls	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80cd 	beq.w	80042ac <HAL_DMA_IRQHandler+0xb48>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80c7 	beq.w	80042ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2204      	movs	r2, #4
 8004128:	409a      	lsls	r2, r3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d049      	beq.n	80041cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8210 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004154:	e20a      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8206 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004168:	e200      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
 800416a:	bf00      	nop
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
 80041ac:	58025408 	.word	0x58025408
 80041b0:	5802541c 	.word	0x5802541c
 80041b4:	58025430 	.word	0x58025430
 80041b8:	58025444 	.word	0x58025444
 80041bc:	58025458 	.word	0x58025458
 80041c0:	5802546c 	.word	0x5802546c
 80041c4:	58025480 	.word	0x58025480
 80041c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d160      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a8c      	ldr	r2, [pc, #560]	; (800440c <HAL_DMA_IRQHandler+0xca8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d04a      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a8a      	ldr	r2, [pc, #552]	; (8004410 <HAL_DMA_IRQHandler+0xcac>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a89      	ldr	r2, [pc, #548]	; (8004414 <HAL_DMA_IRQHandler+0xcb0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d040      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a87      	ldr	r2, [pc, #540]	; (8004418 <HAL_DMA_IRQHandler+0xcb4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d03b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a86      	ldr	r2, [pc, #536]	; (800441c <HAL_DMA_IRQHandler+0xcb8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d036      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a84      	ldr	r2, [pc, #528]	; (8004420 <HAL_DMA_IRQHandler+0xcbc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a83      	ldr	r2, [pc, #524]	; (8004424 <HAL_DMA_IRQHandler+0xcc0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d02c      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a81      	ldr	r2, [pc, #516]	; (8004428 <HAL_DMA_IRQHandler+0xcc4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d027      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a80      	ldr	r2, [pc, #512]	; (800442c <HAL_DMA_IRQHandler+0xcc8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7e      	ldr	r2, [pc, #504]	; (8004430 <HAL_DMA_IRQHandler+0xccc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <HAL_DMA_IRQHandler+0xcd0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d018      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7b      	ldr	r2, [pc, #492]	; (8004438 <HAL_DMA_IRQHandler+0xcd4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7a      	ldr	r2, [pc, #488]	; (800443c <HAL_DMA_IRQHandler+0xcd8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a78      	ldr	r2, [pc, #480]	; (8004440 <HAL_DMA_IRQHandler+0xcdc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a77      	ldr	r2, [pc, #476]	; (8004444 <HAL_DMA_IRQHandler+0xce0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a75      	ldr	r2, [pc, #468]	; (8004448 <HAL_DMA_IRQHandler+0xce4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <HAL_DMA_IRQHandler+0xb24>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0208 	bic.w	r2, r2, #8
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <HAL_DMA_IRQHandler+0xb34>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8165 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042aa:	e15f      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2202      	movs	r2, #2
 80042b6:	409a      	lsls	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80c5 	beq.w	800444c <HAL_DMA_IRQHandler+0xce8>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80bf 	beq.w	800444c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2202      	movs	r2, #2
 80042d8:	409a      	lsls	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 813a 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004304:	e134      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8130 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004318:	e12a      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d168      	bne.n	80043f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a38      	ldr	r2, [pc, #224]	; (800440c <HAL_DMA_IRQHandler+0xca8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d04a      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a37      	ldr	r2, [pc, #220]	; (8004410 <HAL_DMA_IRQHandler+0xcac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d045      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a35      	ldr	r2, [pc, #212]	; (8004414 <HAL_DMA_IRQHandler+0xcb0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d040      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <HAL_DMA_IRQHandler+0xcb4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d03b      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_DMA_IRQHandler+0xcb8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d036      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a31      	ldr	r2, [pc, #196]	; (8004420 <HAL_DMA_IRQHandler+0xcbc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d031      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_DMA_IRQHandler+0xcc0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02c      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <HAL_DMA_IRQHandler+0xcc4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d027      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2c      	ldr	r2, [pc, #176]	; (800442c <HAL_DMA_IRQHandler+0xcc8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <HAL_DMA_IRQHandler+0xccc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d01d      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_DMA_IRQHandler+0xcd0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a28      	ldr	r2, [pc, #160]	; (8004438 <HAL_DMA_IRQHandler+0xcd4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_DMA_IRQHandler+0xcd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a25      	ldr	r2, [pc, #148]	; (8004440 <HAL_DMA_IRQHandler+0xcdc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_DMA_IRQHandler+0xce0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a22      	ldr	r2, [pc, #136]	; (8004448 <HAL_DMA_IRQHandler+0xce4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d108      	bne.n	80043d6 <HAL_DMA_IRQHandler+0xc72>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0214 	bic.w	r2, r2, #20
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e007      	b.n	80043e6 <HAL_DMA_IRQHandler+0xc82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020a 	bic.w	r2, r2, #10
 80043e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80b8 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004408:	e0b2      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
 800440a:	bf00      	nop
 800440c:	40020010 	.word	0x40020010
 8004410:	40020028 	.word	0x40020028
 8004414:	40020040 	.word	0x40020040
 8004418:	40020058 	.word	0x40020058
 800441c:	40020070 	.word	0x40020070
 8004420:	40020088 	.word	0x40020088
 8004424:	400200a0 	.word	0x400200a0
 8004428:	400200b8 	.word	0x400200b8
 800442c:	40020410 	.word	0x40020410
 8004430:	40020428 	.word	0x40020428
 8004434:	40020440 	.word	0x40020440
 8004438:	40020458 	.word	0x40020458
 800443c:	40020470 	.word	0x40020470
 8004440:	40020488 	.word	0x40020488
 8004444:	400204a0 	.word	0x400204a0
 8004448:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2208      	movs	r2, #8
 8004456:	409a      	lsls	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8088 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8082 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a41      	ldr	r2, [pc, #260]	; (8004578 <HAL_DMA_IRQHandler+0xe14>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3f      	ldr	r2, [pc, #252]	; (800457c <HAL_DMA_IRQHandler+0xe18>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3e      	ldr	r2, [pc, #248]	; (8004580 <HAL_DMA_IRQHandler+0xe1c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <HAL_DMA_IRQHandler+0xe20>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <HAL_DMA_IRQHandler+0xe24>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_DMA_IRQHandler+0xe28>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_DMA_IRQHandler+0xe2c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a36      	ldr	r2, [pc, #216]	; (8004594 <HAL_DMA_IRQHandler+0xe30>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a35      	ldr	r2, [pc, #212]	; (8004598 <HAL_DMA_IRQHandler+0xe34>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a33      	ldr	r2, [pc, #204]	; (800459c <HAL_DMA_IRQHandler+0xe38>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a32      	ldr	r2, [pc, #200]	; (80045a0 <HAL_DMA_IRQHandler+0xe3c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a30      	ldr	r2, [pc, #192]	; (80045a4 <HAL_DMA_IRQHandler+0xe40>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2f      	ldr	r2, [pc, #188]	; (80045a8 <HAL_DMA_IRQHandler+0xe44>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_DMA_IRQHandler+0xe48>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <HAL_DMA_IRQHandler+0xe50>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <HAL_DMA_IRQHandler+0xdbc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 021c 	bic.w	r2, r2, #28
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e007      	b.n	8004530 <HAL_DMA_IRQHandler+0xdcc>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 020e 	bic.w	r2, r2, #14
 800452e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e004      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004570:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004572:	3728      	adds	r7, #40	; 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8

080045b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a84      	ldr	r2, [pc, #528]	; (80047e8 <DMA_SetConfig+0x230>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d072      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a82      	ldr	r2, [pc, #520]	; (80047ec <DMA_SetConfig+0x234>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d06d      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a81      	ldr	r2, [pc, #516]	; (80047f0 <DMA_SetConfig+0x238>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d068      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7f      	ldr	r2, [pc, #508]	; (80047f4 <DMA_SetConfig+0x23c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d063      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7e      	ldr	r2, [pc, #504]	; (80047f8 <DMA_SetConfig+0x240>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d05e      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7c      	ldr	r2, [pc, #496]	; (80047fc <DMA_SetConfig+0x244>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d059      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a7b      	ldr	r2, [pc, #492]	; (8004800 <DMA_SetConfig+0x248>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d054      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a79      	ldr	r2, [pc, #484]	; (8004804 <DMA_SetConfig+0x24c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04f      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a78      	ldr	r2, [pc, #480]	; (8004808 <DMA_SetConfig+0x250>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a76      	ldr	r2, [pc, #472]	; (800480c <DMA_SetConfig+0x254>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	; (8004810 <DMA_SetConfig+0x258>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a73      	ldr	r2, [pc, #460]	; (8004814 <DMA_SetConfig+0x25c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a72      	ldr	r2, [pc, #456]	; (8004818 <DMA_SetConfig+0x260>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a70      	ldr	r2, [pc, #448]	; (800481c <DMA_SetConfig+0x264>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6f      	ldr	r2, [pc, #444]	; (8004820 <DMA_SetConfig+0x268>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6d      	ldr	r2, [pc, #436]	; (8004824 <DMA_SetConfig+0x26c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6c      	ldr	r2, [pc, #432]	; (8004828 <DMA_SetConfig+0x270>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6a      	ldr	r2, [pc, #424]	; (800482c <DMA_SetConfig+0x274>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a69      	ldr	r2, [pc, #420]	; (8004830 <DMA_SetConfig+0x278>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a67      	ldr	r2, [pc, #412]	; (8004834 <DMA_SetConfig+0x27c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a66      	ldr	r2, [pc, #408]	; (8004838 <DMA_SetConfig+0x280>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a64      	ldr	r2, [pc, #400]	; (800483c <DMA_SetConfig+0x284>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a63      	ldr	r2, [pc, #396]	; (8004840 <DMA_SetConfig+0x288>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a61      	ldr	r2, [pc, #388]	; (8004844 <DMA_SetConfig+0x28c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <DMA_SetConfig+0x10e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <DMA_SetConfig+0x110>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3e      	ldr	r2, [pc, #248]	; (80047e8 <DMA_SetConfig+0x230>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04a      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3d      	ldr	r2, [pc, #244]	; (80047ec <DMA_SetConfig+0x234>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d045      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <DMA_SetConfig+0x238>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3a      	ldr	r2, [pc, #232]	; (80047f4 <DMA_SetConfig+0x23c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03b      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <DMA_SetConfig+0x240>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d036      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a37      	ldr	r2, [pc, #220]	; (80047fc <DMA_SetConfig+0x244>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d031      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	; (8004800 <DMA_SetConfig+0x248>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a34      	ldr	r2, [pc, #208]	; (8004804 <DMA_SetConfig+0x24c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a32      	ldr	r2, [pc, #200]	; (8004808 <DMA_SetConfig+0x250>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a31      	ldr	r2, [pc, #196]	; (800480c <DMA_SetConfig+0x254>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <DMA_SetConfig+0x258>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <DMA_SetConfig+0x25c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <DMA_SetConfig+0x260>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2b      	ldr	r2, [pc, #172]	; (800481c <DMA_SetConfig+0x264>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a29      	ldr	r2, [pc, #164]	; (8004820 <DMA_SetConfig+0x268>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a28      	ldr	r2, [pc, #160]	; (8004824 <DMA_SetConfig+0x26c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <DMA_SetConfig+0x1d4>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <DMA_SetConfig+0x1d6>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d05a      	beq.n	8004848 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	223f      	movs	r2, #63	; 0x3f
 800479c:	409a      	lsls	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d108      	bne.n	80047d4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047d2:	e087      	b.n	80048e4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	e07e      	b.n	80048e4 <DMA_SetConfig+0x32c>
 80047e6:	bf00      	nop
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
 8004828:	58025408 	.word	0x58025408
 800482c:	5802541c 	.word	0x5802541c
 8004830:	58025430 	.word	0x58025430
 8004834:	58025444 	.word	0x58025444
 8004838:	58025458 	.word	0x58025458
 800483c:	5802546c 	.word	0x5802546c
 8004840:	58025480 	.word	0x58025480
 8004844:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <DMA_SetConfig+0x338>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <DMA_SetConfig+0x33c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01d      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <DMA_SetConfig+0x340>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a24      	ldr	r2, [pc, #144]	; (80048fc <DMA_SetConfig+0x344>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a22      	ldr	r2, [pc, #136]	; (8004900 <DMA_SetConfig+0x348>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <DMA_SetConfig+0x34c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <DMA_SetConfig+0x350>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <DMA_SetConfig+0x354>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <DMA_SetConfig+0x2e4>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <DMA_SetConfig+0x2e6>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2201      	movs	r2, #1
 80048ac:	409a      	lsls	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d108      	bne.n	80048d4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	60da      	str	r2, [r3, #12]
}
 80048d2:	e007      	b.n	80048e4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	58025408 	.word	0x58025408
 80048f4:	5802541c 	.word	0x5802541c
 80048f8:	58025430 	.word	0x58025430
 80048fc:	58025444 	.word	0x58025444
 8004900:	58025458 	.word	0x58025458
 8004904:	5802546c 	.word	0x5802546c
 8004908:	58025480 	.word	0x58025480
 800490c:	58025494 	.word	0x58025494

08004910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a42      	ldr	r2, [pc, #264]	; (8004a28 <DMA_CalcBaseAndBitshift+0x118>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d04a      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a41      	ldr	r2, [pc, #260]	; (8004a2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d045      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <DMA_CalcBaseAndBitshift+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d040      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3e      	ldr	r2, [pc, #248]	; (8004a34 <DMA_CalcBaseAndBitshift+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d03b      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3c      	ldr	r2, [pc, #240]	; (8004a38 <DMA_CalcBaseAndBitshift+0x128>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d036      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a3b      	ldr	r2, [pc, #236]	; (8004a3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d031      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a39      	ldr	r2, [pc, #228]	; (8004a40 <DMA_CalcBaseAndBitshift+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02c      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a38      	ldr	r2, [pc, #224]	; (8004a44 <DMA_CalcBaseAndBitshift+0x134>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d027      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a36      	ldr	r2, [pc, #216]	; (8004a48 <DMA_CalcBaseAndBitshift+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a35      	ldr	r2, [pc, #212]	; (8004a4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a33      	ldr	r2, [pc, #204]	; (8004a50 <DMA_CalcBaseAndBitshift+0x140>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <DMA_CalcBaseAndBitshift+0x144>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a30      	ldr	r2, [pc, #192]	; (8004a58 <DMA_CalcBaseAndBitshift+0x148>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <DMA_CalcBaseAndBitshift+0x14c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <DMA_CalcBaseAndBitshift+0x150>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <DMA_CalcBaseAndBitshift+0x154>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <DMA_CalcBaseAndBitshift+0xac>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <DMA_CalcBaseAndBitshift+0xae>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d024      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3b10      	subs	r3, #16
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <DMA_CalcBaseAndBitshift+0x158>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <DMA_CalcBaseAndBitshift+0x15c>)
 80049dc:	5cd3      	ldrb	r3, [r2, r3]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d908      	bls.n	80049fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <DMA_CalcBaseAndBitshift+0x160>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	659a      	str	r2, [r3, #88]	; 0x58
 80049fa:	e00d      	b.n	8004a18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <DMA_CalcBaseAndBitshift+0x160>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
 8004a0a:	e005      	b.n	8004a18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
 8004a68:	aaaaaaab 	.word	0xaaaaaaab
 8004a6c:	080099b8 	.word	0x080099b8
 8004a70:	fffffc00 	.word	0xfffffc00

08004a74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d120      	bne.n	8004aca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d858      	bhi.n	8004b42 <DMA_CheckFifoParam+0xce>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <DMA_CheckFifoParam+0x24>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004abb 	.word	0x08004abb
 8004aa0:	08004aa9 	.word	0x08004aa9
 8004aa4:	08004b43 	.word	0x08004b43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d048      	beq.n	8004b46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ab8:	e045      	b.n	8004b46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ac2:	d142      	bne.n	8004b4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac8:	e03f      	b.n	8004b4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad2:	d123      	bne.n	8004b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d838      	bhi.n	8004b4e <DMA_CheckFifoParam+0xda>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <DMA_CheckFifoParam+0x70>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afb 	.word	0x08004afb
 8004aec:	08004af5 	.word	0x08004af5
 8004af0:	08004b0d 	.word	0x08004b0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
        break;
 8004af8:	e030      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d025      	beq.n	8004b52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b0a:	e022      	b.n	8004b52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b1a:	e01c      	b.n	8004b56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d902      	bls.n	8004b2a <DMA_CheckFifoParam+0xb6>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b28:	e018      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2e:	e015      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b40:	e00b      	b.n	8004b5a <DMA_CheckFifoParam+0xe6>
        break;
 8004b42:	bf00      	nop
 8004b44:	e00a      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b46:	bf00      	nop
 8004b48:	e008      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e006      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
    break;
 8004b5a:	bf00      	nop
    }
  }

  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a38      	ldr	r2, [pc, #224]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a36      	ldr	r2, [pc, #216]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01d      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a32      	ldr	r2, [pc, #200]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01a      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3b08      	subs	r3, #8
 8004bdc:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c08:	e024      	b.n	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3b10      	subs	r3, #16
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d806      	bhi.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d902      	bls.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	58025408 	.word	0x58025408
 8004c64:	5802541c 	.word	0x5802541c
 8004c68:	58025430 	.word	0x58025430
 8004c6c:	58025444 	.word	0x58025444
 8004c70:	58025458 	.word	0x58025458
 8004c74:	5802546c 	.word	0x5802546c
 8004c78:	58025480 	.word	0x58025480
 8004c7c:	58025494 	.word	0x58025494
 8004c80:	cccccccd 	.word	0xcccccccd
 8004c84:	16009600 	.word	0x16009600
 8004c88:	58025880 	.word	0x58025880
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
 8004c90:	400204b8 	.word	0x400204b8
 8004c94:	4002040f 	.word	0x4002040f
 8004c98:	10008200 	.word	0x10008200
 8004c9c:	40020880 	.word	0x40020880

08004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04a      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d847      	bhi.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a24      	ldr	r2, [pc, #144]	; (8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d28:	671a      	str	r2, [r3, #112]	; 0x70
 8004d2a:	e009      	b.n	8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
 8004d78:	1600963f 	.word	0x1600963f
 8004d7c:	58025940 	.word	0x58025940
 8004d80:	1000823f 	.word	0x1000823f
 8004d84:	40020940 	.word	0x40020940

08004d88 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	460b      	mov	r3, r1
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e00a      	b.n	8004dba <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	605a      	str	r2, [r3, #4]
      break;
 8004db0:	e002      	b.n	8004db8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
      break;
 8004db6:	bf00      	nop
  }

  return status;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e003      	b.n	8004de2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dfe:	4b89      	ldr	r3, [pc, #548]	; (8005024 <HAL_GPIO_Init+0x234>)
 8004e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e02:	e194      	b.n	800512e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8186 	beq.w	8005128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d00b      	beq.n	8004e3c <HAL_GPIO_Init+0x4c>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d007      	beq.n	8004e3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e30:	2b11      	cmp	r3, #17
 8004e32:	d003      	beq.n	8004e3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b12      	cmp	r3, #18
 8004e3a:	d130      	bne.n	8004e9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2203      	movs	r2, #3
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e72:	2201      	movs	r2, #1
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 0201 	and.w	r2, r3, #1
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0xee>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b12      	cmp	r3, #18
 8004edc:	d123      	bne.n	8004f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	08da      	lsrs	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3208      	adds	r2, #8
 8004ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	220f      	movs	r2, #15
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	08da      	lsrs	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3208      	adds	r2, #8
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	2203      	movs	r2, #3
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 0203 	and.w	r2, r3, #3
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80e0 	beq.w	8005128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f68:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <HAL_GPIO_Init+0x238>)
 8004f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f6e:	4a2e      	ldr	r2, [pc, #184]	; (8005028 <HAL_GPIO_Init+0x238>)
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_GPIO_Init+0x238>)
 8004f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f86:	4a29      	ldr	r2, [pc, #164]	; (800502c <HAL_GPIO_Init+0x23c>)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	089b      	lsrs	r3, r3, #2
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	220f      	movs	r2, #15
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <HAL_GPIO_Init+0x240>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d052      	beq.n	8005058 <HAL_GPIO_Init+0x268>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_GPIO_Init+0x244>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d031      	beq.n	800501e <HAL_GPIO_Init+0x22e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_GPIO_Init+0x248>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02b      	beq.n	800501a <HAL_GPIO_Init+0x22a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_GPIO_Init+0x24c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d025      	beq.n	8005016 <HAL_GPIO_Init+0x226>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_GPIO_Init+0x250>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01f      	beq.n	8005012 <HAL_GPIO_Init+0x222>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_GPIO_Init+0x254>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d019      	beq.n	800500e <HAL_GPIO_Init+0x21e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <HAL_GPIO_Init+0x258>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <HAL_GPIO_Init+0x21a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	; (800504c <HAL_GPIO_Init+0x25c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00d      	beq.n	8005006 <HAL_GPIO_Init+0x216>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a18      	ldr	r2, [pc, #96]	; (8005050 <HAL_GPIO_Init+0x260>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <HAL_GPIO_Init+0x212>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <HAL_GPIO_Init+0x264>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <HAL_GPIO_Init+0x20e>
 8004ffa:	2309      	movs	r3, #9
 8004ffc:	e02d      	b.n	800505a <HAL_GPIO_Init+0x26a>
 8004ffe:	230a      	movs	r3, #10
 8005000:	e02b      	b.n	800505a <HAL_GPIO_Init+0x26a>
 8005002:	2308      	movs	r3, #8
 8005004:	e029      	b.n	800505a <HAL_GPIO_Init+0x26a>
 8005006:	2307      	movs	r3, #7
 8005008:	e027      	b.n	800505a <HAL_GPIO_Init+0x26a>
 800500a:	2306      	movs	r3, #6
 800500c:	e025      	b.n	800505a <HAL_GPIO_Init+0x26a>
 800500e:	2305      	movs	r3, #5
 8005010:	e023      	b.n	800505a <HAL_GPIO_Init+0x26a>
 8005012:	2304      	movs	r3, #4
 8005014:	e021      	b.n	800505a <HAL_GPIO_Init+0x26a>
 8005016:	2303      	movs	r3, #3
 8005018:	e01f      	b.n	800505a <HAL_GPIO_Init+0x26a>
 800501a:	2302      	movs	r3, #2
 800501c:	e01d      	b.n	800505a <HAL_GPIO_Init+0x26a>
 800501e:	2301      	movs	r3, #1
 8005020:	e01b      	b.n	800505a <HAL_GPIO_Init+0x26a>
 8005022:	bf00      	nop
 8005024:	58000080 	.word	0x58000080
 8005028:	58024400 	.word	0x58024400
 800502c:	58000400 	.word	0x58000400
 8005030:	58020000 	.word	0x58020000
 8005034:	58020400 	.word	0x58020400
 8005038:	58020800 	.word	0x58020800
 800503c:	58020c00 	.word	0x58020c00
 8005040:	58021000 	.word	0x58021000
 8005044:	58021400 	.word	0x58021400
 8005048:	58021800 	.word	0x58021800
 800504c:	58021c00 	.word	0x58021c00
 8005050:	58022000 	.word	0x58022000
 8005054:	58022400 	.word	0x58022400
 8005058:	2300      	movs	r3, #0
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	f002 0203 	and.w	r2, r2, #3
 8005060:	0092      	lsls	r2, r2, #2
 8005062:	4093      	lsls	r3, r2
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800506a:	4938      	ldr	r1, [pc, #224]	; (800514c <HAL_GPIO_Init+0x35c>)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3302      	adds	r3, #2
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f ae63 	bne.w	8004e04 <HAL_GPIO_Init+0x14>
  }
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	3724      	adds	r7, #36	; 0x24
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	58000400 	.word	0x58000400

08005150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
 800515c:	4613      	mov	r3, r2
 800515e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005160:	787b      	ldrb	r3, [r7, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800516c:	e003      	b.n	8005176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	041a      	lsls	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005194:	887a      	ldrh	r2, [r7, #2]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4013      	ands	r3, r2
 800519a:	041a      	lsls	r2, r3, #16
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43d9      	mvns	r1, r3
 80051a0:	887b      	ldrh	r3, [r7, #2]
 80051a2:	400b      	ands	r3, r1
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	619a      	str	r2, [r3, #24]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	4603      	mov	r3, r0
 80051be:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb fe95 	bl	8000f0c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_PWREx_ConfigSupply+0x70>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d00a      	beq.n	8005216 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <HAL_PWREx_ConfigSupply+0x70>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e01f      	b.n	8005252 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e01d      	b.n	8005252 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <HAL_PWREx_ConfigSupply+0x70>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f023 0207 	bic.w	r2, r3, #7
 800521e:	490f      	ldr	r1, [pc, #60]	; (800525c <HAL_PWREx_ConfigSupply+0x70>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4313      	orrs	r3, r2
 8005224:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005226:	f7fc fcb7 	bl	8001b98 <HAL_GetTick>
 800522a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800522c:	e009      	b.n	8005242 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800522e:	f7fc fcb3 	bl	8001b98 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800523c:	d901      	bls.n	8005242 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e007      	b.n	8005252 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_PWREx_ConfigSupply+0x70>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	d1ee      	bne.n	800522e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	58024800 	.word	0x58024800

08005260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	; 0x30
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e3ff      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8087 	beq.w	800538e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005280:	4b99      	ldr	r3, [pc, #612]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800528a:	4b97      	ldr	r3, [pc, #604]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	2b10      	cmp	r3, #16
 8005294:	d007      	beq.n	80052a6 <HAL_RCC_OscConfig+0x46>
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	2b18      	cmp	r3, #24
 800529a:	d110      	bne.n	80052be <HAL_RCC_OscConfig+0x5e>
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d10b      	bne.n	80052be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a6:	4b90      	ldr	r3, [pc, #576]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d06c      	beq.n	800538c <HAL_RCC_OscConfig+0x12c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d168      	bne.n	800538c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e3d9      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x76>
 80052c8:	4b87      	ldr	r3, [pc, #540]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a86      	ldr	r2, [pc, #536]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e02e      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x98>
 80052de:	4b82      	ldr	r3, [pc, #520]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a81      	ldr	r2, [pc, #516]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4b7f      	ldr	r3, [pc, #508]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7e      	ldr	r2, [pc, #504]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80052f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e01d      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0xbc>
 8005302:	4b79      	ldr	r3, [pc, #484]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a78      	ldr	r2, [pc, #480]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b76      	ldr	r3, [pc, #472]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a75      	ldr	r2, [pc, #468]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 800531c:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a71      	ldr	r2, [pc, #452]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b6f      	ldr	r3, [pc, #444]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6e      	ldr	r2, [pc, #440]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fc2c 	bl	8001b98 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005344:	f7fc fc28 	bl	8001b98 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e38d      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005356:	4b64      	ldr	r3, [pc, #400]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0xe4>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fc fc18 	bl	8001b98 <HAL_GetTick>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800536c:	f7fc fc14 	bl	8001b98 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e379      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800537e:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x10c>
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800538c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80ae 	beq.w	80054f8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800539c:	4b52      	ldr	r3, [pc, #328]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053a6:	4b50      	ldr	r3, [pc, #320]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <HAL_RCC_OscConfig+0x162>
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2b18      	cmp	r3, #24
 80053b6:	d13a      	bne.n	800542e <HAL_RCC_OscConfig+0x1ce>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d135      	bne.n	800542e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c2:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_RCC_OscConfig+0x17a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e34b      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053da:	f7fc fc1d 	bl	8001c18 <HAL_GetREVID>
 80053de:	4603      	mov	r3, r0
 80053e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d817      	bhi.n	8005418 <HAL_RCC_OscConfig+0x1b8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d108      	bne.n	8005402 <HAL_RCC_OscConfig+0x1a2>
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053f8:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005400:	e07a      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	031b      	lsls	r3, r3, #12
 8005410:	4935      	ldr	r1, [pc, #212]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005416:	e06f      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	4930      	ldr	r1, [pc, #192]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542c:	e064      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d045      	beq.n	80054c2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005436:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 0219 	bic.w	r2, r3, #25
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4929      	ldr	r1, [pc, #164]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fc fba6 	bl	8001b98 <HAL_GetTick>
 800544c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005450:	f7fc fba2 	bl	8001b98 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e307      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546e:	f7fc fbd3 	bl	8001c18 <HAL_GetREVID>
 8005472:	4603      	mov	r3, r0
 8005474:	f241 0203 	movw	r2, #4099	; 0x1003
 8005478:	4293      	cmp	r3, r2
 800547a:	d817      	bhi.n	80054ac <HAL_RCC_OscConfig+0x24c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d108      	bne.n	8005496 <HAL_RCC_OscConfig+0x236>
 8005484:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 800548e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005492:	6053      	str	r3, [r2, #4]
 8005494:	e030      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	031b      	lsls	r3, r3, #12
 80054a4:	4910      	ldr	r1, [pc, #64]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
 80054aa:	e025      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
 80054ac:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	490b      	ldr	r1, [pc, #44]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	e01a      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <HAL_RCC_OscConfig+0x288>)
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc fb63 	bl	8001b98 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d6:	f7fc fb5f 	bl	8001b98 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d903      	bls.n	80054ec <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e2c4      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
 80054e8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ec:	4ba4      	ldr	r3, [pc, #656]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ee      	bne.n	80054d6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a9 	beq.w	8005658 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005506:	4b9e      	ldr	r3, [pc, #632]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005510:	4b9b      	ldr	r3, [pc, #620]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d007      	beq.n	800552c <HAL_RCC_OscConfig+0x2cc>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b18      	cmp	r3, #24
 8005520:	d13a      	bne.n	8005598 <HAL_RCC_OscConfig+0x338>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d135      	bne.n	8005598 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800552c:	4b94      	ldr	r3, [pc, #592]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_RCC_OscConfig+0x2e4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e296      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005544:	f7fc fb68 	bl	8001c18 <HAL_GetREVID>
 8005548:	4603      	mov	r3, r0
 800554a:	f241 0203 	movw	r2, #4099	; 0x1003
 800554e:	4293      	cmp	r3, r2
 8005550:	d817      	bhi.n	8005582 <HAL_RCC_OscConfig+0x322>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	2b20      	cmp	r3, #32
 8005558:	d108      	bne.n	800556c <HAL_RCC_OscConfig+0x30c>
 800555a:	4b89      	ldr	r3, [pc, #548]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005562:	4a87      	ldr	r2, [pc, #540]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005568:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800556a:	e075      	b.n	8005658 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800556c:	4b84      	ldr	r3, [pc, #528]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	069b      	lsls	r3, r3, #26
 800557a:	4981      	ldr	r1, [pc, #516]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800557c:	4313      	orrs	r3, r2
 800557e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005580:	e06a      	b.n	8005658 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005582:	4b7f      	ldr	r3, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	497b      	ldr	r1, [pc, #492]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005596:	e05f      	b.n	8005658 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d042      	beq.n	8005626 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055a0:	4b77      	ldr	r3, [pc, #476]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a76      	ldr	r2, [pc, #472]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fc faf4 	bl	8001b98 <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055b4:	f7fc faf0 	bl	8001b98 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e255      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c6:	4b6e      	ldr	r3, [pc, #440]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055d2:	f7fc fb21 	bl	8001c18 <HAL_GetREVID>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80055dc:	4293      	cmp	r3, r2
 80055de:	d817      	bhi.n	8005610 <HAL_RCC_OscConfig+0x3b0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d108      	bne.n	80055fa <HAL_RCC_OscConfig+0x39a>
 80055e8:	4b65      	ldr	r3, [pc, #404]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055f0:	4a63      	ldr	r2, [pc, #396]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80055f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f6:	6053      	str	r3, [r2, #4]
 80055f8:	e02e      	b.n	8005658 <HAL_RCC_OscConfig+0x3f8>
 80055fa:	4b61      	ldr	r3, [pc, #388]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	069b      	lsls	r3, r3, #26
 8005608:	495d      	ldr	r1, [pc, #372]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
 800560e:	e023      	b.n	8005658 <HAL_RCC_OscConfig+0x3f8>
 8005610:	4b5b      	ldr	r3, [pc, #364]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	4958      	ldr	r1, [pc, #352]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005620:	4313      	orrs	r3, r2
 8005622:	60cb      	str	r3, [r1, #12]
 8005624:	e018      	b.n	8005658 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005626:	4b56      	ldr	r3, [pc, #344]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a55      	ldr	r2, [pc, #340]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800562c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fc fab1 	bl	8001b98 <HAL_GetTick>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800563a:	f7fc faad 	bl	8001b98 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e212      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800564c:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d036      	beq.n	80056d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d019      	beq.n	80056a0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566c:	4b44      	ldr	r3, [pc, #272]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800566e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005670:	4a43      	ldr	r2, [pc, #268]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fc fa8e 	bl	8001b98 <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005680:	f7fc fa8a 	bl	8001b98 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1ef      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005692:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x420>
 800569e:	e018      	b.n	80056d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a0:	4b37      	ldr	r3, [pc, #220]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80056a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a4:	4a36      	ldr	r2, [pc, #216]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fc fa74 	bl	8001b98 <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fc fa70 	bl	8001b98 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1d5      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056c6:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80056c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a25      	ldr	r2, [pc, #148]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 80056ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f2:	f7fc fa51 	bl	8001b98 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056fa:	f7fc fa4d 	bl	8001b98 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e1b2      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800570c:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x49a>
 8005718:	e018      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571a:	4b19      	ldr	r3, [pc, #100]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005724:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005726:	f7fc fa37 	bl	8001b98 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800572e:	f7fc fa33 	bl	8001b98 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e198      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <HAL_RCC_OscConfig+0x520>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8085 	beq.w	8005864 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <HAL_RCC_OscConfig+0x524>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <HAL_RCC_OscConfig+0x524>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005766:	f7fc fa17 	bl	8001b98 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576c:	e00c      	b.n	8005788 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fc fa13 	bl	8001b98 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d905      	bls.n	8005788 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e178      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
 8005780:	58024400 	.word	0x58024400
 8005784:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005788:	4b96      	ldr	r3, [pc, #600]	; (80059e4 <HAL_RCC_OscConfig+0x784>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0ec      	beq.n	800576e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x54a>
 800579c:	4b92      	ldr	r3, [pc, #584]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	4a91      	ldr	r2, [pc, #580]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	; 0x70
 80057a8:	e02d      	b.n	8005806 <HAL_RCC_OscConfig+0x5a6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0x56c>
 80057b2:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	4a8c      	ldr	r2, [pc, #560]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	6713      	str	r3, [r2, #112]	; 0x70
 80057be:	4b8a      	ldr	r3, [pc, #552]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	4a89      	ldr	r2, [pc, #548]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057c4:	f023 0304 	bic.w	r3, r3, #4
 80057c8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ca:	e01c      	b.n	8005806 <HAL_RCC_OscConfig+0x5a6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b05      	cmp	r3, #5
 80057d2:	d10c      	bne.n	80057ee <HAL_RCC_OscConfig+0x58e>
 80057d4:	4b84      	ldr	r3, [pc, #528]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a83      	ldr	r2, [pc, #524]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057da:	f043 0304 	orr.w	r3, r3, #4
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
 80057e0:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	4a80      	ldr	r2, [pc, #512]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	; 0x70
 80057ec:	e00b      	b.n	8005806 <HAL_RCC_OscConfig+0x5a6>
 80057ee:	4b7e      	ldr	r3, [pc, #504]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	4a7d      	ldr	r2, [pc, #500]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70
 80057fa:	4b7b      	ldr	r3, [pc, #492]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a7a      	ldr	r2, [pc, #488]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fc f9c3 	bl	8001b98 <HAL_GetTick>
 8005812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fc f9bf 	bl	8001b98 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e122      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800582c:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0ee      	beq.n	8005816 <HAL_RCC_OscConfig+0x5b6>
 8005838:	e014      	b.n	8005864 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583a:	f7fc f9ad 	bl	8001b98 <HAL_GetTick>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005840:	e00a      	b.n	8005858 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fc f9a9 	bl	8001b98 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e10c      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005858:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ee      	bne.n	8005842 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8101 	beq.w	8005a70 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800586e:	4b5e      	ldr	r3, [pc, #376]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005876:	2b18      	cmp	r3, #24
 8005878:	f000 80bc 	beq.w	80059f4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b02      	cmp	r3, #2
 8005882:	f040 8095 	bne.w	80059b0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005886:	4b58      	ldr	r3, [pc, #352]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a57      	ldr	r2, [pc, #348]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800588c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fc f981 	bl	8001b98 <HAL_GetTick>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fc f97d 	bl	8001b98 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e0e2      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ac:	4b4e      	ldr	r3, [pc, #312]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b8:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80058ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058bc:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <HAL_RCC_OscConfig+0x78c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	430a      	orrs	r2, r1
 80058cc:	4946      	ldr	r1, [pc, #280]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	628b      	str	r3, [r1, #40]	; 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	3b01      	subs	r3, #1
 80058e2:	025b      	lsls	r3, r3, #9
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	3b01      	subs	r3, #1
 80058ee:	041b      	lsls	r3, r3, #16
 80058f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	3b01      	subs	r3, #1
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005902:	4939      	ldr	r1, [pc, #228]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005904:	4313      	orrs	r3, r2
 8005906:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005908:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	4a36      	ldr	r2, [pc, #216]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005914:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005918:	4b35      	ldr	r3, [pc, #212]	; (80059f0 <HAL_RCC_OscConfig+0x790>)
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005920:	00d2      	lsls	r2, r2, #3
 8005922:	4931      	ldr	r1, [pc, #196]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005924:	4313      	orrs	r3, r2
 8005926:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005928:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f023 020c 	bic.w	r2, r3, #12
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	492c      	ldr	r1, [pc, #176]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005936:	4313      	orrs	r3, r2
 8005938:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800593a:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	f023 0202 	bic.w	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	4928      	ldr	r1, [pc, #160]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005948:	4313      	orrs	r3, r2
 800594a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800594c:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800596a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a1c      	ldr	r2, [pc, #112]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 8005982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fc f906 	bl	8001b98 <HAL_GetTick>
 800598c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005990:	f7fc f902 	bl	8001b98 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e067      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x730>
 80059ae:	e05f      	b.n	8005a70 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80059b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7fc f8ec 	bl	8001b98 <HAL_GetTick>
 80059c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c4:	f7fc f8e8 	bl	8001b98 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e04d      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <HAL_RCC_OscConfig+0x788>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0x764>
 80059e2:	e045      	b.n	8005a70 <HAL_RCC_OscConfig+0x810>
 80059e4:	58024800 	.word	0x58024800
 80059e8:	58024400 	.word	0x58024400
 80059ec:	fffffc0c 	.word	0xfffffc0c
 80059f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <HAL_RCC_OscConfig+0x81c>)
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059fa:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_RCC_OscConfig+0x81c>)
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d031      	beq.n	8005a6c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f003 0203 	and.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d12a      	bne.n	8005a6c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d122      	bne.n	8005a6c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d11a      	bne.n	8005a6c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	0a5b      	lsrs	r3, r3, #9
 8005a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d111      	bne.n	8005a6c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d108      	bne.n	8005a6c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	58024400 	.word	0x58024400

08005a80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e19c      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a94:	4b8a      	ldr	r3, [pc, #552]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d910      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa2:	4b87      	ldr	r3, [pc, #540]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f023 020f 	bic.w	r2, r3, #15
 8005aaa:	4985      	ldr	r1, [pc, #532]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b83      	ldr	r3, [pc, #524]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e184      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d010      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	4b7b      	ldr	r3, [pc, #492]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d908      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ae0:	4b78      	ldr	r3, [pc, #480]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	4975      	ldr	r1, [pc, #468]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d010      	beq.n	8005b20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	4b70      	ldr	r3, [pc, #448]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d908      	bls.n	8005b20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	496a      	ldr	r1, [pc, #424]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	4b64      	ldr	r3, [pc, #400]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d908      	bls.n	8005b4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b3c:	4b61      	ldr	r3, [pc, #388]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	495e      	ldr	r1, [pc, #376]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d010      	beq.n	8005b7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	4b59      	ldr	r3, [pc, #356]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d908      	bls.n	8005b7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	4953      	ldr	r1, [pc, #332]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	4b4d      	ldr	r3, [pc, #308]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d908      	bls.n	8005baa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b4a      	ldr	r3, [pc, #296]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f023 020f 	bic.w	r2, r3, #15
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4947      	ldr	r1, [pc, #284]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d055      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bb6:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	4940      	ldr	r1, [pc, #256]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bd0:	4b3c      	ldr	r3, [pc, #240]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d121      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0f6      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005be8:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0ea      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0de      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c10:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0d6      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c20:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f023 0207 	bic.w	r2, r3, #7
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4925      	ldr	r1, [pc, #148]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c32:	f7fb ffb1 	bl	8001b98 <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c38:	e00a      	b.n	8005c50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c3a:	f7fb ffad 	bl	8001b98 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e0be      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c50:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d1eb      	bne.n	8005c3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d208      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f023 020f 	bic.w	r2, r3, #15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	490e      	ldr	r1, [pc, #56]	; (8005cc4 <HAL_RCC_ClockConfig+0x244>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d214      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 020f 	bic.w	r2, r3, #15
 8005ca6:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <HAL_RCC_ClockConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e086      	b.n	8005dce <HAL_RCC_ClockConfig+0x34e>
 8005cc0:	52002000 	.word	0x52002000
 8005cc4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d208      	bcs.n	8005cf6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ce4:	4b3c      	ldr	r3, [pc, #240]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	4939      	ldr	r1, [pc, #228]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d010      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d208      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d12:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	492e      	ldr	r1, [pc, #184]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699a      	ldr	r2, [r3, #24]
 8005d34:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d208      	bcs.n	8005d52 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d40:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	4922      	ldr	r1, [pc, #136]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d010      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d208      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4917      	ldr	r1, [pc, #92]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d80:	f000 f834 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	4912      	ldr	r1, [pc, #72]	; (8005ddc <HAL_RCC_ClockConfig+0x35c>)
 8005d92:	5ccb      	ldrb	r3, [r1, r3]
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <HAL_RCC_ClockConfig+0x358>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <HAL_RCC_ClockConfig+0x35c>)
 8005da8:	5cd3      	ldrb	r3, [r2, r3]
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <HAL_RCC_ClockConfig+0x360>)
 8005db6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005db8:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <HAL_RCC_ClockConfig+0x364>)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <HAL_RCC_ClockConfig+0x368>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fb fe9e 	bl	8001b04 <HAL_InitTick>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	080099a8 	.word	0x080099a8
 8005de0:	2400001c 	.word	0x2400001c
 8005de4:	24000018 	.word	0x24000018
 8005de8:	24000020 	.word	0x24000020

08005dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005df2:	4bb3      	ldr	r3, [pc, #716]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfa:	2b18      	cmp	r3, #24
 8005dfc:	f200 8155 	bhi.w	80060aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e6d 	.word	0x08005e6d
 8005e0c:	080060ab 	.word	0x080060ab
 8005e10:	080060ab 	.word	0x080060ab
 8005e14:	080060ab 	.word	0x080060ab
 8005e18:	080060ab 	.word	0x080060ab
 8005e1c:	080060ab 	.word	0x080060ab
 8005e20:	080060ab 	.word	0x080060ab
 8005e24:	080060ab 	.word	0x080060ab
 8005e28:	08005e93 	.word	0x08005e93
 8005e2c:	080060ab 	.word	0x080060ab
 8005e30:	080060ab 	.word	0x080060ab
 8005e34:	080060ab 	.word	0x080060ab
 8005e38:	080060ab 	.word	0x080060ab
 8005e3c:	080060ab 	.word	0x080060ab
 8005e40:	080060ab 	.word	0x080060ab
 8005e44:	080060ab 	.word	0x080060ab
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	080060ab 	.word	0x080060ab
 8005e50:	080060ab 	.word	0x080060ab
 8005e54:	080060ab 	.word	0x080060ab
 8005e58:	080060ab 	.word	0x080060ab
 8005e5c:	080060ab 	.word	0x080060ab
 8005e60:	080060ab 	.word	0x080060ab
 8005e64:	080060ab 	.word	0x080060ab
 8005e68:	08005e9f 	.word	0x08005e9f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6c:	4b94      	ldr	r3, [pc, #592]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e78:	4b91      	ldr	r3, [pc, #580]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	4a90      	ldr	r2, [pc, #576]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e8a:	e111      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e8c:	4b8d      	ldr	r3, [pc, #564]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e8e:	61bb      	str	r3, [r7, #24]
    break;
 8005e90:	e10e      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e92:	4b8d      	ldr	r3, [pc, #564]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e94:	61bb      	str	r3, [r7, #24]
    break;
 8005e96:	e10b      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e98:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e9a:	61bb      	str	r3, [r7, #24]
    break;
 8005e9c:	e108      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9e:	4b88      	ldr	r3, [pc, #544]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ea8:	4b85      	ldr	r3, [pc, #532]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005eb4:	4b82      	ldr	r3, [pc, #520]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ebe:	4b80      	ldr	r3, [pc, #512]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80e1 	beq.w	80060a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f000 8083 	beq.w	8005ff0 <HAL_RCC_GetSysClockFreq+0x204>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f200 80a1 	bhi.w	8006034 <HAL_RCC_GetSysClockFreq+0x248>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0x114>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d056      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005efe:	e099      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f00:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f0c:	4b6c      	ldr	r3, [pc, #432]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a6b      	ldr	r2, [pc, #428]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f66:	e087      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b51      	ldr	r3, [pc, #324]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e065      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e043      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060dc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a02 	vldr	s12, [r7, #8]
 8006016:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	e021      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a02 	vldr	s12, [r7, #8]
 800605a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006076:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006078:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006082:	3301      	adds	r3, #1
 8006084:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006090:	edd7 6a07 	vldr	s13, [r7, #28]
 8006094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609c:	ee17 3a90 	vmov	r3, s15
 80060a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060a2:	e005      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
    break;
 80060a8:	e002      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060ac:	61bb      	str	r3, [r7, #24]
    break;
 80060ae:	bf00      	nop
  }

  return sysclockfreq;
 80060b0:	69bb      	ldr	r3, [r7, #24]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
 80060c4:	03d09000 	.word	0x03d09000
 80060c8:	003d0900 	.word	0x003d0900
 80060cc:	007f2815 	.word	0x007f2815
 80060d0:	46000000 	.word	0x46000000
 80060d4:	4c742400 	.word	0x4c742400
 80060d8:	4a742400 	.word	0x4a742400
 80060dc:	4afe502a 	.word	0x4afe502a

080060e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060e6:	f7ff fe81 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <HAL_RCC_GetHCLKFreq+0x50>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	490f      	ldr	r1, [pc, #60]	; (8006134 <HAL_RCC_GetHCLKFreq+0x54>)
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_RCC_GetHCLKFreq+0x50>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <HAL_RCC_GetHCLKFreq+0x54>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a07      	ldr	r2, [pc, #28]	; (8006138 <HAL_RCC_GetHCLKFreq+0x58>)
 800611c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800611e:	4a07      	ldr	r2, [pc, #28]	; (800613c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006124:	4b04      	ldr	r3, [pc, #16]	; (8006138 <HAL_RCC_GetHCLKFreq+0x58>)
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	58024400 	.word	0x58024400
 8006134:	080099a8 	.word	0x080099a8
 8006138:	2400001c 	.word	0x2400001c
 800613c:	24000018 	.word	0x24000018

08006140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006144:	f7ff ffcc 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	58024400 	.word	0x58024400
 8006168:	080099a8 	.word	0x080099a8

0800616c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006170:	f7ff ffb6 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 8006174:	4602      	mov	r2, r0
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	0a1b      	lsrs	r3, r3, #8
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	4904      	ldr	r1, [pc, #16]	; (8006194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006182:	5ccb      	ldrb	r3, [r1, r3]
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	58024400 	.word	0x58024400
 8006194:	080099a8 	.word	0x080099a8

08006198 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061a0:	2300      	movs	r3, #0
 80061a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061a4:	2300      	movs	r3, #0
 80061a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d03f      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061bc:	d02a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c2:	d824      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c8:	d018      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ce:	d81e      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d8:	d007      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061da:	e018      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061dc:	4bab      	ldr	r3, [pc, #684]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4aaa      	ldr	r2, [pc, #680]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061e8:	e015      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3304      	adds	r3, #4
 80061ee:	2102      	movs	r1, #2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 f9cf 	bl	8007594 <RCCEx_PLL2_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061fa:	e00c      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3324      	adds	r3, #36	; 0x24
 8006200:	2102      	movs	r1, #2
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fa78 	bl	80076f8 <RCCEx_PLL3_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800620c:	e003      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
      break;
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800621c:	4b9b      	ldr	r3, [pc, #620]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006228:	4998      	ldr	r1, [pc, #608]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622a:	4313      	orrs	r3, r2
 800622c:	650b      	str	r3, [r1, #80]	; 0x50
 800622e:	e001      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03d      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	2b04      	cmp	r3, #4
 8006246:	d826      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006265 	.word	0x08006265
 8006254:	08006273 	.word	0x08006273
 8006258:	08006285 	.word	0x08006285
 800625c:	0800629d 	.word	0x0800629d
 8006260:	0800629d 	.word	0x0800629d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006264:	4b89      	ldr	r3, [pc, #548]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	4a88      	ldr	r2, [pc, #544]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006270:	e015      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f001 f98b 	bl	8007594 <RCCEx_PLL2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006282:	e00c      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fa34 	bl	80076f8 <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
      break;
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800629c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062a4:	4b79      	ldr	r3, [pc, #484]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	f023 0207 	bic.w	r2, r3, #7
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	4976      	ldr	r1, [pc, #472]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	650b      	str	r3, [r1, #80]	; 0x50
 80062b6:	e001      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d042      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d0:	d02b      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d6:	d825      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062d8:	2bc0      	cmp	r3, #192	; 0xc0
 80062da:	d028      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062dc:	2bc0      	cmp	r3, #192	; 0xc0
 80062de:	d821      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062e0:	2b80      	cmp	r3, #128	; 0x80
 80062e2:	d016      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d81d      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d007      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80062f0:	e018      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f2:	4b66      	ldr	r3, [pc, #408]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	4a65      	ldr	r2, [pc, #404]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062fe:	e017      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 f944 	bl	8007594 <RCCEx_PLL2_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006310:	e00e      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3324      	adds	r3, #36	; 0x24
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f9ed 	bl	80076f8 <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006322:	e005      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
      break;
 8006328:	e002      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800632e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006336:	4b55      	ldr	r3, [pc, #340]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	4952      	ldr	r1, [pc, #328]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006344:	4313      	orrs	r3, r2
 8006346:	650b      	str	r3, [r1, #80]	; 0x50
 8006348:	e001      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006356:	2b00      	cmp	r3, #0
 8006358:	d049      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006364:	d030      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800636a:	d82a      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800636c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006370:	d02c      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006372:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006376:	d824      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800637c:	d018      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800637e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006382:	d81e      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800638c:	d007      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800638e:	e018      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b3e      	ldr	r3, [pc, #248]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a3d      	ldr	r2, [pc, #244]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800639c:	e017      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3304      	adds	r3, #4
 80063a2:	2100      	movs	r1, #0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 f8f5 	bl	8007594 <RCCEx_PLL2_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063ae:	e00e      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 f99e 	bl	80076f8 <RCCEx_PLL3_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c0:	e005      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	75fb      	strb	r3, [r7, #23]
      break;
 80063c6:	e002      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063d4:	4b2d      	ldr	r3, [pc, #180]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063e2:	492a      	ldr	r1, [pc, #168]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	658b      	str	r3, [r1, #88]	; 0x58
 80063e8:	e001      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d04c      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006404:	d030      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800640a:	d82a      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800640c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006410:	d02c      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006412:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006416:	d824      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800641c:	d018      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800641e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006422:	d81e      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800642c:	d007      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800642e:	e018      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800643c:	e017      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3304      	adds	r3, #4
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f001 f8a5 	bl	8007594 <RCCEx_PLL2_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800644e:	e00e      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3324      	adds	r3, #36	; 0x24
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f94e 	bl	80076f8 <RCCEx_PLL3_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006460:	e005      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
      break;
 8006466:	e002      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006468:	bf00      	nop
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800646c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006478:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006482:	4902      	ldr	r1, [pc, #8]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006484:	4313      	orrs	r3, r2
 8006486:	658b      	str	r3, [r1, #88]	; 0x58
 8006488:	e004      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800648a:	bf00      	nop
 800648c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d032      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a4:	2b30      	cmp	r3, #48	; 0x30
 80064a6:	d01c      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064a8:	2b30      	cmp	r3, #48	; 0x30
 80064aa:	d817      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d00c      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d813      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d016      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d10f      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4baf      	ldr	r3, [pc, #700]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4aae      	ldr	r2, [pc, #696]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064c8:	e00e      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3304      	adds	r3, #4
 80064ce:	2102      	movs	r1, #2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 f85f 	bl	8007594 <RCCEx_PLL2_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064da:	e005      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	e002      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064ee:	4ba3      	ldr	r3, [pc, #652]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	49a0      	ldr	r1, [pc, #640]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006500:	e001      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d047      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651a:	d030      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800651c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006520:	d82a      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006522:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006526:	d02c      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800652c:	d824      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800652e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006532:	d018      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006538:	d81e      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006542:	d007      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006544:	e018      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006546:	4b8d      	ldr	r3, [pc, #564]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4a8c      	ldr	r2, [pc, #560]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800654c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006552:	e017      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f81a 	bl	8007594 <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006564:	e00e      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f001 f8c3 	bl	80076f8 <RCCEx_PLL3_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006576:	e005      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	e002      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800658a:	4b7c      	ldr	r3, [pc, #496]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	4979      	ldr	r1, [pc, #484]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006598:	4313      	orrs	r3, r2
 800659a:	650b      	str	r3, [r1, #80]	; 0x50
 800659c:	e001      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d049      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065b6:	d02e      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80065b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065bc:	d828      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065c2:	d02a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80065c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065c8:	d822      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ce:	d026      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80065d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065d4:	d81c      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065da:	d010      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x466>
 80065dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e0:	d816      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01d      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80065e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ea:	d111      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 ffce 	bl	8007594 <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065fc:	e012      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3324      	adds	r3, #36	; 0x24
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f877 	bl	80076f8 <RCCEx_PLL3_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800660e:	e009      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006616:	bf00      	nop
 8006618:	e004      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800662a:	4b54      	ldr	r3, [pc, #336]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006636:	4951      	ldr	r1, [pc, #324]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	650b      	str	r3, [r1, #80]	; 0x50
 800663c:	e001      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d04b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006658:	d02e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800665a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800665e:	d828      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006664:	d02a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666a:	d822      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800666c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006670:	d026      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006672:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006676:	d81c      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667c:	d010      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800667e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006682:	d816      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01d      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800668c:	d111      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f000 ff7d 	bl	8007594 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800669e:	e012      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f826 	bl	80076f8 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066b0:	e009      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      break;
 80066b6:	e006      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066b8:	bf00      	nop
 80066ba:	e004      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066bc:	bf00      	nop
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066da:	4928      	ldr	r1, [pc, #160]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	658b      	str	r3, [r1, #88]	; 0x58
 80066e0:	e001      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02f      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fa:	d00e      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x582>
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006700:	d814      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670a:	d10f      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800670c:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	4a1a      	ldr	r2, [pc, #104]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006718:	e00c      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3304      	adds	r3, #4
 800671e:	2101      	movs	r1, #1
 8006720:	4618      	mov	r0, r3
 8006722:	f000 ff37 	bl	8007594 <RCCEx_PLL2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800672a:	e003      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]
      break;
 8006730:	e000      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800673c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006746:	490d      	ldr	r1, [pc, #52]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006748:	4313      	orrs	r3, r2
 800674a:	650b      	str	r3, [r1, #80]	; 0x50
 800674c:	e001      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d033      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	2b03      	cmp	r3, #3
 8006764:	d81c      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	080067a7 	.word	0x080067a7
 8006770:	08006781 	.word	0x08006781
 8006774:	0800678f 	.word	0x0800678f
 8006778:	080067a7 	.word	0x080067a7
 800677c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006780:	4bb8      	ldr	r3, [pc, #736]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	4ab7      	ldr	r2, [pc, #732]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800678c:	e00c      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3304      	adds	r3, #4
 8006792:	2102      	movs	r1, #2
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fefd 	bl	8007594 <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800679e:	e003      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	e000      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067ae:	4bad      	ldr	r3, [pc, #692]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b2:	f023 0203 	bic.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	49aa      	ldr	r1, [pc, #680]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067c0:	e001      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8086 	beq.w	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067d4:	4ba4      	ldr	r3, [pc, #656]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4aa3      	ldr	r2, [pc, #652]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067e0:	f7fb f9da 	bl	8001b98 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e6:	e009      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e8:	f7fb f9d6 	bl	8001b98 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	; 0x64
 80067f4:	d902      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	75fb      	strb	r3, [r7, #23]
        break;
 80067fa:	e005      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fc:	4b9a      	ldr	r3, [pc, #616]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0ef      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d166      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800680e:	4b95      	ldr	r3, [pc, #596]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006810:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006818:	4053      	eors	r3, r2
 800681a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681e:	2b00      	cmp	r3, #0
 8006820:	d013      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006822:	4b90      	ldr	r3, [pc, #576]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800682c:	4b8d      	ldr	r3, [pc, #564]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006830:	4a8c      	ldr	r2, [pc, #560]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006836:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006838:	4b8a      	ldr	r3, [pc, #552]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	4a89      	ldr	r2, [pc, #548]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006842:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006844:	4a87      	ldr	r2, [pc, #540]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006854:	d115      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fb f99f 	bl	8001b98 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800685c:	e00b      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685e:	f7fb f99b 	bl	8001b98 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	; 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d902      	bls.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	75fb      	strb	r3, [r7, #23]
            break;
 8006874:	e005      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006876:	4b7b      	ldr	r3, [pc, #492]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0ed      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d126      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800688e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006896:	d10d      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006898:	4b72      	ldr	r3, [pc, #456]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a6:	0919      	lsrs	r1, r3, #4
 80068a8:	4b70      	ldr	r3, [pc, #448]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80068aa:	400b      	ands	r3, r1
 80068ac:	496d      	ldr	r1, [pc, #436]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	610b      	str	r3, [r1, #16]
 80068b2:	e005      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80068b4:	4b6b      	ldr	r3, [pc, #428]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	4a6a      	ldr	r2, [pc, #424]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068be:	6113      	str	r3, [r2, #16]
 80068c0:	4b68      	ldr	r3, [pc, #416]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ce:	4965      	ldr	r1, [pc, #404]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	670b      	str	r3, [r1, #112]	; 0x70
 80068d4:	e004      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	75bb      	strb	r3, [r7, #22]
 80068da:	e001      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d07e      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f0:	2b28      	cmp	r3, #40	; 0x28
 80068f2:	d867      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80068f4:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	080069cb 	.word	0x080069cb
 8006900:	080069c5 	.word	0x080069c5
 8006904:	080069c5 	.word	0x080069c5
 8006908:	080069c5 	.word	0x080069c5
 800690c:	080069c5 	.word	0x080069c5
 8006910:	080069c5 	.word	0x080069c5
 8006914:	080069c5 	.word	0x080069c5
 8006918:	080069c5 	.word	0x080069c5
 800691c:	080069a1 	.word	0x080069a1
 8006920:	080069c5 	.word	0x080069c5
 8006924:	080069c5 	.word	0x080069c5
 8006928:	080069c5 	.word	0x080069c5
 800692c:	080069c5 	.word	0x080069c5
 8006930:	080069c5 	.word	0x080069c5
 8006934:	080069c5 	.word	0x080069c5
 8006938:	080069c5 	.word	0x080069c5
 800693c:	080069b3 	.word	0x080069b3
 8006940:	080069c5 	.word	0x080069c5
 8006944:	080069c5 	.word	0x080069c5
 8006948:	080069c5 	.word	0x080069c5
 800694c:	080069c5 	.word	0x080069c5
 8006950:	080069c5 	.word	0x080069c5
 8006954:	080069c5 	.word	0x080069c5
 8006958:	080069c5 	.word	0x080069c5
 800695c:	080069cb 	.word	0x080069cb
 8006960:	080069c5 	.word	0x080069c5
 8006964:	080069c5 	.word	0x080069c5
 8006968:	080069c5 	.word	0x080069c5
 800696c:	080069c5 	.word	0x080069c5
 8006970:	080069c5 	.word	0x080069c5
 8006974:	080069c5 	.word	0x080069c5
 8006978:	080069c5 	.word	0x080069c5
 800697c:	080069cb 	.word	0x080069cb
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069c5 	.word	0x080069c5
 800698c:	080069c5 	.word	0x080069c5
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069c5 	.word	0x080069c5
 8006998:	080069c5 	.word	0x080069c5
 800699c:	080069cb 	.word	0x080069cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	2101      	movs	r1, #1
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fdf4 	bl	8007594 <RCCEx_PLL2_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069b0:	e00c      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3324      	adds	r3, #36	; 0x24
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fe9d 	bl	80076f8 <RCCEx_PLL3_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e000      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80069ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069de:	4921      	ldr	r1, [pc, #132]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	654b      	str	r3, [r1, #84]	; 0x54
 80069e4:	e001      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d03e      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d820      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a47 	.word	0x08006a47
 8006a08:	08006a1d 	.word	0x08006a1d
 8006a0c:	08006a2f 	.word	0x08006a2f
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a47 	.word	0x08006a47
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	2101      	movs	r1, #1
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fdb6 	bl	8007594 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a2c:	e00c      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fe5f 	bl	80076f8 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a3e:	e003      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
      break;
 8006a44:	e000      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d110      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a52:	f023 0207 	bic.w	r2, r3, #7
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5a:	4902      	ldr	r1, [pc, #8]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a60:	e008      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
 8006a68:	58024800 	.word	0x58024800
 8006a6c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d039      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d820      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006ad3 	.word	0x08006ad3
 8006a94:	08006aa9 	.word	0x08006aa9
 8006a98:	08006abb 	.word	0x08006abb
 8006a9c:	08006ad3 	.word	0x08006ad3
 8006aa0:	08006ad3 	.word	0x08006ad3
 8006aa4:	08006ad3 	.word	0x08006ad3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	2101      	movs	r1, #1
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fd70 	bl	8007594 <RCCEx_PLL2_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ab8:	e00c      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3324      	adds	r3, #36	; 0x24
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fe19 	bl	80076f8 <RCCEx_PLL3_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ada:	4bb7      	ldr	r3, [pc, #732]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	f023 0207 	bic.w	r2, r3, #7
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae8:	49b3      	ldr	r1, [pc, #716]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	658b      	str	r3, [r1, #88]	; 0x58
 8006aee:	e001      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d04b      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b0a:	d02e      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b10:	d828      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d02a      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d822      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b22:	d026      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b28:	d81c      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2e:	d010      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b34:	d816      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01d      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b3e:	d111      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fd24 	bl	8007594 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b50:	e012      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3324      	adds	r3, #36	; 0x24
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fdcd 	bl	80076f8 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b62:	e009      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
      break;
 8006b68:	e006      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b6a:	bf00      	nop
 8006b6c:	e004      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b6e:	bf00      	nop
 8006b70:	e002      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b7e:	4b8e      	ldr	r3, [pc, #568]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	498a      	ldr	r1, [pc, #552]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	654b      	str	r3, [r1, #84]	; 0x54
 8006b92:	e001      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d04b      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006baa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bae:	d02e      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006bb0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bb4:	d828      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bba:	d02a      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc0:	d822      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc6:	d026      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bcc:	d81c      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd2:	d010      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd8:	d816      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01d      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be2:	d111      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fcd2 	bl	8007594 <RCCEx_PLL2_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bf4:	e012      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3324      	adds	r3, #36	; 0x24
 8006bfa:	2102      	movs	r1, #2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fd7b 	bl	80076f8 <RCCEx_PLL3_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c06:	e009      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0c:	e006      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e004      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c12:	bf00      	nop
 8006c14:	e002      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c16:	bf00      	nop
 8006c18:	e000      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c22:	4b65      	ldr	r3, [pc, #404]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c30:	4961      	ldr	r1, [pc, #388]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	658b      	str	r3, [r1, #88]	; 0x58
 8006c36:	e001      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d04b      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c52:	d02e      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006c54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c58:	d828      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5e:	d02a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c64:	d822      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c6a:	d026      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c70:	d81c      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c76:	d010      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c7c:	d816      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d01d      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c86:	d111      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fc80 	bl	8007594 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c98:	e012      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3324      	adds	r3, #36	; 0x24
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fd29 	bl	80076f8 <RCCEx_PLL3_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006caa:	e009      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb0:	e006      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e004      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cb6:	bf00      	nop
 8006cb8:	e002      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cba:	bf00      	nop
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cc6:	4b3c      	ldr	r3, [pc, #240]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cd4:	4938      	ldr	r1, [pc, #224]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006cda:	e001      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01a      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d10a      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fcfa 	bl	80076f8 <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d0e:	4b2a      	ldr	r3, [pc, #168]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1c:	4926      	ldr	r1, [pc, #152]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01a      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d38:	d10a      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3324      	adds	r3, #36	; 0x24
 8006d3e:	2102      	movs	r1, #2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fcd9 	bl	80076f8 <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d50:	4b19      	ldr	r3, [pc, #100]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d5e:	4916      	ldr	r1, [pc, #88]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d036      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7a:	d01f      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d80:	d817      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8a:	d009      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006d8c:	e011      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fbfd 	bl	8007594 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d9e:	e00e      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fca6 	bl	80076f8 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006db0:	e005      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	e002      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006db8:	58024400 	.word	0x58024400
      break;
 8006dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dc4:	4b93      	ldr	r3, [pc, #588]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dd2:	4990      	ldr	r1, [pc, #576]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	658b      	str	r3, [r1, #88]	; 0x58
 8006dd8:	e001      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d033      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006df4:	d01c      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006df6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dfa:	d816      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e00:	d003      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e06:	d007      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e08:	e00f      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e0a:	4b82      	ldr	r3, [pc, #520]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	4a81      	ldr	r2, [pc, #516]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e16:	e00c      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3324      	adds	r3, #36	; 0x24
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fc6a 	bl	80076f8 <RCCEx_PLL3_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e28:	e003      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e38:	4b76      	ldr	r3, [pc, #472]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e46:	4973      	ldr	r1, [pc, #460]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e4c:	e001      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d029      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6a:	d007      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006e6c:	e00f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6e:	4b69      	ldr	r3, [pc, #420]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4a68      	ldr	r2, [pc, #416]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e7a:	e00b      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	2102      	movs	r1, #2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fb86 	bl	8007594 <RCCEx_PLL2_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e8c:	e002      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
      break;
 8006e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e9a:	4b5e      	ldr	r3, [pc, #376]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	495b      	ldr	r1, [pc, #364]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eac:	e001      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3324      	adds	r3, #36	; 0x24
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fc17 	bl	80076f8 <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d030      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee8:	d017      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eee:	d811      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef4:	d013      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efa:	d80b      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f04:	d106      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f06:	4b43      	ldr	r3, [pc, #268]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	4a42      	ldr	r2, [pc, #264]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f12:	e007      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
      break;
 8006f18:	e004      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f1a:	bf00      	nop
 8006f1c:	e002      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e000      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f2a:	4b3a      	ldr	r3, [pc, #232]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f36:	4937      	ldr	r1, [pc, #220]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f3c:	e001      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	492e      	ldr	r1, [pc, #184]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f6c:	4b29      	ldr	r3, [pc, #164]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f7a:	4926      	ldr	r1, [pc, #152]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f98:	491e      	ldr	r1, [pc, #120]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006faa:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb4:	6113      	str	r3, [r2, #16]
 8006fb6:	4b17      	ldr	r3, [pc, #92]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fc0:	4914      	ldr	r1, [pc, #80]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da08      	bge.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fda:	490e      	ldr	r1, [pc, #56]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffa:	4906      	ldr	r1, [pc, #24]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007000:	7dbb      	ldrb	r3, [r7, #22]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	58024400 	.word	0x58024400

08007018 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800701c:	f7ff f860 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 8007020:	4602      	mov	r2, r0
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	091b      	lsrs	r3, r3, #4
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	4904      	ldr	r1, [pc, #16]	; (8007040 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800702e:	5ccb      	ldrb	r3, [r1, r3]
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007038:	4618      	mov	r0, r3
 800703a:	bd80      	pop	{r7, pc}
 800703c:	58024400 	.word	0x58024400
 8007040:	080099a8 	.word	0x080099a8

08007044 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007044:	b480      	push	{r7}
 8007046:	b089      	sub	sp, #36	; 0x24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800704c:	4ba1      	ldr	r3, [pc, #644]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007056:	4b9f      	ldr	r3, [pc, #636]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	0b1b      	lsrs	r3, r3, #12
 800705c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007060:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007062:	4b9c      	ldr	r3, [pc, #624]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800706e:	4b99      	ldr	r3, [pc, #612]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	08db      	lsrs	r3, r3, #3
 8007074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8111 	beq.w	80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f000 8083 	beq.w	80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b02      	cmp	r3, #2
 800709e:	f200 80a1 	bhi.w	80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d056      	beq.n	800715c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070ae:	e099      	b.n	80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b0:	4b88      	ldr	r3, [pc, #544]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d02d      	beq.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070bc:	4b85      	ldr	r3, [pc, #532]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	08db      	lsrs	r3, r3, #3
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	4a84      	ldr	r2, [pc, #528]	; (80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b7b      	ldr	r3, [pc, #492]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007116:	e087      	b.n	8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b6a      	ldr	r3, [pc, #424]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a03 	vldr	s12, [r7, #12]
 800713e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800715a:	e065      	b.n	8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800716a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716e:	4b59      	ldr	r3, [pc, #356]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007182:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800719e:	e043      	b.n	8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b2:	4b48      	ldr	r3, [pc, #288]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071e2:	e021      	b.n	8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	4b37      	ldr	r3, [pc, #220]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a03 	vldr	s12, [r7, #12]
 800720a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007226:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007228:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	0a5b      	lsrs	r3, r3, #9
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800723e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007242:	edd7 6a07 	vldr	s13, [r7, #28]
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007256:	4b1f      	ldr	r3, [pc, #124]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	0c1b      	lsrs	r3, r3, #16
 800725c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800726c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007270:	edd7 6a07 	vldr	s13, [r7, #28]
 8007274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727c:	ee17 2a90 	vmov	r2, s15
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007284:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	0e1b      	lsrs	r3, r3, #24
 800728a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800729a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800729e:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072aa:	ee17 2a90 	vmov	r2, s15
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072b2:	e008      	b.n	80072c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
}
 80072c6:	bf00      	nop
 80072c8:	3724      	adds	r7, #36	; 0x24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	58024400 	.word	0x58024400
 80072d8:	03d09000 	.word	0x03d09000
 80072dc:	46000000 	.word	0x46000000
 80072e0:	4c742400 	.word	0x4c742400
 80072e4:	4a742400 	.word	0x4a742400
 80072e8:	4afe502a 	.word	0x4afe502a

080072ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072f4:	4ba1      	ldr	r3, [pc, #644]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072fe:	4b9f      	ldr	r3, [pc, #636]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	0d1b      	lsrs	r3, r3, #20
 8007304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007308:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800730a:	4b9c      	ldr	r3, [pc, #624]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007316:	4b99      	ldr	r3, [pc, #612]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	08db      	lsrs	r3, r3, #3
 800731c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8111 	beq.w	800755c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b02      	cmp	r3, #2
 800733e:	f000 8083 	beq.w	8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b02      	cmp	r3, #2
 8007346:	f200 80a1 	bhi.w	800748c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d056      	beq.n	8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007356:	e099      	b.n	800748c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007358:	4b88      	ldr	r3, [pc, #544]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d02d      	beq.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007364:	4b85      	ldr	r3, [pc, #532]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	08db      	lsrs	r3, r3, #3
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	4a84      	ldr	r2, [pc, #528]	; (8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
 8007374:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738e:	4b7b      	ldr	r3, [pc, #492]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739e:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073be:	e087      	b.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d2:	4b6a      	ldr	r3, [pc, #424]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007402:	e065      	b.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007416:	4b59      	ldr	r3, [pc, #356]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007426:	ed97 6a03 	vldr	s12, [r7, #12]
 800742a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800742e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007446:	e043      	b.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745a:	4b48      	ldr	r3, [pc, #288]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746a:	ed97 6a03 	vldr	s12, [r7, #12]
 800746e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800748a:	e021      	b.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	4b37      	ldr	r3, [pc, #220]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074d0:	4b2a      	ldr	r3, [pc, #168]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	0a5b      	lsrs	r3, r3, #9
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f6:	ee17 2a90 	vmov	r2, s15
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074fe:	4b1f      	ldr	r3, [pc, #124]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007518:	edd7 6a07 	vldr	s13, [r7, #28]
 800751c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007524:	ee17 2a90 	vmov	r2, s15
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800752c:	4b13      	ldr	r3, [pc, #76]	; (800757c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	0e1b      	lsrs	r3, r3, #24
 8007532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007546:	edd7 6a07 	vldr	s13, [r7, #28]
 800754a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007552:	ee17 2a90 	vmov	r2, s15
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800755a:	e008      	b.n	800756e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
}
 800756e:	bf00      	nop
 8007570:	3724      	adds	r7, #36	; 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	58024400 	.word	0x58024400
 8007580:	03d09000 	.word	0x03d09000
 8007584:	46000000 	.word	0x46000000
 8007588:	4c742400 	.word	0x4c742400
 800758c:	4a742400 	.word	0x4a742400
 8007590:	4afe502a 	.word	0x4afe502a

08007594 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075a2:	4b53      	ldr	r3, [pc, #332]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d101      	bne.n	80075b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e099      	b.n	80076e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075b2:	4b4f      	ldr	r3, [pc, #316]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4e      	ldr	r2, [pc, #312]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80075b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075be:	f7fa faeb 	bl	8001b98 <HAL_GetTick>
 80075c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075c4:	e008      	b.n	80075d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075c6:	f7fa fae7 	bl	8001b98 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e086      	b.n	80076e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075d8:	4b45      	ldr	r3, [pc, #276]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f0      	bne.n	80075c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075e4:	4b42      	ldr	r3, [pc, #264]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	031b      	lsls	r3, r3, #12
 80075f2:	493f      	ldr	r1, [pc, #252]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	628b      	str	r3, [r1, #40]	; 0x28
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	025b      	lsls	r3, r3, #9
 800760a:	b29b      	uxth	r3, r3
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	3b01      	subs	r3, #1
 8007614:	041b      	lsls	r3, r3, #16
 8007616:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	3b01      	subs	r3, #1
 8007622:	061b      	lsls	r3, r3, #24
 8007624:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007628:	4931      	ldr	r1, [pc, #196]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800762a:	4313      	orrs	r3, r2
 800762c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800762e:	4b30      	ldr	r3, [pc, #192]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	492d      	ldr	r1, [pc, #180]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800763c:	4313      	orrs	r3, r2
 800763e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007640:	4b2b      	ldr	r3, [pc, #172]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	f023 0220 	bic.w	r2, r3, #32
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	4928      	ldr	r1, [pc, #160]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007652:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	4a26      	ldr	r2, [pc, #152]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007658:	f023 0310 	bic.w	r3, r3, #16
 800765c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800765e:	4b24      	ldr	r3, [pc, #144]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007662:	4b24      	ldr	r3, [pc, #144]	; (80076f4 <RCCEx_PLL2_Config+0x160>)
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	69d2      	ldr	r2, [r2, #28]
 800766a:	00d2      	lsls	r2, r2, #3
 800766c:	4920      	ldr	r1, [pc, #128]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800766e:	4313      	orrs	r3, r2
 8007670:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007672:	4b1f      	ldr	r3, [pc, #124]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007678:	f043 0310 	orr.w	r3, r3, #16
 800767c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007684:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800768a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800768e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007690:	e00f      	b.n	80076b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d106      	bne.n	80076a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4a14      	ldr	r2, [pc, #80]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 800769e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076a4:	e005      	b.n	80076b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076a6:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	4a11      	ldr	r2, [pc, #68]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076b2:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80076b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076be:	f7fa fa6b 	bl	8001b98 <HAL_GetTick>
 80076c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076c4:	e008      	b.n	80076d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076c6:	f7fa fa67 	bl	8001b98 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d901      	bls.n	80076d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e006      	b.n	80076e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <RCCEx_PLL2_Config+0x15c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0f0      	beq.n	80076c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
 80076f4:	ffff0007 	.word	0xffff0007

080076f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007706:	4b53      	ldr	r3, [pc, #332]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b03      	cmp	r3, #3
 8007710:	d101      	bne.n	8007716 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e099      	b.n	800784a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007716:	4b4f      	ldr	r3, [pc, #316]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a4e      	ldr	r2, [pc, #312]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800771c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007722:	f7fa fa39 	bl	8001b98 <HAL_GetTick>
 8007726:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007728:	e008      	b.n	800773c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800772a:	f7fa fa35 	bl	8001b98 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d901      	bls.n	800773c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e086      	b.n	800784a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800773c:	4b45      	ldr	r3, [pc, #276]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f0      	bne.n	800772a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007748:	4b42      	ldr	r3, [pc, #264]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	493f      	ldr	r1, [pc, #252]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007758:	4313      	orrs	r3, r2
 800775a:	628b      	str	r3, [r1, #40]	; 0x28
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	3b01      	subs	r3, #1
 8007762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	3b01      	subs	r3, #1
 800776c:	025b      	lsls	r3, r3, #9
 800776e:	b29b      	uxth	r3, r3
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	3b01      	subs	r3, #1
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	3b01      	subs	r3, #1
 8007786:	061b      	lsls	r3, r3, #24
 8007788:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800778c:	4931      	ldr	r1, [pc, #196]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800778e:	4313      	orrs	r3, r2
 8007790:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007792:	4b30      	ldr	r3, [pc, #192]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	492d      	ldr	r1, [pc, #180]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077a4:	4b2b      	ldr	r3, [pc, #172]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	4928      	ldr	r1, [pc, #160]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077b6:	4b27      	ldr	r3, [pc, #156]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	4a26      	ldr	r2, [pc, #152]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077c2:	4b24      	ldr	r3, [pc, #144]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <RCCEx_PLL3_Config+0x160>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	69d2      	ldr	r2, [r2, #28]
 80077ce:	00d2      	lsls	r2, r2, #3
 80077d0:	4920      	ldr	r1, [pc, #128]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077d6:	4b1f      	ldr	r3, [pc, #124]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	4a19      	ldr	r2, [pc, #100]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077f4:	e00f      	b.n	8007816 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d106      	bne.n	800780a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077fc:	4b15      	ldr	r3, [pc, #84]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a14      	ldr	r2, [pc, #80]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007802:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007808:	e005      	b.n	8007816 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	4a11      	ldr	r2, [pc, #68]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007814:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a0e      	ldr	r2, [pc, #56]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007822:	f7fa f9b9 	bl	8001b98 <HAL_GetTick>
 8007826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007828:	e008      	b.n	800783c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800782a:	f7fa f9b5 	bl	8001b98 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e006      	b.n	800784a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <RCCEx_PLL3_Config+0x15c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0f0      	beq.n	800782a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	58024400 	.word	0x58024400
 8007858:	ffff0007 	.word	0xffff0007

0800785c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0eb      	b.n	8007a4a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a75      	ldr	r2, [pc, #468]	; (8007a54 <HAL_SPI_Init+0x1f8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00f      	beq.n	80078a2 <HAL_SPI_Init+0x46>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a74      	ldr	r2, [pc, #464]	; (8007a58 <HAL_SPI_Init+0x1fc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00a      	beq.n	80078a2 <HAL_SPI_Init+0x46>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a72      	ldr	r2, [pc, #456]	; (8007a5c <HAL_SPI_Init+0x200>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d005      	beq.n	80078a2 <HAL_SPI_Init+0x46>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b0f      	cmp	r3, #15
 800789c:	d901      	bls.n	80078a2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e0d3      	b.n	8007a4a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb94 	bl	8007fd0 <SPI_GetPacketSize>
 80078a8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a69      	ldr	r2, [pc, #420]	; (8007a54 <HAL_SPI_Init+0x1f8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00c      	beq.n	80078ce <HAL_SPI_Init+0x72>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a67      	ldr	r2, [pc, #412]	; (8007a58 <HAL_SPI_Init+0x1fc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d007      	beq.n	80078ce <HAL_SPI_Init+0x72>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a66      	ldr	r2, [pc, #408]	; (8007a5c <HAL_SPI_Init+0x200>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d002      	beq.n	80078ce <HAL_SPI_Init+0x72>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d811      	bhi.n	80078f2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078d2:	4a60      	ldr	r2, [pc, #384]	; (8007a54 <HAL_SPI_Init+0x1f8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a5e      	ldr	r2, [pc, #376]	; (8007a58 <HAL_SPI_Init+0x1fc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_SPI_Init+0x90>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a5d      	ldr	r2, [pc, #372]	; (8007a5c <HAL_SPI_Init+0x200>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d104      	bne.n	80078f6 <HAL_SPI_Init+0x9a>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b10      	cmp	r3, #16
 80078f0:	d901      	bls.n	80078f6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0a9      	b.n	8007a4a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7f9 fb68 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007930:	d119      	bne.n	8007966 <HAL_SPI_Init+0x10a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800793a:	d103      	bne.n	8007944 <HAL_SPI_Init+0xe8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007954:	d107      	bne.n	8007966 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69da      	ldr	r2, [r3, #28]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	431a      	orrs	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007978:	ea42 0103 	orr.w	r1, r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c6:	ea42 0103 	orr.w	r1, r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d113      	bne.n	8007a06 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40013000 	.word	0x40013000
 8007a58:	40003800 	.word	0x40003800
 8007a5c:	40003c00 	.word	0x40003c00

08007a60 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a78:	6a3a      	ldr	r2, [r7, #32]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a92:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3330      	adds	r3, #48	; 0x30
 8007a9a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d113      	bne.n	8007ace <HAL_SPI_IRQHandler+0x6e>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10e      	bne.n	8007ace <HAL_SPI_IRQHandler+0x6e>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
    handled = 1UL;
 8007aca:	2301      	movs	r3, #1
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10f      	bne.n	8007af8 <HAL_SPI_IRQHandler+0x98>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_SPI_IRQHandler+0x98>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
    handled = 1UL;
 8007af4:	2301      	movs	r3, #1
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <HAL_SPI_IRQHandler+0xc2>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <HAL_SPI_IRQHandler+0xc2>
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d105      	bne.n	8007b22 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
    handled = 1UL;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f040 816f 	bne.w	8007e08 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 80a0 	beq.w	8007c76 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0208 	orr.w	r2, r2, #8
 8007b44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0210 	orr.w	r2, r2, #16
 8007b54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b64:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0208 	bic.w	r2, r2, #8
 8007b74:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00f      	beq.n	8007ba0 <HAL_SPI_IRQHandler+0x140>
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d004      	beq.n	8007b90 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d007      	beq.n	8007ba0 <HAL_SPI_IRQHandler+0x140>
 8007b90:	7cfb      	ldrb	r3, [r7, #19]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d059      	beq.n	8007c4a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d154      	bne.n	8007c4a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d13d      	bne.n	8007c2a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007bae:	e036      	b.n	8007c1e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d90b      	bls.n	8007bd0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007bc2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc8:	1d1a      	adds	r2, r3, #4
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	665a      	str	r2, [r3, #100]	; 0x64
 8007bce:	e01d      	b.n	8007c0c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b07      	cmp	r3, #7
 8007bd6:	d90b      	bls.n	8007bf0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	8812      	ldrh	r2, [r2, #0]
 8007be0:	b292      	uxth	r2, r2
 8007be2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be8:	1c9a      	adds	r2, r3, #2
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	665a      	str	r2, [r3, #100]	; 0x64
 8007bee:	e00d      	b.n	8007c0c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1c2      	bne.n	8007bb0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f930 	bl	8007e90 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7f9 f98a 	bl	8000f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007c48:	e0e3      	b.n	8007e12 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c4a:	7cfb      	ldrb	r3, [r7, #19]
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d103      	bne.n	8007c58 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8f9 	bl	8007e48 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007c56:	e0d9      	b.n	8007e0c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007c58:	7cfb      	ldrb	r3, [r7, #19]
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d103      	bne.n	8007c66 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8e8 	bl	8007e34 <HAL_SPI_RxCpltCallback>
    return;
 8007c64:	e0d2      	b.n	8007e0c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007c66:	7cfb      	ldrb	r3, [r7, #19]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	f040 80cf 	bne.w	8007e0c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8d6 	bl	8007e20 <HAL_SPI_TxCpltCallback>
    return;
 8007c74:	e0ca      	b.n	8007e0c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <HAL_SPI_IRQHandler+0x23c>
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c98:	619a      	str	r2, [r3, #24]

    return;
 8007c9a:	e0ba      	b.n	8007e12 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80b5 	beq.w	8007e12 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00f      	beq.n	8007cd2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb8:	f043 0204 	orr.w	r2, r3, #4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce2:	f043 0201 	orr.w	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cfa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00f      	beq.n	8007d26 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0c:	f043 0208 	orr.w	r2, r3, #8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d24:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00f      	beq.n	8007d50 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0220 	orr.w	r2, r2, #32
 8007d4e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d05a      	beq.n	8007e10 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0201 	bic.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6919      	ldr	r1, [r3, #16]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b28      	ldr	r3, [pc, #160]	; (8007e18 <HAL_SPI_IRQHandler+0x3b8>)
 8007d76:	400b      	ands	r3, r1
 8007d78:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d84:	d138      	bne.n	8007df8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d94:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d013      	beq.n	8007dc6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da2:	4a1e      	ldr	r2, [pc, #120]	; (8007e1c <HAL_SPI_IRQHandler+0x3bc>)
 8007da4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fb fa96 	bl	80032dc <HAL_DMA_Abort_IT>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dd2:	4a12      	ldr	r2, [pc, #72]	; (8007e1c <HAL_SPI_IRQHandler+0x3bc>)
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fb fa7e 	bl	80032dc <HAL_DMA_Abort_IT>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d014      	beq.n	8007e10 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007df6:	e00b      	b.n	8007e10 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7f9 f8ab 	bl	8000f5c <HAL_SPI_ErrorCallback>
    return;
 8007e06:	e003      	b.n	8007e10 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007e08:	bf00      	nop
 8007e0a:	e002      	b.n	8007e12 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e10:	bf00      	nop
  }
}
 8007e12:	3728      	adds	r7, #40	; 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	fffffc94 	.word	0xfffffc94
 8007e1c:	08007e5d 	.word	0x08007e5d

08007e20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7f9 f86a 	bl	8000f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0208 	orr.w	r2, r2, #8
 8007eae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0210 	orr.w	r2, r2, #16
 8007ebe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6919      	ldr	r1, [r3, #16]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <SPI_CloseTransfer+0x13c>)
 8007edc:	400b      	ands	r3, r1
 8007ede:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007eee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d014      	beq.n	8007f26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00f      	beq.n	8007f26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0220 	orr.w	r2, r2, #32
 8007f24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d014      	beq.n	8007f5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00f      	beq.n	8007f5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f42:	f043 0204 	orr.w	r2, r3, #4
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00f      	beq.n	8007f86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6c:	f043 0201 	orr.w	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f96:	f043 0208 	orr.w	r2, r3, #8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007fc0:	bf00      	nop
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	fffffc90 	.word	0xfffffc90

08007fd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	3307      	adds	r3, #7
 8007fee:	08db      	lsrs	r3, r3, #3
 8007ff0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e042      	b.n	800809e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7f9 f940 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2224      	movs	r2, #36	; 0x24
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb87 	bl	800875c <UART_SetConfig>
 800804e:	4603      	mov	r3, r0
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e022      	b.n	800809e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f8db 	bl	800921c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008074:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008084:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f962 	bl	8009360 <UART_CheckIdleState>
 800809c:	4603      	mov	r3, r0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d168      	bne.n	8008192 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <HAL_UART_Transmit_DMA+0x24>
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e061      	b.n	8008194 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_UART_Transmit_DMA+0x36>
 80080da:	2302      	movs	r3, #2
 80080dc:	e05a      	b.n	8008194 <HAL_UART_Transmit_DMA+0xec>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	88fa      	ldrh	r2, [r7, #6]
 80080f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2221      	movs	r2, #33	; 0x21
 8008108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02c      	beq.n	800816e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008118:	4a20      	ldr	r2, [pc, #128]	; (800819c <HAL_UART_Transmit_DMA+0xf4>)
 800811a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008120:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <HAL_UART_Transmit_DMA+0xf8>)
 8008122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008128:	4a1e      	ldr	r2, [pc, #120]	; (80081a4 <HAL_UART_Transmit_DMA+0xfc>)
 800812a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008130:	2200      	movs	r2, #0
 8008132:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813c:	4619      	mov	r1, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3328      	adds	r3, #40	; 0x28
 8008144:	461a      	mov	r2, r3
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	f7fa fb40 	bl	80027cc <HAL_DMA_Start_IT>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00d      	beq.n	800816e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2210      	movs	r2, #16
 8008156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e012      	b.n	8008194 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2240      	movs	r2, #64	; 0x40
 8008174:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800818c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	e000      	b.n	8008194 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
  }
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	08009599 	.word	0x08009599
 80081a0:	080095e9 	.word	0x080095e9
 80081a4:	08009605 	.word	0x08009605

080081a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80081ce:	4013      	ands	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d118      	bne.n	800820a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d013      	beq.n	800820a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8282 	beq.w	8008704 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      }
      return;
 8008208:	e27c      	b.n	8008704 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80ef 	beq.w	80083f0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4b73      	ldr	r3, [pc, #460]	; (80083e4 <HAL_UART_IRQHandler+0x23c>)
 8008216:	4013      	ands	r3, r2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d105      	bne.n	8008228 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4b72      	ldr	r3, [pc, #456]	; (80083e8 <HAL_UART_IRQHandler+0x240>)
 8008220:	4013      	ands	r3, r2
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 80e4 	beq.w	80083f0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <HAL_UART_IRQHandler+0xac>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2201      	movs	r2, #1
 8008242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824a:	f043 0201 	orr.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <HAL_UART_IRQHandler+0xd8>
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2202      	movs	r2, #2
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008276:	f043 0204 	orr.w	r2, r3, #4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d010      	beq.n	80082ac <HAL_UART_IRQHandler+0x104>
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2204      	movs	r2, #4
 800829a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a2:	f043 0202 	orr.w	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d015      	beq.n	80082e2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	f003 0320 	and.w	r3, r3, #32
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d104      	bne.n	80082ca <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <HAL_UART_IRQHandler+0x23c>)
 80082c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2208      	movs	r2, #8
 80082d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d8:	f043 0208 	orr.w	r2, r3, #8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d011      	beq.n	8008310 <HAL_UART_IRQHandler+0x168>
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00c      	beq.n	8008310 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008306:	f043 0220 	orr.w	r2, r3, #32
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 81f6 	beq.w	8008708 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d011      	beq.n	800834a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008350:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835c:	2b40      	cmp	r3, #64	; 0x40
 800835e:	d004      	beq.n	800836a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008366:	2b00      	cmp	r3, #0
 8008368:	d031      	beq.n	80083ce <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f8e2 	bl	8009534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d123      	bne.n	80083c6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800838c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d013      	beq.n	80083be <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839a:	4a14      	ldr	r2, [pc, #80]	; (80083ec <HAL_UART_IRQHandler+0x244>)
 800839c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fa ff9a 	bl	80032dc <HAL_DMA_Abort_IT>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d017      	beq.n	80083de <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	e00f      	b.n	80083de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7f8 fddc 	bl	8000f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	e00b      	b.n	80083de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7f8 fdd8 	bl	8000f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	e007      	b.n	80083de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f8 fdd4 	bl	8000f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083dc:	e194      	b.n	8008708 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083de:	bf00      	nop
    return;
 80083e0:	e192      	b.n	8008708 <HAL_UART_IRQHandler+0x560>
 80083e2:	bf00      	nop
 80083e4:	10000001 	.word	0x10000001
 80083e8:	04000120 	.word	0x04000120
 80083ec:	08009685 	.word	0x08009685

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	f040 810f 	bne.w	8008618 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8109 	beq.w	8008618 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8103 	beq.w	8008618 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2210      	movs	r2, #16
 8008418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	f040 80bb 	bne.w	80085a0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a96      	ldr	r2, [pc, #600]	; (800868c <HAL_UART_IRQHandler+0x4e4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d059      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a94      	ldr	r2, [pc, #592]	; (8008690 <HAL_UART_IRQHandler+0x4e8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d053      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a92      	ldr	r2, [pc, #584]	; (8008694 <HAL_UART_IRQHandler+0x4ec>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d04d      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a90      	ldr	r2, [pc, #576]	; (8008698 <HAL_UART_IRQHandler+0x4f0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d047      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a8e      	ldr	r2, [pc, #568]	; (800869c <HAL_UART_IRQHandler+0x4f4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d041      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a8c      	ldr	r2, [pc, #560]	; (80086a0 <HAL_UART_IRQHandler+0x4f8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d03b      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a8a      	ldr	r2, [pc, #552]	; (80086a4 <HAL_UART_IRQHandler+0x4fc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d035      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a88      	ldr	r2, [pc, #544]	; (80086a8 <HAL_UART_IRQHandler+0x500>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d02f      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a86      	ldr	r2, [pc, #536]	; (80086ac <HAL_UART_IRQHandler+0x504>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d029      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a84      	ldr	r2, [pc, #528]	; (80086b0 <HAL_UART_IRQHandler+0x508>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d023      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a82      	ldr	r2, [pc, #520]	; (80086b4 <HAL_UART_IRQHandler+0x50c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01d      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a80      	ldr	r2, [pc, #512]	; (80086b8 <HAL_UART_IRQHandler+0x510>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d017      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a7e      	ldr	r2, [pc, #504]	; (80086bc <HAL_UART_IRQHandler+0x514>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d011      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a7c      	ldr	r2, [pc, #496]	; (80086c0 <HAL_UART_IRQHandler+0x518>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00b      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a7a      	ldr	r2, [pc, #488]	; (80086c4 <HAL_UART_IRQHandler+0x51c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d005      	beq.n	80084ea <HAL_UART_IRQHandler+0x342>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a78      	ldr	r2, [pc, #480]	; (80086c8 <HAL_UART_IRQHandler+0x520>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d105      	bne.n	80084f6 <HAL_UART_IRQHandler+0x34e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	e004      	b.n	8008500 <HAL_UART_IRQHandler+0x358>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008502:	893b      	ldrh	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8101 	beq.w	800870c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008510:	893a      	ldrh	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	f080 80fa 	bcs.w	800870c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	893a      	ldrh	r2, [r7, #8]
 800851c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852a:	d02b      	beq.n	8008584 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800853a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0201 	bic.w	r2, r2, #1
 800854a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800855a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0210 	bic.w	r2, r2, #16
 8008578:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857e:	4618      	mov	r0, r3
 8008580:	f7fa fb8e 	bl	8002ca0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008590:	b29b      	uxth	r3, r3
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	b29b      	uxth	r3, r3
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8d3 	bl	8008744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800859e:	e0b5      	b.n	800870c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 80a8 	beq.w	8008710 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80085c0:	897b      	ldrh	r3, [r7, #10]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80a4 	beq.w	8008710 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6899      	ldr	r1, [r3, #8]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b3a      	ldr	r3, [pc, #232]	; (80086cc <HAL_UART_IRQHandler+0x524>)
 80085e4:	400b      	ands	r3, r1
 80085e6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 0210 	bic.w	r2, r2, #16
 800860a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800860c:	897b      	ldrh	r3, [r7, #10]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f897 	bl	8008744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008616:	e07b      	b.n	8008710 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00d      	beq.n	800863e <HAL_UART_IRQHandler+0x496>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 f854 	bl	80096e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800863c:	e06b      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	2b00      	cmp	r3, #0
 8008646:	d012      	beq.n	800866e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864e:	2b00      	cmp	r3, #0
 8008650:	d104      	bne.n	800865c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008660:	2b00      	cmp	r3, #0
 8008662:	d057      	beq.n	8008714 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
    }
    return;
 800866c:	e052      	b.n	8008714 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d02b      	beq.n	80086d0 <HAL_UART_IRQHandler+0x528>
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d026      	beq.n	80086d0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f814 	bl	80096b0 <UART_EndTransmit_IT>
    return;
 8008688:	e045      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
 800868a:	bf00      	nop
 800868c:	40020010 	.word	0x40020010
 8008690:	40020028 	.word	0x40020028
 8008694:	40020040 	.word	0x40020040
 8008698:	40020058 	.word	0x40020058
 800869c:	40020070 	.word	0x40020070
 80086a0:	40020088 	.word	0x40020088
 80086a4:	400200a0 	.word	0x400200a0
 80086a8:	400200b8 	.word	0x400200b8
 80086ac:	40020410 	.word	0x40020410
 80086b0:	40020428 	.word	0x40020428
 80086b4:	40020440 	.word	0x40020440
 80086b8:	40020458 	.word	0x40020458
 80086bc:	40020470 	.word	0x40020470
 80086c0:	40020488 	.word	0x40020488
 80086c4:	400204a0 	.word	0x400204a0
 80086c8:	400204b8 	.word	0x400204b8
 80086cc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <HAL_UART_IRQHandler+0x544>
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f811 	bl	800970c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ea:	e014      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <HAL_UART_IRQHandler+0x56e>
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da0c      	bge.n	8008716 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fffb 	bl	80096f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008702:	e008      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
      return;
 8008704:	bf00      	nop
 8008706:	e006      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
    return;
 8008708:	bf00      	nop
 800870a:	e004      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
      return;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
      return;
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <HAL_UART_IRQHandler+0x56e>
    return;
 8008714:	bf00      	nop
  }
}
 8008716:	3720      	adds	r7, #32
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800875c:	b5b0      	push	{r4, r5, r7, lr}
 800875e:	b08e      	sub	sp, #56	; 0x38
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4313      	orrs	r3, r2
 8008780:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	4bbf      	ldr	r3, [pc, #764]	; (8008a88 <UART_SetConfig+0x32c>)
 800878a:	4013      	ands	r3, r2
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008792:	430b      	orrs	r3, r1
 8008794:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4ab5      	ldr	r2, [pc, #724]	; (8008a8c <UART_SetConfig+0x330>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d004      	beq.n	80087c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c2:	4313      	orrs	r3, r2
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	4bb0      	ldr	r3, [pc, #704]	; (8008a90 <UART_SetConfig+0x334>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087d6:	430b      	orrs	r3, r1
 80087d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	f023 010f 	bic.w	r1, r3, #15
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4aa7      	ldr	r2, [pc, #668]	; (8008a94 <UART_SetConfig+0x338>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d176      	bne.n	80088e8 <UART_SetConfig+0x18c>
 80087fa:	4ba7      	ldr	r3, [pc, #668]	; (8008a98 <UART_SetConfig+0x33c>)
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008802:	2b28      	cmp	r3, #40	; 0x28
 8008804:	d86c      	bhi.n	80088e0 <UART_SetConfig+0x184>
 8008806:	a201      	add	r2, pc, #4	; (adr r2, 800880c <UART_SetConfig+0xb0>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	080088b1 	.word	0x080088b1
 8008810:	080088e1 	.word	0x080088e1
 8008814:	080088e1 	.word	0x080088e1
 8008818:	080088e1 	.word	0x080088e1
 800881c:	080088e1 	.word	0x080088e1
 8008820:	080088e1 	.word	0x080088e1
 8008824:	080088e1 	.word	0x080088e1
 8008828:	080088e1 	.word	0x080088e1
 800882c:	080088b9 	.word	0x080088b9
 8008830:	080088e1 	.word	0x080088e1
 8008834:	080088e1 	.word	0x080088e1
 8008838:	080088e1 	.word	0x080088e1
 800883c:	080088e1 	.word	0x080088e1
 8008840:	080088e1 	.word	0x080088e1
 8008844:	080088e1 	.word	0x080088e1
 8008848:	080088e1 	.word	0x080088e1
 800884c:	080088c1 	.word	0x080088c1
 8008850:	080088e1 	.word	0x080088e1
 8008854:	080088e1 	.word	0x080088e1
 8008858:	080088e1 	.word	0x080088e1
 800885c:	080088e1 	.word	0x080088e1
 8008860:	080088e1 	.word	0x080088e1
 8008864:	080088e1 	.word	0x080088e1
 8008868:	080088e1 	.word	0x080088e1
 800886c:	080088c9 	.word	0x080088c9
 8008870:	080088e1 	.word	0x080088e1
 8008874:	080088e1 	.word	0x080088e1
 8008878:	080088e1 	.word	0x080088e1
 800887c:	080088e1 	.word	0x080088e1
 8008880:	080088e1 	.word	0x080088e1
 8008884:	080088e1 	.word	0x080088e1
 8008888:	080088e1 	.word	0x080088e1
 800888c:	080088d1 	.word	0x080088d1
 8008890:	080088e1 	.word	0x080088e1
 8008894:	080088e1 	.word	0x080088e1
 8008898:	080088e1 	.word	0x080088e1
 800889c:	080088e1 	.word	0x080088e1
 80088a0:	080088e1 	.word	0x080088e1
 80088a4:	080088e1 	.word	0x080088e1
 80088a8:	080088e1 	.word	0x080088e1
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b6:	e222      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088b8:	2304      	movs	r3, #4
 80088ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088be:	e21e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088c0:	2308      	movs	r3, #8
 80088c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c6:	e21a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088c8:	2310      	movs	r3, #16
 80088ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ce:	e216      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088d0:	2320      	movs	r3, #32
 80088d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d6:	e212      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088de:	e20e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088e0:	2380      	movs	r3, #128	; 0x80
 80088e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e6:	e20a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a6b      	ldr	r2, [pc, #428]	; (8008a9c <UART_SetConfig+0x340>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d130      	bne.n	8008954 <UART_SetConfig+0x1f8>
 80088f2:	4b69      	ldr	r3, [pc, #420]	; (8008a98 <UART_SetConfig+0x33c>)
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b05      	cmp	r3, #5
 80088fc:	d826      	bhi.n	800894c <UART_SetConfig+0x1f0>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x1a8>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	0800891d 	.word	0x0800891d
 8008908:	08008925 	.word	0x08008925
 800890c:	0800892d 	.word	0x0800892d
 8008910:	08008935 	.word	0x08008935
 8008914:	0800893d 	.word	0x0800893d
 8008918:	08008945 	.word	0x08008945
 800891c:	2300      	movs	r3, #0
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008922:	e1ec      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008924:	2304      	movs	r3, #4
 8008926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892a:	e1e8      	b.n	8008cfe <UART_SetConfig+0x5a2>
 800892c:	2308      	movs	r3, #8
 800892e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008932:	e1e4      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008934:	2310      	movs	r3, #16
 8008936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893a:	e1e0      	b.n	8008cfe <UART_SetConfig+0x5a2>
 800893c:	2320      	movs	r3, #32
 800893e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008942:	e1dc      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008944:	2340      	movs	r3, #64	; 0x40
 8008946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894a:	e1d8      	b.n	8008cfe <UART_SetConfig+0x5a2>
 800894c:	2380      	movs	r3, #128	; 0x80
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e1d4      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a51      	ldr	r2, [pc, #324]	; (8008aa0 <UART_SetConfig+0x344>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d130      	bne.n	80089c0 <UART_SetConfig+0x264>
 800895e:	4b4e      	ldr	r3, [pc, #312]	; (8008a98 <UART_SetConfig+0x33c>)
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	2b05      	cmp	r3, #5
 8008968:	d826      	bhi.n	80089b8 <UART_SetConfig+0x25c>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <UART_SetConfig+0x214>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008989 	.word	0x08008989
 8008974:	08008991 	.word	0x08008991
 8008978:	08008999 	.word	0x08008999
 800897c:	080089a1 	.word	0x080089a1
 8008980:	080089a9 	.word	0x080089a9
 8008984:	080089b1 	.word	0x080089b1
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898e:	e1b6      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008990:	2304      	movs	r3, #4
 8008992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008996:	e1b2      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008998:	2308      	movs	r3, #8
 800899a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899e:	e1ae      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80089a0:	2310      	movs	r3, #16
 80089a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a6:	e1aa      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80089a8:	2320      	movs	r3, #32
 80089aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ae:	e1a6      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80089b0:	2340      	movs	r3, #64	; 0x40
 80089b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b6:	e1a2      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80089b8:	2380      	movs	r3, #128	; 0x80
 80089ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089be:	e19e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a37      	ldr	r2, [pc, #220]	; (8008aa4 <UART_SetConfig+0x348>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d130      	bne.n	8008a2c <UART_SetConfig+0x2d0>
 80089ca:	4b33      	ldr	r3, [pc, #204]	; (8008a98 <UART_SetConfig+0x33c>)
 80089cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d826      	bhi.n	8008a24 <UART_SetConfig+0x2c8>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x280>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	080089fd 	.word	0x080089fd
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a15 	.word	0x08008a15
 80089f0:	08008a1d 	.word	0x08008a1d
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fa:	e180      	b.n	8008cfe <UART_SetConfig+0x5a2>
 80089fc:	2304      	movs	r3, #4
 80089fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a02:	e17c      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a04:	2308      	movs	r3, #8
 8008a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0a:	e178      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a12:	e174      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a14:	2320      	movs	r3, #32
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e170      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a1c:	2340      	movs	r3, #64	; 0x40
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e16c      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a24:	2380      	movs	r3, #128	; 0x80
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e168      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1d      	ldr	r2, [pc, #116]	; (8008aa8 <UART_SetConfig+0x34c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d142      	bne.n	8008abc <UART_SetConfig+0x360>
 8008a36:	4b18      	ldr	r3, [pc, #96]	; (8008a98 <UART_SetConfig+0x33c>)
 8008a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d838      	bhi.n	8008ab4 <UART_SetConfig+0x358>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x2ec>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a71 	.word	0x08008a71
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008aad 	.word	0x08008aad
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	e14a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	e146      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a70:	2308      	movs	r3, #8
 8008a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a76:	e142      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7e:	e13e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a80:	2320      	movs	r3, #32
 8008a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a86:	e13a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008a88:	cfff69f3 	.word	0xcfff69f3
 8008a8c:	58000c00 	.word	0x58000c00
 8008a90:	11fff4ff 	.word	0x11fff4ff
 8008a94:	40011000 	.word	0x40011000
 8008a98:	58024400 	.word	0x58024400
 8008a9c:	40004400 	.word	0x40004400
 8008aa0:	40004800 	.word	0x40004800
 8008aa4:	40004c00 	.word	0x40004c00
 8008aa8:	40005000 	.word	0x40005000
 8008aac:	2340      	movs	r3, #64	; 0x40
 8008aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab2:	e124      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008ab4:	2380      	movs	r3, #128	; 0x80
 8008ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aba:	e120      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4acc      	ldr	r2, [pc, #816]	; (8008df4 <UART_SetConfig+0x698>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d176      	bne.n	8008bb4 <UART_SetConfig+0x458>
 8008ac6:	4bcc      	ldr	r3, [pc, #816]	; (8008df8 <UART_SetConfig+0x69c>)
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ace:	2b28      	cmp	r3, #40	; 0x28
 8008ad0:	d86c      	bhi.n	8008bac <UART_SetConfig+0x450>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <UART_SetConfig+0x37c>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008b7d 	.word	0x08008b7d
 8008adc:	08008bad 	.word	0x08008bad
 8008ae0:	08008bad 	.word	0x08008bad
 8008ae4:	08008bad 	.word	0x08008bad
 8008ae8:	08008bad 	.word	0x08008bad
 8008aec:	08008bad 	.word	0x08008bad
 8008af0:	08008bad 	.word	0x08008bad
 8008af4:	08008bad 	.word	0x08008bad
 8008af8:	08008b85 	.word	0x08008b85
 8008afc:	08008bad 	.word	0x08008bad
 8008b00:	08008bad 	.word	0x08008bad
 8008b04:	08008bad 	.word	0x08008bad
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bad 	.word	0x08008bad
 8008b10:	08008bad 	.word	0x08008bad
 8008b14:	08008bad 	.word	0x08008bad
 8008b18:	08008b8d 	.word	0x08008b8d
 8008b1c:	08008bad 	.word	0x08008bad
 8008b20:	08008bad 	.word	0x08008bad
 8008b24:	08008bad 	.word	0x08008bad
 8008b28:	08008bad 	.word	0x08008bad
 8008b2c:	08008bad 	.word	0x08008bad
 8008b30:	08008bad 	.word	0x08008bad
 8008b34:	08008bad 	.word	0x08008bad
 8008b38:	08008b95 	.word	0x08008b95
 8008b3c:	08008bad 	.word	0x08008bad
 8008b40:	08008bad 	.word	0x08008bad
 8008b44:	08008bad 	.word	0x08008bad
 8008b48:	08008bad 	.word	0x08008bad
 8008b4c:	08008bad 	.word	0x08008bad
 8008b50:	08008bad 	.word	0x08008bad
 8008b54:	08008bad 	.word	0x08008bad
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	08008bad 	.word	0x08008bad
 8008b60:	08008bad 	.word	0x08008bad
 8008b64:	08008bad 	.word	0x08008bad
 8008b68:	08008bad 	.word	0x08008bad
 8008b6c:	08008bad 	.word	0x08008bad
 8008b70:	08008bad 	.word	0x08008bad
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b82:	e0bc      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8a:	e0b8      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e0b4      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e0b0      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e0ac      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e0a8      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e0a4      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a90      	ldr	r2, [pc, #576]	; (8008dfc <UART_SetConfig+0x6a0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d130      	bne.n	8008c20 <UART_SetConfig+0x4c4>
 8008bbe:	4b8e      	ldr	r3, [pc, #568]	; (8008df8 <UART_SetConfig+0x69c>)
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d826      	bhi.n	8008c18 <UART_SetConfig+0x4bc>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x474>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008be9 	.word	0x08008be9
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	08008bf9 	.word	0x08008bf9
 8008bdc:	08008c01 	.word	0x08008c01
 8008be0:	08008c09 	.word	0x08008c09
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e086      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e082      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	e07e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c00:	2310      	movs	r3, #16
 8008c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c06:	e07a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c08:	2320      	movs	r3, #32
 8008c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0e:	e076      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c10:	2340      	movs	r3, #64	; 0x40
 8008c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c16:	e072      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1e:	e06e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a76      	ldr	r2, [pc, #472]	; (8008e00 <UART_SetConfig+0x6a4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d130      	bne.n	8008c8c <UART_SetConfig+0x530>
 8008c2a:	4b73      	ldr	r3, [pc, #460]	; (8008df8 <UART_SetConfig+0x69c>)
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d826      	bhi.n	8008c84 <UART_SetConfig+0x528>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x4e0>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c55 	.word	0x08008c55
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c75 	.word	0x08008c75
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5a:	e050      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c62:	e04c      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6a:	e048      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c72:	e044      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7a:	e040      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e03c      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e038      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a5c      	ldr	r2, [pc, #368]	; (8008e04 <UART_SetConfig+0x6a8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d130      	bne.n	8008cf8 <UART_SetConfig+0x59c>
 8008c96:	4b58      	ldr	r3, [pc, #352]	; (8008df8 <UART_SetConfig+0x69c>)
 8008c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d826      	bhi.n	8008cf0 <UART_SetConfig+0x594>
 8008ca2:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <UART_SetConfig+0x54c>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc6:	e01a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cce:	e016      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd6:	e012      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cde:	e00e      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce6:	e00a      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008ce8:	2340      	movs	r3, #64	; 0x40
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	e006      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008cf0:	2380      	movs	r3, #128	; 0x80
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e002      	b.n	8008cfe <UART_SetConfig+0x5a2>
 8008cf8:	2380      	movs	r3, #128	; 0x80
 8008cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a40      	ldr	r2, [pc, #256]	; (8008e04 <UART_SetConfig+0x6a8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	f040 80ef 	bne.w	8008ee8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	dc46      	bgt.n	8008da0 <UART_SetConfig+0x644>
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	f2c0 8081 	blt.w	8008e1a <UART_SetConfig+0x6be>
 8008d18:	3b02      	subs	r3, #2
 8008d1a:	2b1e      	cmp	r3, #30
 8008d1c:	d87d      	bhi.n	8008e1a <UART_SetConfig+0x6be>
 8008d1e:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <UART_SetConfig+0x5c8>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008da7 	.word	0x08008da7
 8008d28:	08008e1b 	.word	0x08008e1b
 8008d2c:	08008daf 	.word	0x08008daf
 8008d30:	08008e1b 	.word	0x08008e1b
 8008d34:	08008e1b 	.word	0x08008e1b
 8008d38:	08008e1b 	.word	0x08008e1b
 8008d3c:	08008dbf 	.word	0x08008dbf
 8008d40:	08008e1b 	.word	0x08008e1b
 8008d44:	08008e1b 	.word	0x08008e1b
 8008d48:	08008e1b 	.word	0x08008e1b
 8008d4c:	08008e1b 	.word	0x08008e1b
 8008d50:	08008e1b 	.word	0x08008e1b
 8008d54:	08008e1b 	.word	0x08008e1b
 8008d58:	08008e1b 	.word	0x08008e1b
 8008d5c:	08008dcf 	.word	0x08008dcf
 8008d60:	08008e1b 	.word	0x08008e1b
 8008d64:	08008e1b 	.word	0x08008e1b
 8008d68:	08008e1b 	.word	0x08008e1b
 8008d6c:	08008e1b 	.word	0x08008e1b
 8008d70:	08008e1b 	.word	0x08008e1b
 8008d74:	08008e1b 	.word	0x08008e1b
 8008d78:	08008e1b 	.word	0x08008e1b
 8008d7c:	08008e1b 	.word	0x08008e1b
 8008d80:	08008e1b 	.word	0x08008e1b
 8008d84:	08008e1b 	.word	0x08008e1b
 8008d88:	08008e1b 	.word	0x08008e1b
 8008d8c:	08008e1b 	.word	0x08008e1b
 8008d90:	08008e1b 	.word	0x08008e1b
 8008d94:	08008e1b 	.word	0x08008e1b
 8008d98:	08008e1b 	.word	0x08008e1b
 8008d9c:	08008e0d 	.word	0x08008e0d
 8008da0:	2b40      	cmp	r3, #64	; 0x40
 8008da2:	d036      	beq.n	8008e12 <UART_SetConfig+0x6b6>
 8008da4:	e039      	b.n	8008e1a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008da6:	f7fe f937 	bl	8007018 <HAL_RCCEx_GetD3PCLK1Freq>
 8008daa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008dac:	e03b      	b.n	8008e26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dae:	f107 0314 	add.w	r3, r7, #20
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe f946 	bl	8007044 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dbc:	e033      	b.n	8008e26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fa92 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dcc:	e02b      	b.n	8008e26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <UART_SetConfig+0x69c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dda:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <UART_SetConfig+0x69c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	08db      	lsrs	r3, r3, #3
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <UART_SetConfig+0x6ac>)
 8008de6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dec:	e01b      	b.n	8008e26 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008dee:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <UART_SetConfig+0x6ac>)
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008df2:	e018      	b.n	8008e26 <UART_SetConfig+0x6ca>
 8008df4:	40011400 	.word	0x40011400
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	40007800 	.word	0x40007800
 8008e00:	40007c00 	.word	0x40007c00
 8008e04:	58000c00 	.word	0x58000c00
 8008e08:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e0c:	4bc4      	ldr	r3, [pc, #784]	; (8009120 <UART_SetConfig+0x9c4>)
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e10:	e009      	b.n	8008e26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e18:	e005      	b.n	8008e26 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 81da 	beq.w	80091e2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	4abc      	ldr	r2, [pc, #752]	; (8009124 <UART_SetConfig+0x9c8>)
 8008e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e40:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	4413      	add	r3, r2
 8008e4c:	6a3a      	ldr	r2, [r7, #32]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d305      	bcc.n	8008e5e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e58:	6a3a      	ldr	r2, [r7, #32]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d903      	bls.n	8008e66 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e64:	e1bd      	b.n	80091e2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f04f 0100 	mov.w	r1, #0
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	4aac      	ldr	r2, [pc, #688]	; (8009124 <UART_SetConfig+0x9c8>)
 8008e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	f04f 0300 	mov.w	r3, #0
 8008e7e:	f7f7 fa2b 	bl	80002d8 <__aeabi_uldivmod>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4610      	mov	r0, r2
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	020b      	lsls	r3, r1, #8
 8008e94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e98:	0202      	lsls	r2, r0, #8
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	6849      	ldr	r1, [r1, #4]
 8008e9e:	0849      	lsrs	r1, r1, #1
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	f04f 0100 	mov.w	r1, #0
 8008ea6:	1814      	adds	r4, r2, r0
 8008ea8:	eb43 0501 	adc.w	r5, r3, r1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 fa0d 	bl	80002d8 <__aeabi_uldivmod>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ecc:	d308      	bcc.n	8008ee0 <UART_SetConfig+0x784>
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed4:	d204      	bcs.n	8008ee0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	e180      	b.n	80091e2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ee6:	e17c      	b.n	80091e2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef0:	f040 80bf 	bne.w	8009072 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008ef4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ef8:	2b20      	cmp	r3, #32
 8008efa:	dc49      	bgt.n	8008f90 <UART_SetConfig+0x834>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	db7c      	blt.n	8008ffa <UART_SetConfig+0x89e>
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d87a      	bhi.n	8008ffa <UART_SetConfig+0x89e>
 8008f04:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <UART_SetConfig+0x7b0>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f97 	.word	0x08008f97
 8008f10:	08008f9f 	.word	0x08008f9f
 8008f14:	08008ffb 	.word	0x08008ffb
 8008f18:	08008ffb 	.word	0x08008ffb
 8008f1c:	08008fa7 	.word	0x08008fa7
 8008f20:	08008ffb 	.word	0x08008ffb
 8008f24:	08008ffb 	.word	0x08008ffb
 8008f28:	08008ffb 	.word	0x08008ffb
 8008f2c:	08008fb7 	.word	0x08008fb7
 8008f30:	08008ffb 	.word	0x08008ffb
 8008f34:	08008ffb 	.word	0x08008ffb
 8008f38:	08008ffb 	.word	0x08008ffb
 8008f3c:	08008ffb 	.word	0x08008ffb
 8008f40:	08008ffb 	.word	0x08008ffb
 8008f44:	08008ffb 	.word	0x08008ffb
 8008f48:	08008ffb 	.word	0x08008ffb
 8008f4c:	08008fc7 	.word	0x08008fc7
 8008f50:	08008ffb 	.word	0x08008ffb
 8008f54:	08008ffb 	.word	0x08008ffb
 8008f58:	08008ffb 	.word	0x08008ffb
 8008f5c:	08008ffb 	.word	0x08008ffb
 8008f60:	08008ffb 	.word	0x08008ffb
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	08008ffb 	.word	0x08008ffb
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	08008ffb 	.word	0x08008ffb
 8008f78:	08008ffb 	.word	0x08008ffb
 8008f7c:	08008ffb 	.word	0x08008ffb
 8008f80:	08008ffb 	.word	0x08008ffb
 8008f84:	08008ffb 	.word	0x08008ffb
 8008f88:	08008ffb 	.word	0x08008ffb
 8008f8c:	08008fed 	.word	0x08008fed
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d02e      	beq.n	8008ff2 <UART_SetConfig+0x896>
 8008f94:	e031      	b.n	8008ffa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f96:	f7fd f8d3 	bl	8006140 <HAL_RCC_GetPCLK1Freq>
 8008f9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f9c:	e033      	b.n	8009006 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f9e:	f7fd f8e5 	bl	800616c <HAL_RCC_GetPCLK2Freq>
 8008fa2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fa4:	e02f      	b.n	8009006 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fa6:	f107 0314 	add.w	r3, r7, #20
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe f84a 	bl	8007044 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb4:	e027      	b.n	8009006 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe f996 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fc4:	e01f      	b.n	8009006 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fc6:	4b58      	ldr	r3, [pc, #352]	; (8009128 <UART_SetConfig+0x9cc>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fd2:	4b55      	ldr	r3, [pc, #340]	; (8009128 <UART_SetConfig+0x9cc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	08db      	lsrs	r3, r3, #3
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	4a53      	ldr	r2, [pc, #332]	; (800912c <UART_SetConfig+0x9d0>)
 8008fde:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fe4:	e00f      	b.n	8009006 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008fe6:	4b51      	ldr	r3, [pc, #324]	; (800912c <UART_SetConfig+0x9d0>)
 8008fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fea:	e00c      	b.n	8009006 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fec:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <UART_SetConfig+0x9c4>)
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ff0:	e009      	b.n	8009006 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ff8:	e005      	b.n	8009006 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 80ea 	beq.w	80091e2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	4a44      	ldr	r2, [pc, #272]	; (8009124 <UART_SetConfig+0x9c8>)
 8009014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009018:	461a      	mov	r2, r3
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009020:	005a      	lsls	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	085b      	lsrs	r3, r3, #1
 8009028:	441a      	add	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009032:	b29b      	uxth	r3, r3
 8009034:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	2b0f      	cmp	r3, #15
 800903a:	d916      	bls.n	800906a <UART_SetConfig+0x90e>
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009042:	d212      	bcs.n	800906a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	b29b      	uxth	r3, r3
 8009048:	f023 030f 	bic.w	r3, r3, #15
 800904c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	b29b      	uxth	r3, r3
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	b29a      	uxth	r2, r3
 800905a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800905c:	4313      	orrs	r3, r2
 800905e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009066:	60da      	str	r2, [r3, #12]
 8009068:	e0bb      	b.n	80091e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009070:	e0b7      	b.n	80091e2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009072:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009076:	2b20      	cmp	r3, #32
 8009078:	dc4a      	bgt.n	8009110 <UART_SetConfig+0x9b4>
 800907a:	2b00      	cmp	r3, #0
 800907c:	f2c0 8086 	blt.w	800918c <UART_SetConfig+0xa30>
 8009080:	2b20      	cmp	r3, #32
 8009082:	f200 8083 	bhi.w	800918c <UART_SetConfig+0xa30>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <UART_SetConfig+0x930>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	08009117 	.word	0x08009117
 8009090:	08009131 	.word	0x08009131
 8009094:	0800918d 	.word	0x0800918d
 8009098:	0800918d 	.word	0x0800918d
 800909c:	08009139 	.word	0x08009139
 80090a0:	0800918d 	.word	0x0800918d
 80090a4:	0800918d 	.word	0x0800918d
 80090a8:	0800918d 	.word	0x0800918d
 80090ac:	08009149 	.word	0x08009149
 80090b0:	0800918d 	.word	0x0800918d
 80090b4:	0800918d 	.word	0x0800918d
 80090b8:	0800918d 	.word	0x0800918d
 80090bc:	0800918d 	.word	0x0800918d
 80090c0:	0800918d 	.word	0x0800918d
 80090c4:	0800918d 	.word	0x0800918d
 80090c8:	0800918d 	.word	0x0800918d
 80090cc:	08009159 	.word	0x08009159
 80090d0:	0800918d 	.word	0x0800918d
 80090d4:	0800918d 	.word	0x0800918d
 80090d8:	0800918d 	.word	0x0800918d
 80090dc:	0800918d 	.word	0x0800918d
 80090e0:	0800918d 	.word	0x0800918d
 80090e4:	0800918d 	.word	0x0800918d
 80090e8:	0800918d 	.word	0x0800918d
 80090ec:	0800918d 	.word	0x0800918d
 80090f0:	0800918d 	.word	0x0800918d
 80090f4:	0800918d 	.word	0x0800918d
 80090f8:	0800918d 	.word	0x0800918d
 80090fc:	0800918d 	.word	0x0800918d
 8009100:	0800918d 	.word	0x0800918d
 8009104:	0800918d 	.word	0x0800918d
 8009108:	0800918d 	.word	0x0800918d
 800910c:	0800917f 	.word	0x0800917f
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d037      	beq.n	8009184 <UART_SetConfig+0xa28>
 8009114:	e03a      	b.n	800918c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009116:	f7fd f813 	bl	8006140 <HAL_RCC_GetPCLK1Freq>
 800911a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800911c:	e03c      	b.n	8009198 <UART_SetConfig+0xa3c>
 800911e:	bf00      	nop
 8009120:	003d0900 	.word	0x003d0900
 8009124:	080099c0 	.word	0x080099c0
 8009128:	58024400 	.word	0x58024400
 800912c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009130:	f7fd f81c 	bl	800616c <HAL_RCC_GetPCLK2Freq>
 8009134:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009136:	e02f      	b.n	8009198 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009138:	f107 0314 	add.w	r3, r7, #20
 800913c:	4618      	mov	r0, r3
 800913e:	f7fd ff81 	bl	8007044 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009146:	e027      	b.n	8009198 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009148:	f107 0308 	add.w	r3, r7, #8
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe f8cd 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009156:	e01f      	b.n	8009198 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009158:	4b2c      	ldr	r3, [pc, #176]	; (800920c <UART_SetConfig+0xab0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009164:	4b29      	ldr	r3, [pc, #164]	; (800920c <UART_SetConfig+0xab0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	08db      	lsrs	r3, r3, #3
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	4a28      	ldr	r2, [pc, #160]	; (8009210 <UART_SetConfig+0xab4>)
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
 8009174:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009176:	e00f      	b.n	8009198 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <UART_SetConfig+0xab4>)
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800917c:	e00c      	b.n	8009198 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800917e:	4b25      	ldr	r3, [pc, #148]	; (8009214 <UART_SetConfig+0xab8>)
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009182:	e009      	b.n	8009198 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800918a:	e005      	b.n	8009198 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009196:	bf00      	nop
    }

    if (pclk != 0U)
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d021      	beq.n	80091e2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	4a1d      	ldr	r2, [pc, #116]	; (8009218 <UART_SetConfig+0xabc>)
 80091a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	085b      	lsrs	r3, r3, #1
 80091b6:	441a      	add	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d908      	bls.n	80091dc <UART_SetConfig+0xa80>
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d204      	bcs.n	80091dc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d8:	60da      	str	r2, [r3, #12]
 80091da:	e002      	b.n	80091e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009202:	4618      	mov	r0, r3
 8009204:	3738      	adds	r7, #56	; 0x38
 8009206:	46bd      	mov	sp, r7
 8009208:	bdb0      	pop	{r4, r5, r7, pc}
 800920a:	bf00      	nop
 800920c:	58024400 	.word	0x58024400
 8009210:	03d09000 	.word	0x03d09000
 8009214:	003d0900 	.word	0x003d0900
 8009218:	080099c0 	.word	0x080099c0

0800921c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01a      	beq.n	8009332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931a:	d10a      	bne.n	8009332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	605a      	str	r2, [r3, #4]
  }
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af02      	add	r7, sp, #8
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009370:	f7f8 fc12 	bl	8001b98 <HAL_GetTick>
 8009374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b08      	cmp	r3, #8
 8009382:	d10e      	bne.n	80093a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f82f 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e025      	b.n	80093ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d10e      	bne.n	80093ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f819 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e00f      	b.n	80093ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	603b      	str	r3, [r7, #0]
 8009402:	4613      	mov	r3, r2
 8009404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009406:	e062      	b.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d05e      	beq.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009410:	f7f8 fbc2 	bl	8001b98 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	429a      	cmp	r2, r3
 800941e:	d302      	bcc.n	8009426 <UART_WaitOnFlagUntilTimeout+0x30>
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d11d      	bne.n	8009462 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009434:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 0201 	bic.w	r2, r2, #1
 8009444:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e045      	b.n	80094ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d02e      	beq.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800947e:	d126      	bne.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009488:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009498:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0201 	bic.w	r2, r2, #1
 80094a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2220      	movs	r2, #32
 80094be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e00f      	b.n	80094ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4013      	ands	r3, r2
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	429a      	cmp	r2, r3
 80094dc:	bf0c      	ite	eq
 80094de:	2301      	moveq	r3, #1
 80094e0:	2300      	movne	r3, #0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	461a      	mov	r2, r3
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d08d      	beq.n	8009408 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800950c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800951c:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
	...

08009534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800954a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6899      	ldr	r1, [r3, #8]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <UART_EndRxTransfer+0x60>)
 8009558:	400b      	ands	r3, r1
 800955a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009560:	2b01      	cmp	r3, #1
 8009562:	d107      	bne.n	8009574 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0210 	bic.w	r2, r2, #16
 8009572:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	effffffe 	.word	0xeffffffe

08009598 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ae:	d014      	beq.n	80095da <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095c6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095d6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095d8:	e002      	b.n	80095e0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff f89e 	bl	800871c <HAL_UART_TxCpltCallback>
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff f89a 	bl	8008730 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009618:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009620:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962c:	2b80      	cmp	r3, #128	; 0x80
 800962e:	d109      	bne.n	8009644 <UART_DMAError+0x40>
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b21      	cmp	r3, #33	; 0x21
 8009634:	d106      	bne.n	8009644 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f7ff ff59 	bl	80094f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b40      	cmp	r3, #64	; 0x40
 8009650:	d109      	bne.n	8009666 <UART_DMAError+0x62>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b22      	cmp	r3, #34	; 0x22
 8009656:	d106      	bne.n	8009666 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2200      	movs	r2, #0
 800965c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009660:	6978      	ldr	r0, [r7, #20]
 8009662:	f7ff ff67 	bl	8009534 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966c:	f043 0210 	orr.w	r2, r3, #16
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009676:	6978      	ldr	r0, [r7, #20]
 8009678:	f7f7 fc80 	bl	8000f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800967c:	bf00      	nop
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7f7 fc6a 	bl	8000f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096a8:	bf00      	nop
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff f820 	bl	800871c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_UARTEx_EnableFifoMode+0x16>
 8009732:	2302      	movs	r3, #2
 8009734:	e02b      	b.n	800978e <HAL_UARTEx_EnableFifoMode+0x6e>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2224      	movs	r2, #36	; 0x24
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009764:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800976c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f88a 	bl	8009890 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e02d      	b.n	800980a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	; 0x24
 80097ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f850 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009826:	2302      	movs	r3, #2
 8009828:	e02d      	b.n	8009886 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2224      	movs	r2, #36	; 0x24
 8009836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f812 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800989c:	2b00      	cmp	r3, #0
 800989e:	d108      	bne.n	80098b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098b0:	e031      	b.n	8009916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098b2:	2310      	movs	r3, #16
 80098b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098b6:	2310      	movs	r3, #16
 80098b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	0e5b      	lsrs	r3, r3, #25
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	0f5b      	lsrs	r3, r3, #29
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	7b3a      	ldrb	r2, [r7, #12]
 80098de:	4911      	ldr	r1, [pc, #68]	; (8009924 <UARTEx_SetNbDataToProcess+0x94>)
 80098e0:	5c8a      	ldrb	r2, [r1, r2]
 80098e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098e6:	7b3a      	ldrb	r2, [r7, #12]
 80098e8:	490f      	ldr	r1, [pc, #60]	; (8009928 <UARTEx_SetNbDataToProcess+0x98>)
 80098ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	7b7a      	ldrb	r2, [r7, #13]
 80098fc:	4909      	ldr	r1, [pc, #36]	; (8009924 <UARTEx_SetNbDataToProcess+0x94>)
 80098fe:	5c8a      	ldrb	r2, [r1, r2]
 8009900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009904:	7b7a      	ldrb	r2, [r7, #13]
 8009906:	4908      	ldr	r1, [pc, #32]	; (8009928 <UARTEx_SetNbDataToProcess+0x98>)
 8009908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800990a:	fb93 f3f2 	sdiv	r3, r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	080099d8 	.word	0x080099d8
 8009928:	080099e0 	.word	0x080099e0

0800992c <__libc_init_array>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	4d0d      	ldr	r5, [pc, #52]	; (8009964 <__libc_init_array+0x38>)
 8009930:	4c0d      	ldr	r4, [pc, #52]	; (8009968 <__libc_init_array+0x3c>)
 8009932:	1b64      	subs	r4, r4, r5
 8009934:	10a4      	asrs	r4, r4, #2
 8009936:	2600      	movs	r6, #0
 8009938:	42a6      	cmp	r6, r4
 800993a:	d109      	bne.n	8009950 <__libc_init_array+0x24>
 800993c:	4d0b      	ldr	r5, [pc, #44]	; (800996c <__libc_init_array+0x40>)
 800993e:	4c0c      	ldr	r4, [pc, #48]	; (8009970 <__libc_init_array+0x44>)
 8009940:	f000 f820 	bl	8009984 <_init>
 8009944:	1b64      	subs	r4, r4, r5
 8009946:	10a4      	asrs	r4, r4, #2
 8009948:	2600      	movs	r6, #0
 800994a:	42a6      	cmp	r6, r4
 800994c:	d105      	bne.n	800995a <__libc_init_array+0x2e>
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	f855 3b04 	ldr.w	r3, [r5], #4
 8009954:	4798      	blx	r3
 8009956:	3601      	adds	r6, #1
 8009958:	e7ee      	b.n	8009938 <__libc_init_array+0xc>
 800995a:	f855 3b04 	ldr.w	r3, [r5], #4
 800995e:	4798      	blx	r3
 8009960:	3601      	adds	r6, #1
 8009962:	e7f2      	b.n	800994a <__libc_init_array+0x1e>
 8009964:	080099f0 	.word	0x080099f0
 8009968:	080099f0 	.word	0x080099f0
 800996c:	080099f0 	.word	0x080099f0
 8009970:	080099f4 	.word	0x080099f4

08009974 <memset>:
 8009974:	4402      	add	r2, r0
 8009976:	4603      	mov	r3, r0
 8009978:	4293      	cmp	r3, r2
 800997a:	d100      	bne.n	800997e <memset+0xa>
 800997c:	4770      	bx	lr
 800997e:	f803 1b01 	strb.w	r1, [r3], #1
 8009982:	e7f9      	b.n	8009978 <memset+0x4>

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
