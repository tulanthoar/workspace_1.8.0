
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08008860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008838  24000040  08008888  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24008878  08008888  00028878  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bf25  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca8  00000000  00000000  0003bf7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c00  00000000  00000000  0003ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b38  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371f3  00000000  00000000  00040360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010cab  00000000  00000000  00077553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f93d  00000000  00000000  000881fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e7b3b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030b8  00000000  00000000  001e7b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080087ec 	.word	0x080087ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	080087ec 	.word	0x080087ec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < COUNTOF(aTxBuffer); ++i ){
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e00f      	b.n	80005fc <main+0x2c>
	  aTxBuffer[i] = i % 16384;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	425a      	negs	r2, r3
 80005e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005e4:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005e8:	bf58      	it	pl
 80005ea:	4253      	negpl	r3, r2
 80005ec:	b299      	uxth	r1, r3
 80005ee:	4a6b      	ldr	r2, [pc, #428]	; (800079c <main+0x1cc>)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < COUNTOF(aTxBuffer); ++i ){
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000602:	d3eb      	bcc.n	80005dc <main+0xc>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000604:	4b66      	ldr	r3, [pc, #408]	; (80007a0 <main+0x1d0>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d11b      	bne.n	8000648 <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000610:	f3bf 8f4f 	dsb	sy
}
 8000614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000616:	f3bf 8f6f 	isb	sy
}
 800061a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800061c:	4b60      	ldr	r3, [pc, #384]	; (80007a0 <main+0x1d0>)
 800061e:	2200      	movs	r2, #0
 8000620:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000624:	f3bf 8f4f 	dsb	sy
}
 8000628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062a:	f3bf 8f6f 	isb	sy
}
 800062e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000630:	4b5b      	ldr	r3, [pc, #364]	; (80007a0 <main+0x1d0>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a5a      	ldr	r2, [pc, #360]	; (80007a0 <main+0x1d0>)
 8000636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800063c:	f3bf 8f4f 	dsb	sy
}
 8000640:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000642:	f3bf 8f6f 	isb	sy
}
 8000646:	e000      	b.n	800064a <main+0x7a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000648:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fea5 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f8af 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f9b7 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000656:	f000 f98d 	bl	8000974 <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 800065a:	f000 f92f 	bl	80008bc <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
//  MX_SPI2_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */
  BSP_LED_Init(LED1);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fc6c 	bl	8000f3c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 fc69 	bl	8000f3c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800066a:	2002      	movs	r0, #2
 800066c:	f000 fc66 	bl	8000f3c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000670:	2101      	movs	r1, #1
 8000672:	2000      	movs	r0, #0
 8000674:	f000 fd56 	bl	8001124 <BSP_PB_Init>
  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    /* Toggle LED1*/
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fd28 	bl	80010d0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f000 ff1b 	bl	80014bc <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <main+0x1d4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <main+0x1d4>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
//  if(HAL_UART_Transmit(&huart3, (uint8_t*)aTxBuffer, TXBUFFERSIZE, 5000)!= HAL_OK)
//  {
//    Error_Handler();
//  }
  uint32_t tickstart = HAL_GetTick();
 8000694:	f000 ff06 	bl	80014a4 <HAL_GetTick>
 8000698:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e030      	b.n	8000702 <main+0x132>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	483e      	ldr	r0, [pc, #248]	; (80007a8 <main+0x1d8>)
 80006ae:	f007 fdd6 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e06a      	b.n	8000792 <main+0x1c2>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a37      	ldr	r2, [pc, #220]	; (800079c <main+0x1cc>)
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <main+0x1d8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4833      	ldr	r0, [pc, #204]	; (80007a8 <main+0x1d8>)
 80006dc:	f007 fdbf 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x11a>
      {
        return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e053      	b.n	8000792 <main+0x1c2>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <main+0x1cc>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <main+0x1d8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000708:	d3ca      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4824      	ldr	r0, [pc, #144]	; (80007a8 <main+0x1d8>)
 8000718:	f007 fda1 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x156>
  {
    return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e035      	b.n	8000792 <main+0x1c2>
  }
  BSP_LED_Off(LED1);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fca8 	bl	800107c <BSP_LED_Off>
  while(UserButtonStatus == 0)
 800072c:	e005      	b.n	800073a <main+0x16a>
  {
    /* Toggle LED1*/
    BSP_LED_Toggle(LED1);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fcce 	bl	80010d0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f000 fec1 	bl	80014bc <HAL_Delay>
  while(UserButtonStatus == 0)
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <main+0x1d4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f5      	beq.n	800072e <main+0x15e>
  }
  UserButtonStatus = 0;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <main+0x1d4>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UartReady = RESET;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <main+0x1dc>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
//	  BSP_LED_On(LED2);
    /* USER CODE END WHILE */
	  /*##-2- Start the transmission process #####################################*/
	  /* While the UART in reception process, user can transmit data through
	     "aTxBuffer" buffer */
	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, 2 * COUNTOF(aTxBuffer))!= HAL_OK)
 800074e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000752:	4912      	ldr	r1, [pc, #72]	; (800079c <main+0x1cc>)
 8000754:	4814      	ldr	r0, [pc, #80]	; (80007a8 <main+0x1d8>)
 8000756:	f006 fbe5 	bl	8006f24 <HAL_UART_Transmit_DMA>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d008      	beq.n	8000772 <main+0x1a2>
	  {
	    Error_Handler();
 8000760:	f000 fa1b 	bl	8000b9a <Error_Handler>
	  }
	  /*##-3- Wait for the end of the transfer ###################################*/
	  while ((UartReady == RESET) || (UserButtonStatus == 0))
 8000764:	e005      	b.n	8000772 <main+0x1a2>
	  {
		    BSP_LED_Toggle(LED1);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fcb2 	bl	80010d0 <BSP_LED_Toggle>
		    HAL_Delay(100);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f000 fea5 	bl	80014bc <HAL_Delay>
	  while ((UartReady == RESET) || (UserButtonStatus == 0))
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <main+0x1dc>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f4      	beq.n	8000766 <main+0x196>
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <main+0x1d4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0f0      	beq.n	8000766 <main+0x196>
	  }
	  UartReady = RESET;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <main+0x1dc>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	  UserButtonStatus = 0;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <main+0x1d4>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
	  UartReady = RESET;
 8000790:	e7da      	b.n	8000748 <main+0x178>
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000792:	4618      	mov	r0, r3
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	24000080 	.word	0x24000080
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	24000060 	.word	0x24000060
 80007a8:	24008108 	.word	0x24008108
 80007ac:	2400005c 	.word	0x2400005c

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09c      	sub	sp, #112	; 0x70
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	224c      	movs	r2, #76	; 0x4c
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f008 f80c 	bl	80087dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2220      	movs	r2, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 f806 	bl	80087dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f004 f81f 	bl	8004814 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <SystemClock_Config+0x100>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <SystemClock_Config+0x100>)
 80007e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <SystemClock_Config+0x100>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <SystemClock_Config+0x104>)
 80007f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f4:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <SystemClock_Config+0x104>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <SystemClock_Config+0x104>)
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000808:	bf00      	nop
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0x100>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000816:	d1f8      	bne.n	800080a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <SystemClock_Config+0x108>)
 800081a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081c:	f023 0303 	bic.w	r3, r3, #3
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <SystemClock_Config+0x108>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000828:	2321      	movs	r3, #33	; 0x21
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800082c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000832:	2301      	movs	r3, #1
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000842:	2378      	movs	r3, #120	; 0x78
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084a:	2304      	movs	r3, #4
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f004 f810 	bl	8004888 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086e:	f000 f994 	bl	8000b9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087e:	2308      	movs	r3, #8
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2104      	movs	r1, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f004 fc05 	bl	80050a8 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008a4:	f000 f979 	bl	8000b9a <Error_Handler>
  }


}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	; 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024800 	.word	0x58024800
 80008b4:	58000400 	.word	0x58000400
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <MX_USART3_UART_Init+0xb0>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 12000000;
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008c8:	4a29      	ldr	r2, [pc, #164]	; (8000970 <MX_USART3_UART_Init+0xb4>)
 80008ca:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008e4:	220c      	movs	r2, #12
 80008e6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_USART3_UART_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_USART3_UART_Init+0xac>)
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_USART3_UART_Init+0xac>)
 800090a:	2200      	movs	r2, #0
 800090c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_USART3_UART_Init+0xac>)
 8000910:	f006 fab8 	bl	8006e84 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 800091a:	f000 f93e 	bl	8000b9a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0xac>)
 8000922:	f007 fe6c 	bl	80085fe <HAL_UARTEx_SetTxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 800092c:	f000 f935 	bl	8000b9a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_USART3_UART_Init+0xac>)
 8000934:	f007 fea1 	bl	800867a <HAL_UARTEx_SetRxFifoThreshold>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x86>
  {
    Error_Handler();
 800093e:	f000 f92c 	bl	8000b9a <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_USART3_UART_Init+0xac>)
 8000944:	f007 fe20 	bl	8008588 <HAL_UARTEx_EnableFifoMode>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART3_UART_Init+0x96>
  {
    Error_Handler();
 800094e:	f000 f924 	bl	8000b9a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	2100      	movs	r1, #0
 8000956:	2027      	movs	r0, #39	; 0x27
 8000958:	f000 febb 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800095c:	2027      	movs	r0, #39	; 0x27
 800095e:	f000 fed2 	bl	8001706 <HAL_NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	24008108 	.word	0x24008108
 800096c:	40004800 	.word	0x40004800
 8000970:	00b71b00 	.word	0x00b71b00

08000974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_DMA_Init+0x4c>)
 800097c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000980:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <MX_DMA_Init+0x4c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_DMA_Init+0x4c>)
 800098c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	2100      	movs	r1, #0
 800099c:	200b      	movs	r0, #11
 800099e:	f000 fe98 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009a2:	200b      	movs	r0, #11
 80009a4:	f000 feaf 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2100      	movs	r1, #0
 80009ac:	200c      	movs	r0, #12
 80009ae:	f000 fe90 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009b2:	200c      	movs	r0, #12
 80009b4:	f000 fea7 	bl	8001706 <HAL_NVIC_EnableIRQ>

}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58024400 	.word	0x58024400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b51      	ldr	r3, [pc, #324]	; (8000b20 <MX_GPIO_Init+0x15c>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a4f      	ldr	r2, [pc, #316]	; (8000b20 <MX_GPIO_Init+0x15c>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <MX_GPIO_Init+0x15c>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f8:	4b49      	ldr	r3, [pc, #292]	; (8000b20 <MX_GPIO_Init+0x15c>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a40      	ldr	r2, [pc, #256]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	4a39      	ldr	r2, [pc, #228]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a44:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a31      	ldr	r2, [pc, #196]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a2a      	ldr	r2, [pc, #168]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_GPIO_Init+0x15c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MX_GPIO_Init+0x160>)
 8000ab4:	f003 fe60 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2102      	movs	r1, #2
 8000abc:	481a      	ldr	r0, [pc, #104]	; (8000b28 <MX_GPIO_Init+0x164>)
 8000abe:	f003 fe5b 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4815      	ldr	r0, [pc, #84]	; (8000b2c <MX_GPIO_Init+0x168>)
 8000ad8:	f003 fc9e 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000adc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0x160>)
 8000af6:	f003 fc8f 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_GPIO_Init+0x164>)
 8000b12:	f003 fc81 	bl	8004418 <HAL_GPIO_Init>

}
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58024400 	.word	0x58024400
 8000b24:	58020400 	.word	0x58020400
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	58020800 	.word	0x58020800

08000b30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b40:	d105      	bne.n	8000b4e <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f083 0301 	eor.w	r3, r3, #1
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b4c:	6013      	str	r3, [r2, #0]
//    BSP_LED_Toggle(LED2);
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	24000060 	.word	0x24000060

08000b60 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_UART_TxCpltCallback+0x1c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fa5a 	bl	8001028 <BSP_LED_On>

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2400005c 	.word	0x2400005c

08000b80 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f000 fa4d 	bl	8001028 <BSP_LED_On>
  Error_Handler();
 8000b8e:	f000 f804 	bl	8000b9a <Error_Handler>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9e:	b672      	cpsid	i
}
 8000ba0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f000 fa94 	bl	80010d0 <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f000 fc87 	bl	80014bc <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000bae:	e7f8      	b.n	8000ba2 <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x30>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	58024400 	.word	0x58024400

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ea      	sub	sp, #424	; 0x1a8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000c02:	22bc      	movs	r2, #188	; 0xbc
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f007 fde8 	bl	80087dc <memset>
  if(huart->Instance==USART1)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a97      	ldr	r2, [pc, #604]	; (8000e70 <HAL_UART_MspInit+0x28c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d17c      	bne.n	8000d12 <HAL_UART_MspInit+0x12e>
//    {
//      Error_Handler();
//    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c18:	4b96      	ldr	r3, [pc, #600]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c1e:	4a95      	ldr	r2, [pc, #596]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c28:	4b92      	ldr	r3, [pc, #584]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b8e      	ldr	r3, [pc, #568]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a8c      	ldr	r2, [pc, #560]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b8a      	ldr	r3, [pc, #552]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000c58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c60:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c76:	2304      	movs	r3, #4
 8000c78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000c80:	4619      	mov	r1, r3
 8000c82:	487d      	ldr	r0, [pc, #500]	; (8000e78 <HAL_UART_MspInit+0x294>)
 8000c84:	f003 fbc8 	bl	8004418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c88:	2340      	movs	r3, #64	; 0x40
 8000c8a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000caa:	4619      	mov	r1, r3
 8000cac:	4872      	ldr	r0, [pc, #456]	; (8000e78 <HAL_UART_MspInit+0x294>)
 8000cae:	f003 fbb3 	bl	8004418 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8000cb2:	4b72      	ldr	r3, [pc, #456]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cb4:	4a72      	ldr	r2, [pc, #456]	; (8000e80 <HAL_UART_MspInit+0x29c>)
 8000cb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000cb8:	4b70      	ldr	r3, [pc, #448]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cba:	222a      	movs	r2, #42	; 0x2a
 8000cbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cbe:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cc0:	2240      	movs	r2, #64	; 0x40
 8000cc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd2:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd8:	4b68      	ldr	r3, [pc, #416]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cde:	4b67      	ldr	r3, [pc, #412]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cea:	4b64      	ldr	r3, [pc, #400]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cf0:	4862      	ldr	r0, [pc, #392]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000cf2:	f000 fd23 	bl	800173c <HAL_DMA_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8000cfc:	f7ff ff4d 	bl	8000b9a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a5d      	ldr	r2, [pc, #372]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000d06:	679a      	str	r2, [r3, #120]	; 0x78
 8000d08:	4a5c      	ldr	r2, [pc, #368]	; (8000e7c <HAL_UART_MspInit+0x298>)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d10:	e0a9      	b.n	8000e66 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART3)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a5a      	ldr	r2, [pc, #360]	; (8000e84 <HAL_UART_MspInit+0x2a0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	f040 80a3 	bne.w	8000e66 <HAL_UART_MspInit+0x282>
	  RCC_PeriphCLKInitTypeDef usart3ClkInitStr = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4618      	mov	r0, r3
 8000d26:	23bc      	movs	r3, #188	; 0xbc
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f007 fd56 	bl	80087dc <memset>
	  usart3ClkInitStr.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2202      	movs	r2, #2
 8000d36:	601a      	str	r2, [r3, #0]
	  usart3ClkInitStr.PLL3.PLL3M = 1;
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
	  usart3ClkInitStr.PLL3.PLL3N = 60;
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	223c      	movs	r2, #60	; 0x3c
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
	  usart3ClkInitStr.PLL3.PLL3P = 6;
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2206      	movs	r2, #6
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
	  usart3ClkInitStr.PLL3.PLL3Q = 5;
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2205      	movs	r2, #5
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
	  usart3ClkInitStr.PLL3.PLL3R = 6;
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2206      	movs	r2, #6
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
	  usart3ClkInitStr.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
	  usart3ClkInitStr.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2200      	movs	r2, #0
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
	  usart3ClkInitStr.PLL3.PLL3FRACN = 0;
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
	  usart3ClkInitStr.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2202      	movs	r2, #2
 8000d80:	675a      	str	r2, [r3, #116]	; 0x74
	  if (HAL_RCCEx_PeriphCLKConfig(&usart3ClkInitStr) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fd1a 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x1b2>
	    Error_Handler();
 8000d92:	f7ff ff02 	bl	8000b9a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d9c:	4a35      	ldr	r2, [pc, #212]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a2d      	ldr	r2, [pc, #180]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_UART_MspInit+0x290>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df4:	2307      	movs	r3, #7
 8000df6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <HAL_UART_MspInit+0x2a4>)
 8000e02:	f003 fb09 	bl	8004418 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <HAL_UART_MspInit+0x2ac>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e0e:	222e      	movs	r2, #46	; 0x2e
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e48:	f000 fc78 	bl	800173c <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8000e52:	f7ff fea2 	bl	8000b9a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e5c:	679a      	str	r2, [r3, #120]	; 0x78
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_UART_MspInit+0x2a8>)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e66:	bf00      	nop
 8000e68:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40011000 	.word	0x40011000
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020400 	.word	0x58020400
 8000e7c:	24008618 	.word	0x24008618
 8000e80:	40020010 	.word	0x40020010
 8000e84:	40004800 	.word	0x40004800
 8000e88:	58020c00 	.word	0x58020c00
 8000e8c:	240085a0 	.word	0x240085a0
 8000e90:	40020028 	.word	0x40020028

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 facc 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA1_Stream0_IRQHandler+0x10>)
 8000eee:	f001 ff4d 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	24008618 	.word	0x24008618

08000efc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 f891 	bl	8001028 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f06:	4802      	ldr	r0, [pc, #8]	; (8000f10 <DMA1_Stream1_IRQHandler+0x14>)
 8000f08:	f001 ff40 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	240085a0 	.word	0x240085a0

08000f14 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8000f18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1c:	f003 fc5f 	bl	80047de <HAL_GPIO_EXTI_IRQHandler>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 f87d 	bl	8001028 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8000f2e:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USART3_IRQHandler+0x14>)
 8000f30:	f006 f878 	bl	8007024 <HAL_UART_IRQHandler>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24008108 	.word	0x24008108

08000f3c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d009      	beq.n	8000f64 <BSP_LED_Init+0x28>
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d006      	beq.n	8000f64 <BSP_LED_Init+0x28>
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d003      	beq.n	8000f64 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f5c:	f06f 0301 	mvn.w	r3, #1
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f62:	e055      	b.n	8001010 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10f      	bne.n	8000f8a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <BSP_LED_Init+0xe0>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4a2a      	ldr	r2, [pc, #168]	; (800101c <BSP_LED_Init+0xe0>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <BSP_LED_Init+0xe0>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	e021      	b.n	8000fce <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d10f      	bne.n	8000fb0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <BSP_LED_Init+0xe0>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <BSP_LED_Init+0xe0>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <BSP_LED_Init+0xe0>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	e00e      	b.n	8000fce <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <BSP_LED_Init+0xe0>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a19      	ldr	r2, [pc, #100]	; (800101c <BSP_LED_Init+0xe0>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <BSP_LED_Init+0xe0>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <BSP_LED_Init+0xe4>)
 8000fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <BSP_LED_Init+0xe8>)
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	f107 0218 	add.w	r2, r7, #24
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fa10 	bl	8004418 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <BSP_LED_Init+0xe8>)
 8000ffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <BSP_LED_Init+0xe4>)
 8001004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f003 fbb4 	bl	8004778 <HAL_GPIO_WritePin>
  }

  return ret;
 8001010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001012:	4618      	mov	r0, r3
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	58024400 	.word	0x58024400
 8001020:	08008804 	.word	0x08008804
 8001024:	24000000 	.word	0x24000000

08001028 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d009      	beq.n	8001050 <BSP_LED_On+0x28>
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d006      	beq.n	8001050 <BSP_LED_On+0x28>
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d003      	beq.n	8001050 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001048:	f06f 0301 	mvn.w	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e00b      	b.n	8001068 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <BSP_LED_On+0x4c>)
 8001054:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <BSP_LED_On+0x50>)
 800105c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f003 fb88 	bl	8004778 <HAL_GPIO_WritePin>
  }

  return ret;
 8001068:	68fb      	ldr	r3, [r7, #12]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	24000000 	.word	0x24000000
 8001078:	08008804 	.word	0x08008804

0800107c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d009      	beq.n	80010a4 <BSP_LED_Off+0x28>
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d006      	beq.n	80010a4 <BSP_LED_Off+0x28>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d003      	beq.n	80010a4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800109c:	f06f 0301 	mvn.w	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e00b      	b.n	80010bc <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <BSP_LED_Off+0x4c>)
 80010a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <BSP_LED_Off+0x50>)
 80010b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f003 fb5e 	bl	8004778 <HAL_GPIO_WritePin>
  }

  return ret;
 80010bc:	68fb      	ldr	r3, [r7, #12]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000000 	.word	0x24000000
 80010cc:	08008804 	.word	0x08008804

080010d0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d009      	beq.n	80010f8 <BSP_LED_Toggle+0x28>
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d006      	beq.n	80010f8 <BSP_LED_Toggle+0x28>
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d003      	beq.n	80010f8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010f0:	f06f 0301 	mvn.w	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e00b      	b.n	8001110 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <BSP_LED_Toggle+0x4c>)
 80010fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4907      	ldr	r1, [pc, #28]	; (8001120 <BSP_LED_Toggle+0x50>)
 8001104:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f003 fb4d 	bl	80047aa <HAL_GPIO_TogglePin>
  }

  return ret;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000000 	.word	0x24000000
 8001120:	08008804 	.word	0x08008804

08001124 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <BSP_PB_Init+0xc8>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <BSP_PB_Init+0xc8>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <BSP_PB_Init+0xc8>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001156:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <BSP_PB_Init+0xcc>)
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	f107 020c 	add.w	r2, r7, #12
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f94d 	bl	8004418 <HAL_GPIO_Init>
 800117e:	e030      	b.n	80011e2 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <BSP_PB_Init+0xd0>)
 8001182:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <BSP_PB_Init+0xcc>)
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f940 	bl	8004418 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <BSP_PB_Init+0xd4>)
 800119e:	441a      	add	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4916      	ldr	r1, [pc, #88]	; (80011fc <BSP_PB_Init+0xd8>)
 80011a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f003 f91f 	bl	80043ee <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <BSP_PB_Init+0xd4>)
 80011b6:	1898      	adds	r0, r3, r2
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <BSP_PB_Init+0xdc>)
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f003 f8f4 	bl	80043b0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <BSP_PB_Init+0xe0>)
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	f000 fa7c 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011da:	2328      	movs	r3, #40	; 0x28
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fa92 	bl	8001706 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400
 80011f0:	2400000c 	.word	0x2400000c
 80011f4:	11110000 	.word	0x11110000
 80011f8:	240087dc 	.word	0x240087dc
 80011fc:	0800880c 	.word	0x0800880c
 8001200:	24000010 	.word	0x24000010
 8001204:	24000014 	.word	0x24000014

08001208 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fff0 	bl	8001208 <BSP_PB_Callback>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <SystemInit+0xec>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a38      	ldr	r2, [pc, #224]	; (8001318 <SystemInit+0xec>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <SystemInit+0xf0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	2b06      	cmp	r3, #6
 800124a:	d807      	bhi.n	800125c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <SystemInit+0xf0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 030f 	bic.w	r3, r3, #15
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <SystemInit+0xf0>)
 8001256:	f043 0307 	orr.w	r3, r3, #7
 800125a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <SystemInit+0xf4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <SystemInit+0xf4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <SystemInit+0xf4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <SystemInit+0xf4>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	492b      	ldr	r1, [pc, #172]	; (8001320 <SystemInit+0xf4>)
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <SystemInit+0xf8>)
 8001276:	4013      	ands	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <SystemInit+0xf0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemInit+0xf0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <SystemInit+0xf0>)
 8001290:	f043 0307 	orr.w	r3, r3, #7
 8001294:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <SystemInit+0xf4>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <SystemInit+0xf4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <SystemInit+0xf4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <SystemInit+0xf4>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <SystemInit+0xfc>)
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <SystemInit+0xf4>)
 80012b0:	4a1e      	ldr	r2, [pc, #120]	; (800132c <SystemInit+0x100>)
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <SystemInit+0xf4>)
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <SystemInit+0x104>)
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <SystemInit+0xf4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <SystemInit+0xf4>)
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <SystemInit+0x104>)
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <SystemInit+0xf4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <SystemInit+0xf4>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <SystemInit+0x104>)
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <SystemInit+0xf4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <SystemInit+0xf4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a10      	ldr	r2, [pc, #64]	; (8001320 <SystemInit+0xf4>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <SystemInit+0xf4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <SystemInit+0x108>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <SystemInit+0x10c>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f6:	d202      	bcs.n	80012fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <SystemInit+0x110>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <SystemInit+0x114>)
 8001300:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001304:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SystemInit+0xec>)
 8001308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	52002000 	.word	0x52002000
 8001320:	58024400 	.word	0x58024400
 8001324:	eaf6ed7f 	.word	0xeaf6ed7f
 8001328:	02020200 	.word	0x02020200
 800132c:	01ff0000 	.word	0x01ff0000
 8001330:	01010280 	.word	0x01010280
 8001334:	5c001000 	.word	0x5c001000
 8001338:	ffff0000 	.word	0xffff0000
 800133c:	51008108 	.word	0x51008108
 8001340:	52004000 	.word	0x52004000

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff ff70 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f007 fa0f 	bl	8008794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff f92b 	bl	80005d0 <main>
  bx  lr
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001380:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001384:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001388:	08008860 	.word	0x08008860
  ldr r2, =_sbss
 800138c:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001390:	24008878 	.word	0x24008878

08001394 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC3_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139e:	2003      	movs	r0, #3
 80013a0:	f000 f98c 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a4:	f004 f836 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_Init+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <HAL_Init+0x6c>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_Init+0x6c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_Init+0x70>)
 80013da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_Init+0x74>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f814 	bl	8001410 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e002      	b.n	80013f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f2:	f7ff fbdd 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400
 8001404:	08008810 	.word	0x08008810
 8001408:	2400001c 	.word	0x2400001c
 800140c:	24000018 	.word	0x24000018

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_InitTick+0x60>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e021      	b.n	8001468 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_InitTick+0x64>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_InitTick+0x60>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f971 	bl	8001722 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f93b 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x68>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24000024 	.word	0x24000024
 8001474:	24000018 	.word	0x24000018
 8001478:	24000020 	.word	0x24000020

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	24000024 	.word	0x24000024
 80014a0:	24008874 	.word	0x24008874

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	24008874 	.word	0x24008874

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	24000024 	.word	0x24000024

08001504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetREVID+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0c1b      	lsrs	r3, r3, #16
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	5c001000 	.word	0x5c001000

0800151c <__NVIC_SetPriorityGrouping>:
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	4313      	orrs	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	05fa0000 	.word	0x05fa0000

08001564 <__NVIC_GetPriorityGrouping>:
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff40 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff33 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa4 	bl	8001678 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff feae 	bl	80014a4 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e316      	b.n	8001d82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <HAL_DMA_Init+0x1b8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d04a      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a65      	ldr	r2, [pc, #404]	; (80018f8 <HAL_DMA_Init+0x1bc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d045      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a63      	ldr	r2, [pc, #396]	; (80018fc <HAL_DMA_Init+0x1c0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d040      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a62      	ldr	r2, [pc, #392]	; (8001900 <HAL_DMA_Init+0x1c4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d03b      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a60      	ldr	r2, [pc, #384]	; (8001904 <HAL_DMA_Init+0x1c8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d036      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <HAL_DMA_Init+0x1cc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d031      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5d      	ldr	r2, [pc, #372]	; (800190c <HAL_DMA_Init+0x1d0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02c      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5c      	ldr	r2, [pc, #368]	; (8001910 <HAL_DMA_Init+0x1d4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d027      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a5a      	ldr	r2, [pc, #360]	; (8001914 <HAL_DMA_Init+0x1d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d022      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a59      	ldr	r2, [pc, #356]	; (8001918 <HAL_DMA_Init+0x1dc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d01d      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a57      	ldr	r2, [pc, #348]	; (800191c <HAL_DMA_Init+0x1e0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d018      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_DMA_Init+0x1e4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_DMA_Init+0x1e8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00e      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a53      	ldr	r2, [pc, #332]	; (8001928 <HAL_DMA_Init+0x1ec>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d009      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a51      	ldr	r2, [pc, #324]	; (800192c <HAL_DMA_Init+0x1f0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a50      	ldr	r2, [pc, #320]	; (8001930 <HAL_DMA_Init+0x1f4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_DMA_Init+0xbc>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_DMA_Init+0xbe>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 813b 	beq.w	8001a76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a37      	ldr	r2, [pc, #220]	; (80018f4 <HAL_DMA_Init+0x1b8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d04a      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <HAL_DMA_Init+0x1bc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d045      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_DMA_Init+0x1c0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d040      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a33      	ldr	r2, [pc, #204]	; (8001900 <HAL_DMA_Init+0x1c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d03b      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_DMA_Init+0x1c8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d036      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_DMA_Init+0x1cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d031      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_DMA_Init+0x1d0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d02c      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_DMA_Init+0x1d4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d027      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_DMA_Init+0x1d8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d022      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <HAL_DMA_Init+0x1dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d01d      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_DMA_Init+0x1e0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d018      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_DMA_Init+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_DMA_Init+0x1e8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00e      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_DMA_Init+0x1ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d009      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_DMA_Init+0x1f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_DMA_Init+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d108      	bne.n	80018c2 <HAL_DMA_Init+0x186>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_DMA_Init+0x196>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018d2:	e02f      	b.n	8001934 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d4:	f7ff fde6 	bl	80014a4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d928      	bls.n	8001934 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e246      	b.n	8001d82 <HAL_DMA_Init+0x646>
 80018f4:	40020010 	.word	0x40020010
 80018f8:	40020028 	.word	0x40020028
 80018fc:	40020040 	.word	0x40020040
 8001900:	40020058 	.word	0x40020058
 8001904:	40020070 	.word	0x40020070
 8001908:	40020088 	.word	0x40020088
 800190c:	400200a0 	.word	0x400200a0
 8001910:	400200b8 	.word	0x400200b8
 8001914:	40020410 	.word	0x40020410
 8001918:	40020428 	.word	0x40020428
 800191c:	40020440 	.word	0x40020440
 8001920:	40020458 	.word	0x40020458
 8001924:	40020470 	.word	0x40020470
 8001928:	40020488 	.word	0x40020488
 800192c:	400204a0 	.word	0x400204a0
 8001930:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1c8      	bne.n	80018d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4b83      	ldr	r3, [pc, #524]	; (8001b5c <HAL_DMA_Init+0x420>)
 800194e:	4013      	ands	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800195a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4313      	orrs	r3, r2
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001998:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <HAL_DMA_Init+0x424>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <HAL_DMA_Init+0x428>)
 800199e:	4013      	ands	r3, r2
 80019a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a4:	d328      	bcc.n	80019f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b28      	cmp	r3, #40	; 0x28
 80019ac:	d903      	bls.n	80019b6 <HAL_DMA_Init+0x27a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b2e      	cmp	r3, #46	; 0x2e
 80019b4:	d917      	bls.n	80019e6 <HAL_DMA_Init+0x2aa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b3e      	cmp	r3, #62	; 0x3e
 80019bc:	d903      	bls.n	80019c6 <HAL_DMA_Init+0x28a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b42      	cmp	r3, #66	; 0x42
 80019c4:	d90f      	bls.n	80019e6 <HAL_DMA_Init+0x2aa>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b46      	cmp	r3, #70	; 0x46
 80019cc:	d903      	bls.n	80019d6 <HAL_DMA_Init+0x29a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b48      	cmp	r3, #72	; 0x48
 80019d4:	d907      	bls.n	80019e6 <HAL_DMA_Init+0x2aa>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b4e      	cmp	r3, #78	; 0x4e
 80019dc:	d905      	bls.n	80019ea <HAL_DMA_Init+0x2ae>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b52      	cmp	r3, #82	; 0x52
 80019e4:	d801      	bhi.n	80019ea <HAL_DMA_Init+0x2ae>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_DMA_Init+0x2b0>
 80019ea:	2300      	movs	r3, #0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f023 0307 	bic.w	r3, r3, #7
 8001a0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d117      	bne.n	8001a52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f002 fb31 	bl	800409c <DMA_CheckFifoParam>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e197      	b.n	8001d82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f002 fa6c 	bl	8003f38 <DMA_CalcBaseAndBitshift>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	223f      	movs	r2, #63	; 0x3f
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e0cd      	b.n	8001c12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <HAL_DMA_Init+0x42c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a39      	ldr	r2, [pc, #228]	; (8001b6c <HAL_DMA_Init+0x430>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <HAL_DMA_Init+0x434>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <HAL_DMA_Init+0x438>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <HAL_DMA_Init+0x43c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_DMA_Init+0x440>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_DMA_Init+0x444>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_DMA_Init+0x448>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_DMA_Init+0x38e>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_Init+0x390>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8097 	beq.w	8001c00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <HAL_DMA_Init+0x42c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d021      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_DMA_Init+0x430>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01c      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_DMA_Init+0x434>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d017      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_DMA_Init+0x438>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_DMA_Init+0x43c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_DMA_Init+0x440>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d008      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_DMA_Init+0x444>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_DMA_Init+0x448>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_DMA_Init+0x44c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d020      	beq.n	8001b8c <HAL_DMA_Init+0x450>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d102      	bne.n	8001b58 <HAL_DMA_Init+0x41c>
 8001b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b56:	e01a      	b.n	8001b8e <HAL_DMA_Init+0x452>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e018      	b.n	8001b8e <HAL_DMA_Init+0x452>
 8001b5c:	fe10803f 	.word	0xfe10803f
 8001b60:	5c001000 	.word	0x5c001000
 8001b64:	ffff0000 	.word	0xffff0000
 8001b68:	58025408 	.word	0x58025408
 8001b6c:	5802541c 	.word	0x5802541c
 8001b70:	58025430 	.word	0x58025430
 8001b74:	58025444 	.word	0x58025444
 8001b78:	58025458 	.word	0x58025458
 8001b7c:	5802546c 	.word	0x5802546c
 8001b80:	58025480 	.word	0x58025480
 8001b84:	58025494 	.word	0x58025494
 8001b88:	fffe000f 	.word	0xfffe000f
 8001b8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_DMA_Init+0x650>)
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_DMA_Init+0x654>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	009a      	lsls	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f002 f9a7 	bl	8003f38 <DMA_CalcBaseAndBitshift>
 8001bea:	4603      	mov	r3, r0
 8001bec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	e008      	b.n	8001c12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0b7      	b.n	8001d82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5f      	ldr	r2, [pc, #380]	; (8001d94 <HAL_DMA_Init+0x658>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d072      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <HAL_DMA_Init+0x65c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d06d      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <HAL_DMA_Init+0x660>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d068      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <HAL_DMA_Init+0x664>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d063      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a59      	ldr	r2, [pc, #356]	; (8001da4 <HAL_DMA_Init+0x668>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d05e      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_DMA_Init+0x66c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d059      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_DMA_Init+0x670>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d054      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_DMA_Init+0x674>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d04f      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a53      	ldr	r2, [pc, #332]	; (8001db4 <HAL_DMA_Init+0x678>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04a      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_DMA_Init+0x67c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d045      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_DMA_Init+0x680>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d040      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <HAL_DMA_Init+0x684>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d03b      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4d      	ldr	r2, [pc, #308]	; (8001dc4 <HAL_DMA_Init+0x688>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d036      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_DMA_Init+0x68c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_DMA_Init+0x690>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d02c      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a48      	ldr	r2, [pc, #288]	; (8001dd0 <HAL_DMA_Init+0x694>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d027      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_DMA_Init+0x698>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d022      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a45      	ldr	r2, [pc, #276]	; (8001dd8 <HAL_DMA_Init+0x69c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01d      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a44      	ldr	r2, [pc, #272]	; (8001ddc <HAL_DMA_Init+0x6a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d018      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HAL_DMA_Init+0x6a4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <HAL_DMA_Init+0x6a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <HAL_DMA_Init+0x6ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_DMA_Init+0x6b0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_DMA_Init+0x6b4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Init+0x5ca>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_DMA_Init+0x5cc>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d032      	beq.n	8001d72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f002 fa41 	bl	8004194 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d102      	bne.n	8001d20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d010      	beq.n	8001d60 <HAL_DMA_Init+0x624>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d80c      	bhi.n	8001d60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f002 fabe 	bl	80042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e008      	b.n	8001d72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	a7fdabf8 	.word	0xa7fdabf8
 8001d90:	cccccccd 	.word	0xcccccccd
 8001d94:	40020010 	.word	0x40020010
 8001d98:	40020028 	.word	0x40020028
 8001d9c:	40020040 	.word	0x40020040
 8001da0:	40020058 	.word	0x40020058
 8001da4:	40020070 	.word	0x40020070
 8001da8:	40020088 	.word	0x40020088
 8001dac:	400200a0 	.word	0x400200a0
 8001db0:	400200b8 	.word	0x400200b8
 8001db4:	40020410 	.word	0x40020410
 8001db8:	40020428 	.word	0x40020428
 8001dbc:	40020440 	.word	0x40020440
 8001dc0:	40020458 	.word	0x40020458
 8001dc4:	40020470 	.word	0x40020470
 8001dc8:	40020488 	.word	0x40020488
 8001dcc:	400204a0 	.word	0x400204a0
 8001dd0:	400204b8 	.word	0x400204b8
 8001dd4:	58025408 	.word	0x58025408
 8001dd8:	5802541c 	.word	0x5802541c
 8001ddc:	58025430 	.word	0x58025430
 8001de0:	58025444 	.word	0x58025444
 8001de4:	58025458 	.word	0x58025458
 8001de8:	5802546c 	.word	0x5802546c
 8001dec:	58025480 	.word	0x58025480
 8001df0:	58025494 	.word	0x58025494

08001df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e226      	b.n	800225e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_DMA_Start_IT+0x2a>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e21f      	b.n	800225e <HAL_DMA_Start_IT+0x46a>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f040 820a 	bne.w	8002248 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a68      	ldr	r2, [pc, #416]	; (8001fe8 <HAL_DMA_Start_IT+0x1f4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04a      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a66      	ldr	r2, [pc, #408]	; (8001fec <HAL_DMA_Start_IT+0x1f8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d045      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_DMA_Start_IT+0x1fc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d040      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_DMA_Start_IT+0x200>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d03b      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a62      	ldr	r2, [pc, #392]	; (8001ff8 <HAL_DMA_Start_IT+0x204>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d036      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a60      	ldr	r2, [pc, #384]	; (8001ffc <HAL_DMA_Start_IT+0x208>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5f      	ldr	r2, [pc, #380]	; (8002000 <HAL_DMA_Start_IT+0x20c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d02c      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <HAL_DMA_Start_IT+0x210>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5c      	ldr	r2, [pc, #368]	; (8002008 <HAL_DMA_Start_IT+0x214>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5a      	ldr	r2, [pc, #360]	; (800200c <HAL_DMA_Start_IT+0x218>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a59      	ldr	r2, [pc, #356]	; (8002010 <HAL_DMA_Start_IT+0x21c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <HAL_DMA_Start_IT+0x220>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_DMA_Start_IT+0x224>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_DMA_Start_IT+0x228>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a53      	ldr	r2, [pc, #332]	; (8002020 <HAL_DMA_Start_IT+0x22c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a51      	ldr	r2, [pc, #324]	; (8002024 <HAL_DMA_Start_IT+0x230>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d108      	bne.n	8001ef4 <HAL_DMA_Start_IT+0x100>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e007      	b.n	8001f04 <HAL_DMA_Start_IT+0x110>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f001 fe68 	bl	8003be0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <HAL_DMA_Start_IT+0x1f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04a      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a33      	ldr	r2, [pc, #204]	; (8001fec <HAL_DMA_Start_IT+0x1f8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d045      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <HAL_DMA_Start_IT+0x1fc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d040      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <HAL_DMA_Start_IT+0x200>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d03b      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <HAL_DMA_Start_IT+0x204>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d036      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <HAL_DMA_Start_IT+0x208>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d031      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_DMA_Start_IT+0x20c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02c      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <HAL_DMA_Start_IT+0x210>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d027      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a28      	ldr	r2, [pc, #160]	; (8002008 <HAL_DMA_Start_IT+0x214>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d022      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_DMA_Start_IT+0x218>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d01d      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_DMA_Start_IT+0x21c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_DMA_Start_IT+0x220>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_DMA_Start_IT+0x224>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00e      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_DMA_Start_IT+0x228>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_DMA_Start_IT+0x22c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_DMA_Start_IT+0x230>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_DMA_Start_IT+0x1c0>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_DMA_Start_IT+0x1c2>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d036      	beq.n	8002028 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 021e 	bic.w	r2, r3, #30
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0216 	orr.w	r2, r2, #22
 8001fcc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03e      	beq.n	8002054 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0208 	orr.w	r2, r2, #8
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e035      	b.n	8002054 <HAL_DMA_Start_IT+0x260>
 8001fe8:	40020010 	.word	0x40020010
 8001fec:	40020028 	.word	0x40020028
 8001ff0:	40020040 	.word	0x40020040
 8001ff4:	40020058 	.word	0x40020058
 8001ff8:	40020070 	.word	0x40020070
 8001ffc:	40020088 	.word	0x40020088
 8002000:	400200a0 	.word	0x400200a0
 8002004:	400200b8 	.word	0x400200b8
 8002008:	40020410 	.word	0x40020410
 800200c:	40020428 	.word	0x40020428
 8002010:	40020440 	.word	0x40020440
 8002014:	40020458 	.word	0x40020458
 8002018:	40020470 	.word	0x40020470
 800201c:	40020488 	.word	0x40020488
 8002020:	400204a0 	.word	0x400204a0
 8002024:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 020e 	bic.w	r2, r3, #14
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 020a 	orr.w	r2, r2, #10
 800203a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0204 	orr.w	r2, r2, #4
 8002052:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	; (8002268 <HAL_DMA_Start_IT+0x474>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d072      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a82      	ldr	r2, [pc, #520]	; (800226c <HAL_DMA_Start_IT+0x478>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d06d      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a80      	ldr	r2, [pc, #512]	; (8002270 <HAL_DMA_Start_IT+0x47c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d068      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_DMA_Start_IT+0x480>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d063      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a7d      	ldr	r2, [pc, #500]	; (8002278 <HAL_DMA_Start_IT+0x484>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d05e      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7c      	ldr	r2, [pc, #496]	; (800227c <HAL_DMA_Start_IT+0x488>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d059      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7a      	ldr	r2, [pc, #488]	; (8002280 <HAL_DMA_Start_IT+0x48c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d054      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a79      	ldr	r2, [pc, #484]	; (8002284 <HAL_DMA_Start_IT+0x490>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04f      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a77      	ldr	r2, [pc, #476]	; (8002288 <HAL_DMA_Start_IT+0x494>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d04a      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a76      	ldr	r2, [pc, #472]	; (800228c <HAL_DMA_Start_IT+0x498>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d045      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a74      	ldr	r2, [pc, #464]	; (8002290 <HAL_DMA_Start_IT+0x49c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d040      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a73      	ldr	r2, [pc, #460]	; (8002294 <HAL_DMA_Start_IT+0x4a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d03b      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a71      	ldr	r2, [pc, #452]	; (8002298 <HAL_DMA_Start_IT+0x4a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d036      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a70      	ldr	r2, [pc, #448]	; (800229c <HAL_DMA_Start_IT+0x4a8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d031      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_DMA_Start_IT+0x4ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02c      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6d      	ldr	r2, [pc, #436]	; (80022a4 <HAL_DMA_Start_IT+0x4b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d027      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6b      	ldr	r2, [pc, #428]	; (80022a8 <HAL_DMA_Start_IT+0x4b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d022      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6a      	ldr	r2, [pc, #424]	; (80022ac <HAL_DMA_Start_IT+0x4b8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d01d      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a68      	ldr	r2, [pc, #416]	; (80022b0 <HAL_DMA_Start_IT+0x4bc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d018      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a67      	ldr	r2, [pc, #412]	; (80022b4 <HAL_DMA_Start_IT+0x4c0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_DMA_Start_IT+0x4c4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00e      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_DMA_Start_IT+0x4c8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a62      	ldr	r2, [pc, #392]	; (80022c0 <HAL_DMA_Start_IT+0x4cc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_DMA_Start_IT+0x350>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_DMA_Start_IT+0x4d0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_DMA_Start_IT+0x354>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_DMA_Start_IT+0x356>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01a      	beq.n	8002184 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002182:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a37      	ldr	r2, [pc, #220]	; (8002268 <HAL_DMA_Start_IT+0x474>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04a      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a36      	ldr	r2, [pc, #216]	; (800226c <HAL_DMA_Start_IT+0x478>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d045      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a34      	ldr	r2, [pc, #208]	; (8002270 <HAL_DMA_Start_IT+0x47c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d040      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a33      	ldr	r2, [pc, #204]	; (8002274 <HAL_DMA_Start_IT+0x480>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d03b      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_DMA_Start_IT+0x484>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d036      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <HAL_DMA_Start_IT+0x488>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d031      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2e      	ldr	r2, [pc, #184]	; (8002280 <HAL_DMA_Start_IT+0x48c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02c      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <HAL_DMA_Start_IT+0x490>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d027      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_DMA_Start_IT+0x494>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2a      	ldr	r2, [pc, #168]	; (800228c <HAL_DMA_Start_IT+0x498>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01d      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a28      	ldr	r2, [pc, #160]	; (8002290 <HAL_DMA_Start_IT+0x49c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d018      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_DMA_Start_IT+0x4a0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_DMA_Start_IT+0x4a4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a24      	ldr	r2, [pc, #144]	; (800229c <HAL_DMA_Start_IT+0x4a8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_DMA_Start_IT+0x4ac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_DMA_Start_IT+0x430>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_DMA_Start_IT+0x4b0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <HAL_DMA_Start_IT+0x442>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e012      	b.n	800225c <HAL_DMA_Start_IT+0x468>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e009      	b.n	800225c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800225c:	7dfb      	ldrb	r3, [r7, #23]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020010 	.word	0x40020010
 800226c:	40020028 	.word	0x40020028
 8002270:	40020040 	.word	0x40020040
 8002274:	40020058 	.word	0x40020058
 8002278:	40020070 	.word	0x40020070
 800227c:	40020088 	.word	0x40020088
 8002280:	400200a0 	.word	0x400200a0
 8002284:	400200b8 	.word	0x400200b8
 8002288:	40020410 	.word	0x40020410
 800228c:	40020428 	.word	0x40020428
 8002290:	40020440 	.word	0x40020440
 8002294:	40020458 	.word	0x40020458
 8002298:	40020470 	.word	0x40020470
 800229c:	40020488 	.word	0x40020488
 80022a0:	400204a0 	.word	0x400204a0
 80022a4:	400204b8 	.word	0x400204b8
 80022a8:	58025408 	.word	0x58025408
 80022ac:	5802541c 	.word	0x5802541c
 80022b0:	58025430 	.word	0x58025430
 80022b4:	58025444 	.word	0x58025444
 80022b8:	58025458 	.word	0x58025458
 80022bc:	5802546c 	.word	0x5802546c
 80022c0:	58025480 	.word	0x58025480
 80022c4:	58025494 	.word	0x58025494

080022c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff f8e8 	bl	80014a4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e2dc      	b.n	800289a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d008      	beq.n	80022fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e2cd      	b.n	800289a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a76      	ldr	r2, [pc, #472]	; (80024dc <HAL_DMA_Abort+0x214>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d04a      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a74      	ldr	r2, [pc, #464]	; (80024e0 <HAL_DMA_Abort+0x218>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d045      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <HAL_DMA_Abort+0x21c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d040      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a71      	ldr	r2, [pc, #452]	; (80024e8 <HAL_DMA_Abort+0x220>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d03b      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a70      	ldr	r2, [pc, #448]	; (80024ec <HAL_DMA_Abort+0x224>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d036      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <HAL_DMA_Abort+0x228>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6d      	ldr	r2, [pc, #436]	; (80024f4 <HAL_DMA_Abort+0x22c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d02c      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6b      	ldr	r2, [pc, #428]	; (80024f8 <HAL_DMA_Abort+0x230>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d027      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <HAL_DMA_Abort+0x234>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a68      	ldr	r2, [pc, #416]	; (8002500 <HAL_DMA_Abort+0x238>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a67      	ldr	r2, [pc, #412]	; (8002504 <HAL_DMA_Abort+0x23c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d018      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a65      	ldr	r2, [pc, #404]	; (8002508 <HAL_DMA_Abort+0x240>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a64      	ldr	r2, [pc, #400]	; (800250c <HAL_DMA_Abort+0x244>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a62      	ldr	r2, [pc, #392]	; (8002510 <HAL_DMA_Abort+0x248>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a61      	ldr	r2, [pc, #388]	; (8002514 <HAL_DMA_Abort+0x24c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_DMA_Abort+0xd6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5f      	ldr	r2, [pc, #380]	; (8002518 <HAL_DMA_Abort+0x250>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_Abort+0xda>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_DMA_Abort+0xdc>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 021e 	bic.w	r2, r2, #30
 80023b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e00a      	b.n	80023e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020e 	bic.w	r2, r2, #14
 80023de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a3c      	ldr	r2, [pc, #240]	; (80024dc <HAL_DMA_Abort+0x214>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d072      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3a      	ldr	r2, [pc, #232]	; (80024e0 <HAL_DMA_Abort+0x218>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d06d      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a39      	ldr	r2, [pc, #228]	; (80024e4 <HAL_DMA_Abort+0x21c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d068      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a37      	ldr	r2, [pc, #220]	; (80024e8 <HAL_DMA_Abort+0x220>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d063      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a36      	ldr	r2, [pc, #216]	; (80024ec <HAL_DMA_Abort+0x224>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d05e      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <HAL_DMA_Abort+0x228>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d059      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a33      	ldr	r2, [pc, #204]	; (80024f4 <HAL_DMA_Abort+0x22c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d054      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_DMA_Abort+0x230>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d04f      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a30      	ldr	r2, [pc, #192]	; (80024fc <HAL_DMA_Abort+0x234>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d04a      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <HAL_DMA_Abort+0x238>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d045      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <HAL_DMA_Abort+0x23c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d040      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <HAL_DMA_Abort+0x240>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d03b      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <HAL_DMA_Abort+0x244>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d036      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a28      	ldr	r2, [pc, #160]	; (8002510 <HAL_DMA_Abort+0x248>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d031      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_DMA_Abort+0x24c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d02c      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <HAL_DMA_Abort+0x250>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d027      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a24      	ldr	r2, [pc, #144]	; (800251c <HAL_DMA_Abort+0x254>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d022      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_DMA_Abort+0x258>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01d      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_DMA_Abort+0x25c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_DMA_Abort+0x260>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_DMA_Abort+0x264>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00e      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_DMA_Abort+0x268>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d009      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <HAL_DMA_Abort+0x26c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_DMA_Abort+0x270>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d132      	bne.n	800253c <HAL_DMA_Abort+0x274>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e031      	b.n	800253e <HAL_DMA_Abort+0x276>
 80024da:	bf00      	nop
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
 800251c:	58025408 	.word	0x58025408
 8002520:	5802541c 	.word	0x5802541c
 8002524:	58025430 	.word	0x58025430
 8002528:	58025444 	.word	0x58025444
 800252c:	58025458 	.word	0x58025458
 8002530:	5802546c 	.word	0x5802546c
 8002534:	58025480 	.word	0x58025480
 8002538:	58025494 	.word	0x58025494
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002550:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6d      	ldr	r2, [pc, #436]	; (800270c <HAL_DMA_Abort+0x444>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d04a      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6b      	ldr	r2, [pc, #428]	; (8002710 <HAL_DMA_Abort+0x448>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d045      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_DMA_Abort+0x44c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d040      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a68      	ldr	r2, [pc, #416]	; (8002718 <HAL_DMA_Abort+0x450>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d03b      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a67      	ldr	r2, [pc, #412]	; (800271c <HAL_DMA_Abort+0x454>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d036      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	; (8002720 <HAL_DMA_Abort+0x458>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a64      	ldr	r2, [pc, #400]	; (8002724 <HAL_DMA_Abort+0x45c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d02c      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a62      	ldr	r2, [pc, #392]	; (8002728 <HAL_DMA_Abort+0x460>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d027      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a61      	ldr	r2, [pc, #388]	; (800272c <HAL_DMA_Abort+0x464>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d022      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5f      	ldr	r2, [pc, #380]	; (8002730 <HAL_DMA_Abort+0x468>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01d      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5e      	ldr	r2, [pc, #376]	; (8002734 <HAL_DMA_Abort+0x46c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_DMA_Abort+0x470>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <HAL_DMA_Abort+0x474>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a59      	ldr	r2, [pc, #356]	; (8002740 <HAL_DMA_Abort+0x478>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_DMA_Abort+0x47c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_Abort+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a56      	ldr	r2, [pc, #344]	; (8002748 <HAL_DMA_Abort+0x480>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <HAL_DMA_Abort+0x33c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e007      	b.n	8002614 <HAL_DMA_Abort+0x34c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002614:	e013      	b.n	800263e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002616:	f7fe ff45 	bl	80014a4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b05      	cmp	r3, #5
 8002622:	d90c      	bls.n	800263e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2203      	movs	r2, #3
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e12d      	b.n	800289a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e5      	bne.n	8002616 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_DMA_Abort+0x444>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04a      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <HAL_DMA_Abort+0x448>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d045      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <HAL_DMA_Abort+0x44c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d040      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_DMA_Abort+0x450>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d03b      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_DMA_Abort+0x454>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d036      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_DMA_Abort+0x458>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_DMA_Abort+0x45c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d02c      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_DMA_Abort+0x460>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d027      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_DMA_Abort+0x464>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_DMA_Abort+0x468>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a20      	ldr	r2, [pc, #128]	; (8002734 <HAL_DMA_Abort+0x46c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d018      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_DMA_Abort+0x470>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_DMA_Abort+0x474>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_DMA_Abort+0x478>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_DMA_Abort+0x47c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_DMA_Abort+0x422>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_DMA_Abort+0x480>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_Abort+0x426>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_DMA_Abort+0x428>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02b      	beq.n	800274c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	223f      	movs	r2, #63	; 0x3f
 8002704:	409a      	lsls	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	e02a      	b.n	8002762 <HAL_DMA_Abort+0x49a>
 800270c:	40020010 	.word	0x40020010
 8002710:	40020028 	.word	0x40020028
 8002714:	40020040 	.word	0x40020040
 8002718:	40020058 	.word	0x40020058
 800271c:	40020070 	.word	0x40020070
 8002720:	40020088 	.word	0x40020088
 8002724:	400200a0 	.word	0x400200a0
 8002728:	400200b8 	.word	0x400200b8
 800272c:	40020410 	.word	0x40020410
 8002730:	40020428 	.word	0x40020428
 8002734:	40020440 	.word	0x40020440
 8002738:	40020458 	.word	0x40020458
 800273c:	40020470 	.word	0x40020470
 8002740:	40020488 	.word	0x40020488
 8002744:	400204a0 	.word	0x400204a0
 8002748:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4f      	ldr	r2, [pc, #316]	; (80028a4 <HAL_DMA_Abort+0x5dc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d072      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_DMA_Abort+0x5e0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d06d      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a4c      	ldr	r2, [pc, #304]	; (80028ac <HAL_DMA_Abort+0x5e4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d068      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_DMA_Abort+0x5e8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d063      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a49      	ldr	r2, [pc, #292]	; (80028b4 <HAL_DMA_Abort+0x5ec>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d05e      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_DMA_Abort+0x5f0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d059      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a46      	ldr	r2, [pc, #280]	; (80028bc <HAL_DMA_Abort+0x5f4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d054      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a44      	ldr	r2, [pc, #272]	; (80028c0 <HAL_DMA_Abort+0x5f8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04f      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_DMA_Abort+0x5fc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04a      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a41      	ldr	r2, [pc, #260]	; (80028c8 <HAL_DMA_Abort+0x600>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d045      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <HAL_DMA_Abort+0x604>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d040      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <HAL_DMA_Abort+0x608>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d03b      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a3d      	ldr	r2, [pc, #244]	; (80028d4 <HAL_DMA_Abort+0x60c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <HAL_DMA_Abort+0x610>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <HAL_DMA_Abort+0x614>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d02c      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <HAL_DMA_Abort+0x618>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d027      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <HAL_DMA_Abort+0x61c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a35      	ldr	r2, [pc, #212]	; (80028e8 <HAL_DMA_Abort+0x620>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a34      	ldr	r2, [pc, #208]	; (80028ec <HAL_DMA_Abort+0x624>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <HAL_DMA_Abort+0x628>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_DMA_Abort+0x62c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <HAL_DMA_Abort+0x630>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_DMA_Abort+0x634>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <HAL_DMA_Abort+0x638>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Abort+0x58e>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_DMA_Abort+0x590>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002864:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002886:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40020010 	.word	0x40020010
 80028a8:	40020028 	.word	0x40020028
 80028ac:	40020040 	.word	0x40020040
 80028b0:	40020058 	.word	0x40020058
 80028b4:	40020070 	.word	0x40020070
 80028b8:	40020088 	.word	0x40020088
 80028bc:	400200a0 	.word	0x400200a0
 80028c0:	400200b8 	.word	0x400200b8
 80028c4:	40020410 	.word	0x40020410
 80028c8:	40020428 	.word	0x40020428
 80028cc:	40020440 	.word	0x40020440
 80028d0:	40020458 	.word	0x40020458
 80028d4:	40020470 	.word	0x40020470
 80028d8:	40020488 	.word	0x40020488
 80028dc:	400204a0 	.word	0x400204a0
 80028e0:	400204b8 	.word	0x400204b8
 80028e4:	58025408 	.word	0x58025408
 80028e8:	5802541c 	.word	0x5802541c
 80028ec:	58025430 	.word	0x58025430
 80028f0:	58025444 	.word	0x58025444
 80028f4:	58025458 	.word	0x58025458
 80028f8:	5802546c 	.word	0x5802546c
 80028fc:	58025480 	.word	0x58025480
 8002900:	58025494 	.word	0x58025494

08002904 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e205      	b.n	8002d22 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d004      	beq.n	800292c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e1fa      	b.n	8002d22 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a8c      	ldr	r2, [pc, #560]	; (8002b64 <HAL_DMA_Abort_IT+0x260>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d04a      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a8b      	ldr	r2, [pc, #556]	; (8002b68 <HAL_DMA_Abort_IT+0x264>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d045      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a89      	ldr	r2, [pc, #548]	; (8002b6c <HAL_DMA_Abort_IT+0x268>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d040      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a88      	ldr	r2, [pc, #544]	; (8002b70 <HAL_DMA_Abort_IT+0x26c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d03b      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a86      	ldr	r2, [pc, #536]	; (8002b74 <HAL_DMA_Abort_IT+0x270>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d036      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a85      	ldr	r2, [pc, #532]	; (8002b78 <HAL_DMA_Abort_IT+0x274>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a83      	ldr	r2, [pc, #524]	; (8002b7c <HAL_DMA_Abort_IT+0x278>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02c      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a82      	ldr	r2, [pc, #520]	; (8002b80 <HAL_DMA_Abort_IT+0x27c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d027      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a80      	ldr	r2, [pc, #512]	; (8002b84 <HAL_DMA_Abort_IT+0x280>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7f      	ldr	r2, [pc, #508]	; (8002b88 <HAL_DMA_Abort_IT+0x284>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01d      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7d      	ldr	r2, [pc, #500]	; (8002b8c <HAL_DMA_Abort_IT+0x288>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7c      	ldr	r2, [pc, #496]	; (8002b90 <HAL_DMA_Abort_IT+0x28c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a7a      	ldr	r2, [pc, #488]	; (8002b94 <HAL_DMA_Abort_IT+0x290>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a79      	ldr	r2, [pc, #484]	; (8002b98 <HAL_DMA_Abort_IT+0x294>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a77      	ldr	r2, [pc, #476]	; (8002b9c <HAL_DMA_Abort_IT+0x298>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a76      	ldr	r2, [pc, #472]	; (8002ba0 <HAL_DMA_Abort_IT+0x29c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_DMA_Abort_IT+0xcc>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_DMA_Abort_IT+0xce>
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d065      	beq.n	8002aa2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2204      	movs	r2, #4
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a60      	ldr	r2, [pc, #384]	; (8002b64 <HAL_DMA_Abort_IT+0x260>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04a      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5e      	ldr	r2, [pc, #376]	; (8002b68 <HAL_DMA_Abort_IT+0x264>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d045      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5d      	ldr	r2, [pc, #372]	; (8002b6c <HAL_DMA_Abort_IT+0x268>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d040      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <HAL_DMA_Abort_IT+0x26c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d03b      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5a      	ldr	r2, [pc, #360]	; (8002b74 <HAL_DMA_Abort_IT+0x270>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d036      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_DMA_Abort_IT+0x274>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_DMA_Abort_IT+0x278>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d02c      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a55      	ldr	r2, [pc, #340]	; (8002b80 <HAL_DMA_Abort_IT+0x27c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a54      	ldr	r2, [pc, #336]	; (8002b84 <HAL_DMA_Abort_IT+0x280>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_DMA_Abort_IT+0x284>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HAL_DMA_Abort_IT+0x288>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <HAL_DMA_Abort_IT+0x28c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <HAL_DMA_Abort_IT+0x290>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_DMA_Abort_IT+0x294>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a4b      	ldr	r2, [pc, #300]	; (8002b9c <HAL_DMA_Abort_IT+0x298>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x17a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_DMA_Abort_IT+0x29c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <HAL_DMA_Abort_IT+0x18c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e147      	b.n	8002d20 <HAL_DMA_Abort_IT+0x41c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e13e      	b.n	8002d20 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 020e 	bic.w	r2, r2, #14
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_DMA_Abort_IT+0x260>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_DMA_Abort_IT+0x264>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_DMA_Abort_IT+0x268>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_DMA_Abort_IT+0x26c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_DMA_Abort_IT+0x270>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_DMA_Abort_IT+0x274>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_DMA_Abort_IT+0x278>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_DMA_Abort_IT+0x27c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_DMA_Abort_IT+0x280>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_DMA_Abort_IT+0x284>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_DMA_Abort_IT+0x288>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_DMA_Abort_IT+0x28c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_DMA_Abort_IT+0x290>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_DMA_Abort_IT+0x294>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <HAL_DMA_Abort_IT+0x298>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_DMA_Abort_IT+0x29c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d128      	bne.n	8002ba4 <HAL_DMA_Abort_IT+0x2a0>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e027      	b.n	8002bb4 <HAL_DMA_Abort_IT+0x2b0>
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_DMA_Abort_IT+0x428>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d072      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_DMA_Abort_IT+0x42c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d06d      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a59      	ldr	r2, [pc, #356]	; (8002d34 <HAL_DMA_Abort_IT+0x430>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d068      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_DMA_Abort_IT+0x434>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d063      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_DMA_Abort_IT+0x438>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d05e      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_DMA_Abort_IT+0x43c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d059      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a53      	ldr	r2, [pc, #332]	; (8002d44 <HAL_DMA_Abort_IT+0x440>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d054      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_DMA_Abort_IT+0x444>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04f      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_DMA_Abort_IT+0x448>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d04a      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_DMA_Abort_IT+0x44c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d045      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4d      	ldr	r2, [pc, #308]	; (8002d54 <HAL_DMA_Abort_IT+0x450>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d040      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_DMA_Abort_IT+0x454>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d03b      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	; (8002d5c <HAL_DMA_Abort_IT+0x458>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d036      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_DMA_Abort_IT+0x45c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <HAL_DMA_Abort_IT+0x460>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02c      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_DMA_Abort_IT+0x464>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d027      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a44      	ldr	r2, [pc, #272]	; (8002d6c <HAL_DMA_Abort_IT+0x468>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d022      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a43      	ldr	r2, [pc, #268]	; (8002d70 <HAL_DMA_Abort_IT+0x46c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d01d      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a41      	ldr	r2, [pc, #260]	; (8002d74 <HAL_DMA_Abort_IT+0x470>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <HAL_DMA_Abort_IT+0x474>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3e      	ldr	r2, [pc, #248]	; (8002d7c <HAL_DMA_Abort_IT+0x478>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	; (8002d80 <HAL_DMA_Abort_IT+0x47c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <HAL_DMA_Abort_IT+0x480>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x3a0>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <HAL_DMA_Abort_IT+0x484>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DMA_Abort_IT+0x3a4>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_DMA_Abort_IT+0x3a6>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d028      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cdc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cfe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40020010 	.word	0x40020010
 8002d30:	40020028 	.word	0x40020028
 8002d34:	40020040 	.word	0x40020040
 8002d38:	40020058 	.word	0x40020058
 8002d3c:	40020070 	.word	0x40020070
 8002d40:	40020088 	.word	0x40020088
 8002d44:	400200a0 	.word	0x400200a0
 8002d48:	400200b8 	.word	0x400200b8
 8002d4c:	40020410 	.word	0x40020410
 8002d50:	40020428 	.word	0x40020428
 8002d54:	40020440 	.word	0x40020440
 8002d58:	40020458 	.word	0x40020458
 8002d5c:	40020470 	.word	0x40020470
 8002d60:	40020488 	.word	0x40020488
 8002d64:	400204a0 	.word	0x400204a0
 8002d68:	400204b8 	.word	0x400204b8
 8002d6c:	58025408 	.word	0x58025408
 8002d70:	5802541c 	.word	0x5802541c
 8002d74:	58025430 	.word	0x58025430
 8002d78:	58025444 	.word	0x58025444
 8002d7c:	58025458 	.word	0x58025458
 8002d80:	5802546c 	.word	0x5802546c
 8002d84:	58025480 	.word	0x58025480
 8002d88:	58025494 	.word	0x58025494

08002d8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d98:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <HAL_DMA_IRQHandler+0x1ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a67      	ldr	r2, [pc, #412]	; (8002f3c <HAL_DMA_IRQHandler+0x1b0>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_DMA_IRQHandler+0x1b4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	; (8002f44 <HAL_DMA_IRQHandler+0x1b8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5c      	ldr	r2, [pc, #368]	; (8002f48 <HAL_DMA_IRQHandler+0x1bc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <HAL_DMA_IRQHandler+0x1c0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a59      	ldr	r2, [pc, #356]	; (8002f50 <HAL_DMA_IRQHandler+0x1c4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_DMA_IRQHandler+0x1c8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_DMA_IRQHandler+0x1cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_DMA_IRQHandler+0x1d0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a53      	ldr	r2, [pc, #332]	; (8002f60 <HAL_DMA_IRQHandler+0x1d4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a51      	ldr	r2, [pc, #324]	; (8002f64 <HAL_DMA_IRQHandler+0x1d8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a50      	ldr	r2, [pc, #320]	; (8002f68 <HAL_DMA_IRQHandler+0x1dc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4e      	ldr	r2, [pc, #312]	; (8002f6c <HAL_DMA_IRQHandler+0x1e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4d      	ldr	r2, [pc, #308]	; (8002f70 <HAL_DMA_IRQHandler+0x1e4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_DMA_IRQHandler+0x1e8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_DMA_IRQHandler+0x1ec>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xd2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_DMA_IRQHandler+0x1f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_IRQHandler+0xd6>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_IRQHandler+0xd8>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 842b 	beq.w	80036c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2208      	movs	r2, #8
 8002e74:	409a      	lsls	r2, r3
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80a2 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <HAL_DMA_IRQHandler+0x1b4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_DMA_IRQHandler+0x1b8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d045      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_DMA_IRQHandler+0x1bc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <HAL_DMA_IRQHandler+0x1c0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <HAL_DMA_IRQHandler+0x1c4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d036      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_DMA_IRQHandler+0x1c8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_DMA_IRQHandler+0x1cc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02c      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_DMA_IRQHandler+0x1d0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_DMA_IRQHandler+0x1d4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_DMA_IRQHandler+0x1d8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_DMA_IRQHandler+0x1dc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_DMA_IRQHandler+0x1e0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_DMA_IRQHandler+0x1e4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_DMA_IRQHandler+0x1e8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_DMA_IRQHandler+0x1ec>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x194>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_DMA_IRQHandler+0x1f0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d12f      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x1f4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e02e      	b.n	8002f94 <HAL_DMA_IRQHandler+0x208>
 8002f36:	bf00      	nop
 8002f38:	24000018 	.word	0x24000018
 8002f3c:	1b4e81b5 	.word	0x1b4e81b5
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d06e      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_DMA_IRQHandler+0x3f8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04a      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a67      	ldr	r2, [pc, #412]	; (8003188 <HAL_DMA_IRQHandler+0x3fc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d045      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_DMA_IRQHandler+0x400>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a64      	ldr	r2, [pc, #400]	; (8003190 <HAL_DMA_IRQHandler+0x404>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03b      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a63      	ldr	r2, [pc, #396]	; (8003194 <HAL_DMA_IRQHandler+0x408>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d036      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a61      	ldr	r2, [pc, #388]	; (8003198 <HAL_DMA_IRQHandler+0x40c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_DMA_IRQHandler+0x410>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d02c      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5e      	ldr	r2, [pc, #376]	; (80031a0 <HAL_DMA_IRQHandler+0x414>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_DMA_IRQHandler+0x418>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5b      	ldr	r2, [pc, #364]	; (80031a8 <HAL_DMA_IRQHandler+0x41c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_DMA_IRQHandler+0x420>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_DMA_IRQHandler+0x424>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_DMA_IRQHandler+0x428>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_DMA_IRQHandler+0x42c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_DMA_IRQHandler+0x430>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_DMA_IRQHandler+0x2ee>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_DMA_IRQHandler+0x434>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10a      	bne.n	8003090 <HAL_DMA_IRQHandler+0x304>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e003      	b.n	8003098 <HAL_DMA_IRQHandler+0x30c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2201      	movs	r2, #1
 80030a6:	409a      	lsls	r2, r3
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0202 	orr.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 808f 	beq.w	80031ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <HAL_DMA_IRQHandler+0x3f8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d04a      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <HAL_DMA_IRQHandler+0x3fc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d045      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_DMA_IRQHandler+0x400>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d040      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <HAL_DMA_IRQHandler+0x404>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d03b      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_DMA_IRQHandler+0x408>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d036      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <HAL_DMA_IRQHandler+0x40c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_DMA_IRQHandler+0x410>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d02c      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <HAL_DMA_IRQHandler+0x414>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d027      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_DMA_IRQHandler+0x418>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <HAL_DMA_IRQHandler+0x41c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01d      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_DMA_IRQHandler+0x420>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_DMA_IRQHandler+0x424>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_DMA_IRQHandler+0x428>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_DMA_IRQHandler+0x42c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <HAL_DMA_IRQHandler+0x430>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_DMA_IRQHandler+0x3e2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <HAL_DMA_IRQHandler+0x434>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d12a      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x438>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e023      	b.n	80031cc <HAL_DMA_IRQHandler+0x440>
 8003184:	40020010 	.word	0x40020010
 8003188:	40020028 	.word	0x40020028
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020070 	.word	0x40020070
 8003198:	40020088 	.word	0x40020088
 800319c:	400200a0 	.word	0x400200a0
 80031a0:	400200b8 	.word	0x400200b8
 80031a4:	40020410 	.word	0x40020410
 80031a8:	40020428 	.word	0x40020428
 80031ac:	40020440 	.word	0x40020440
 80031b0:	40020458 	.word	0x40020458
 80031b4:	40020470 	.word	0x40020470
 80031b8:	40020488 	.word	0x40020488
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	400204b8 	.word	0x400204b8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2204      	movs	r2, #4
 80031da:	409a      	lsls	r2, r3
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2210      	movs	r2, #16
 80031f6:	409a      	lsls	r2, r3
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a6 	beq.w	800334e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a85      	ldr	r2, [pc, #532]	; (800341c <HAL_DMA_IRQHandler+0x690>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a83      	ldr	r2, [pc, #524]	; (8003420 <HAL_DMA_IRQHandler+0x694>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a82      	ldr	r2, [pc, #520]	; (8003424 <HAL_DMA_IRQHandler+0x698>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a80      	ldr	r2, [pc, #512]	; (8003428 <HAL_DMA_IRQHandler+0x69c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7f      	ldr	r2, [pc, #508]	; (800342c <HAL_DMA_IRQHandler+0x6a0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_DMA_IRQHandler+0x6a4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7c      	ldr	r2, [pc, #496]	; (8003434 <HAL_DMA_IRQHandler+0x6a8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <HAL_DMA_IRQHandler+0x6ac>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a79      	ldr	r2, [pc, #484]	; (800343c <HAL_DMA_IRQHandler+0x6b0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a77      	ldr	r2, [pc, #476]	; (8003440 <HAL_DMA_IRQHandler+0x6b4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a76      	ldr	r2, [pc, #472]	; (8003444 <HAL_DMA_IRQHandler+0x6b8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a74      	ldr	r2, [pc, #464]	; (8003448 <HAL_DMA_IRQHandler+0x6bc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a73      	ldr	r2, [pc, #460]	; (800344c <HAL_DMA_IRQHandler+0x6c0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a71      	ldr	r2, [pc, #452]	; (8003450 <HAL_DMA_IRQHandler+0x6c4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a70      	ldr	r2, [pc, #448]	; (8003454 <HAL_DMA_IRQHandler+0x6c8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x516>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_DMA_IRQHandler+0x6cc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10a      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x52c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e009      	b.n	80032cc <HAL_DMA_IRQHandler+0x540>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d03e      	beq.n	800334e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2210      	movs	r2, #16
 80032da:	409a      	lsls	r2, r3
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d018      	beq.n	8003320 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d108      	bne.n	800330e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d024      	beq.n	800334e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e01f      	b.n	800334e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01b      	beq.n	800334e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	e016      	b.n	800334e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2220      	movs	r2, #32
 8003358:	409a      	lsls	r2, r3
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8110 	beq.w	8003584 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2c      	ldr	r2, [pc, #176]	; (800341c <HAL_DMA_IRQHandler+0x690>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d04a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_DMA_IRQHandler+0x694>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d045      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a29      	ldr	r2, [pc, #164]	; (8003424 <HAL_DMA_IRQHandler+0x698>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d040      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_DMA_IRQHandler+0x69c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d03b      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a26      	ldr	r2, [pc, #152]	; (800342c <HAL_DMA_IRQHandler+0x6a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d036      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_DMA_IRQHandler+0x6a4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d031      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <HAL_DMA_IRQHandler+0x6a8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02c      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_DMA_IRQHandler+0x6ac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d027      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <HAL_DMA_IRQHandler+0x6b0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d022      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_DMA_IRQHandler+0x6b4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d01d      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_DMA_IRQHandler+0x6b8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_DMA_IRQHandler+0x6bc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1a      	ldr	r2, [pc, #104]	; (800344c <HAL_DMA_IRQHandler+0x6c0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_DMA_IRQHandler+0x6c4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a17      	ldr	r2, [pc, #92]	; (8003454 <HAL_DMA_IRQHandler+0x6c8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_IRQHandler+0x678>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_DMA_IRQHandler+0x6cc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d12b      	bne.n	800345c <HAL_DMA_IRQHandler+0x6d0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e02a      	b.n	8003470 <HAL_DMA_IRQHandler+0x6e4>
 800341a:	bf00      	nop
 800341c:	40020010 	.word	0x40020010
 8003420:	40020028 	.word	0x40020028
 8003424:	40020040 	.word	0x40020040
 8003428:	40020058 	.word	0x40020058
 800342c:	40020070 	.word	0x40020070
 8003430:	40020088 	.word	0x40020088
 8003434:	400200a0 	.word	0x400200a0
 8003438:	400200b8 	.word	0x400200b8
 800343c:	40020410 	.word	0x40020410
 8003440:	40020428 	.word	0x40020428
 8003444:	40020440 	.word	0x40020440
 8003448:	40020458 	.word	0x40020458
 800344c:	40020470 	.word	0x40020470
 8003450:	40020488 	.word	0x40020488
 8003454:	400204a0 	.word	0x400204a0
 8003458:	400204b8 	.word	0x400204b8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8087 	beq.w	8003584 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2220      	movs	r2, #32
 8003480:	409a      	lsls	r2, r3
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b04      	cmp	r3, #4
 8003490:	d139      	bne.n	8003506 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0216 	bic.w	r2, r2, #22
 80034a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x736>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0208 	bic.w	r2, r2, #8
 80034d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	223f      	movs	r2, #63	; 0x3f
 80034dc:	409a      	lsls	r2, r3
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 834a 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
          }
          return;
 8003504:	e344      	b.n	8003b90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d018      	beq.n	8003546 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02c      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	e027      	b.n	8003584 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e01e      	b.n	8003584 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10f      	bne.n	8003574 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0210 	bic.w	r2, r2, #16
 8003562:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8306 	beq.w	8003b9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8088 	beq.w	80036ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2204      	movs	r2, #4
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_DMA_IRQHandler+0xa08>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04a      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a79      	ldr	r2, [pc, #484]	; (8003798 <HAL_DMA_IRQHandler+0xa0c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d045      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a77      	ldr	r2, [pc, #476]	; (800379c <HAL_DMA_IRQHandler+0xa10>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d040      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a76      	ldr	r2, [pc, #472]	; (80037a0 <HAL_DMA_IRQHandler+0xa14>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d03b      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a74      	ldr	r2, [pc, #464]	; (80037a4 <HAL_DMA_IRQHandler+0xa18>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a73      	ldr	r2, [pc, #460]	; (80037a8 <HAL_DMA_IRQHandler+0xa1c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d031      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a71      	ldr	r2, [pc, #452]	; (80037ac <HAL_DMA_IRQHandler+0xa20>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02c      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a70      	ldr	r2, [pc, #448]	; (80037b0 <HAL_DMA_IRQHandler+0xa24>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d027      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	; (80037b4 <HAL_DMA_IRQHandler+0xa28>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6d      	ldr	r2, [pc, #436]	; (80037b8 <HAL_DMA_IRQHandler+0xa2c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d01d      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6b      	ldr	r2, [pc, #428]	; (80037bc <HAL_DMA_IRQHandler+0xa30>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <HAL_DMA_IRQHandler+0xa34>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a68      	ldr	r2, [pc, #416]	; (80037c4 <HAL_DMA_IRQHandler+0xa38>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a67      	ldr	r2, [pc, #412]	; (80037c8 <HAL_DMA_IRQHandler+0xa3c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_DMA_IRQHandler+0xa40>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_IRQHandler+0x8b8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a64      	ldr	r2, [pc, #400]	; (80037d0 <HAL_DMA_IRQHandler+0xa44>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <HAL_DMA_IRQHandler+0x8ca>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e007      	b.n	8003666 <HAL_DMA_IRQHandler+0x8da>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	429a      	cmp	r2, r3
 8003670:	d307      	bcc.n	8003682 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f2      	bne.n	8003666 <HAL_DMA_IRQHandler+0x8da>
 8003680:	e000      	b.n	8003684 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003682:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2203      	movs	r2, #3
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036a2:	e003      	b.n	80036ac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8272 	beq.w	8003b9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	e26c      	b.n	8003b9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a43      	ldr	r2, [pc, #268]	; (80037d4 <HAL_DMA_IRQHandler+0xa48>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a42      	ldr	r2, [pc, #264]	; (80037d8 <HAL_DMA_IRQHandler+0xa4c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a40      	ldr	r2, [pc, #256]	; (80037dc <HAL_DMA_IRQHandler+0xa50>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a3f      	ldr	r2, [pc, #252]	; (80037e0 <HAL_DMA_IRQHandler+0xa54>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_DMA_IRQHandler+0xa58>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <HAL_DMA_IRQHandler+0xa5c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_DMA_IRQHandler+0xa60>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x984>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <HAL_DMA_IRQHandler+0xa64>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_DMA_IRQHandler+0x988>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_DMA_IRQHandler+0x98a>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 823f 	beq.w	8003b9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80cd 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xb48>
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80c7 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2204      	movs	r2, #4
 8003750:	409a      	lsls	r2, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d049      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8210 	beq.w	8003b94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377c:	e20a      	b.n	8003b94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8206 	beq.w	8003b94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003790:	e200      	b.n	8003b94 <HAL_DMA_IRQHandler+0xe08>
 8003792:	bf00      	nop
 8003794:	40020010 	.word	0x40020010
 8003798:	40020028 	.word	0x40020028
 800379c:	40020040 	.word	0x40020040
 80037a0:	40020058 	.word	0x40020058
 80037a4:	40020070 	.word	0x40020070
 80037a8:	40020088 	.word	0x40020088
 80037ac:	400200a0 	.word	0x400200a0
 80037b0:	400200b8 	.word	0x400200b8
 80037b4:	40020410 	.word	0x40020410
 80037b8:	40020428 	.word	0x40020428
 80037bc:	40020440 	.word	0x40020440
 80037c0:	40020458 	.word	0x40020458
 80037c4:	40020470 	.word	0x40020470
 80037c8:	40020488 	.word	0x40020488
 80037cc:	400204a0 	.word	0x400204a0
 80037d0:	400204b8 	.word	0x400204b8
 80037d4:	58025408 	.word	0x58025408
 80037d8:	5802541c 	.word	0x5802541c
 80037dc:	58025430 	.word	0x58025430
 80037e0:	58025444 	.word	0x58025444
 80037e4:	58025458 	.word	0x58025458
 80037e8:	5802546c 	.word	0x5802546c
 80037ec:	58025480 	.word	0x58025480
 80037f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d160      	bne.n	80038c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a8c      	ldr	r2, [pc, #560]	; (8003a34 <HAL_DMA_IRQHandler+0xca8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d04a      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a8a      	ldr	r2, [pc, #552]	; (8003a38 <HAL_DMA_IRQHandler+0xcac>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d045      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a89      	ldr	r2, [pc, #548]	; (8003a3c <HAL_DMA_IRQHandler+0xcb0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d040      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a87      	ldr	r2, [pc, #540]	; (8003a40 <HAL_DMA_IRQHandler+0xcb4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d03b      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a86      	ldr	r2, [pc, #536]	; (8003a44 <HAL_DMA_IRQHandler+0xcb8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d036      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a84      	ldr	r2, [pc, #528]	; (8003a48 <HAL_DMA_IRQHandler+0xcbc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d031      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a83      	ldr	r2, [pc, #524]	; (8003a4c <HAL_DMA_IRQHandler+0xcc0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d02c      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a81      	ldr	r2, [pc, #516]	; (8003a50 <HAL_DMA_IRQHandler+0xcc4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d027      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a80      	ldr	r2, [pc, #512]	; (8003a54 <HAL_DMA_IRQHandler+0xcc8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d022      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a7e      	ldr	r2, [pc, #504]	; (8003a58 <HAL_DMA_IRQHandler+0xccc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01d      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7d      	ldr	r2, [pc, #500]	; (8003a5c <HAL_DMA_IRQHandler+0xcd0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a7b      	ldr	r2, [pc, #492]	; (8003a60 <HAL_DMA_IRQHandler+0xcd4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7a      	ldr	r2, [pc, #488]	; (8003a64 <HAL_DMA_IRQHandler+0xcd8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a78      	ldr	r2, [pc, #480]	; (8003a68 <HAL_DMA_IRQHandler+0xcdc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a77      	ldr	r2, [pc, #476]	; (8003a6c <HAL_DMA_IRQHandler+0xce0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_DMA_IRQHandler+0xb12>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a75      	ldr	r2, [pc, #468]	; (8003a70 <HAL_DMA_IRQHandler+0xce4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <HAL_DMA_IRQHandler+0xb24>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e007      	b.n	80038c0 <HAL_DMA_IRQHandler+0xb34>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8165 	beq.w	8003b94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d2:	e15f      	b.n	8003b94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2202      	movs	r2, #2
 80038de:	409a      	lsls	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80c5 	beq.w	8003a74 <HAL_DMA_IRQHandler+0xce8>
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80bf 	beq.w	8003a74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	2202      	movs	r2, #2
 8003900:	409a      	lsls	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d018      	beq.n	8003942 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 813a 	beq.w	8003b98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392c:	e134      	b.n	8003b98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8130 	beq.w	8003b98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003940:	e12a      	b.n	8003b98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d168      	bne.n	8003a1e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <HAL_DMA_IRQHandler+0xca8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d04a      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a37      	ldr	r2, [pc, #220]	; (8003a38 <HAL_DMA_IRQHandler+0xcac>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d045      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a35      	ldr	r2, [pc, #212]	; (8003a3c <HAL_DMA_IRQHandler+0xcb0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d040      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_DMA_IRQHandler+0xcb4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d03b      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a32      	ldr	r2, [pc, #200]	; (8003a44 <HAL_DMA_IRQHandler+0xcb8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d036      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a31      	ldr	r2, [pc, #196]	; (8003a48 <HAL_DMA_IRQHandler+0xcbc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d031      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <HAL_DMA_IRQHandler+0xcc0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2e      	ldr	r2, [pc, #184]	; (8003a50 <HAL_DMA_IRQHandler+0xcc4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d027      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <HAL_DMA_IRQHandler+0xcc8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d022      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_DMA_IRQHandler+0xccc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01d      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <HAL_DMA_IRQHandler+0xcd0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_DMA_IRQHandler+0xcd4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <HAL_DMA_IRQHandler+0xcd8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <HAL_DMA_IRQHandler+0xcdc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <HAL_DMA_IRQHandler+0xce0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_DMA_IRQHandler+0xc60>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_DMA_IRQHandler+0xce4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <HAL_DMA_IRQHandler+0xc72>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0214 	bic.w	r2, r2, #20
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e007      	b.n	8003a0e <HAL_DMA_IRQHandler+0xc82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 020a 	bic.w	r2, r2, #10
 8003a0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b8 	beq.w	8003b98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a30:	e0b2      	b.n	8003b98 <HAL_DMA_IRQHandler+0xe0c>
 8003a32:	bf00      	nop
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8088 	beq.w	8003b9a <HAL_DMA_IRQHandler+0xe0e>
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8082 	beq.w	8003b9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a41      	ldr	r2, [pc, #260]	; (8003ba0 <HAL_DMA_IRQHandler+0xe14>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d04a      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3f      	ldr	r2, [pc, #252]	; (8003ba4 <HAL_DMA_IRQHandler+0xe18>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d045      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <HAL_DMA_IRQHandler+0xe1c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d040      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <HAL_DMA_IRQHandler+0xe20>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <HAL_DMA_IRQHandler+0xe24>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d036      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a39      	ldr	r2, [pc, #228]	; (8003bb4 <HAL_DMA_IRQHandler+0xe28>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d031      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <HAL_DMA_IRQHandler+0xe2c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d02c      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a36      	ldr	r2, [pc, #216]	; (8003bbc <HAL_DMA_IRQHandler+0xe30>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d027      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a35      	ldr	r2, [pc, #212]	; (8003bc0 <HAL_DMA_IRQHandler+0xe34>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <HAL_DMA_IRQHandler+0xe38>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <HAL_DMA_IRQHandler+0xe3c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_DMA_IRQHandler+0xe40>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <HAL_DMA_IRQHandler+0xe44>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <HAL_DMA_IRQHandler+0xe48>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <HAL_DMA_IRQHandler+0xe4c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xdaa>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <HAL_DMA_IRQHandler+0xe50>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <HAL_DMA_IRQHandler+0xdbc>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 021c 	bic.w	r2, r2, #28
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e007      	b.n	8003b58 <HAL_DMA_IRQHandler+0xdcc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 020e 	bic.w	r2, r2, #14
 8003b56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
 8003b8e:	e004      	b.n	8003b9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b90:	bf00      	nop
 8003b92:	e002      	b.n	8003b9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b94:	bf00      	nop
 8003b96:	e000      	b.n	8003b9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b9a:	3728      	adds	r7, #40	; 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40020010 	.word	0x40020010
 8003ba4:	40020028 	.word	0x40020028
 8003ba8:	40020040 	.word	0x40020040
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	40020070 	.word	0x40020070
 8003bb4:	40020088 	.word	0x40020088
 8003bb8:	400200a0 	.word	0x400200a0
 8003bbc:	400200b8 	.word	0x400200b8
 8003bc0:	40020410 	.word	0x40020410
 8003bc4:	40020428 	.word	0x40020428
 8003bc8:	40020440 	.word	0x40020440
 8003bcc:	40020458 	.word	0x40020458
 8003bd0:	40020470 	.word	0x40020470
 8003bd4:	40020488 	.word	0x40020488
 8003bd8:	400204a0 	.word	0x400204a0
 8003bdc:	400204b8 	.word	0x400204b8

08003be0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a84      	ldr	r2, [pc, #528]	; (8003e10 <DMA_SetConfig+0x230>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d072      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a82      	ldr	r2, [pc, #520]	; (8003e14 <DMA_SetConfig+0x234>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d06d      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a81      	ldr	r2, [pc, #516]	; (8003e18 <DMA_SetConfig+0x238>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d068      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7f      	ldr	r2, [pc, #508]	; (8003e1c <DMA_SetConfig+0x23c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d063      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <DMA_SetConfig+0x240>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d05e      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7c      	ldr	r2, [pc, #496]	; (8003e24 <DMA_SetConfig+0x244>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d059      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a7b      	ldr	r2, [pc, #492]	; (8003e28 <DMA_SetConfig+0x248>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d054      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a79      	ldr	r2, [pc, #484]	; (8003e2c <DMA_SetConfig+0x24c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04f      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a78      	ldr	r2, [pc, #480]	; (8003e30 <DMA_SetConfig+0x250>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d04a      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a76      	ldr	r2, [pc, #472]	; (8003e34 <DMA_SetConfig+0x254>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d045      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a75      	ldr	r2, [pc, #468]	; (8003e38 <DMA_SetConfig+0x258>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d040      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a73      	ldr	r2, [pc, #460]	; (8003e3c <DMA_SetConfig+0x25c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d03b      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a72      	ldr	r2, [pc, #456]	; (8003e40 <DMA_SetConfig+0x260>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d036      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a70      	ldr	r2, [pc, #448]	; (8003e44 <DMA_SetConfig+0x264>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d031      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6f      	ldr	r2, [pc, #444]	; (8003e48 <DMA_SetConfig+0x268>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d02c      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6d      	ldr	r2, [pc, #436]	; (8003e4c <DMA_SetConfig+0x26c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d027      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6c      	ldr	r2, [pc, #432]	; (8003e50 <DMA_SetConfig+0x270>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a6a      	ldr	r2, [pc, #424]	; (8003e54 <DMA_SetConfig+0x274>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01d      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a69      	ldr	r2, [pc, #420]	; (8003e58 <DMA_SetConfig+0x278>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d018      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <DMA_SetConfig+0x27c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a66      	ldr	r2, [pc, #408]	; (8003e60 <DMA_SetConfig+0x280>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a64      	ldr	r2, [pc, #400]	; (8003e64 <DMA_SetConfig+0x284>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a63      	ldr	r2, [pc, #396]	; (8003e68 <DMA_SetConfig+0x288>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <DMA_SetConfig+0x10a>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a61      	ldr	r2, [pc, #388]	; (8003e6c <DMA_SetConfig+0x28c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <DMA_SetConfig+0x10e>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <DMA_SetConfig+0x110>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cfc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3e      	ldr	r2, [pc, #248]	; (8003e10 <DMA_SetConfig+0x230>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04a      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3d      	ldr	r2, [pc, #244]	; (8003e14 <DMA_SetConfig+0x234>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d045      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <DMA_SetConfig+0x238>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a3a      	ldr	r2, [pc, #232]	; (8003e1c <DMA_SetConfig+0x23c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d03b      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <DMA_SetConfig+0x240>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d036      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <DMA_SetConfig+0x244>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d031      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <DMA_SetConfig+0x248>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d02c      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <DMA_SetConfig+0x24c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d027      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a32      	ldr	r2, [pc, #200]	; (8003e30 <DMA_SetConfig+0x250>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a31      	ldr	r2, [pc, #196]	; (8003e34 <DMA_SetConfig+0x254>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <DMA_SetConfig+0x258>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <DMA_SetConfig+0x25c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2c      	ldr	r2, [pc, #176]	; (8003e40 <DMA_SetConfig+0x260>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <DMA_SetConfig+0x264>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <DMA_SetConfig+0x268>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <DMA_SetConfig+0x1d0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <DMA_SetConfig+0x26c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <DMA_SetConfig+0x1d4>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <DMA_SetConfig+0x1d6>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d05a      	beq.n	8003e70 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	223f      	movs	r2, #63	; 0x3f
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d108      	bne.n	8003dfc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dfa:	e087      	b.n	8003f0c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]
}
 8003e0c:	e07e      	b.n	8003f0c <DMA_SetConfig+0x32c>
 8003e0e:	bf00      	nop
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <DMA_SetConfig+0x338>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d022      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <DMA_SetConfig+0x33c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d01d      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <DMA_SetConfig+0x340>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <DMA_SetConfig+0x344>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <DMA_SetConfig+0x348>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <DMA_SetConfig+0x34c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <DMA_SetConfig+0x350>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <DMA_SetConfig+0x2e0>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <DMA_SetConfig+0x354>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <DMA_SetConfig+0x2e4>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <DMA_SetConfig+0x2e6>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d108      	bne.n	8003efc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
}
 8003efa:	e007      	b.n	8003f0c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	58025408 	.word	0x58025408
 8003f1c:	5802541c 	.word	0x5802541c
 8003f20:	58025430 	.word	0x58025430
 8003f24:	58025444 	.word	0x58025444
 8003f28:	58025458 	.word	0x58025458
 8003f2c:	5802546c 	.word	0x5802546c
 8003f30:	58025480 	.word	0x58025480
 8003f34:	58025494 	.word	0x58025494

08003f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a42      	ldr	r2, [pc, #264]	; (8004050 <DMA_CalcBaseAndBitshift+0x118>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04a      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a41      	ldr	r2, [pc, #260]	; (8004054 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d045      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <DMA_CalcBaseAndBitshift+0x120>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d040      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3e      	ldr	r2, [pc, #248]	; (800405c <DMA_CalcBaseAndBitshift+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d03b      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <DMA_CalcBaseAndBitshift+0x128>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d036      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a39      	ldr	r2, [pc, #228]	; (8004068 <DMA_CalcBaseAndBitshift+0x130>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02c      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a38      	ldr	r2, [pc, #224]	; (800406c <DMA_CalcBaseAndBitshift+0x134>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d027      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a36      	ldr	r2, [pc, #216]	; (8004070 <DMA_CalcBaseAndBitshift+0x138>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a35      	ldr	r2, [pc, #212]	; (8004074 <DMA_CalcBaseAndBitshift+0x13c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a33      	ldr	r2, [pc, #204]	; (8004078 <DMA_CalcBaseAndBitshift+0x140>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a32      	ldr	r2, [pc, #200]	; (800407c <DMA_CalcBaseAndBitshift+0x144>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a30      	ldr	r2, [pc, #192]	; (8004080 <DMA_CalcBaseAndBitshift+0x148>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2f      	ldr	r2, [pc, #188]	; (8004084 <DMA_CalcBaseAndBitshift+0x14c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2d      	ldr	r2, [pc, #180]	; (8004088 <DMA_CalcBaseAndBitshift+0x150>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2c      	ldr	r2, [pc, #176]	; (800408c <DMA_CalcBaseAndBitshift+0x154>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <DMA_CalcBaseAndBitshift+0xac>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <DMA_CalcBaseAndBitshift+0xae>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d024      	beq.n	8004034 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3b10      	subs	r3, #16
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <DMA_CalcBaseAndBitshift+0x158>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	4a24      	ldr	r2, [pc, #144]	; (8004094 <DMA_CalcBaseAndBitshift+0x15c>)
 8004004:	5cd3      	ldrb	r3, [r2, r3]
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d908      	bls.n	8004024 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <DMA_CalcBaseAndBitshift+0x160>)
 800401a:	4013      	ands	r3, r2
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	659a      	str	r2, [r3, #88]	; 0x58
 8004022:	e00d      	b.n	8004040 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <DMA_CalcBaseAndBitshift+0x160>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6593      	str	r3, [r2, #88]	; 0x58
 8004032:	e005      	b.n	8004040 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
 8004090:	aaaaaaab 	.word	0xaaaaaaab
 8004094:	08008820 	.word	0x08008820
 8004098:	fffffc00 	.word	0xfffffc00

0800409c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d120      	bne.n	80040f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d858      	bhi.n	800416a <DMA_CheckFifoParam+0xce>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <DMA_CheckFifoParam+0x24>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040e3 	.word	0x080040e3
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	0800416b 	.word	0x0800416b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d048      	beq.n	800416e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e0:	e045      	b.n	800416e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ea:	d142      	bne.n	8004172 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040f0:	e03f      	b.n	8004172 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fa:	d123      	bne.n	8004144 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	2b03      	cmp	r3, #3
 8004102:	d838      	bhi.n	8004176 <DMA_CheckFifoParam+0xda>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <DMA_CheckFifoParam+0x70>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004123 	.word	0x08004123
 8004114:	0800411d 	.word	0x0800411d
 8004118:	08004135 	.word	0x08004135
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
        break;
 8004120:	e030      	b.n	8004184 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d025      	beq.n	800417a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004132:	e022      	b.n	800417a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413c:	d11f      	bne.n	800417e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004142:	e01c      	b.n	800417e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2b02      	cmp	r3, #2
 800414a:	d902      	bls.n	8004152 <DMA_CheckFifoParam+0xb6>
 800414c:	2b03      	cmp	r3, #3
 800414e:	d003      	beq.n	8004158 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004150:	e018      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
        break;
 8004156:	e015      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
    break;
 8004168:	e00b      	b.n	8004182 <DMA_CheckFifoParam+0xe6>
        break;
 800416a:	bf00      	nop
 800416c:	e00a      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        break;
 800416e:	bf00      	nop
 8004170:	e008      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        break;
 8004172:	bf00      	nop
 8004174:	e006      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        break;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
        break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
    break;
 8004182:	bf00      	nop
    }
  }

  return status;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a38      	ldr	r2, [pc, #224]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a36      	ldr	r2, [pc, #216]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a35      	ldr	r2, [pc, #212]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a33      	ldr	r2, [pc, #204]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a32      	ldr	r2, [pc, #200]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a30      	ldr	r2, [pc, #192]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2f      	ldr	r2, [pc, #188]	; (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	3b08      	subs	r3, #8
 8004204:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a24      	ldr	r2, [pc, #144]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004220:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2201      	movs	r2, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004230:	e024      	b.n	800427c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3b10      	subs	r3, #16
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d806      	bhi.n	800425a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d902      	bls.n	800425a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3308      	adds	r3, #8
 8004258:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800426c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	2201      	movs	r2, #1
 8004276:	409a      	lsls	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	58025408 	.word	0x58025408
 800428c:	5802541c 	.word	0x5802541c
 8004290:	58025430 	.word	0x58025430
 8004294:	58025444 	.word	0x58025444
 8004298:	58025458 	.word	0x58025458
 800429c:	5802546c 	.word	0x5802546c
 80042a0:	58025480 	.word	0x58025480
 80042a4:	58025494 	.word	0x58025494
 80042a8:	cccccccd 	.word	0xcccccccd
 80042ac:	16009600 	.word	0x16009600
 80042b0:	58025880 	.word	0x58025880
 80042b4:	aaaaaaab 	.word	0xaaaaaaab
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	4002040f 	.word	0x4002040f
 80042c0:	10008200 	.word	0x10008200
 80042c4:	40020880 	.word	0x40020880

080042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d04a      	beq.n	8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d847      	bhi.n	8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a25      	ldr	r2, [pc, #148]	; (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a24      	ldr	r2, [pc, #144]	; (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a22      	ldr	r2, [pc, #136]	; (8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a21      	ldr	r2, [pc, #132]	; (800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1b      	ldr	r2, [pc, #108]	; (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004350:	671a      	str	r2, [r3, #112]	; 0x70
 8004352:	e009      	b.n	8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004366:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	58025408 	.word	0x58025408
 8004384:	5802541c 	.word	0x5802541c
 8004388:	58025430 	.word	0x58025430
 800438c:	58025444 	.word	0x58025444
 8004390:	58025458 	.word	0x58025458
 8004394:	5802546c 	.word	0x5802546c
 8004398:	58025480 	.word	0x58025480
 800439c:	58025494 	.word	0x58025494
 80043a0:	1600963f 	.word	0x1600963f
 80043a4:	58025940 	.word	0x58025940
 80043a8:	1000823f 	.word	0x1000823f
 80043ac:	40020940 	.word	0x40020940

080043b0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	460b      	mov	r3, r1
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e00a      	b.n	80043e2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]
      break;
 80043d8:	e002      	b.n	80043e0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
      break;
 80043de:	bf00      	nop
  }

  return status;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e003      	b.n	800440a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <HAL_GPIO_Init+0x234>)
 8004428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800442a:	e194      	b.n	8004756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2101      	movs	r1, #1
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8186 	beq.w	8004750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00b      	beq.n	8004464 <HAL_GPIO_Init+0x4c>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d007      	beq.n	8004464 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004458:	2b11      	cmp	r3, #17
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b12      	cmp	r3, #18
 8004462:	d130      	bne.n	80044c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800449a:	2201      	movs	r2, #1
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 0201 	and.w	r2, r3, #1
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	2203      	movs	r2, #3
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0xee>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b12      	cmp	r3, #18
 8004504:	d123      	bne.n	800454e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	08da      	lsrs	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3208      	adds	r2, #8
 800450e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	220f      	movs	r2, #15
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	08da      	lsrs	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3208      	adds	r2, #8
 8004548:	69b9      	ldr	r1, [r7, #24]
 800454a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	2203      	movs	r2, #3
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0203 	and.w	r2, r3, #3
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80e0 	beq.w	8004750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004590:	4b2f      	ldr	r3, [pc, #188]	; (8004650 <HAL_GPIO_Init+0x238>)
 8004592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004596:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <HAL_GPIO_Init+0x238>)
 8004598:	f043 0302 	orr.w	r3, r3, #2
 800459c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_GPIO_Init+0x238>)
 80045a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ae:	4a29      	ldr	r2, [pc, #164]	; (8004654 <HAL_GPIO_Init+0x23c>)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	3302      	adds	r3, #2
 80045b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	220f      	movs	r2, #15
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <HAL_GPIO_Init+0x240>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d052      	beq.n	8004680 <HAL_GPIO_Init+0x268>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_GPIO_Init+0x244>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d031      	beq.n	8004646 <HAL_GPIO_Init+0x22e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_GPIO_Init+0x248>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02b      	beq.n	8004642 <HAL_GPIO_Init+0x22a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_GPIO_Init+0x24c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d025      	beq.n	800463e <HAL_GPIO_Init+0x226>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_GPIO_Init+0x250>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01f      	beq.n	800463a <HAL_GPIO_Init+0x222>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1b      	ldr	r2, [pc, #108]	; (800466c <HAL_GPIO_Init+0x254>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d019      	beq.n	8004636 <HAL_GPIO_Init+0x21e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_GPIO_Init+0x258>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_GPIO_Init+0x21a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a19      	ldr	r2, [pc, #100]	; (8004674 <HAL_GPIO_Init+0x25c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00d      	beq.n	800462e <HAL_GPIO_Init+0x216>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_GPIO_Init+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <HAL_GPIO_Init+0x212>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_GPIO_Init+0x264>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_GPIO_Init+0x20e>
 8004622:	2309      	movs	r3, #9
 8004624:	e02d      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 8004626:	230a      	movs	r3, #10
 8004628:	e02b      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 800462a:	2308      	movs	r3, #8
 800462c:	e029      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 800462e:	2307      	movs	r3, #7
 8004630:	e027      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 8004632:	2306      	movs	r3, #6
 8004634:	e025      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 8004636:	2305      	movs	r3, #5
 8004638:	e023      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 800463a:	2304      	movs	r3, #4
 800463c:	e021      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 800463e:	2303      	movs	r3, #3
 8004640:	e01f      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 8004642:	2302      	movs	r3, #2
 8004644:	e01d      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 8004646:	2301      	movs	r3, #1
 8004648:	e01b      	b.n	8004682 <HAL_GPIO_Init+0x26a>
 800464a:	bf00      	nop
 800464c:	58000080 	.word	0x58000080
 8004650:	58024400 	.word	0x58024400
 8004654:	58000400 	.word	0x58000400
 8004658:	58020000 	.word	0x58020000
 800465c:	58020400 	.word	0x58020400
 8004660:	58020800 	.word	0x58020800
 8004664:	58020c00 	.word	0x58020c00
 8004668:	58021000 	.word	0x58021000
 800466c:	58021400 	.word	0x58021400
 8004670:	58021800 	.word	0x58021800
 8004674:	58021c00 	.word	0x58021c00
 8004678:	58022000 	.word	0x58022000
 800467c:	58022400 	.word	0x58022400
 8004680:	2300      	movs	r3, #0
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	f002 0203 	and.w	r2, r2, #3
 8004688:	0092      	lsls	r2, r2, #2
 800468a:	4093      	lsls	r3, r2
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004692:	4938      	ldr	r1, [pc, #224]	; (8004774 <HAL_GPIO_Init+0x35c>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800471a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3301      	adds	r3, #1
 8004754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f ae63 	bne.w	800442c <HAL_GPIO_Init+0x14>
  }
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	3724      	adds	r7, #36	; 0x24
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	58000400 	.word	0x58000400

08004778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
 8004784:	4613      	mov	r3, r2
 8004786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004788:	787b      	ldrb	r3, [r7, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004794:	e003      	b.n	800479e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	041a      	lsls	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	619a      	str	r2, [r3, #24]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047bc:	887a      	ldrh	r2, [r7, #2]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4013      	ands	r3, r2
 80047c2:	041a      	lsls	r2, r3, #16
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	43d9      	mvns	r1, r3
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	400b      	ands	r3, r1
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc f993 	bl	8000b30 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_PWREx_ConfigSupply+0x70>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d00a      	beq.n	800483e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_PWREx_ConfigSupply+0x70>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d001      	beq.n	800483a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e01f      	b.n	800487a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e01d      	b.n	800487a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_PWREx_ConfigSupply+0x70>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 0207 	bic.w	r2, r3, #7
 8004846:	490f      	ldr	r1, [pc, #60]	; (8004884 <HAL_PWREx_ConfigSupply+0x70>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4313      	orrs	r3, r2
 800484c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800484e:	f7fc fe29 	bl	80014a4 <HAL_GetTick>
 8004852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004854:	e009      	b.n	800486a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004856:	f7fc fe25 	bl	80014a4 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004864:	d901      	bls.n	800486a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_PWREx_ConfigSupply+0x70>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004876:	d1ee      	bne.n	8004856 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	58024800 	.word	0x58024800

08004888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	; 0x30
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e3ff      	b.n	800509a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8087 	beq.w	80049b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a8:	4b99      	ldr	r3, [pc, #612]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048b2:	4b97      	ldr	r3, [pc, #604]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d007      	beq.n	80048ce <HAL_RCC_OscConfig+0x46>
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	2b18      	cmp	r3, #24
 80048c2:	d110      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e>
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	4b90      	ldr	r3, [pc, #576]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d06c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x12c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d168      	bne.n	80049b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e3d9      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x76>
 80048f0:	4b87      	ldr	r3, [pc, #540]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a86      	ldr	r2, [pc, #536]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e02e      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x98>
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a81      	ldr	r2, [pc, #516]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 800490c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b7f      	ldr	r3, [pc, #508]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a7e      	ldr	r2, [pc, #504]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0xbc>
 800492a:	4b79      	ldr	r3, [pc, #484]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a78      	ldr	r2, [pc, #480]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b76      	ldr	r3, [pc, #472]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a75      	ldr	r2, [pc, #468]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004944:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a71      	ldr	r2, [pc, #452]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b6f      	ldr	r3, [pc, #444]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6e      	ldr	r2, [pc, #440]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fc fd9e 	bl	80014a4 <HAL_GetTick>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800496c:	f7fc fd9a 	bl	80014a4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e38d      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800497e:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xe4>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fc fd8a 	bl	80014a4 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fc fd86 	bl	80014a4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e379      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049a6:	4b5a      	ldr	r3, [pc, #360]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x10c>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80ae 	beq.w	8004b20 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c4:	4b52      	ldr	r3, [pc, #328]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ce:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_RCC_OscConfig+0x162>
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b18      	cmp	r3, #24
 80049de:	d13a      	bne.n	8004a56 <HAL_RCC_OscConfig+0x1ce>
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d135      	bne.n	8004a56 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x17a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e34b      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a02:	f7fc fd7f 	bl	8001504 <HAL_GetREVID>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d817      	bhi.n	8004a40 <HAL_RCC_OscConfig+0x1b8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d108      	bne.n	8004a2a <HAL_RCC_OscConfig+0x1a2>
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a26:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a28:	e07a      	b.n	8004b20 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	031b      	lsls	r3, r3, #12
 8004a38:	4935      	ldr	r1, [pc, #212]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a3e:	e06f      	b.n	8004b20 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a40:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	4930      	ldr	r1, [pc, #192]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a54:	e064      	b.n	8004b20 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d045      	beq.n	8004aea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0219 	bic.w	r2, r3, #25
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4929      	ldr	r1, [pc, #164]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fc fd18 	bl	80014a4 <HAL_GetTick>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a78:	f7fc fd14 	bl	80014a4 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e307      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a96:	f7fc fd35 	bl	8001504 <HAL_GetREVID>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d817      	bhi.n	8004ad4 <HAL_RCC_OscConfig+0x24c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d108      	bne.n	8004abe <HAL_RCC_OscConfig+0x236>
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ab4:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aba:	6053      	str	r3, [r2, #4]
 8004abc:	e030      	b.n	8004b20 <HAL_RCC_OscConfig+0x298>
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	031b      	lsls	r3, r3, #12
 8004acc:	4910      	ldr	r1, [pc, #64]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	604b      	str	r3, [r1, #4]
 8004ad2:	e025      	b.n	8004b20 <HAL_RCC_OscConfig+0x298>
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	490b      	ldr	r1, [pc, #44]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	604b      	str	r3, [r1, #4]
 8004ae8:	e01a      	b.n	8004b20 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aea:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <HAL_RCC_OscConfig+0x288>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fc fcd5 	bl	80014a4 <HAL_GetTick>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fc fcd1 	bl	80014a4 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d903      	bls.n	8004b14 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e2c4      	b.n	800509a <HAL_RCC_OscConfig+0x812>
 8004b10:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b14:	4ba4      	ldr	r3, [pc, #656]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ee      	bne.n	8004afe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a9 	beq.w	8004c80 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b2e:	4b9e      	ldr	r3, [pc, #632]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b38:	4b9b      	ldr	r3, [pc, #620]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d007      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2cc>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b18      	cmp	r3, #24
 8004b48:	d13a      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x338>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d135      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b54:	4b94      	ldr	r3, [pc, #592]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_OscConfig+0x2e4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e296      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b6c:	f7fc fcca 	bl	8001504 <HAL_GetREVID>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d817      	bhi.n	8004baa <HAL_RCC_OscConfig+0x322>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d108      	bne.n	8004b94 <HAL_RCC_OscConfig+0x30c>
 8004b82:	4b89      	ldr	r3, [pc, #548]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b8a:	4a87      	ldr	r2, [pc, #540]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b90:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b92:	e075      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b94:	4b84      	ldr	r3, [pc, #528]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	069b      	lsls	r3, r3, #26
 8004ba2:	4981      	ldr	r1, [pc, #516]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ba8:	e06a      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004baa:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	497b      	ldr	r1, [pc, #492]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bbe:	e05f      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d042      	beq.n	8004c4e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bc8:	4b77      	ldr	r3, [pc, #476]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a76      	ldr	r2, [pc, #472]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fc fc66 	bl	80014a4 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bdc:	f7fc fc62 	bl	80014a4 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e255      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bee:	4b6e      	ldr	r3, [pc, #440]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bfa:	f7fc fc83 	bl	8001504 <HAL_GetREVID>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d817      	bhi.n	8004c38 <HAL_RCC_OscConfig+0x3b0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d108      	bne.n	8004c22 <HAL_RCC_OscConfig+0x39a>
 8004c10:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c18:	4a63      	ldr	r2, [pc, #396]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e02e      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
 8004c22:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	069b      	lsls	r3, r3, #26
 8004c30:	495d      	ldr	r1, [pc, #372]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
 8004c36:	e023      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
 8004c38:	4b5b      	ldr	r3, [pc, #364]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	4958      	ldr	r1, [pc, #352]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60cb      	str	r3, [r1, #12]
 8004c4c:	e018      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c4e:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a55      	ldr	r2, [pc, #340]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fc fc23 	bl	80014a4 <HAL_GetTick>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c62:	f7fc fc1f 	bl	80014a4 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e212      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c74:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d036      	beq.n	8004cfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c94:	4b44      	ldr	r3, [pc, #272]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c98:	4a43      	ldr	r2, [pc, #268]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fc fc00 	bl	80014a4 <HAL_GetTick>
 8004ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca8:	f7fc fbfc 	bl	80014a4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1ef      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cba:	4b3b      	ldr	r3, [pc, #236]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x420>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc8:	4b37      	ldr	r3, [pc, #220]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ccc:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fc fbe6 	bl	80014a4 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cdc:	f7fc fbe2 	bl	80014a4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e1d5      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cee:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d036      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d019      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d0e:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d1a:	f7fc fbc3 	bl	80014a4 <HAL_GetTick>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d22:	f7fc fbbf 	bl	80014a4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e1b2      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x49a>
 8004d40:	e018      	b.n	8004d74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d42:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d4e:	f7fc fba9 	bl	80014a4 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d56:	f7fc fba5 	bl	80014a4 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e198      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <HAL_RCC_OscConfig+0x520>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8085 	beq.w	8004e8c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RCC_OscConfig+0x524>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a09      	ldr	r2, [pc, #36]	; (8004dac <HAL_RCC_OscConfig+0x524>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d8e:	f7fc fb89 	bl	80014a4 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d94:	e00c      	b.n	8004db0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7fc fb85 	bl	80014a4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b64      	cmp	r3, #100	; 0x64
 8004da2:	d905      	bls.n	8004db0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e178      	b.n	800509a <HAL_RCC_OscConfig+0x812>
 8004da8:	58024400 	.word	0x58024400
 8004dac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004db0:	4b96      	ldr	r3, [pc, #600]	; (800500c <HAL_RCC_OscConfig+0x784>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ec      	beq.n	8004d96 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x54a>
 8004dc4:	4b92      	ldr	r3, [pc, #584]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4a91      	ldr	r2, [pc, #580]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd0:	e02d      	b.n	8004e2e <HAL_RCC_OscConfig+0x5a6>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x56c>
 8004dda:	4b8d      	ldr	r3, [pc, #564]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a8c      	ldr	r2, [pc, #560]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	4b8a      	ldr	r3, [pc, #552]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a89      	ldr	r2, [pc, #548]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	e01c      	b.n	8004e2e <HAL_RCC_OscConfig+0x5a6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCC_OscConfig+0x58e>
 8004dfc:	4b84      	ldr	r3, [pc, #528]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a83      	ldr	r2, [pc, #524]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	4b81      	ldr	r3, [pc, #516]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a80      	ldr	r2, [pc, #512]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	e00b      	b.n	8004e2e <HAL_RCC_OscConfig+0x5a6>
 8004e16:	4b7e      	ldr	r3, [pc, #504]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a7d      	ldr	r2, [pc, #500]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
 8004e22:	4b7b      	ldr	r3, [pc, #492]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a7a      	ldr	r2, [pc, #488]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e28:	f023 0304 	bic.w	r3, r3, #4
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d015      	beq.n	8004e62 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fc fb35 	bl	80014a4 <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fc fb31 	bl	80014a4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e122      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e54:	4b6e      	ldr	r3, [pc, #440]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ee      	beq.n	8004e3e <HAL_RCC_OscConfig+0x5b6>
 8004e60:	e014      	b.n	8004e8c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fc fb1f 	bl	80014a4 <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc fb1b 	bl	80014a4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e10c      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e80:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8101 	beq.w	8005098 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e96:	4b5e      	ldr	r3, [pc, #376]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9e:	2b18      	cmp	r3, #24
 8004ea0:	f000 80bc 	beq.w	800501c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	f040 8095 	bne.w	8004fd8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eae:	4b58      	ldr	r3, [pc, #352]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a57      	ldr	r2, [pc, #348]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fc faf3 	bl	80014a4 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7fc faef 	bl	80014a4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0e2      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ed4:	4b4e      	ldr	r3, [pc, #312]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee0:	4b4b      	ldr	r3, [pc, #300]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee4:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <HAL_RCC_OscConfig+0x78c>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ef0:	0112      	lsls	r2, r2, #4
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	4946      	ldr	r1, [pc, #280]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	628b      	str	r3, [r1, #40]	; 0x28
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	3b01      	subs	r3, #1
 8004f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	025b      	lsls	r3, r3, #9
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	3b01      	subs	r3, #1
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	3b01      	subs	r3, #1
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f2a:	4939      	ldr	r1, [pc, #228]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f30:	4b37      	ldr	r3, [pc, #220]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4a36      	ldr	r2, [pc, #216]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <HAL_RCC_OscConfig+0x790>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f48:	00d2      	lsls	r2, r2, #3
 8004f4a:	4931      	ldr	r1, [pc, #196]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f50:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	f023 020c 	bic.w	r2, r3, #12
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	492c      	ldr	r1, [pc, #176]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f62:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f023 0202 	bic.w	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4928      	ldr	r1, [pc, #160]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f80:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc fa78 	bl	80014a4 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fc fa74 	bl	80014a4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e067      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x730>
 8004fd6:	e05f      	b.n	8005098 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8004fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fa5e 	bl	80014a4 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fc fa5a 	bl	80014a4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04d      	b.n	800509a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_RCC_OscConfig+0x788>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x764>
 800500a:	e045      	b.n	8005098 <HAL_RCC_OscConfig+0x810>
 800500c:	58024800 	.word	0x58024800
 8005010:	58024400 	.word	0x58024400
 8005014:	fffffc0c 	.word	0xfffffc0c
 8005018:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <HAL_RCC_OscConfig+0x81c>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005022:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <HAL_RCC_OscConfig+0x81c>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	2b01      	cmp	r3, #1
 800502e:	d031      	beq.n	8005094 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f003 0203 	and.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d12a      	bne.n	8005094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	429a      	cmp	r2, r3
 800504c:	d122      	bne.n	8005094 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d11a      	bne.n	8005094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	0a5b      	lsrs	r3, r3, #9
 8005062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d111      	bne.n	8005094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d108      	bne.n	8005094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3730      	adds	r7, #48	; 0x30
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	58024400 	.word	0x58024400

080050a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e19c      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050bc:	4b8a      	ldr	r3, [pc, #552]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d910      	bls.n	80050ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b87      	ldr	r3, [pc, #540]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 020f 	bic.w	r2, r3, #15
 80050d2:	4985      	ldr	r1, [pc, #532]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e184      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	4b7b      	ldr	r3, [pc, #492]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005104:	429a      	cmp	r2, r3
 8005106:	d908      	bls.n	800511a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005108:	4b78      	ldr	r3, [pc, #480]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	4975      	ldr	r1, [pc, #468]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005116:	4313      	orrs	r3, r2
 8005118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d010      	beq.n	8005148 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005132:	429a      	cmp	r2, r3
 8005134:	d908      	bls.n	8005148 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	496a      	ldr	r1, [pc, #424]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005144:	4313      	orrs	r3, r2
 8005146:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	d010      	beq.n	8005176 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	4b64      	ldr	r3, [pc, #400]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005160:	429a      	cmp	r2, r3
 8005162:	d908      	bls.n	8005176 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	495e      	ldr	r1, [pc, #376]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005172:	4313      	orrs	r3, r2
 8005174:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d010      	beq.n	80051a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800518e:	429a      	cmp	r2, r3
 8005190:	d908      	bls.n	80051a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005192:	4b56      	ldr	r3, [pc, #344]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4953      	ldr	r1, [pc, #332]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d010      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	429a      	cmp	r2, r3
 80051be:	d908      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f023 020f 	bic.w	r2, r3, #15
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4947      	ldr	r1, [pc, #284]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d055      	beq.n	800528a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051de:	4b43      	ldr	r3, [pc, #268]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4940      	ldr	r1, [pc, #256]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d107      	bne.n	8005208 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051f8:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d121      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0f6      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d107      	bne.n	8005220 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d115      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0ea      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d107      	bne.n	8005238 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0de      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005238:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0d6      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f023 0207 	bic.w	r2, r3, #7
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4925      	ldr	r1, [pc, #148]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005256:	4313      	orrs	r3, r2
 8005258:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	f7fc f923 	bl	80014a4 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005260:	e00a      	b.n	8005278 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005262:	f7fc f91f 	bl	80014a4 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e0be      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	429a      	cmp	r2, r3
 8005288:	d1eb      	bne.n	8005262 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d208      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	490e      	ldr	r1, [pc, #56]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d214      	bcs.n	80052f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 020f 	bic.w	r2, r3, #15
 80052ce:	4906      	ldr	r1, [pc, #24]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e086      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
 80052e8:	52002000 	.word	0x52002000
 80052ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d010      	beq.n	800531e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005308:	429a      	cmp	r2, r3
 800530a:	d208      	bcs.n	800531e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800530c:	4b3c      	ldr	r3, [pc, #240]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	4939      	ldr	r1, [pc, #228]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800531a:	4313      	orrs	r3, r2
 800531c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d010      	beq.n	800534c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	4b34      	ldr	r3, [pc, #208]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005336:	429a      	cmp	r2, r3
 8005338:	d208      	bcs.n	800534c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	492e      	ldr	r1, [pc, #184]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005348:	4313      	orrs	r3, r2
 800534a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005364:	429a      	cmp	r2, r3
 8005366:	d208      	bcs.n	800537a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4922      	ldr	r1, [pc, #136]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005376:	4313      	orrs	r3, r2
 8005378:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005392:	429a      	cmp	r2, r3
 8005394:	d208      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4917      	ldr	r1, [pc, #92]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053a8:	f000 f834 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	4912      	ldr	r1, [pc, #72]	; (8005404 <HAL_RCC_ClockConfig+0x35c>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <HAL_RCC_ClockConfig+0x35c>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_RCC_ClockConfig+0x360>)
 80053de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x364>)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_ClockConfig+0x368>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fc f810 	bl	8001410 <HAL_InitTick>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
 8005404:	08008810 	.word	0x08008810
 8005408:	2400001c 	.word	0x2400001c
 800540c:	24000018 	.word	0x24000018
 8005410:	24000020 	.word	0x24000020

08005414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800541a:	4bb3      	ldr	r3, [pc, #716]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005422:	2b18      	cmp	r3, #24
 8005424:	f200 8155 	bhi.w	80056d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <HAL_RCC_GetSysClockFreq+0x1c>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005495 	.word	0x08005495
 8005434:	080056d3 	.word	0x080056d3
 8005438:	080056d3 	.word	0x080056d3
 800543c:	080056d3 	.word	0x080056d3
 8005440:	080056d3 	.word	0x080056d3
 8005444:	080056d3 	.word	0x080056d3
 8005448:	080056d3 	.word	0x080056d3
 800544c:	080056d3 	.word	0x080056d3
 8005450:	080054bb 	.word	0x080054bb
 8005454:	080056d3 	.word	0x080056d3
 8005458:	080056d3 	.word	0x080056d3
 800545c:	080056d3 	.word	0x080056d3
 8005460:	080056d3 	.word	0x080056d3
 8005464:	080056d3 	.word	0x080056d3
 8005468:	080056d3 	.word	0x080056d3
 800546c:	080056d3 	.word	0x080056d3
 8005470:	080054c1 	.word	0x080054c1
 8005474:	080056d3 	.word	0x080056d3
 8005478:	080056d3 	.word	0x080056d3
 800547c:	080056d3 	.word	0x080056d3
 8005480:	080056d3 	.word	0x080056d3
 8005484:	080056d3 	.word	0x080056d3
 8005488:	080056d3 	.word	0x080056d3
 800548c:	080056d3 	.word	0x080056d3
 8005490:	080054c7 	.word	0x080054c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005494:	4b94      	ldr	r3, [pc, #592]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054a0:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	4a90      	ldr	r2, [pc, #576]	; (80056ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
 80054b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054b2:	e111      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054b4:	4b8d      	ldr	r3, [pc, #564]	; (80056ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054b6:	61bb      	str	r3, [r7, #24]
    break;
 80054b8:	e10e      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054ba:	4b8d      	ldr	r3, [pc, #564]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054bc:	61bb      	str	r3, [r7, #24]
    break;
 80054be:	e10b      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054c0:	4b8c      	ldr	r3, [pc, #560]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054c2:	61bb      	str	r3, [r7, #24]
    break;
 80054c4:	e108      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054c6:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054d0:	4b85      	ldr	r3, [pc, #532]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054dc:	4b82      	ldr	r3, [pc, #520]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054e6:	4b80      	ldr	r3, [pc, #512]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80e1 	beq.w	80056cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b02      	cmp	r3, #2
 800550e:	f000 8083 	beq.w	8005618 <HAL_RCC_GetSysClockFreq+0x204>
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b02      	cmp	r3, #2
 8005516:	f200 80a1 	bhi.w	800565c <HAL_RCC_GetSysClockFreq+0x248>
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x114>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d056      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005526:	e099      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005528:	4b6f      	ldr	r3, [pc, #444]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02d      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005534:	4b6c      	ldr	r3, [pc, #432]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	4a6b      	ldr	r2, [pc, #428]	; (80056ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b62      	ldr	r3, [pc, #392]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005572:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800558e:	e087      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055d2:	e065      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005700 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005616:	e043      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005704 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a02 	vldr	s12, [r7, #8]
 800563e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800565a:	e021      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005700 <HAL_RCC_GetSysClockFreq+0x2ec>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005682:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800569e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	0a5b      	lsrs	r3, r3, #9
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	3301      	adds	r3, #1
 80056ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c4:	ee17 3a90 	vmov	r3, s15
 80056c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056ca:	e005      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61bb      	str	r3, [r7, #24]
    break;
 80056d0:	e002      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056d4:	61bb      	str	r3, [r7, #24]
    break;
 80056d6:	bf00      	nop
  }

  return sysclockfreq;
 80056d8:	69bb      	ldr	r3, [r7, #24]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3724      	adds	r7, #36	; 0x24
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	03d09000 	.word	0x03d09000
 80056f0:	003d0900 	.word	0x003d0900
 80056f4:	007a1200 	.word	0x007a1200
 80056f8:	46000000 	.word	0x46000000
 80056fc:	4c742400 	.word	0x4c742400
 8005700:	4a742400 	.word	0x4a742400
 8005704:	4af42400 	.word	0x4af42400

08005708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800570e:	f7ff fe81 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8005712:	4602      	mov	r2, r0
 8005714:	4b10      	ldr	r3, [pc, #64]	; (8005758 <HAL_RCC_GetHCLKFreq+0x50>)
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	490f      	ldr	r1, [pc, #60]	; (800575c <HAL_RCC_GetHCLKFreq+0x54>)
 8005720:	5ccb      	ldrb	r3, [r1, r3]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800572c:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_RCC_GetHCLKFreq+0x50>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	4a09      	ldr	r2, [pc, #36]	; (800575c <HAL_RCC_GetHCLKFreq+0x54>)
 8005736:	5cd3      	ldrb	r3, [r2, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	fa22 f303 	lsr.w	r3, r2, r3
 8005742:	4a07      	ldr	r2, [pc, #28]	; (8005760 <HAL_RCC_GetHCLKFreq+0x58>)
 8005744:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <HAL_RCC_GetHCLKFreq+0x58>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	58024400 	.word	0x58024400
 800575c:	08008810 	.word	0x08008810
 8005760:	2400001c 	.word	0x2400001c
 8005764:	24000018 	.word	0x24000018

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800576c:	f7ff ffcc 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	58024400 	.word	0x58024400
 8005790:	08008810 	.word	0x08008810

08005794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005798:	f7ff ffb6 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4904      	ldr	r1, [pc, #16]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	58024400 	.word	0x58024400
 80057bc:	08008810 	.word	0x08008810

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057cc:	2300      	movs	r3, #0
 80057ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d03f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057e4:	d02a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057ea:	d824      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f0:	d018      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f6:	d81e      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005800:	d007      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005802:	e018      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4bab      	ldr	r3, [pc, #684]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4aaa      	ldr	r2, [pc, #680]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005810:	e015      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3304      	adds	r3, #4
 8005816:	2102      	movs	r1, #2
 8005818:	4618      	mov	r0, r3
 800581a:	f001 f9cf 	bl	8006bbc <RCCEx_PLL2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005822:	e00c      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3324      	adds	r3, #36	; 0x24
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fa78 	bl	8006d20 <RCCEx_PLL3_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005834:	e003      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
      break;
 800583a:	e000      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800583c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005844:	4b9b      	ldr	r3, [pc, #620]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005850:	4998      	ldr	r1, [pc, #608]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	650b      	str	r3, [r1, #80]	; 0x50
 8005856:	e001      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d03d      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	2b04      	cmp	r3, #4
 800586e:	d826      	bhi.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	0800588d 	.word	0x0800588d
 800587c:	0800589b 	.word	0x0800589b
 8005880:	080058ad 	.word	0x080058ad
 8005884:	080058c5 	.word	0x080058c5
 8005888:	080058c5 	.word	0x080058c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588c:	4b89      	ldr	r3, [pc, #548]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	4a88      	ldr	r2, [pc, #544]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005898:	e015      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f98b 	bl	8006bbc <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058aa:	e00c      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 fa34 	bl	8006d20 <RCCEx_PLL3_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058bc:	e003      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
      break;
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80058c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058cc:	4b79      	ldr	r3, [pc, #484]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	f023 0207 	bic.w	r2, r3, #7
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d8:	4976      	ldr	r1, [pc, #472]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	650b      	str	r3, [r1, #80]	; 0x50
 80058de:	e001      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d042      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f8:	d02b      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	d825      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005900:	2bc0      	cmp	r3, #192	; 0xc0
 8005902:	d028      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005904:	2bc0      	cmp	r3, #192	; 0xc0
 8005906:	d821      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d016      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d81d      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d007      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005918:	e018      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591a:	4b66      	ldr	r3, [pc, #408]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a65      	ldr	r2, [pc, #404]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005926:	e017      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f944 	bl	8006bbc <RCCEx_PLL2_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005938:	e00e      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3324      	adds	r3, #36	; 0x24
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f001 f9ed 	bl	8006d20 <RCCEx_PLL3_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800594a:	e005      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
      break;
 8005950:	e002      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800595e:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596a:	4952      	ldr	r1, [pc, #328]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800596c:	4313      	orrs	r3, r2
 800596e:	650b      	str	r3, [r1, #80]	; 0x50
 8005970:	e001      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597e:	2b00      	cmp	r3, #0
 8005980:	d049      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800598c:	d030      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800598e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005992:	d82a      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005994:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005998:	d02c      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800599a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800599e:	d824      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a4:	d018      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d81e      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80059b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b4:	d007      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80059b6:	e018      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b8:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a3d      	ldr	r2, [pc, #244]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059c4:	e017      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f8f5 	bl	8006bbc <RCCEx_PLL2_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059d6:	e00e      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 f99e 	bl	8006d20 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059e8:	e005      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
      break;
 80059ee:	e002      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80059f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f6:	7dfb      	ldrb	r3, [r7, #23]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059fc:	4b2d      	ldr	r3, [pc, #180]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a0a:	492a      	ldr	r1, [pc, #168]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	658b      	str	r3, [r1, #88]	; 0x58
 8005a10:	e001      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04c      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a2c:	d030      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a32:	d82a      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a38:	d02c      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a3e:	d824      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a44:	d018      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a4a:	d81e      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a56:	e018      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a64:	e017      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 f8a5 	bl	8006bbc <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a76:	e00e      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3324      	adds	r3, #36	; 0x24
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 f94e 	bl	8006d20 <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a88:	e005      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8e:	e002      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a90:	bf00      	nop
 8005a92:	e000      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005aaa:	4902      	ldr	r1, [pc, #8]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	658b      	str	r3, [r1, #88]	; 0x58
 8005ab0:	e004      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d032      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005acc:	2b30      	cmp	r3, #48	; 0x30
 8005ace:	d01c      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d817      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d00c      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d813      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d016      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d10f      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae4:	4baf      	ldr	r3, [pc, #700]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4aae      	ldr	r2, [pc, #696]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005af0:	e00e      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2102      	movs	r1, #2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f85f 	bl	8006bbc <RCCEx_PLL2_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b02:	e005      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	75fb      	strb	r3, [r7, #23]
      break;
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b16:	4ba3      	ldr	r3, [pc, #652]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b22:	49a0      	ldr	r1, [pc, #640]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b28:	e001      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d047      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b42:	d030      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b48:	d82a      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b4e:	d02c      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b54:	d824      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5a:	d018      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b60:	d81e      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d007      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b6c:	e018      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6e:	4b8d      	ldr	r3, [pc, #564]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	4a8c      	ldr	r2, [pc, #560]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b7a:	e017      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f81a 	bl	8006bbc <RCCEx_PLL2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b8c:	e00e      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3324      	adds	r3, #36	; 0x24
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f8c3 	bl	8006d20 <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b9e:	e005      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bb2:	4b7c      	ldr	r3, [pc, #496]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbe:	4979      	ldr	r1, [pc, #484]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	650b      	str	r3, [r1, #80]	; 0x50
 8005bc4:	e001      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d049      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bde:	d02e      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be4:	d828      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bea:	d02a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf0:	d822      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bf6:	d026      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005bf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bfc:	d81c      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c02:	d010      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c08:	d816      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01d      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c12:	d111      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	2101      	movs	r1, #1
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 ffce 	bl	8006bbc <RCCEx_PLL2_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c24:	e012      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3324      	adds	r3, #36	; 0x24
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f877 	bl	8006d20 <RCCEx_PLL3_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c36:	e009      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c52:	4b54      	ldr	r3, [pc, #336]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	4951      	ldr	r1, [pc, #324]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	650b      	str	r3, [r1, #80]	; 0x50
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d04b      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c80:	d02e      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c86:	d828      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d02a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d822      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c98:	d026      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c9e:	d81c      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca4:	d010      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005caa:	d816      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01d      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb4:	d111      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ff7d 	bl	8006bbc <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cc6:	e012      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3324      	adds	r3, #36	; 0x24
 8005ccc:	2101      	movs	r1, #1
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 f826 	bl	8006d20 <RCCEx_PLL3_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cd8:	e009      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ce0:	bf00      	nop
 8005ce2:	e004      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ce4:	bf00      	nop
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d02:	4928      	ldr	r1, [pc, #160]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	658b      	str	r3, [r1, #88]	; 0x58
 8005d08:	e001      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d02f      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d22:	d00e      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d28:	d814      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d015      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d32:	d10f      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d40:	e00c      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3304      	adds	r3, #4
 8005d46:	2101      	movs	r1, #1
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 ff37 	bl	8006bbc <RCCEx_PLL2_Config>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d52:	e003      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
      break;
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6e:	490d      	ldr	r1, [pc, #52]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	650b      	str	r3, [r1, #80]	; 0x50
 8005d74:	e001      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d033      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d81c      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dcf 	.word	0x08005dcf
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005db7 	.word	0x08005db7
 8005da0:	08005dcf 	.word	0x08005dcf
 8005da4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4bb8      	ldr	r3, [pc, #736]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4ab7      	ldr	r2, [pc, #732]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005db4:	e00c      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	2102      	movs	r1, #2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fefd 	bl	8006bbc <RCCEx_PLL2_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005dc6:	e003      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	75fb      	strb	r3, [r7, #23]
      break;
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dd6:	4bad      	ldr	r3, [pc, #692]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	f023 0203 	bic.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	49aa      	ldr	r1, [pc, #680]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005de8:	e001      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8086 	beq.w	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dfc:	4ba4      	ldr	r3, [pc, #656]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4aa3      	ldr	r2, [pc, #652]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e08:	f7fb fb4c 	bl	80014a4 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0e:	e009      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e10:	f7fb fb48 	bl	80014a4 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d902      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	75fb      	strb	r3, [r7, #23]
        break;
 8005e22:	e005      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e24:	4b9a      	ldr	r3, [pc, #616]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ef      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d166      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e36:	4b95      	ldr	r3, [pc, #596]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e40:	4053      	eors	r3, r2
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d013      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e4a:	4b90      	ldr	r3, [pc, #576]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e54:	4b8d      	ldr	r3, [pc, #564]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a8c      	ldr	r2, [pc, #560]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e60:	4b8a      	ldr	r3, [pc, #552]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	4a89      	ldr	r2, [pc, #548]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e6c:	4a87      	ldr	r2, [pc, #540]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7c:	d115      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fb fb11 	bl	80014a4 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e84:	e00b      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fb fb0d 	bl	80014a4 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d902      	bls.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e9c:	e005      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9e:	4b7b      	ldr	r3, [pc, #492]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0ed      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d126      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d10d      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005ec0:	4b72      	ldr	r3, [pc, #456]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ece:	0919      	lsrs	r1, r3, #4
 8005ed0:	4b70      	ldr	r3, [pc, #448]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005ed2:	400b      	ands	r3, r1
 8005ed4:	496d      	ldr	r1, [pc, #436]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	610b      	str	r3, [r1, #16]
 8005eda:	e005      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005edc:	4b6b      	ldr	r3, [pc, #428]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	4a6a      	ldr	r2, [pc, #424]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ee2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ee6:	6113      	str	r3, [r2, #16]
 8005ee8:	4b68      	ldr	r3, [pc, #416]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef6:	4965      	ldr	r1, [pc, #404]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	670b      	str	r3, [r1, #112]	; 0x70
 8005efc:	e004      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	75bb      	strb	r3, [r7, #22]
 8005f02:	e001      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d07e      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f18:	2b28      	cmp	r3, #40	; 0x28
 8005f1a:	d867      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005ff3 	.word	0x08005ff3
 8005f28:	08005fed 	.word	0x08005fed
 8005f2c:	08005fed 	.word	0x08005fed
 8005f30:	08005fed 	.word	0x08005fed
 8005f34:	08005fed 	.word	0x08005fed
 8005f38:	08005fed 	.word	0x08005fed
 8005f3c:	08005fed 	.word	0x08005fed
 8005f40:	08005fed 	.word	0x08005fed
 8005f44:	08005fc9 	.word	0x08005fc9
 8005f48:	08005fed 	.word	0x08005fed
 8005f4c:	08005fed 	.word	0x08005fed
 8005f50:	08005fed 	.word	0x08005fed
 8005f54:	08005fed 	.word	0x08005fed
 8005f58:	08005fed 	.word	0x08005fed
 8005f5c:	08005fed 	.word	0x08005fed
 8005f60:	08005fed 	.word	0x08005fed
 8005f64:	08005fdb 	.word	0x08005fdb
 8005f68:	08005fed 	.word	0x08005fed
 8005f6c:	08005fed 	.word	0x08005fed
 8005f70:	08005fed 	.word	0x08005fed
 8005f74:	08005fed 	.word	0x08005fed
 8005f78:	08005fed 	.word	0x08005fed
 8005f7c:	08005fed 	.word	0x08005fed
 8005f80:	08005fed 	.word	0x08005fed
 8005f84:	08005ff3 	.word	0x08005ff3
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	08005fed 	.word	0x08005fed
 8005f90:	08005fed 	.word	0x08005fed
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005fed 	.word	0x08005fed
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005ff3 	.word	0x08005ff3
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fed 	.word	0x08005fed
 8005fb4:	08005fed 	.word	0x08005fed
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08005fed 	.word	0x08005fed
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08005ff3 	.word	0x08005ff3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fdf4 	bl	8006bbc <RCCEx_PLL2_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fd8:	e00c      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3324      	adds	r3, #36	; 0x24
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fe9d 	bl	8006d20 <RCCEx_PLL3_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006006:	4921      	ldr	r1, [pc, #132]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006008:	4313      	orrs	r3, r2
 800600a:	654b      	str	r3, [r1, #84]	; 0x54
 800600c:	e001      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d03e      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	2b05      	cmp	r3, #5
 8006024:	d820      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800606f 	.word	0x0800606f
 8006030:	08006045 	.word	0x08006045
 8006034:	08006057 	.word	0x08006057
 8006038:	0800606f 	.word	0x0800606f
 800603c:	0800606f 	.word	0x0800606f
 8006040:	0800606f 	.word	0x0800606f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fdb6 	bl	8006bbc <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006054:	e00c      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3324      	adds	r3, #36	; 0x24
 800605a:	2101      	movs	r1, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fe5f 	bl	8006d20 <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006066:	e003      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
      break;
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800606e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f023 0207 	bic.w	r2, r3, #7
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006082:	4902      	ldr	r1, [pc, #8]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	654b      	str	r3, [r1, #84]	; 0x54
 8006088:	e008      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800608a:	bf00      	nop
 800608c:	58024400 	.word	0x58024400
 8006090:	58024800 	.word	0x58024800
 8006094:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d039      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d820      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060fb 	.word	0x080060fb
 80060bc:	080060d1 	.word	0x080060d1
 80060c0:	080060e3 	.word	0x080060e3
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	2101      	movs	r1, #1
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd70 	bl	8006bbc <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060e0:	e00c      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3324      	adds	r3, #36	; 0x24
 80060e6:	2101      	movs	r1, #1
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fe19 	bl	8006d20 <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
      break;
 80060f8:	e000      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80060fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006102:	4bb7      	ldr	r3, [pc, #732]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006106:	f023 0207 	bic.w	r2, r3, #7
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006110:	49b3      	ldr	r1, [pc, #716]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006112:	4313      	orrs	r3, r2
 8006114:	658b      	str	r3, [r1, #88]	; 0x58
 8006116:	e001      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d04b      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006132:	d02e      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006138:	d828      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d02a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d822      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800614a:	d026      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800614c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006150:	d81c      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006156:	d010      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615c:	d816      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01d      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006166:	d111      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fd24 	bl	8006bbc <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006178:	e012      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3324      	adds	r3, #36	; 0x24
 800617e:	2102      	movs	r1, #2
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fdcd 	bl	8006d20 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800618a:	e009      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
      break;
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006192:	bf00      	nop
 8006194:	e004      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800619e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061a6:	4b8e      	ldr	r3, [pc, #568]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b4:	498a      	ldr	r1, [pc, #552]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	654b      	str	r3, [r1, #84]	; 0x54
 80061ba:	e001      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d04b      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061d6:	d02e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80061d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061dc:	d828      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d02a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e8:	d822      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ee:	d026      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80061f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f4:	d81c      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fa:	d010      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006200:	d816      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01d      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d111      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fcd2 	bl	8006bbc <RCCEx_PLL2_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800621c:	e012      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3324      	adds	r3, #36	; 0x24
 8006222:	2102      	movs	r1, #2
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fd7b 	bl	8006d20 <RCCEx_PLL3_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800622e:	e009      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800624a:	4b65      	ldr	r3, [pc, #404]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006258:	4961      	ldr	r1, [pc, #388]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800625a:	4313      	orrs	r3, r2
 800625c:	658b      	str	r3, [r1, #88]	; 0x58
 800625e:	e001      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d04b      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006276:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800627a:	d02e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800627c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006280:	d828      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006286:	d02a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	d822      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800628e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006292:	d026      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006294:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006298:	d81c      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800629a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629e:	d010      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80062a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a4:	d816      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01d      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80062aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ae:	d111      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fc80 	bl	8006bbc <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062c0:	e012      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3324      	adds	r3, #36	; 0x24
 80062c6:	2102      	movs	r1, #2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fd29 	bl	8006d20 <RCCEx_PLL3_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062d2:	e009      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
      break;
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062da:	bf00      	nop
 80062dc:	e004      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062e2:	bf00      	nop
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062ee:	4b3c      	ldr	r3, [pc, #240]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fc:	4938      	ldr	r1, [pc, #224]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	658b      	str	r3, [r1, #88]	; 0x58
 8006302:	e001      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631e:	d10a      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	2102      	movs	r1, #2
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fcfa 	bl	8006d20 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006336:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006344:	4926      	ldr	r1, [pc, #152]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006346:	4313      	orrs	r3, r2
 8006348:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006360:	d10a      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3324      	adds	r3, #36	; 0x24
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fcd9 	bl	8006d20 <RCCEx_PLL3_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006386:	4916      	ldr	r1, [pc, #88]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006388:	4313      	orrs	r3, r2
 800638a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d036      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800639e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a2:	d01f      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80063a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a8:	d817      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80063ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b2:	d009      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80063b4:	e011      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3304      	adds	r3, #4
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fbfd 	bl	8006bbc <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063c6:	e00e      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	2102      	movs	r1, #2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fca6 	bl	8006d20 <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063d8:	e005      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
      break;
 80063de:	e002      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80063e0:	58024400 	.word	0x58024400
      break;
 80063e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063ec:	4b93      	ldr	r3, [pc, #588]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063fa:	4990      	ldr	r1, [pc, #576]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	658b      	str	r3, [r1, #88]	; 0x58
 8006400:	e001      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d033      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800641c:	d01c      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800641e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006422:	d816      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006428:	d003      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800642a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800642e:	d007      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006430:	e00f      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006432:	4b82      	ldr	r3, [pc, #520]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006436:	4a81      	ldr	r2, [pc, #516]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800643e:	e00c      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3324      	adds	r3, #36	; 0x24
 8006444:	2101      	movs	r1, #1
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fc6a 	bl	8006d20 <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006450:	e003      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
      break;
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006460:	4b76      	ldr	r3, [pc, #472]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646e:	4973      	ldr	r1, [pc, #460]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	654b      	str	r3, [r1, #84]	; 0x54
 8006474:	e001      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d029      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d007      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006494:	e00f      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006496:	4b69      	ldr	r3, [pc, #420]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	4a68      	ldr	r2, [pc, #416]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800649c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064a2:	e00b      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fb86 	bl	8006bbc <RCCEx_PLL2_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064b4:	e002      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064c2:	4b5e      	ldr	r3, [pc, #376]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	495b      	ldr	r1, [pc, #364]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064d4:	e001      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	2102      	movs	r1, #2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fc17 	bl	8006d20 <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d030      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006510:	d017      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006516:	d811      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651c:	d013      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800651e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006522:	d80b      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d010      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652c:	d106      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652e:	4b43      	ldr	r3, [pc, #268]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	4a42      	ldr	r2, [pc, #264]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800653a:	e007      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
      break;
 8006540:	e004      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006542:	bf00      	nop
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800654a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006552:	4b3a      	ldr	r3, [pc, #232]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655e:	4937      	ldr	r1, [pc, #220]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	654b      	str	r3, [r1, #84]	; 0x54
 8006564:	e001      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	492e      	ldr	r1, [pc, #184]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006594:	4b29      	ldr	r3, [pc, #164]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065a2:	4926      	ldr	r1, [pc, #152]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065b4:	4b21      	ldr	r3, [pc, #132]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c0:	491e      	ldr	r1, [pc, #120]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065d2:	4b1a      	ldr	r3, [pc, #104]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	4a19      	ldr	r2, [pc, #100]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065dc:	6113      	str	r3, [r2, #16]
 80065de:	4b17      	ldr	r3, [pc, #92]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065e8:	4914      	ldr	r1, [pc, #80]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da08      	bge.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006602:	490e      	ldr	r1, [pc, #56]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006604:	4313      	orrs	r3, r2
 8006606:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	4906      	ldr	r1, [pc, #24]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006624:	4313      	orrs	r3, r2
 8006626:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006628:	7dbb      	ldrb	r3, [r7, #22]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	58024400 	.word	0x58024400

08006640 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006644:	f7ff f860 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	091b      	lsrs	r3, r3, #4
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4904      	ldr	r1, [pc, #16]	; (8006668 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006660:	4618      	mov	r0, r3
 8006662:	bd80      	pop	{r7, pc}
 8006664:	58024400 	.word	0x58024400
 8006668:	08008810 	.word	0x08008810

0800666c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	; 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006674:	4ba1      	ldr	r3, [pc, #644]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800667e:	4b9f      	ldr	r3, [pc, #636]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	0b1b      	lsrs	r3, r3, #12
 8006684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006688:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800668a:	4b9c      	ldr	r3, [pc, #624]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	091b      	lsrs	r3, r3, #4
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006696:	4b99      	ldr	r3, [pc, #612]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	08db      	lsrs	r3, r3, #3
 800669c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8111 	beq.w	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	f000 8083 	beq.w	80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	f200 80a1 	bhi.w	800680c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d056      	beq.n	8006784 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066d6:	e099      	b.n	800680c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d8:	4b88      	ldr	r3, [pc, #544]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02d      	beq.n	8006740 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066e4:	4b85      	ldr	r3, [pc, #532]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	08db      	lsrs	r3, r3, #3
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	4a84      	ldr	r2, [pc, #528]	; (8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
 80066f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670e:	4b7b      	ldr	r3, [pc, #492]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800673e:	e087      	b.n	8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800674e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006752:	4b6a      	ldr	r3, [pc, #424]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006762:	ed97 6a03 	vldr	s12, [r7, #12]
 8006766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800676a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006782:	e065      	b.n	8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800690c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006796:	4b59      	ldr	r3, [pc, #356]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067c6:	e043      	b.n	8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067da:	4b48      	ldr	r3, [pc, #288]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800680a:	e021      	b.n	8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800690c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b37      	ldr	r3, [pc, #220]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800684e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006850:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	0a5b      	lsrs	r3, r3, #9
 8006856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800686a:	edd7 6a07 	vldr	s13, [r7, #28]
 800686e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006876:	ee17 2a90 	vmov	r2, s15
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800687e:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	0c1b      	lsrs	r3, r3, #16
 8006884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006898:	edd7 6a07 	vldr	s13, [r7, #28]
 800689c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a4:	ee17 2a90 	vmov	r2, s15
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80068ac:	4b13      	ldr	r3, [pc, #76]	; (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	0e1b      	lsrs	r3, r3, #24
 80068b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d2:	ee17 2a90 	vmov	r2, s15
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068da:	e008      	b.n	80068ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
}
 80068ee:	bf00      	nop
 80068f0:	3724      	adds	r7, #36	; 0x24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	58024400 	.word	0x58024400
 8006900:	03d09000 	.word	0x03d09000
 8006904:	46000000 	.word	0x46000000
 8006908:	4c742400 	.word	0x4c742400
 800690c:	4a742400 	.word	0x4a742400
 8006910:	4af42400 	.word	0x4af42400

08006914 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006914:	b480      	push	{r7}
 8006916:	b089      	sub	sp, #36	; 0x24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691c:	4ba1      	ldr	r3, [pc, #644]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006926:	4b9f      	ldr	r3, [pc, #636]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	0d1b      	lsrs	r3, r3, #20
 800692c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006930:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006932:	4b9c      	ldr	r3, [pc, #624]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800693e:	4b99      	ldr	r3, [pc, #612]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8111 	beq.w	8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b02      	cmp	r3, #2
 8006966:	f000 8083 	beq.w	8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f200 80a1 	bhi.w	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d056      	beq.n	8006a2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800697e:	e099      	b.n	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006980:	4b88      	ldr	r3, [pc, #544]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02d      	beq.n	80069e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800698c:	4b85      	ldr	r3, [pc, #532]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a84      	ldr	r2, [pc, #528]	; (8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	4b7b      	ldr	r3, [pc, #492]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069e6:	e087      	b.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fa:	4b6a      	ldr	r3, [pc, #424]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a2a:	e065      	b.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3e:	4b59      	ldr	r3, [pc, #356]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a6e:	e043      	b.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b48      	ldr	r3, [pc, #288]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ab2:	e021      	b.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b37      	ldr	r3, [pc, #220]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ada:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006af6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006af8:	4b2a      	ldr	r3, [pc, #168]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	0a5b      	lsrs	r3, r3, #9
 8006afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1e:	ee17 2a90 	vmov	r2, s15
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b26:	4b1f      	ldr	r3, [pc, #124]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	0c1b      	lsrs	r3, r3, #16
 8006b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b4c:	ee17 2a90 	vmov	r2, s15
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b54:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	0e1b      	lsrs	r3, r3, #24
 8006b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b7a:	ee17 2a90 	vmov	r2, s15
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b82:	e008      	b.n	8006b96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	609a      	str	r2, [r3, #8]
}
 8006b96:	bf00      	nop
 8006b98:	3724      	adds	r7, #36	; 0x24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	58024400 	.word	0x58024400
 8006ba8:	03d09000 	.word	0x03d09000
 8006bac:	46000000 	.word	0x46000000
 8006bb0:	4c742400 	.word	0x4c742400
 8006bb4:	4a742400 	.word	0x4a742400
 8006bb8:	4af42400 	.word	0x4af42400

08006bbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bca:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d101      	bne.n	8006bda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e099      	b.n	8006d0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a4e      	ldr	r2, [pc, #312]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be6:	f7fa fc5d 	bl	80014a4 <HAL_GetTick>
 8006bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bec:	e008      	b.n	8006c00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bee:	f7fa fc59 	bl	80014a4 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e086      	b.n	8006d0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c00:	4b45      	ldr	r3, [pc, #276]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f0      	bne.n	8006bee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c0c:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	031b      	lsls	r3, r3, #12
 8006c1a:	493f      	ldr	r1, [pc, #252]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	025b      	lsls	r3, r3, #9
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	061b      	lsls	r3, r3, #24
 8006c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c50:	4931      	ldr	r1, [pc, #196]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c56:	4b30      	ldr	r3, [pc, #192]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	492d      	ldr	r1, [pc, #180]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c68:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	f023 0220 	bic.w	r2, r3, #32
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	4928      	ldr	r1, [pc, #160]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c7a:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	f023 0310 	bic.w	r3, r3, #16
 8006c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c86:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c8a:	4b24      	ldr	r3, [pc, #144]	; (8006d1c <RCCEx_PLL2_Config+0x160>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	69d2      	ldr	r2, [r2, #28]
 8006c92:	00d2      	lsls	r2, r2, #3
 8006c94:	4920      	ldr	r1, [pc, #128]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	f043 0310 	orr.w	r3, r3, #16
 8006ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cac:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cb8:	e00f      	b.n	8006cda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d106      	bne.n	8006cce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006cc0:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ccc:	e005      	b.n	8006cda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a0e      	ldr	r2, [pc, #56]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ce6:	f7fa fbdd 	bl	80014a4 <HAL_GetTick>
 8006cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cec:	e008      	b.n	8006d00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cee:	f7fa fbd9 	bl	80014a4 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e006      	b.n	8006d0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <RCCEx_PLL2_Config+0x15c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0f0      	beq.n	8006cee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	ffff0007 	.word	0xffff0007

08006d20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d2e:	4b53      	ldr	r3, [pc, #332]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d101      	bne.n	8006d3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e099      	b.n	8006e72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d3e:	4b4f      	ldr	r3, [pc, #316]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a4e      	ldr	r2, [pc, #312]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d4a:	f7fa fbab 	bl	80014a4 <HAL_GetTick>
 8006d4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d50:	e008      	b.n	8006d64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d52:	f7fa fba7 	bl	80014a4 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e086      	b.n	8006e72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d64:	4b45      	ldr	r3, [pc, #276]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d70:	4b42      	ldr	r3, [pc, #264]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	051b      	lsls	r3, r3, #20
 8006d7e:	493f      	ldr	r1, [pc, #252]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	628b      	str	r3, [r1, #40]	; 0x28
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	025b      	lsls	r3, r3, #9
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	061b      	lsls	r3, r3, #24
 8006db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006db4:	4931      	ldr	r1, [pc, #196]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006dba:	4b30      	ldr	r3, [pc, #192]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	492d      	ldr	r1, [pc, #180]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	4928      	ldr	r1, [pc, #160]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dde:	4b27      	ldr	r3, [pc, #156]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dea:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <RCCEx_PLL3_Config+0x160>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	69d2      	ldr	r2, [r2, #28]
 8006df6:	00d2      	lsls	r2, r2, #3
 8006df8:	4920      	ldr	r1, [pc, #128]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dfe:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e10:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	4a19      	ldr	r2, [pc, #100]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e1c:	e00f      	b.n	8006e3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d106      	bne.n	8006e32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e24:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e30:	e005      	b.n	8006e3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	4a11      	ldr	r2, [pc, #68]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a0e      	ldr	r2, [pc, #56]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4a:	f7fa fb2b 	bl	80014a4 <HAL_GetTick>
 8006e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e50:	e008      	b.n	8006e64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e52:	f7fa fb27 	bl	80014a4 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e006      	b.n	8006e72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <RCCEx_PLL3_Config+0x15c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f0      	beq.n	8006e52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	ffff0007 	.word	0xffff0007

08006e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e042      	b.n	8006f1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7f9 fe9b 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2224      	movs	r2, #36	; 0x24
 8006eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb7c 	bl	80075c4 <UART_SetConfig>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e022      	b.n	8006f1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f8d0 	bl	8008084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f957 	bl	80081c8 <UART_CheckIdleState>
 8006f1a:	4603      	mov	r3, r0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d168      	bne.n	800700e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_UART_Transmit_DMA+0x24>
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e061      	b.n	8007010 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Transmit_DMA+0x36>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e05a      	b.n	8007010 <HAL_UART_Transmit_DMA+0xec>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2221      	movs	r2, #33	; 0x21
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d02c      	beq.n	8006fea <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_UART_Transmit_DMA+0xf4>)
 8006f96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	; (800701c <HAL_UART_Transmit_DMA+0xf8>)
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fa4:	4a1e      	ldr	r2, [pc, #120]	; (8007020 <HAL_UART_Transmit_DMA+0xfc>)
 8006fa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fac:	2200      	movs	r2, #0
 8006fae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3328      	adds	r3, #40	; 0x28
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	f7fa ff16 	bl	8001df4 <HAL_DMA_Start_IT>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e012      	b.n	8007010 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2240      	movs	r2, #64	; 0x40
 8006ff0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007008:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	e000      	b.n	8007010 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800700e:	2302      	movs	r3, #2
  }
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	08008401 	.word	0x08008401
 800701c:	08008451 	.word	0x08008451
 8007020:	0800846d 	.word	0x0800846d

08007024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	f640 030f 	movw	r3, #2063	; 0x80f
 800704a:	4013      	ands	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d118      	bne.n	8007086 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d013      	beq.n	8007086 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 8282 	beq.w	8007580 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
      }
      return;
 8007084:	e27c      	b.n	8007580 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80ef 	beq.w	800726c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4b73      	ldr	r3, [pc, #460]	; (8007260 <HAL_UART_IRQHandler+0x23c>)
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4b72      	ldr	r3, [pc, #456]	; (8007264 <HAL_UART_IRQHandler+0x240>)
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80e4 	beq.w	800726c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d010      	beq.n	80070d0 <HAL_UART_IRQHandler+0xac>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2201      	movs	r2, #1
 80070be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c6:	f043 0201 	orr.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d010      	beq.n	80070fc <HAL_UART_IRQHandler+0xd8>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2202      	movs	r2, #2
 80070ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d010      	beq.n	8007128 <HAL_UART_IRQHandler+0x104>
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2204      	movs	r2, #4
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d015      	beq.n	800715e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4b48      	ldr	r3, [pc, #288]	; (8007260 <HAL_UART_IRQHandler+0x23c>)
 8007140:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2208      	movs	r2, #8
 800714c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007154:	f043 0208 	orr.w	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007164:	2b00      	cmp	r3, #0
 8007166:	d011      	beq.n	800718c <HAL_UART_IRQHandler+0x168>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00c      	beq.n	800718c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800717a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007182:	f043 0220 	orr.w	r2, r3, #32
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 81f6 	beq.w	8007584 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d004      	beq.n	80071e6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d031      	beq.n	800724a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f8d8 	bl	800839c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d123      	bne.n	8007242 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007208:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d013      	beq.n	800723a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007216:	4a14      	ldr	r2, [pc, #80]	; (8007268 <HAL_UART_IRQHandler+0x244>)
 8007218:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721e:	4618      	mov	r0, r3
 8007220:	f7fb fb70 	bl	8002904 <HAL_DMA_Abort_IT>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007238:	e00f      	b.n	800725a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7f9 fca0 	bl	8000b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	e00b      	b.n	800725a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7f9 fc9c 	bl	8000b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	e007      	b.n	800725a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7f9 fc98 	bl	8000b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007258:	e194      	b.n	8007584 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725a:	bf00      	nop
    return;
 800725c:	e192      	b.n	8007584 <HAL_UART_IRQHandler+0x560>
 800725e:	bf00      	nop
 8007260:	10000001 	.word	0x10000001
 8007264:	04000120 	.word	0x04000120
 8007268:	080084ed 	.word	0x080084ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007270:	2b01      	cmp	r3, #1
 8007272:	f040 810f 	bne.w	8007494 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8109 	beq.w	8007494 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8103 	beq.w	8007494 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2210      	movs	r2, #16
 8007294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	f040 80bb 	bne.w	800741c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a96      	ldr	r2, [pc, #600]	; (8007508 <HAL_UART_IRQHandler+0x4e4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d059      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a94      	ldr	r2, [pc, #592]	; (800750c <HAL_UART_IRQHandler+0x4e8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d053      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a92      	ldr	r2, [pc, #584]	; (8007510 <HAL_UART_IRQHandler+0x4ec>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d04d      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a90      	ldr	r2, [pc, #576]	; (8007514 <HAL_UART_IRQHandler+0x4f0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d047      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a8e      	ldr	r2, [pc, #568]	; (8007518 <HAL_UART_IRQHandler+0x4f4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d041      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a8c      	ldr	r2, [pc, #560]	; (800751c <HAL_UART_IRQHandler+0x4f8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d03b      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a8a      	ldr	r2, [pc, #552]	; (8007520 <HAL_UART_IRQHandler+0x4fc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d035      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a88      	ldr	r2, [pc, #544]	; (8007524 <HAL_UART_IRQHandler+0x500>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d02f      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a86      	ldr	r2, [pc, #536]	; (8007528 <HAL_UART_IRQHandler+0x504>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d029      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a84      	ldr	r2, [pc, #528]	; (800752c <HAL_UART_IRQHandler+0x508>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d023      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a82      	ldr	r2, [pc, #520]	; (8007530 <HAL_UART_IRQHandler+0x50c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01d      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a80      	ldr	r2, [pc, #512]	; (8007534 <HAL_UART_IRQHandler+0x510>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d017      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a7e      	ldr	r2, [pc, #504]	; (8007538 <HAL_UART_IRQHandler+0x514>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d011      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a7c      	ldr	r2, [pc, #496]	; (800753c <HAL_UART_IRQHandler+0x518>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00b      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a7a      	ldr	r2, [pc, #488]	; (8007540 <HAL_UART_IRQHandler+0x51c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d005      	beq.n	8007366 <HAL_UART_IRQHandler+0x342>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a78      	ldr	r2, [pc, #480]	; (8007544 <HAL_UART_IRQHandler+0x520>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d105      	bne.n	8007372 <HAL_UART_IRQHandler+0x34e>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	b29b      	uxth	r3, r3
 8007370:	e004      	b.n	800737c <HAL_UART_IRQHandler+0x358>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	b29b      	uxth	r3, r3
 800737c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800737e:	893b      	ldrh	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8101 	beq.w	8007588 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800738c:	893a      	ldrh	r2, [r7, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	f080 80fa 	bcs.w	8007588 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	893a      	ldrh	r2, [r7, #8]
 8007398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a6:	d02b      	beq.n	8007400 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0210 	bic.w	r2, r2, #16
 80073f4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fa ff64 	bl	80022c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800740c:	b29b      	uxth	r3, r3
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	b29b      	uxth	r3, r3
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8c9 	bl	80075ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800741a:	e0b5      	b.n	8007588 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007428:	b29b      	uxth	r3, r3
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 80a8 	beq.w	800758c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800743c:	897b      	ldrh	r3, [r7, #10]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80a4 	beq.w	800758c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007452:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6899      	ldr	r1, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b3a      	ldr	r3, [pc, #232]	; (8007548 <HAL_UART_IRQHandler+0x524>)
 8007460:	400b      	ands	r3, r1
 8007462:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0210 	bic.w	r2, r2, #16
 8007486:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007488:	897b      	ldrh	r3, [r7, #10]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f88d 	bl	80075ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007492:	e07b      	b.n	800758c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <HAL_UART_IRQHandler+0x496>
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 f84a 	bl	800854c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074b8:	e06b      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d012      	beq.n	80074ea <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d057      	beq.n	8007590 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
    }
    return;
 80074e8:	e052      	b.n	8007590 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d02b      	beq.n	800754c <HAL_UART_IRQHandler+0x528>
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d026      	beq.n	800754c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 f80a 	bl	8008518 <UART_EndTransmit_IT>
    return;
 8007504:	e045      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
 8007506:	bf00      	nop
 8007508:	40020010 	.word	0x40020010
 800750c:	40020028 	.word	0x40020028
 8007510:	40020040 	.word	0x40020040
 8007514:	40020058 	.word	0x40020058
 8007518:	40020070 	.word	0x40020070
 800751c:	40020088 	.word	0x40020088
 8007520:	400200a0 	.word	0x400200a0
 8007524:	400200b8 	.word	0x400200b8
 8007528:	40020410 	.word	0x40020410
 800752c:	40020428 	.word	0x40020428
 8007530:	40020440 	.word	0x40020440
 8007534:	40020458 	.word	0x40020458
 8007538:	40020470 	.word	0x40020470
 800753c:	40020488 	.word	0x40020488
 8007540:	400204a0 	.word	0x400204a0
 8007544:	400204b8 	.word	0x400204b8
 8007548:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <HAL_UART_IRQHandler+0x544>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f807 	bl	8008574 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007566:	e014      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00f      	beq.n	8007592 <HAL_UART_IRQHandler+0x56e>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	da0c      	bge.n	8007592 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fff1 	bl	8008560 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800757e:	e008      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
      return;
 8007580:	bf00      	nop
 8007582:	e006      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
    return;
 8007584:	bf00      	nop
 8007586:	e004      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
      return;
 8007588:	bf00      	nop
 800758a:	e002      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
      return;
 800758c:	bf00      	nop
 800758e:	e000      	b.n	8007592 <HAL_UART_IRQHandler+0x56e>
    return;
 8007590:	bf00      	nop
  }
}
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c4:	b5b0      	push	{r4, r5, r7, lr}
 80075c6:	b08e      	sub	sp, #56	; 0x38
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4bbf      	ldr	r3, [pc, #764]	; (80078f0 <UART_SetConfig+0x32c>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075fa:	430b      	orrs	r3, r1
 80075fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4ab5      	ldr	r2, [pc, #724]	; (80078f4 <UART_SetConfig+0x330>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d004      	beq.n	800762e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800762a:	4313      	orrs	r3, r2
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	4bb0      	ldr	r3, [pc, #704]	; (80078f8 <UART_SetConfig+0x334>)
 8007636:	4013      	ands	r3, r2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800763e:	430b      	orrs	r3, r1
 8007640:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	f023 010f 	bic.w	r1, r3, #15
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4aa7      	ldr	r2, [pc, #668]	; (80078fc <UART_SetConfig+0x338>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d176      	bne.n	8007750 <UART_SetConfig+0x18c>
 8007662:	4ba7      	ldr	r3, [pc, #668]	; (8007900 <UART_SetConfig+0x33c>)
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800766a:	2b28      	cmp	r3, #40	; 0x28
 800766c:	d86c      	bhi.n	8007748 <UART_SetConfig+0x184>
 800766e:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <UART_SetConfig+0xb0>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	08007719 	.word	0x08007719
 8007678:	08007749 	.word	0x08007749
 800767c:	08007749 	.word	0x08007749
 8007680:	08007749 	.word	0x08007749
 8007684:	08007749 	.word	0x08007749
 8007688:	08007749 	.word	0x08007749
 800768c:	08007749 	.word	0x08007749
 8007690:	08007749 	.word	0x08007749
 8007694:	08007721 	.word	0x08007721
 8007698:	08007749 	.word	0x08007749
 800769c:	08007749 	.word	0x08007749
 80076a0:	08007749 	.word	0x08007749
 80076a4:	08007749 	.word	0x08007749
 80076a8:	08007749 	.word	0x08007749
 80076ac:	08007749 	.word	0x08007749
 80076b0:	08007749 	.word	0x08007749
 80076b4:	08007729 	.word	0x08007729
 80076b8:	08007749 	.word	0x08007749
 80076bc:	08007749 	.word	0x08007749
 80076c0:	08007749 	.word	0x08007749
 80076c4:	08007749 	.word	0x08007749
 80076c8:	08007749 	.word	0x08007749
 80076cc:	08007749 	.word	0x08007749
 80076d0:	08007749 	.word	0x08007749
 80076d4:	08007731 	.word	0x08007731
 80076d8:	08007749 	.word	0x08007749
 80076dc:	08007749 	.word	0x08007749
 80076e0:	08007749 	.word	0x08007749
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007749 	.word	0x08007749
 80076f0:	08007749 	.word	0x08007749
 80076f4:	08007739 	.word	0x08007739
 80076f8:	08007749 	.word	0x08007749
 80076fc:	08007749 	.word	0x08007749
 8007700:	08007749 	.word	0x08007749
 8007704:	08007749 	.word	0x08007749
 8007708:	08007749 	.word	0x08007749
 800770c:	08007749 	.word	0x08007749
 8007710:	08007749 	.word	0x08007749
 8007714:	08007741 	.word	0x08007741
 8007718:	2301      	movs	r3, #1
 800771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771e:	e222      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e21e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772e:	e21a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007736:	e216      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007738:	2320      	movs	r3, #32
 800773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773e:	e212      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e20e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e20a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a6b      	ldr	r2, [pc, #428]	; (8007904 <UART_SetConfig+0x340>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d130      	bne.n	80077bc <UART_SetConfig+0x1f8>
 800775a:	4b69      	ldr	r3, [pc, #420]	; (8007900 <UART_SetConfig+0x33c>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b05      	cmp	r3, #5
 8007764:	d826      	bhi.n	80077b4 <UART_SetConfig+0x1f0>
 8007766:	a201      	add	r2, pc, #4	; (adr r2, 800776c <UART_SetConfig+0x1a8>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	08007785 	.word	0x08007785
 8007770:	0800778d 	.word	0x0800778d
 8007774:	08007795 	.word	0x08007795
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077ad 	.word	0x080077ad
 8007784:	2300      	movs	r3, #0
 8007786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778a:	e1ec      	b.n	8007b66 <UART_SetConfig+0x5a2>
 800778c:	2304      	movs	r3, #4
 800778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007792:	e1e8      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007794:	2308      	movs	r3, #8
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e1e4      	b.n	8007b66 <UART_SetConfig+0x5a2>
 800779c:	2310      	movs	r3, #16
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e1e0      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80077a4:	2320      	movs	r3, #32
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e1dc      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e1d8      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80077b4:	2380      	movs	r3, #128	; 0x80
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e1d4      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a51      	ldr	r2, [pc, #324]	; (8007908 <UART_SetConfig+0x344>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d130      	bne.n	8007828 <UART_SetConfig+0x264>
 80077c6:	4b4e      	ldr	r3, [pc, #312]	; (8007900 <UART_SetConfig+0x33c>)
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d826      	bhi.n	8007820 <UART_SetConfig+0x25c>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x214>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	080077f1 	.word	0x080077f1
 80077dc:	080077f9 	.word	0x080077f9
 80077e0:	08007801 	.word	0x08007801
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007819 	.word	0x08007819
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f6:	e1b6      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80077f8:	2304      	movs	r3, #4
 80077fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fe:	e1b2      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007800:	2308      	movs	r3, #8
 8007802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007806:	e1ae      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007808:	2310      	movs	r3, #16
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e1aa      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007810:	2320      	movs	r3, #32
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e1a6      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007818:	2340      	movs	r3, #64	; 0x40
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e1a2      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007820:	2380      	movs	r3, #128	; 0x80
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e19e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a37      	ldr	r2, [pc, #220]	; (800790c <UART_SetConfig+0x348>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d130      	bne.n	8007894 <UART_SetConfig+0x2d0>
 8007832:	4b33      	ldr	r3, [pc, #204]	; (8007900 <UART_SetConfig+0x33c>)
 8007834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	2b05      	cmp	r3, #5
 800783c:	d826      	bhi.n	800788c <UART_SetConfig+0x2c8>
 800783e:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0x280>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	0800785d 	.word	0x0800785d
 8007848:	08007865 	.word	0x08007865
 800784c:	0800786d 	.word	0x0800786d
 8007850:	08007875 	.word	0x08007875
 8007854:	0800787d 	.word	0x0800787d
 8007858:	08007885 	.word	0x08007885
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007862:	e180      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007864:	2304      	movs	r3, #4
 8007866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800786a:	e17c      	b.n	8007b66 <UART_SetConfig+0x5a2>
 800786c:	2308      	movs	r3, #8
 800786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007872:	e178      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007874:	2310      	movs	r3, #16
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787a:	e174      	b.n	8007b66 <UART_SetConfig+0x5a2>
 800787c:	2320      	movs	r3, #32
 800787e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007882:	e170      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007884:	2340      	movs	r3, #64	; 0x40
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e16c      	b.n	8007b66 <UART_SetConfig+0x5a2>
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007892:	e168      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <UART_SetConfig+0x34c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d142      	bne.n	8007924 <UART_SetConfig+0x360>
 800789e:	4b18      	ldr	r3, [pc, #96]	; (8007900 <UART_SetConfig+0x33c>)
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b05      	cmp	r3, #5
 80078a8:	d838      	bhi.n	800791c <UART_SetConfig+0x358>
 80078aa:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <UART_SetConfig+0x2ec>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078c9 	.word	0x080078c9
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	080078e1 	.word	0x080078e1
 80078c0:	080078e9 	.word	0x080078e9
 80078c4:	08007915 	.word	0x08007915
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ce:	e14a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078d6:	e146      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078de:	e142      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078e6:	e13e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80078e8:	2320      	movs	r3, #32
 80078ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ee:	e13a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80078f0:	cfff69f3 	.word	0xcfff69f3
 80078f4:	58000c00 	.word	0x58000c00
 80078f8:	11fff4ff 	.word	0x11fff4ff
 80078fc:	40011000 	.word	0x40011000
 8007900:	58024400 	.word	0x58024400
 8007904:	40004400 	.word	0x40004400
 8007908:	40004800 	.word	0x40004800
 800790c:	40004c00 	.word	0x40004c00
 8007910:	40005000 	.word	0x40005000
 8007914:	2340      	movs	r3, #64	; 0x40
 8007916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791a:	e124      	b.n	8007b66 <UART_SetConfig+0x5a2>
 800791c:	2380      	movs	r3, #128	; 0x80
 800791e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007922:	e120      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4acc      	ldr	r2, [pc, #816]	; (8007c5c <UART_SetConfig+0x698>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d176      	bne.n	8007a1c <UART_SetConfig+0x458>
 800792e:	4bcc      	ldr	r3, [pc, #816]	; (8007c60 <UART_SetConfig+0x69c>)
 8007930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007936:	2b28      	cmp	r3, #40	; 0x28
 8007938:	d86c      	bhi.n	8007a14 <UART_SetConfig+0x450>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x37c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	080079e5 	.word	0x080079e5
 8007944:	08007a15 	.word	0x08007a15
 8007948:	08007a15 	.word	0x08007a15
 800794c:	08007a15 	.word	0x08007a15
 8007950:	08007a15 	.word	0x08007a15
 8007954:	08007a15 	.word	0x08007a15
 8007958:	08007a15 	.word	0x08007a15
 800795c:	08007a15 	.word	0x08007a15
 8007960:	080079ed 	.word	0x080079ed
 8007964:	08007a15 	.word	0x08007a15
 8007968:	08007a15 	.word	0x08007a15
 800796c:	08007a15 	.word	0x08007a15
 8007970:	08007a15 	.word	0x08007a15
 8007974:	08007a15 	.word	0x08007a15
 8007978:	08007a15 	.word	0x08007a15
 800797c:	08007a15 	.word	0x08007a15
 8007980:	080079f5 	.word	0x080079f5
 8007984:	08007a15 	.word	0x08007a15
 8007988:	08007a15 	.word	0x08007a15
 800798c:	08007a15 	.word	0x08007a15
 8007990:	08007a15 	.word	0x08007a15
 8007994:	08007a15 	.word	0x08007a15
 8007998:	08007a15 	.word	0x08007a15
 800799c:	08007a15 	.word	0x08007a15
 80079a0:	080079fd 	.word	0x080079fd
 80079a4:	08007a15 	.word	0x08007a15
 80079a8:	08007a15 	.word	0x08007a15
 80079ac:	08007a15 	.word	0x08007a15
 80079b0:	08007a15 	.word	0x08007a15
 80079b4:	08007a15 	.word	0x08007a15
 80079b8:	08007a15 	.word	0x08007a15
 80079bc:	08007a15 	.word	0x08007a15
 80079c0:	08007a05 	.word	0x08007a05
 80079c4:	08007a15 	.word	0x08007a15
 80079c8:	08007a15 	.word	0x08007a15
 80079cc:	08007a15 	.word	0x08007a15
 80079d0:	08007a15 	.word	0x08007a15
 80079d4:	08007a15 	.word	0x08007a15
 80079d8:	08007a15 	.word	0x08007a15
 80079dc:	08007a15 	.word	0x08007a15
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ea:	e0bc      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80079ec:	2304      	movs	r3, #4
 80079ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f2:	e0b8      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80079f4:	2308      	movs	r3, #8
 80079f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fa:	e0b4      	b.n	8007b66 <UART_SetConfig+0x5a2>
 80079fc:	2310      	movs	r3, #16
 80079fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a02:	e0b0      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a04:	2320      	movs	r3, #32
 8007a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0a:	e0ac      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a12:	e0a8      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1a:	e0a4      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a90      	ldr	r2, [pc, #576]	; (8007c64 <UART_SetConfig+0x6a0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d130      	bne.n	8007a88 <UART_SetConfig+0x4c4>
 8007a26:	4b8e      	ldr	r3, [pc, #568]	; (8007c60 <UART_SetConfig+0x69c>)
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	d826      	bhi.n	8007a80 <UART_SetConfig+0x4bc>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x474>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a51 	.word	0x08007a51
 8007a3c:	08007a59 	.word	0x08007a59
 8007a40:	08007a61 	.word	0x08007a61
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a71 	.word	0x08007a71
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a56:	e086      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5e:	e082      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a66:	e07e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6e:	e07a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a70:	2320      	movs	r3, #32
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a76:	e076      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e072      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e06e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a76      	ldr	r2, [pc, #472]	; (8007c68 <UART_SetConfig+0x6a4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d130      	bne.n	8007af4 <UART_SetConfig+0x530>
 8007a92:	4b73      	ldr	r3, [pc, #460]	; (8007c60 <UART_SetConfig+0x69c>)
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b05      	cmp	r3, #5
 8007a9c:	d826      	bhi.n	8007aec <UART_SetConfig+0x528>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x4e0>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007abd 	.word	0x08007abd
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	08007acd 	.word	0x08007acd
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007add 	.word	0x08007add
 8007ab8:	08007ae5 	.word	0x08007ae5
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac2:	e050      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aca:	e04c      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad2:	e048      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ada:	e044      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007adc:	2320      	movs	r3, #32
 8007ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae2:	e040      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aea:	e03c      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007aec:	2380      	movs	r3, #128	; 0x80
 8007aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af2:	e038      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a5c      	ldr	r2, [pc, #368]	; (8007c6c <UART_SetConfig+0x6a8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d130      	bne.n	8007b60 <UART_SetConfig+0x59c>
 8007afe:	4b58      	ldr	r3, [pc, #352]	; (8007c60 <UART_SetConfig+0x69c>)
 8007b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d826      	bhi.n	8007b58 <UART_SetConfig+0x594>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <UART_SetConfig+0x54c>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b29 	.word	0x08007b29
 8007b14:	08007b31 	.word	0x08007b31
 8007b18:	08007b39 	.word	0x08007b39
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	08007b51 	.word	0x08007b51
 8007b28:	2302      	movs	r3, #2
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	e01a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b30:	2304      	movs	r3, #4
 8007b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b36:	e016      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b38:	2308      	movs	r3, #8
 8007b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b3e:	e012      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b40:	2310      	movs	r3, #16
 8007b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b46:	e00e      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b48:	2320      	movs	r3, #32
 8007b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b4e:	e00a      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b56:	e006      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b58:	2380      	movs	r3, #128	; 0x80
 8007b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b5e:	e002      	b.n	8007b66 <UART_SetConfig+0x5a2>
 8007b60:	2380      	movs	r3, #128	; 0x80
 8007b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a40      	ldr	r2, [pc, #256]	; (8007c6c <UART_SetConfig+0x6a8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	f040 80ef 	bne.w	8007d50 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	dc46      	bgt.n	8007c08 <UART_SetConfig+0x644>
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	f2c0 8081 	blt.w	8007c82 <UART_SetConfig+0x6be>
 8007b80:	3b02      	subs	r3, #2
 8007b82:	2b1e      	cmp	r3, #30
 8007b84:	d87d      	bhi.n	8007c82 <UART_SetConfig+0x6be>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x5c8>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007c0f 	.word	0x08007c0f
 8007b90:	08007c83 	.word	0x08007c83
 8007b94:	08007c17 	.word	0x08007c17
 8007b98:	08007c83 	.word	0x08007c83
 8007b9c:	08007c83 	.word	0x08007c83
 8007ba0:	08007c83 	.word	0x08007c83
 8007ba4:	08007c27 	.word	0x08007c27
 8007ba8:	08007c83 	.word	0x08007c83
 8007bac:	08007c83 	.word	0x08007c83
 8007bb0:	08007c83 	.word	0x08007c83
 8007bb4:	08007c83 	.word	0x08007c83
 8007bb8:	08007c83 	.word	0x08007c83
 8007bbc:	08007c83 	.word	0x08007c83
 8007bc0:	08007c83 	.word	0x08007c83
 8007bc4:	08007c37 	.word	0x08007c37
 8007bc8:	08007c83 	.word	0x08007c83
 8007bcc:	08007c83 	.word	0x08007c83
 8007bd0:	08007c83 	.word	0x08007c83
 8007bd4:	08007c83 	.word	0x08007c83
 8007bd8:	08007c83 	.word	0x08007c83
 8007bdc:	08007c83 	.word	0x08007c83
 8007be0:	08007c83 	.word	0x08007c83
 8007be4:	08007c83 	.word	0x08007c83
 8007be8:	08007c83 	.word	0x08007c83
 8007bec:	08007c83 	.word	0x08007c83
 8007bf0:	08007c83 	.word	0x08007c83
 8007bf4:	08007c83 	.word	0x08007c83
 8007bf8:	08007c83 	.word	0x08007c83
 8007bfc:	08007c83 	.word	0x08007c83
 8007c00:	08007c83 	.word	0x08007c83
 8007c04:	08007c75 	.word	0x08007c75
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d036      	beq.n	8007c7a <UART_SetConfig+0x6b6>
 8007c0c:	e039      	b.n	8007c82 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c0e:	f7fe fd17 	bl	8006640 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c14:	e03b      	b.n	8007c8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c16:	f107 0314 	add.w	r3, r7, #20
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fd26 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c24:	e033      	b.n	8007c8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c26:	f107 0308 	add.w	r3, r7, #8
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fe72 	bl	8006914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c34:	e02b      	b.n	8007c8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <UART_SetConfig+0x69c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <UART_SetConfig+0x69c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	08db      	lsrs	r3, r3, #3
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <UART_SetConfig+0x6ac>)
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c54:	e01b      	b.n	8007c8e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <UART_SetConfig+0x6ac>)
 8007c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c5a:	e018      	b.n	8007c8e <UART_SetConfig+0x6ca>
 8007c5c:	40011400 	.word	0x40011400
 8007c60:	58024400 	.word	0x58024400
 8007c64:	40007800 	.word	0x40007800
 8007c68:	40007c00 	.word	0x40007c00
 8007c6c:	58000c00 	.word	0x58000c00
 8007c70:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c74:	4bc4      	ldr	r3, [pc, #784]	; (8007f88 <UART_SetConfig+0x9c4>)
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c78:	e009      	b.n	8007c8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c80:	e005      	b.n	8007c8e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 81da 	beq.w	800804a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	4abc      	ldr	r2, [pc, #752]	; (8007f8c <UART_SetConfig+0x9c8>)
 8007c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d305      	bcc.n	8007cc6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d903      	bls.n	8007cce <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ccc:	e1bd      	b.n	800804a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f04f 0100 	mov.w	r1, #0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	4aac      	ldr	r2, [pc, #688]	; (8007f8c <UART_SetConfig+0x9c8>)
 8007cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	f7f8 faf7 	bl	80002d8 <__aeabi_uldivmod>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4610      	mov	r0, r2
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f04f 0200 	mov.w	r2, #0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	020b      	lsls	r3, r1, #8
 8007cfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d00:	0202      	lsls	r2, r0, #8
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	6849      	ldr	r1, [r1, #4]
 8007d06:	0849      	lsrs	r1, r1, #1
 8007d08:	4608      	mov	r0, r1
 8007d0a:	f04f 0100 	mov.w	r1, #0
 8007d0e:	1814      	adds	r4, r2, r0
 8007d10:	eb43 0501 	adc.w	r5, r3, r1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fad9 	bl	80002d8 <__aeabi_uldivmod>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d34:	d308      	bcc.n	8007d48 <UART_SetConfig+0x784>
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d3c:	d204      	bcs.n	8007d48 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	e180      	b.n	800804a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007d4e:	e17c      	b.n	800804a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d58:	f040 80bf 	bne.w	8007eda <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	dc49      	bgt.n	8007df8 <UART_SetConfig+0x834>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	db7c      	blt.n	8007e62 <UART_SetConfig+0x89e>
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d87a      	bhi.n	8007e62 <UART_SetConfig+0x89e>
 8007d6c:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0x7b0>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007dff 	.word	0x08007dff
 8007d78:	08007e07 	.word	0x08007e07
 8007d7c:	08007e63 	.word	0x08007e63
 8007d80:	08007e63 	.word	0x08007e63
 8007d84:	08007e0f 	.word	0x08007e0f
 8007d88:	08007e63 	.word	0x08007e63
 8007d8c:	08007e63 	.word	0x08007e63
 8007d90:	08007e63 	.word	0x08007e63
 8007d94:	08007e1f 	.word	0x08007e1f
 8007d98:	08007e63 	.word	0x08007e63
 8007d9c:	08007e63 	.word	0x08007e63
 8007da0:	08007e63 	.word	0x08007e63
 8007da4:	08007e63 	.word	0x08007e63
 8007da8:	08007e63 	.word	0x08007e63
 8007dac:	08007e63 	.word	0x08007e63
 8007db0:	08007e63 	.word	0x08007e63
 8007db4:	08007e2f 	.word	0x08007e2f
 8007db8:	08007e63 	.word	0x08007e63
 8007dbc:	08007e63 	.word	0x08007e63
 8007dc0:	08007e63 	.word	0x08007e63
 8007dc4:	08007e63 	.word	0x08007e63
 8007dc8:	08007e63 	.word	0x08007e63
 8007dcc:	08007e63 	.word	0x08007e63
 8007dd0:	08007e63 	.word	0x08007e63
 8007dd4:	08007e63 	.word	0x08007e63
 8007dd8:	08007e63 	.word	0x08007e63
 8007ddc:	08007e63 	.word	0x08007e63
 8007de0:	08007e63 	.word	0x08007e63
 8007de4:	08007e63 	.word	0x08007e63
 8007de8:	08007e63 	.word	0x08007e63
 8007dec:	08007e63 	.word	0x08007e63
 8007df0:	08007e63 	.word	0x08007e63
 8007df4:	08007e55 	.word	0x08007e55
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	d02e      	beq.n	8007e5a <UART_SetConfig+0x896>
 8007dfc:	e031      	b.n	8007e62 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dfe:	f7fd fcb3 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8007e02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e04:	e033      	b.n	8007e6e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e06:	f7fd fcc5 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 8007e0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e0c:	e02f      	b.n	8007e6e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e0e:	f107 0314 	add.w	r3, r7, #20
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fc2a 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e1c:	e027      	b.n	8007e6e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e1e:	f107 0308 	add.w	r3, r7, #8
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fd76 	bl	8006914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e2c:	e01f      	b.n	8007e6e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e2e:	4b58      	ldr	r3, [pc, #352]	; (8007f90 <UART_SetConfig+0x9cc>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e3a:	4b55      	ldr	r3, [pc, #340]	; (8007f90 <UART_SetConfig+0x9cc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	08db      	lsrs	r3, r3, #3
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	4a53      	ldr	r2, [pc, #332]	; (8007f94 <UART_SetConfig+0x9d0>)
 8007e46:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e4c:	e00f      	b.n	8007e6e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007e4e:	4b51      	ldr	r3, [pc, #324]	; (8007f94 <UART_SetConfig+0x9d0>)
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e52:	e00c      	b.n	8007e6e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e54:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <UART_SetConfig+0x9c4>)
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e58:	e009      	b.n	8007e6e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e60:	e005      	b.n	8007e6e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80ea 	beq.w	800804a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	4a44      	ldr	r2, [pc, #272]	; (8007f8c <UART_SetConfig+0x9c8>)
 8007e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e88:	005a      	lsls	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	2b0f      	cmp	r3, #15
 8007ea2:	d916      	bls.n	8007ed2 <UART_SetConfig+0x90e>
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eaa:	d212      	bcs.n	8007ed2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f023 030f 	bic.w	r3, r3, #15
 8007eb4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ece:	60da      	str	r2, [r3, #12]
 8007ed0:	e0bb      	b.n	800804a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ed8:	e0b7      	b.n	800804a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	dc4a      	bgt.n	8007f78 <UART_SetConfig+0x9b4>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f2c0 8086 	blt.w	8007ff4 <UART_SetConfig+0xa30>
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	f200 8083 	bhi.w	8007ff4 <UART_SetConfig+0xa30>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <UART_SetConfig+0x930>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f7f 	.word	0x08007f7f
 8007ef8:	08007f99 	.word	0x08007f99
 8007efc:	08007ff5 	.word	0x08007ff5
 8007f00:	08007ff5 	.word	0x08007ff5
 8007f04:	08007fa1 	.word	0x08007fa1
 8007f08:	08007ff5 	.word	0x08007ff5
 8007f0c:	08007ff5 	.word	0x08007ff5
 8007f10:	08007ff5 	.word	0x08007ff5
 8007f14:	08007fb1 	.word	0x08007fb1
 8007f18:	08007ff5 	.word	0x08007ff5
 8007f1c:	08007ff5 	.word	0x08007ff5
 8007f20:	08007ff5 	.word	0x08007ff5
 8007f24:	08007ff5 	.word	0x08007ff5
 8007f28:	08007ff5 	.word	0x08007ff5
 8007f2c:	08007ff5 	.word	0x08007ff5
 8007f30:	08007ff5 	.word	0x08007ff5
 8007f34:	08007fc1 	.word	0x08007fc1
 8007f38:	08007ff5 	.word	0x08007ff5
 8007f3c:	08007ff5 	.word	0x08007ff5
 8007f40:	08007ff5 	.word	0x08007ff5
 8007f44:	08007ff5 	.word	0x08007ff5
 8007f48:	08007ff5 	.word	0x08007ff5
 8007f4c:	08007ff5 	.word	0x08007ff5
 8007f50:	08007ff5 	.word	0x08007ff5
 8007f54:	08007ff5 	.word	0x08007ff5
 8007f58:	08007ff5 	.word	0x08007ff5
 8007f5c:	08007ff5 	.word	0x08007ff5
 8007f60:	08007ff5 	.word	0x08007ff5
 8007f64:	08007ff5 	.word	0x08007ff5
 8007f68:	08007ff5 	.word	0x08007ff5
 8007f6c:	08007ff5 	.word	0x08007ff5
 8007f70:	08007ff5 	.word	0x08007ff5
 8007f74:	08007fe7 	.word	0x08007fe7
 8007f78:	2b40      	cmp	r3, #64	; 0x40
 8007f7a:	d037      	beq.n	8007fec <UART_SetConfig+0xa28>
 8007f7c:	e03a      	b.n	8007ff4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7e:	f7fd fbf3 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8007f82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007f84:	e03c      	b.n	8008000 <UART_SetConfig+0xa3c>
 8007f86:	bf00      	nop
 8007f88:	003d0900 	.word	0x003d0900
 8007f8c:	08008828 	.word	0x08008828
 8007f90:	58024400 	.word	0x58024400
 8007f94:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f98:	f7fd fbfc 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 8007f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007f9e:	e02f      	b.n	8008000 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa0:	f107 0314 	add.w	r3, r7, #20
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fb61 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fae:	e027      	b.n	8008000 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb0:	f107 0308 	add.w	r3, r7, #8
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fcad 	bl	8006914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fbe:	e01f      	b.n	8008000 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	; (8008074 <UART_SetConfig+0xab0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fcc:	4b29      	ldr	r3, [pc, #164]	; (8008074 <UART_SetConfig+0xab0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	4a28      	ldr	r2, [pc, #160]	; (8008078 <UART_SetConfig+0xab4>)
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fde:	e00f      	b.n	8008000 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <UART_SetConfig+0xab4>)
 8007fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fe4:	e00c      	b.n	8008000 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <UART_SetConfig+0xab8>)
 8007fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fea:	e009      	b.n	8008000 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ff2:	e005      	b.n	8008000 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d021      	beq.n	800804a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	4a1d      	ldr	r2, [pc, #116]	; (8008080 <UART_SetConfig+0xabc>)
 800800c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008010:	461a      	mov	r2, r3
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	fbb3 f2f2 	udiv	r2, r3, r2
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	441a      	add	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	fbb2 f3f3 	udiv	r3, r2, r3
 8008028:	b29b      	uxth	r3, r3
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	2b0f      	cmp	r3, #15
 8008030:	d908      	bls.n	8008044 <UART_SetConfig+0xa80>
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008038:	d204      	bcs.n	8008044 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008040:	60da      	str	r2, [r3, #12]
 8008042:	e002      	b.n	800804a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008066:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800806a:	4618      	mov	r0, r3
 800806c:	3738      	adds	r7, #56	; 0x38
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
 8008078:	03d09000 	.word	0x03d09000
 800807c:	003d0900 	.word	0x003d0900
 8008080:	08008828 	.word	0x08008828

08008084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01a      	beq.n	800819a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008182:	d10a      	bne.n	800819a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	605a      	str	r2, [r3, #4]
  }
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d8:	f7f9 f964 	bl	80014a4 <HAL_GetTick>
 80081dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d10e      	bne.n	800820a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f82f 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e025      	b.n	8008256 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b04      	cmp	r3, #4
 8008216:	d10e      	bne.n	8008236 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f819 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e00f      	b.n	8008256 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826e:	e062      	b.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d05e      	beq.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008278:	f7f9 f914 	bl	80014a4 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <UART_WaitOnFlagUntilTimeout+0x30>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11d      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800829c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0201 	bic.w	r2, r2, #1
 80082ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e045      	b.n	8008356 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d02e      	beq.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e6:	d126      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008300:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e00f      	b.n	8008356 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69da      	ldr	r2, [r3, #28]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4013      	ands	r3, r2
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	429a      	cmp	r2, r3
 8008344:	bf0c      	ite	eq
 8008346:	2301      	moveq	r3, #1
 8008348:	2300      	movne	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	461a      	mov	r2, r3
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	429a      	cmp	r2, r3
 8008352:	d08d      	beq.n	8008270 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008374:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008384:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6899      	ldr	r1, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <UART_EndRxTransfer+0x60>)
 80083c0:	400b      	ands	r3, r1
 80083c2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d107      	bne.n	80083dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0210 	bic.w	r2, r2, #16
 80083da:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	effffffe 	.word	0xeffffffe

08008400 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008416:	d014      	beq.n	8008442 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800842e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800843e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008440:	e002      	b.n	8008448 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7f8 fb8c 	bl	8000b60 <HAL_UART_TxCpltCallback>
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff f89a 	bl	8007598 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008464:	bf00      	nop
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008480:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008488:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d109      	bne.n	80084ac <UART_DMAError+0x40>
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2b21      	cmp	r3, #33	; 0x21
 800849c:	d106      	bne.n	80084ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80084a6:	6978      	ldr	r0, [r7, #20]
 80084a8:	f7ff ff59 	bl	800835e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b6:	2b40      	cmp	r3, #64	; 0x40
 80084b8:	d109      	bne.n	80084ce <UART_DMAError+0x62>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b22      	cmp	r3, #34	; 0x22
 80084be:	d106      	bne.n	80084ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80084c8:	6978      	ldr	r0, [r7, #20]
 80084ca:	f7ff ff67 	bl	800839c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d4:	f043 0210 	orr.w	r2, r3, #16
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084de:	6978      	ldr	r0, [r7, #20]
 80084e0:	f7f8 fb4e 	bl	8000b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e4:	bf00      	nop
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7f8 fb38 	bl	8000b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008510:	bf00      	nop
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7f8 fb0e 	bl	8000b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_UARTEx_EnableFifoMode+0x16>
 800859a:	2302      	movs	r3, #2
 800859c:	e02b      	b.n	80085f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2224      	movs	r2, #36	; 0x24
 80085aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0201 	bic.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80085d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f88a 	bl	80086f8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008612:	2302      	movs	r3, #2
 8008614:	e02d      	b.n	8008672 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2224      	movs	r2, #36	; 0x24
 8008622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0201 	bic.w	r2, r2, #1
 800863c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f850 	bl	80086f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800868e:	2302      	movs	r3, #2
 8008690:	e02d      	b.n	80086ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2224      	movs	r2, #36	; 0x24
 800869e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0201 	bic.w	r2, r2, #1
 80086b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f812 	bl	80086f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008718:	e031      	b.n	800877e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800871a:	2310      	movs	r3, #16
 800871c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800871e:	2310      	movs	r3, #16
 8008720:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	0e5b      	lsrs	r3, r3, #25
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	0f5b      	lsrs	r3, r3, #29
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 0307 	and.w	r3, r3, #7
 8008740:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	7b3a      	ldrb	r2, [r7, #12]
 8008746:	4911      	ldr	r1, [pc, #68]	; (800878c <UARTEx_SetNbDataToProcess+0x94>)
 8008748:	5c8a      	ldrb	r2, [r1, r2]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800874e:	7b3a      	ldrb	r2, [r7, #12]
 8008750:	490f      	ldr	r1, [pc, #60]	; (8008790 <UARTEx_SetNbDataToProcess+0x98>)
 8008752:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008754:	fb93 f3f2 	sdiv	r3, r3, r2
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	7b7a      	ldrb	r2, [r7, #13]
 8008764:	4909      	ldr	r1, [pc, #36]	; (800878c <UARTEx_SetNbDataToProcess+0x94>)
 8008766:	5c8a      	ldrb	r2, [r1, r2]
 8008768:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800876c:	7b7a      	ldrb	r2, [r7, #13]
 800876e:	4908      	ldr	r1, [pc, #32]	; (8008790 <UARTEx_SetNbDataToProcess+0x98>)
 8008770:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008772:	fb93 f3f2 	sdiv	r3, r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	08008840 	.word	0x08008840
 8008790:	08008848 	.word	0x08008848

08008794 <__libc_init_array>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	4d0d      	ldr	r5, [pc, #52]	; (80087cc <__libc_init_array+0x38>)
 8008798:	4c0d      	ldr	r4, [pc, #52]	; (80087d0 <__libc_init_array+0x3c>)
 800879a:	1b64      	subs	r4, r4, r5
 800879c:	10a4      	asrs	r4, r4, #2
 800879e:	2600      	movs	r6, #0
 80087a0:	42a6      	cmp	r6, r4
 80087a2:	d109      	bne.n	80087b8 <__libc_init_array+0x24>
 80087a4:	4d0b      	ldr	r5, [pc, #44]	; (80087d4 <__libc_init_array+0x40>)
 80087a6:	4c0c      	ldr	r4, [pc, #48]	; (80087d8 <__libc_init_array+0x44>)
 80087a8:	f000 f820 	bl	80087ec <_init>
 80087ac:	1b64      	subs	r4, r4, r5
 80087ae:	10a4      	asrs	r4, r4, #2
 80087b0:	2600      	movs	r6, #0
 80087b2:	42a6      	cmp	r6, r4
 80087b4:	d105      	bne.n	80087c2 <__libc_init_array+0x2e>
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087bc:	4798      	blx	r3
 80087be:	3601      	adds	r6, #1
 80087c0:	e7ee      	b.n	80087a0 <__libc_init_array+0xc>
 80087c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c6:	4798      	blx	r3
 80087c8:	3601      	adds	r6, #1
 80087ca:	e7f2      	b.n	80087b2 <__libc_init_array+0x1e>
 80087cc:	08008858 	.word	0x08008858
 80087d0:	08008858 	.word	0x08008858
 80087d4:	08008858 	.word	0x08008858
 80087d8:	0800885c 	.word	0x0800885c

080087dc <memset>:
 80087dc:	4402      	add	r2, r0
 80087de:	4603      	mov	r3, r0
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d100      	bne.n	80087e6 <memset+0xa>
 80087e4:	4770      	bx	lr
 80087e6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ea:	e7f9      	b.n	80087e0 <memset+0x4>

080087ec <_init>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	bf00      	nop
 80087f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f2:	bc08      	pop	{r3}
 80087f4:	469e      	mov	lr, r3
 80087f6:	4770      	bx	lr

080087f8 <_fini>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr
