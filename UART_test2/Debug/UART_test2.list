
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009754  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cec  24000040  08009a70  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24001d2c  08009a70  00021d2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d62e  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fb4  00000000  00000000  0003d684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  00041408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374ff  00000000  00000000  00042100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012f20  00000000  00000000  000795ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f404  00000000  00000000  0008c51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001eb923  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e0  00000000  00000000  001eb978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080099d4 	.word	0x080099d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	080099d4 	.word	0x080099d4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
//	length of the recieve buffer array
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005da:	817b      	strh	r3, [r7, #10]
//	length of a half transfer of recieve buffer
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
//	length of transmit buffer
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
//	set the transmit buffer to a known value
	for (int i = 0; i < txCount; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e00f      	b.n	800060e <main+0x3e>
		aTxBuffer[i] = i % 16384;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4aaa      	ldr	r2, [pc, #680]	; (80008ac <main+0x2dc>)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i) {
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	69fa      	ldr	r2, [r7, #28]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4ba6      	ldr	r3, [pc, #664]	; (80008b0 <main+0x2e0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4ba0      	ldr	r3, [pc, #640]	; (80008b0 <main+0x2e0>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b9b      	ldr	r3, [pc, #620]	; (80008b0 <main+0x2e0>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a9a      	ldr	r2, [pc, #616]	; (80008b0 <main+0x2e0>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
	//  SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f001 fa3e 	bl	8001adc <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f978 	bl	8000954 <SystemClock_Config>

//    initialize GPIO
	MX_GPIO_Init();
 8000664:	f000 fb94 	bl	8000d90 <MX_GPIO_Init>
//	initialize the compensation cell to improve slew rate
	HAL_EnableCompensationCell();
 8000668:	f001 fb0a 	bl	8001c80 <HAL_EnableCompensationCell>
//	initialize the DMA, must be done before other peripherals
	MX_DMA_Init();
 800066c:	f000 fb50 	bl	8000d10 <MX_DMA_Init>
//	initialize UART1, going to the ft232 interface
	MX_USART1_UART_Init();
 8000670:	f000 faa6 	bl	8000bc0 <MX_USART1_UART_Init>
//	initialize URT3, going to the STLINK interface
	MX_USART3_UART_Init();
 8000674:	f000 faf2 	bl	8000c5c <MX_USART3_UART_Init>

//	initialize SPI1 interface, going to the breadboard converter
	MX_SPI1_Init();
 8000678:	f000 f9f2 	bl	8000a60 <MX_SPI1_Init>
//	initialize the SPI2 interface, going to the pcb converter
    MX_SPI2_Init();
 800067c:	f000 fa48 	bl	8000b10 <MX_SPI2_Init>

//  stall until the user button is pressed
	while (UserButtonStatus == 0) {
 8000680:	e005      	b.n	800068e <main+0xbe>
		BSP_LED_Toggle(LED1);
 8000682:	2000      	movs	r0, #0
 8000684:	f001 f8c6 	bl	8001814 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f001 fab9 	bl	8001c00 <HAL_Delay>
	while (UserButtonStatus == 0) {
 800068e:	4b89      	ldr	r3, [pc, #548]	; (80008b4 <main+0x2e4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f5      	beq.n	8000682 <main+0xb2>
	}
//	reset the user button status
	UserButtonStatus = 0;
 8000696:	4b87      	ldr	r3, [pc, #540]	; (80008b4 <main+0x2e4>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
//	reset LEDS
	BSP_LED_Off(LED1);
 800069c:	2000      	movs	r0, #0
 800069e:	f001 f88f 	bl	80017c0 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f88c 	bl	80017c0 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f001 f889 	bl	80017c0 <BSP_LED_Off>

	/* Configure communication direction : 1Line */
	SPI_1LINE_RX(&hspi1);
 80006ae:	4b82      	ldr	r3, [pc, #520]	; (80008b8 <main+0x2e8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <main+0x2e8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006bc:	601a      	str	r2, [r3, #0]

//	configure the half transfer callback function to update the wTransferState value
	hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006be:	4b7e      	ldr	r3, [pc, #504]	; (80008b8 <main+0x2e8>)
 80006c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006c2:	4a7e      	ldr	r2, [pc, #504]	; (80008bc <main+0x2ec>)
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40

//	enable the transfer complete and half transfer interupts for SPI1
	SET_BIT(SPI1_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 80006c6:	4b7e      	ldr	r3, [pc, #504]	; (80008c0 <main+0x2f0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a7d      	ldr	r2, [pc, #500]	; (80008c0 <main+0x2f0>)
 80006cc:	f043 0318 	orr.w	r3, r3, #24
 80006d0:	6013      	str	r3, [r2, #0]
//	start the DMA transfer on SPI1, use HAL library to perform initial configurations
	if (HAL_DMA_Start(hspi1.hdmarx, (uint32_t) &hspi1.Instance->RXDR,
 80006d2:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <main+0x2e8>)
 80006d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80006d6:	4b78      	ldr	r3, [pc, #480]	; (80008b8 <main+0x2e8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3330      	adds	r3, #48	; 0x30
 80006dc:	4619      	mov	r1, r3
 80006de:	4a79      	ldr	r2, [pc, #484]	; (80008c4 <main+0x2f4>)
 80006e0:	897b      	ldrh	r3, [r7, #10]
 80006e2:	f001 ff7b 	bl	80025dc <HAL_DMA_Start>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00d      	beq.n	8000708 <main+0x138>
					(uint32_t) aRxBuffer, rxCount) != HAL_OK) {
//		if the DMA initalization was not OK, set the error bit
		SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80006ec:	4b72      	ldr	r3, [pc, #456]	; (80008b8 <main+0x2e8>)
 80006ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	4a70      	ldr	r2, [pc, #448]	; (80008b8 <main+0x2e8>)
 80006f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
//		reset SPI ready state
		hspi1.State = HAL_SPI_STATE_READY;
 80006fc:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <main+0x2e8>)
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
//		call our custom error handler
		Error_Handler();
 8000704:	f000 fc4b 	bl	8000f9e <Error_Handler>
	}

//	set the transfer size to 0 (unlimited)
	MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8000708:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <main+0x2e8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6859      	ldr	r1, [r3, #4]
 800070e:	4b6a      	ldr	r3, [pc, #424]	; (80008b8 <main+0x2e8>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <main+0x2f8>)
 8000714:	400b      	ands	r3, r1
 8000716:	6053      	str	r3, [r2, #4]

//	enable DMA requests on the SPI instance
	SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000718:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <main+0x2e8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <main+0x2e8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000726:	609a      	str	r2, [r3, #8]

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000728:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <main+0x2e8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	691a      	ldr	r2, [r3, #16]
 800072e:	4b62      	ldr	r3, [pc, #392]	; (80008b8 <main+0x2e8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000736:	611a      	str	r2, [r3, #16]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(&hspi1);
 8000738:	4b5f      	ldr	r3, [pc, #380]	; (80008b8 <main+0x2e8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <main+0x2e8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	601a      	str	r2, [r3, #0]

//	start the SPI transfers
	SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000748:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <main+0x2e8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <main+0x2e8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000756:	601a      	str	r2, [r3, #0]

//	wait for the first half of the transfer to complete
	while (wTransferState != TRANSFER_H_COMPLETE) {
 8000758:	e005      	b.n	8000766 <main+0x196>
//		toggle LED2 every 20 ms
		HAL_Delay(20);
 800075a:	2014      	movs	r0, #20
 800075c:	f001 fa50 	bl	8001c00 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8000760:	2002      	movs	r0, #2
 8000762:	f001 f857 	bl	8001814 <BSP_LED_Toggle>
	while (wTransferState != TRANSFER_H_COMPLETE) {
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <main+0x2fc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d1f5      	bne.n	800075a <main+0x18a>
	}
//	reset transfer state
	wTransferState = TRANSFER_WAIT;
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <main+0x2fc>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
//	reset LEDs
	BSP_LED_Off(LED1);
 8000774:	2000      	movs	r0, #0
 8000776:	f001 f823 	bl	80017c0 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800077a:	2001      	movs	r0, #1
 800077c:	f001 f820 	bl	80017c0 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000780:	2002      	movs	r0, #2
 8000782:	f001 f81d 	bl	80017c0 <BSP_LED_Off>
//	transfer data from rxbuffer to tx buffer
//	j is the index for the rx buffer
	int j = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
	aTxBuffer[0] = aRxBuffer[0];
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <main+0x2f4>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <main+0x2dc>)
 8000792:	801a      	strh	r2, [r3, #0]
//	i is the index of the tx buffer
//	j increases by the oversampling ratio for each inciment in i
	for (int i = 1; i < txCount; ++i) {
 8000794:	2301      	movs	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00e      	b.n	80007b8 <main+0x1e8>
		j += OVERSAMPLING;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	3301      	adds	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
		aTxBuffer[i] = aRxBuffer[j];
 80007a0:	4a48      	ldr	r2, [pc, #288]	; (80008c4 <main+0x2f4>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	b299      	uxth	r1, r3
 80007aa:	4a40      	ldr	r2, [pc, #256]	; (80008ac <main+0x2dc>)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < txCount; ++i) {
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbec      	blt.n	800079a <main+0x1ca>
	}
//	Use the HAL driver to transmit the buffer over DMA
//	HAL will initialize many of the settings for us
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer))
 80007c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c4:	4939      	ldr	r1, [pc, #228]	; (80008ac <main+0x2dc>)
 80007c6:	4842      	ldr	r0, [pc, #264]	; (80008d0 <main+0x300>)
 80007c8:	f007 fc96 	bl	80080f8 <HAL_UART_Transmit_DMA>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x206>
			!= HAL_OK) {
//		if it fails, call our error handler
		Error_Handler();
 80007d2:	f000 fbe4 	bl	8000f9e <Error_Handler>
	}
//	Suspend interupts that we no longer need, for the purpose of efficiency
//	suspend the systick
	HAL_SuspendTick();
 80007d6:	f001 fa37 	bl	8001c48 <HAL_SuspendTick>
//	suspend UART3 interupts
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 80007da:	2027      	movs	r0, #39	; 0x27
 80007dc:	f001 fb87 	bl	8001eee <HAL_NVIC_DisableIRQ>
//	suspend DMA interupts for the UART3 channel
	HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 80007e0:	200c      	movs	r0, #12
 80007e2:	f001 fb84 	bl	8001eee <HAL_NVIC_DisableIRQ>
//	suspend DMA interrupts for the SPI channel
	HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 80007e6:	2038      	movs	r0, #56	; 0x38
 80007e8:	f001 fb81 	bl	8001eee <HAL_NVIC_DisableIRQ>
//	reset LEDs
	BSP_LED_Off(LED1);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 ffe7 	bl	80017c0 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 ffe4 	bl	80017c0 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f000 ffe1 	bl	80017c0 <BSP_LED_Off>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		wait for the second half of the receive buffer to finish transferring
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
 80007fe:	bf00      	nop
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <main+0x304>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 0320 	and.w	r3, r3, #32
 8000808:	2b20      	cmp	r3, #32
 800080a:	d1f9      	bne.n	8000800 <main+0x230>
//		clear the transfer complete flag of the SPI channel
		DMA2->LIFCR = DMA_FLAG_TCIF0_4;
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <main+0x304>)
 800080e:	2220      	movs	r2, #32
 8000810:	609a      	str	r2, [r3, #8]
//		the rx buffer index starts at half way through the buffer and goes to the end
		j = rxOffset;
 8000812:	893b      	ldrh	r3, [r7, #8]
 8000814:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[j];
 8000816:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <main+0x2f4>)
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <main+0x2dc>)
 8000822:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e00e      	b.n	8000848 <main+0x278>
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//			j increases by the oversampling ratio for every increment in i
			j += OVERSAMPLING;
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3301      	adds	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 8000830:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <main+0x2f4>)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000838:	b299      	uxth	r1, r3
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <main+0x2dc>)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3301      	adds	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbec      	blt.n	800082a <main+0x25a>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 8000850:	bf00      	nop
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <main+0x308>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	2b40      	cmp	r3, #64	; 0x40
 800085c:	d1f9      	bne.n	8000852 <main+0x282>
//		reset the UART transfer complete flag
		USART3->ICR = UART_CLEAR_TCF;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <main+0x308>)
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	621a      	str	r2, [r3, #32]
//		reset the UART's DMA channel transfer complete and half transfer flags
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <main+0x30c>)
 8000866:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800086a:	609a      	str	r2, [r3, #8]
//		reenable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <main+0x310>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <main+0x310>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x308>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <main+0x308>)
 800087e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000882:	6093      	str	r3, [r2, #8]

//		wait for the first half of the receive buffer to be ready
		while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4) {}
 8000884:	bf00      	nop
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <main+0x304>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	2b10      	cmp	r3, #16
 8000890:	d1f9      	bne.n	8000886 <main+0x2b6>
//		reset the SPI DMA channel half transfer flag
		DMA2->LIFCR = DMA_FLAG_HTIF0_4;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <main+0x304>)
 8000894:	2210      	movs	r2, #16
 8000896:	609a      	str	r2, [r3, #8]
//		the starting index for the recieve buffer is 0
		j = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[0];
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <main+0x2f4>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b02      	ldr	r3, [pc, #8]	; (80008ac <main+0x2dc>)
 80008a4:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 80008a6:	2301      	movs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e02a      	b.n	8000902 <main+0x332>
 80008ac:	24000080 	.word	0x24000080
 80008b0:	e000ed00 	.word	0xe000ed00
 80008b4:	24000060 	.word	0x24000060
 80008b8:	24001b90 	.word	0x24001b90
 80008bc:	08000f45 	.word	0x08000f45
 80008c0:	40020410 	.word	0x40020410
 80008c4:	24000880 	.word	0x24000880
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	2400005c 	.word	0x2400005c
 80008d0:	24001908 	.word	0x24001908
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40004800 	.word	0x40004800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020028 	.word	0x40020028
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//            j increases by the oversampling ratio for each increment of i
			j += OVERSAMPLING;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	3301      	adds	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <main+0x370>)
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f2:	b299      	uxth	r1, r3
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <main+0x374>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbec      	blt.n	80008e4 <main+0x314>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) {}
 800090a:	bf00      	nop
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <main+0x378>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	2b40      	cmp	r3, #64	; 0x40
 8000916:	d1f9      	bne.n	800090c <main+0x33c>
//		clear the transfer complete flag of the UART
		USART3->ICR = UART_CLEAR_TCF;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <main+0x378>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	621a      	str	r2, [r3, #32]
//		clear the transfer complete and half transfer flags of the UART DMA channel
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <main+0x37c>)
 8000920:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000924:	609a      	str	r2, [r3, #8]
//		enable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <main+0x380>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <main+0x380>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <main+0x378>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <main+0x378>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6093      	str	r3, [r2, #8]
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
 800093e:	e75e      	b.n	80007fe <main+0x22e>
 8000940:	24000880 	.word	0x24000880
 8000944:	24000080 	.word	0x24000080
 8000948:	40004800 	.word	0x40004800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020028 	.word	0x40020028

08000954 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	; 0x70
 8000958:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	224c      	movs	r2, #76	; 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f009 f82e 	bl	80099c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f009 f828 	bl	80099c4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000974:	2002      	movs	r0, #2
 8000976:	f004 fc61 	bl	800523c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <SystemClock_Config+0x100>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <SystemClock_Config+0x100>)
 8000984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <SystemClock_Config+0x100>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <SystemClock_Config+0x104>)
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <SystemClock_Config+0x104>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <SystemClock_Config+0x104>)
 80009a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80009ac:	bf00      	nop
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <SystemClock_Config+0x100>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ba:	d1f8      	bne.n	80009ae <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <SystemClock_Config+0x108>)
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f023 0303 	bic.w	r3, r3, #3
 80009c4:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <SystemClock_Config+0x108>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80009cc:	2321      	movs	r3, #33	; 0x21
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009d6:	2301      	movs	r3, #1
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	2302      	movs	r3, #2
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 115;
 80009e6:	2373      	movs	r3, #115	; 0x73
 80009e8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fc52 	bl	80052b0 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a12:	f000 fac4 	bl	8000f9e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a16:	233f      	movs	r3, #63	; 0x3f
 8000a18:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a22:	2308      	movs	r3, #8
 8000a24:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 f847 	bl	8005ad0 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xf8>
		Error_Handler();
 8000a48:	f000 faa9 	bl	8000f9e <Error_Handler>
	}

}
 8000a4c:	bf00      	nop
 8000a4e:	3770      	adds	r7, #112	; 0x70
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024800 	.word	0x58024800
 8000a58:	58000400 	.word	0x58000400
 8000a5c:	58024400 	.word	0x58024400

08000a60 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <MX_SPI1_Init+0xac>)
 8000a68:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a70:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a78:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a7c:	220d      	movs	r2, #13
 8000a7e:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a86:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a94:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.TxCRCInitializationPattern =
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000af4:	f006 feda 	bl	80078ac <HAL_SPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SPI1_Init+0xa2>
		Error_Handler();
 8000afe:	f000 fa4e 	bl	8000f9e <Error_Handler>
	}

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24001b90 	.word	0x24001b90
 8000b0c:	40013000 	.word	0x40013000

08000b10 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi2.Instance = SPI1;
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b16:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <MX_SPI2_Init+0xac>)
 8000b18:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b20:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b28:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi2.Init.DataSize = SPI_DATASIZE_14BIT;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b2c:	220d      	movs	r2, #13
 8000b2e:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b36:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b44:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.TxCRCInitializationPattern =
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000ba4:	f006 fe82 	bl	80078ac <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI2_Init+0xa2>
		Error_Handler();
 8000bae:	f000 f9f6 	bl	8000f9e <Error_Handler>
	}

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24001880 	.word	0x24001880
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <MX_USART1_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 12000000;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <MX_USART1_UART_Init+0x98>)
 8000bce:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be4:	220c      	movs	r2, #12
 8000be6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bf4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c0a:	f007 fa24 	bl	8008056 <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000c14:	f000 f9c3 	bl	8000f9e <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c1c:	f008 fde3 	bl	80097e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000c26:	f000 f9ba 	bl	8000f9e <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c2e:	f008 fe18 	bl	8009862 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000c38:	f000 f9b1 	bl	8000f9e <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c3e:	f008 fd97 	bl	8009770 <HAL_UARTEx_EnableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000c48:	f000 f9a9 	bl	8000f9e <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24001b00 	.word	0x24001b00
 8000c54:	40011000 	.word	0x40011000
 8000c58:	00b71b00 	.word	0x00b71b00

08000c5c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <MX_USART3_UART_Init+0xac>)
 8000c64:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 11978688;
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <MX_USART3_UART_Init+0xb0>)
 8000c6a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c80:	220c      	movs	r2, #12
 8000c82:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c90:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
	huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000caa:	4816      	ldr	r0, [pc, #88]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000cac:	f007 f9d3 	bl	8008056 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART3_UART_Init+0x5e>
		Error_Handler();
 8000cb6:	f000 f972 	bl	8000f9e <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4811      	ldr	r0, [pc, #68]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000cbe:	f008 fd92 	bl	80097e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART3_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000cc8:	f000 f969 	bl	8000f9e <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000cd0:	f008 fdc7 	bl	8009862 <HAL_UARTEx_SetRxFifoThreshold>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART3_UART_Init+0x82>
			!= HAL_OK) {
		Error_Handler();
 8000cda:	f000 f960 	bl	8000f9e <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK) {
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_USART3_UART_Init+0xa8>)
 8000ce0:	f008 fd46 	bl	8009770 <HAL_UARTEx_EnableFifoMode>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x92>
		Error_Handler();
 8000cea:	f000 f958 	bl	8000f9e <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2027      	movs	r0, #39	; 0x27
 8000cf4:	f001 f8d3 	bl	8001e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf8:	2027      	movs	r0, #39	; 0x27
 8000cfa:	f001 f8ea 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24001908 	.word	0x24001908
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	00b6c7c0 	.word	0x00b6c7c0

08000d10 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2100      	movs	r1, #0
 8000d56:	200b      	movs	r0, #11
 8000d58:	f001 f8a1 	bl	8001e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d5c:	200b      	movs	r0, #11
 8000d5e:	f001 f8b8 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2100      	movs	r1, #0
 8000d66:	200c      	movs	r0, #12
 8000d68:	f001 f899 	bl	8001e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d6c:	200c      	movs	r0, #12
 8000d6e:	f001 f8b0 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2100      	movs	r1, #0
 8000d76:	2038      	movs	r0, #56	; 0x38
 8000d78:	f001 f891 	bl	8001e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d7c:	2038      	movs	r0, #56	; 0x38
 8000d7e:	f001 f8a8 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400

08000d90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b57      	ldr	r3, [pc, #348]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a55      	ldr	r2, [pc, #340]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc4:	4b4f      	ldr	r3, [pc, #316]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	4a4e      	ldr	r2, [pc, #312]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd4:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a37      	ldr	r2, [pc, #220]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_GPIO_Init+0x174>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <MX_GPIO_Init+0x178>)
 8000e80:	f004 f98e 	bl	80051a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2102      	movs	r1, #2
 8000e88:	4820      	ldr	r0, [pc, #128]	; (8000f0c <MX_GPIO_Init+0x17c>)
 8000e8a:	f004 f989 	bl	80051a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481b      	ldr	r0, [pc, #108]	; (8000f10 <MX_GPIO_Init+0x180>)
 8000ea4:	f003 ffcc 	bl	8004e40 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000ea8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000eac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_GPIO_Init+0x178>)
 8000ec2:	f003 ffbd 	bl	8004e40 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_GPIO_Init+0x17c>)
 8000ede:	f003 ffaf 	bl	8004e40 <HAL_GPIO_Init>

	BSP_LED_Init(LED1);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fbcc 	bl	8001680 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fbc9 	bl	8001680 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f000 fbc6 	bl	8001680 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 fcb6 	bl	8001868 <BSP_PB_Init>
}
 8000efc:	bf00      	nop
 8000efe:	3730      	adds	r7, #48	; 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58021000 	.word	0x58021000
 8000f10:	58020800 	.word	0x58020800

08000f14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_USER_PIN) {
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f24:	d105      	bne.n	8000f32 <HAL_GPIO_EXTI_Callback+0x1e>
		UserButtonStatus ^= 1;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f083 0301 	eor.w	r3, r3, #1
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f30:	6013      	str	r3, [r2, #0]
	}
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	24000060 	.word	0x24000060

08000f44 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_H_COMPLETE;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <tx_h_complete+0x1c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2400005c 	.word	0x2400005c

08000f64 <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_SPI_ErrorCallback+0x1c>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2400005c 	.word	0x2400005c

08000f84 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f000 fbed 	bl	800176c <BSP_LED_On>
	Error_Handler();
 8000f92:	f000 f804 	bl	8000f9e <Error_Handler>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		BSP_LED_Toggle(LED3);
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fc34 	bl	8001814 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000fac:	2064      	movs	r0, #100	; 0x64
 8000fae:	f000 fe27 	bl	8001c00 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8000fb2:	e7f8      	b.n	8000fa6 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0bc      	sub	sp, #240	; 0xf0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ff0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	22bc      	movs	r2, #188	; 0xbc
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f008 fcdb 	bl	80099c4 <memset>
	if (hspi->Instance == SPI1) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4aa0      	ldr	r2, [pc, #640]	; (8001294 <HAL_SPI_MspInit+0x2ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	f040 8096 	bne.w	8001146 <HAL_SPI_MspInit+0x15e>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	623b      	str	r3, [r7, #32]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	67fb      	str	r3, [r7, #124]	; 0x7c
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001026:	2304      	movs	r3, #4
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800102a:	f240 1317 	movw	r3, #279	; 0x117
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001030:	2320      	movs	r3, #32
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001038:	2302      	movs	r3, #2
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800103c:	2340      	movs	r3, #64	; 0x40
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f005 f8cb 	bl	80061e8 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_SPI_MspInit+0x74>
			Error_Handler();
 8001058:	f7ff ffa1 	bl	8000f9e <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 800105c:	4b8e      	ldr	r3, [pc, #568]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 800105e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001062:	4a8d      	ldr	r2, [pc, #564]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001068:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800106c:	4b8a      	ldr	r3, [pc, #552]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 800106e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b87      	ldr	r3, [pc, #540]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	4a85      	ldr	r2, [pc, #532]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108a:	4b83      	ldr	r3, [pc, #524]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA15 (JTDI)     ------> SPI1_NSS
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 8001098:	f248 0360 	movw	r3, #32864	; 0x8060
 800109c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b2:	2305      	movs	r3, #5
 80010b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010bc:	4619      	mov	r1, r3
 80010be:	4877      	ldr	r0, [pc, #476]	; (800129c <HAL_SPI_MspInit+0x2b4>)
 80010c0:	f003 febe 	bl	8004e40 <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = DMA2_Stream0;
 80010c4:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010c6:	4a77      	ldr	r2, [pc, #476]	; (80012a4 <HAL_SPI_MspInit+0x2bc>)
 80010c8:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010ca:	4b75      	ldr	r3, [pc, #468]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010cc:	2225      	movs	r2, #37	; 0x25
 80010ce:	605a      	str	r2, [r3, #4]
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d0:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010dc:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e2:	611a      	str	r2, [r3, #16]
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e4:	4b6e      	ldr	r3, [pc, #440]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ea:	615a      	str	r2, [r3, #20]
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ec:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f2:	619a      	str	r2, [r3, #24]
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fa:	61da      	str	r2, [r3, #28]
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001108:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001114:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 800111a:	4861      	ldr	r0, [pc, #388]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 800111c:	f000 ff02 	bl	8001f24 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_SPI_MspInit+0x142>
			Error_Handler();
 8001126:	f7ff ff3a 	bl	8000f9e <Error_Handler>
		}

		__HAL_LINKDMA(hspi, hdmarx, hdma_spi1_rx);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a5c      	ldr	r2, [pc, #368]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 800112e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001130:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <HAL_SPI_MspInit+0x2b8>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2023      	movs	r0, #35	; 0x23
 800113c:	f000 feaf 	bl	8001e9e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001140:	2023      	movs	r0, #35	; 0x23
 8001142:	f000 fec6 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}
	if (hspi->Instance == SPI2) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a57      	ldr	r2, [pc, #348]	; (80012a8 <HAL_SPI_MspInit+0x2c0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f040 809d 	bne.w	800128c <HAL_SPI_MspInit+0x2a4>
		/* USER CODE BEGIN SPI2_MspInit 0 */

		/* USER CODE END SPI2_MspInit 0 */
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	623b      	str	r3, [r7, #32]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	67fb      	str	r3, [r7, #124]	; 0x7c
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800115e:	2304      	movs	r3, #4
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001162:	f240 1317 	movw	r3, #279	; 0x117
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001168:	2320      	movs	r3, #32
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 800116c:	2302      	movs	r3, #2
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001170:	2302      	movs	r3, #2
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001178:	2300      	movs	r3, #0
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4618      	mov	r0, r3
 8001186:	f005 f82f 	bl	80061e8 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_SPI_MspInit+0x1ac>
			Error_Handler();
 8001190:	f7ff ff05 	bl	8000f9e <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 8001196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800119a:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a37      	ldr	r2, [pc, #220]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a30      	ldr	r2, [pc, #192]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_SPI_MspInit+0x2b0>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
		 PC2_C     ------> SPI2_MISO
		 PC3_C     ------> SPI2_MOSI
		 PB12     ------> SPI2_NSS
		 PD3     ------> SPI2_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800120c:	230c      	movs	r3, #12
 800120e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001224:	2305      	movs	r3, #5
 8001226:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800122e:	4619      	mov	r1, r3
 8001230:	481e      	ldr	r0, [pc, #120]	; (80012ac <HAL_SPI_MspInit+0x2c4>)
 8001232:	f003 fe05 	bl	8004e40 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001250:	2305      	movs	r3, #5
 8001252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	; (80012b0 <HAL_SPI_MspInit+0x2c8>)
 800125e:	f003 fdef 	bl	8004e40 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001262:	2308      	movs	r3, #8
 8001264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127a:	2305      	movs	r3, #5
 800127c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001284:	4619      	mov	r1, r3
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <HAL_SPI_MspInit+0x2cc>)
 8001288:	f003 fdda 	bl	8004e40 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}

}
 800128c:	bf00      	nop
 800128e:	37f0      	adds	r7, #240	; 0xf0
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40013000 	.word	0x40013000
 8001298:	58024400 	.word	0x58024400
 800129c:	58020000 	.word	0x58020000
 80012a0:	24001c18 	.word	0x24001c18
 80012a4:	40020410 	.word	0x40020410
 80012a8:	40003800 	.word	0x40003800
 80012ac:	58020800 	.word	0x58020800
 80012b0:	58020400 	.word	0x58020400
 80012b4:	58020c00 	.word	0x58020c00

080012b8 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0ba      	sub	sp, #232	; 0xe8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	22bc      	movs	r2, #188	; 0xbc
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 fb73 	bl	80099c4 <memset>
	if (huart->Instance == USART1) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a94      	ldr	r2, [pc, #592]	; (8001534 <HAL_UART_MspInit+0x27c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	f040 8098 	bne.w	800141a <HAL_UART_MspInit+0x162>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80012ee:	2304      	movs	r3, #4
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80012f2:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80012f8:	2309      	movs	r3, #9
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80012fc:	2308      	movs	r3, #8
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001300:	2302      	movs	r3, #2
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001308:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800130a:	2300      	movs	r3, #0
 800130c:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	65bb      	str	r3, [r7, #88]	; 0x58
		PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001312:	2310      	movs	r3, #16
 8001314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	4618      	mov	r0, r3
 800131e:	f004 ff63 	bl	80061e8 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_UART_MspInit+0x74>
			Error_Handler();
 8001328:	f7ff fe39 	bl	8000f9e <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800132c:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_UART_MspInit+0x280>)
 800132e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001332:	4a81      	ldr	r2, [pc, #516]	; (8001538 <HAL_UART_MspInit+0x280>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_UART_MspInit+0x280>)
 800133e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b7b      	ldr	r3, [pc, #492]	; (8001538 <HAL_UART_MspInit+0x280>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a79      	ldr	r2, [pc, #484]	; (8001538 <HAL_UART_MspInit+0x280>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b77      	ldr	r3, [pc, #476]	; (8001538 <HAL_UART_MspInit+0x280>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PB15     ------> USART1_RX
		 PB6     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001382:	2304      	movs	r3, #4
 8001384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800138c:	4619      	mov	r1, r3
 800138e:	486b      	ldr	r0, [pc, #428]	; (800153c <HAL_UART_MspInit+0x284>)
 8001390:	f003 fd56 	bl	8004e40 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4860      	ldr	r0, [pc, #384]	; (800153c <HAL_UART_MspInit+0x284>)
 80013ba:	f003 fd41 	bl	8004e40 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream0;
 80013be:	4b60      	ldr	r3, [pc, #384]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013c0:	4a60      	ldr	r2, [pc, #384]	; (8001544 <HAL_UART_MspInit+0x28c>)
 80013c2:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80013c4:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013c6:	222a      	movs	r2, #42	; 0x2a
 80013c8:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013de:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e4:	4b56      	ldr	r3, [pc, #344]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80013fc:	4850      	ldr	r0, [pc, #320]	; (8001540 <HAL_UART_MspInit+0x288>)
 80013fe:	f000 fd91 	bl	8001f24 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x154>
			Error_Handler();
 8001408:	f7ff fdc9 	bl	8000f9e <Error_Handler>
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_UART_MspInit+0x288>)
 8001410:	679a      	str	r2, [r3, #120]	; 0x78
 8001412:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_UART_MspInit+0x288>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8001418:	e088      	b.n	800152c <HAL_UART_MspInit+0x274>
	} else if (huart->Instance == USART3) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_UART_MspInit+0x290>)
 8001420:	4293      	cmp	r3, r2
 8001422:	f040 8083 	bne.w	800152c <HAL_UART_MspInit+0x274>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800142a:	2304      	movs	r3, #4
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 800142e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001434:	2309      	movs	r3, #9
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001438:	2308      	movs	r3, #8
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 800143c:	2302      	movs	r3, #2
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001446:	2300      	movs	r3, #0
 8001448:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	65bb      	str	r3, [r7, #88]	; 0x58
		PeriphClkInitStruct.Usart234578ClockSelection =
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fec5 	bl	80061e8 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x1b0>
			Error_Handler();
 8001464:	f7ff fd9b 	bl	8000f9e <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_UART_MspInit+0x280>)
 800146a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146e:	4a32      	ldr	r2, [pc, #200]	; (8001538 <HAL_UART_MspInit+0x280>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_UART_MspInit+0x280>)
 800147a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_UART_MspInit+0x280>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <HAL_UART_MspInit+0x280>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_UART_MspInit+0x280>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 80014a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014be:	2307      	movs	r3, #7
 80014c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4820      	ldr	r0, [pc, #128]	; (800154c <HAL_UART_MspInit+0x294>)
 80014cc:	f003 fcb8 	bl	8004e40 <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_UART_MspInit+0x29c>)
 80014d4:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014d8:	222e      	movs	r2, #46	; 0x2e
 80014da:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ee:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_UART_MspInit+0x298>)
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x298>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_UART_MspInit+0x298>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x298>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <HAL_UART_MspInit+0x298>)
 8001512:	f000 fd07 	bl	8001f24 <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0x268>
			Error_Handler();
 800151c:	f7ff fd3f 	bl	8000f9e <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_UART_MspInit+0x298>)
 8001524:	679a      	str	r2, [r3, #120]	; 0x78
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_UART_MspInit+0x298>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800152c:	bf00      	nop
 800152e:	37e8      	adds	r7, #232	; 0xe8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40011000 	.word	0x40011000
 8001538:	58024400 	.word	0x58024400
 800153c:	58020400 	.word	0x58020400
 8001540:	24001a88 	.word	0x24001a88
 8001544:	40020010 	.word	0x40020010
 8001548:	40004800 	.word	0x40004800
 800154c:	58020c00 	.word	0x58020c00
 8001550:	24001a10 	.word	0x24001a10
 8001554:	40020028 	.word	0x40020028

08001558 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80015a4:	f000 fb0c 	bl	8001bc0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015b0:	2002      	movs	r0, #2
 80015b2:	f000 f8db 	bl	800176c <BSP_LED_On>
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DMA1_Stream0_IRQHandler+0x14>)
 80015b8:	f002 f8fc 	bl	80037b4 <HAL_DMA_IRQHandler>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	24001a88 	.word	0x24001a88

080015c4 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015c8:	2002      	movs	r0, #2
 80015ca:	f000 f8cf 	bl	800176c <BSP_LED_On>
	DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <DMA1_Stream1_IRQHandler+0x18>)
 80015d0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80015d4:	609a      	str	r2, [r3, #8]
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000

080015e0 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015e4:	2002      	movs	r0, #2
 80015e6:	f000 f8c1 	bl	800176c <BSP_LED_On>
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA2_Stream0_IRQHandler+0x14>)
 80015ec:	f002 f8e2 	bl	80037b4 <HAL_DMA_IRQHandler>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	24001c18 	.word	0x24001c18

080015f8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f000 f8b5 	bl	800176c <BSP_LED_On>
	HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001602:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA2_Stream1_IRQHandler+0x14>)
 8001604:	f002 f8d6 	bl	80037b4 <HAL_DMA_IRQHandler>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	24001998 	.word	0x24001998

08001610 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001614:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001618:	f003 fdf5 	bl	8005206 <HAL_GPIO_EXTI_IRQHandler>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001624:	2002      	movs	r0, #2
 8001626:	f000 f8a1 	bl	800176c <BSP_LED_On>
	HAL_UART_IRQHandler(&huart1);
 800162a:	4802      	ldr	r0, [pc, #8]	; (8001634 <USART1_IRQHandler+0x14>)
 800162c:	f006 fde4 	bl	80081f8 <HAL_UART_IRQHandler>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24001b00 	.word	0x24001b00

08001638 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 800163c:	2002      	movs	r0, #2
 800163e:	f000 f895 	bl	800176c <BSP_LED_On>
	HAL_UART_IRQHandler(&huart3);
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <USART3_IRQHandler+0x14>)
 8001644:	f006 fdd8 	bl	80081f8 <HAL_UART_IRQHandler>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	24001908 	.word	0x24001908

08001650 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001654:	2002      	movs	r0, #2
 8001656:	f000 f889 	bl	800176c <BSP_LED_On>
	HAL_SPI_IRQHandler(&hspi1);
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <SPI1_IRQHandler+0x14>)
 800165c:	f006 fa28 	bl	8007ab0 <HAL_SPI_IRQHandler>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	24001b90 	.word	0x24001b90

08001668 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 800166c:	2002      	movs	r0, #2
 800166e:	f000 f87d 	bl	800176c <BSP_LED_On>
	HAL_SPI_IRQHandler(&hspi2);
 8001672:	4802      	ldr	r0, [pc, #8]	; (800167c <SPI2_IRQHandler+0x14>)
 8001674:	f006 fa1c 	bl	8007ab0 <HAL_SPI_IRQHandler>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	24001880 	.word	0x24001880

08001680 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <BSP_LED_Init+0x28>
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d006      	beq.n	80016a8 <BSP_LED_Init+0x28>
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d003      	beq.n	80016a8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016a0:	f06f 0301 	mvn.w	r3, #1
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a6:	e055      	b.n	8001754 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <BSP_LED_Init+0xe0>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <BSP_LED_Init+0xe0>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <BSP_LED_Init+0xe0>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	e021      	b.n	8001712 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10f      	bne.n	80016f4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <BSP_LED_Init+0xe0>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <BSP_LED_Init+0xe0>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <BSP_LED_Init+0xe0>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	e00e      	b.n	8001712 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <BSP_LED_Init+0xe0>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <BSP_LED_Init+0xe0>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <BSP_LED_Init+0xe0>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <BSP_LED_Init+0xe4>)
 8001716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <BSP_LED_Init+0xe8>)
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	f107 0218 	add.w	r2, r7, #24
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fb82 	bl	8004e40 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <BSP_LED_Init+0xe8>)
 8001740:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <BSP_LED_Init+0xe4>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	2200      	movs	r2, #0
 800174e:	4619      	mov	r1, r3
 8001750:	f003 fd26 	bl	80051a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001756:	4618      	mov	r0, r3
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	58024400 	.word	0x58024400
 8001764:	080099ec 	.word	0x080099ec
 8001768:	24000000 	.word	0x24000000

0800176c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <BSP_LED_On+0x28>
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d006      	beq.n	8001794 <BSP_LED_On+0x28>
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d003      	beq.n	8001794 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800178c:	f06f 0301 	mvn.w	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e00b      	b.n	80017ac <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <BSP_LED_On+0x4c>)
 8001798:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <BSP_LED_On+0x50>)
 80017a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	f003 fcfa 	bl	80051a0 <HAL_GPIO_WritePin>
  }

  return ret;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24000000 	.word	0x24000000
 80017bc:	080099ec 	.word	0x080099ec

080017c0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d009      	beq.n	80017e8 <BSP_LED_Off+0x28>
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d006      	beq.n	80017e8 <BSP_LED_Off+0x28>
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d003      	beq.n	80017e8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e00b      	b.n	8001800 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <BSP_LED_Off+0x4c>)
 80017ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <BSP_LED_Off+0x50>)
 80017f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	f003 fcd0 	bl	80051a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000000 	.word	0x24000000
 8001810:	080099ec 	.word	0x080099ec

08001814 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <BSP_LED_Toggle+0x28>
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d006      	beq.n	800183c <BSP_LED_Toggle+0x28>
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d003      	beq.n	800183c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e00b      	b.n	8001854 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <BSP_LED_Toggle+0x4c>)
 8001840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4907      	ldr	r1, [pc, #28]	; (8001864 <BSP_LED_Toggle+0x50>)
 8001848:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f003 fcbf 	bl	80051d2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001854:	68fb      	ldr	r3, [r7, #12]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24000000 	.word	0x24000000
 8001864:	080099ec 	.word	0x080099ec

08001868 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <BSP_PB_Init+0xc8>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <BSP_PB_Init+0xc8>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <BSP_PB_Init+0xc8>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800189c:	2302      	movs	r3, #2
 800189e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <BSP_PB_Init+0xcc>)
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fabf 	bl	8004e40 <HAL_GPIO_Init>
 80018c2:	e030      	b.n	8001926 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <BSP_PB_Init+0xd0>)
 80018c6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <BSP_PB_Init+0xcc>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fab2 	bl	8004e40 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4a16      	ldr	r2, [pc, #88]	; (800193c <BSP_PB_Init+0xd4>)
 80018e2:	441a      	add	r2, r3
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4916      	ldr	r1, [pc, #88]	; (8001940 <BSP_PB_Init+0xd8>)
 80018e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f003 fa91 	bl	8004e16 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <BSP_PB_Init+0xd4>)
 80018fa:	1898      	adds	r0, r3, r2
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <BSP_PB_Init+0xdc>)
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	461a      	mov	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	f003 fa66 	bl	8004dd8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800190c:	2028      	movs	r0, #40	; 0x28
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <BSP_PB_Init+0xe0>)
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	f000 fac0 	bl	8001e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800191e:	2328      	movs	r3, #40	; 0x28
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fad6 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024400 	.word	0x58024400
 8001934:	2400000c 	.word	0x2400000c
 8001938:	11110000 	.word	0x11110000
 800193c:	24001c90 	.word	0x24001c90
 8001940:	080099f4 	.word	0x080099f4
 8001944:	24000010 	.word	0x24000010
 8001948:	24000014 	.word	0x24000014

0800194c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fff0 	bl	800194c <BSP_PB_Callback>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001974:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <SystemInit+0xec>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <SystemInit+0xec>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <SystemInit+0xf0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	2b06      	cmp	r3, #6
 800198e:	d807      	bhi.n	80019a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <SystemInit+0xf0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 030f 	bic.w	r3, r3, #15
 8001998:	4a31      	ldr	r2, [pc, #196]	; (8001a60 <SystemInit+0xf0>)
 800199a:	f043 0307 	orr.w	r3, r3, #7
 800199e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <SystemInit+0xf4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2f      	ldr	r2, [pc, #188]	; (8001a64 <SystemInit+0xf4>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <SystemInit+0xf4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <SystemInit+0xf4>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	492b      	ldr	r1, [pc, #172]	; (8001a64 <SystemInit+0xf4>)
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <SystemInit+0xf8>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <SystemInit+0xf0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <SystemInit+0xf0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 030f 	bic.w	r3, r3, #15
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <SystemInit+0xf0>)
 80019d4:	f043 0307 	orr.w	r3, r3, #7
 80019d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <SystemInit+0xf4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <SystemInit+0xf4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <SystemInit+0xf4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <SystemInit+0xf4>)
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <SystemInit+0xfc>)
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <SystemInit+0xf4>)
 80019f4:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <SystemInit+0x100>)
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <SystemInit+0xf4>)
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <SystemInit+0x104>)
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <SystemInit+0xf4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <SystemInit+0xf4>)
 8001a06:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <SystemInit+0x104>)
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <SystemInit+0xf4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <SystemInit+0xf4>)
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <SystemInit+0x104>)
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <SystemInit+0xf4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <SystemInit+0xf4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <SystemInit+0xf4>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <SystemInit+0xf4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <SystemInit+0x108>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <SystemInit+0x10c>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a3a:	d202      	bcs.n	8001a42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <SystemInit+0x110>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <SystemInit+0x114>)
 8001a44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a48:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SystemInit+0xec>)
 8001a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a50:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	52002000 	.word	0x52002000
 8001a64:	58024400 	.word	0x58024400
 8001a68:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a6c:	02020200 	.word	0x02020200
 8001a70:	01ff0000 	.word	0x01ff0000
 8001a74:	01010280 	.word	0x01010280
 8001a78:	5c001000 	.word	0x5c001000
 8001a7c:	ffff0000 	.word	0xffff0000
 8001a80:	51008108 	.word	0x51008108
 8001a84:	52004000 	.word	0x52004000

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a8c:	f7ff ff70 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f007 ff61 	bl	800997c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7fe fd89 	bl	80005d0 <main>
  bx  lr
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ac4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ac8:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001acc:	08009a48 	.word	0x08009a48
  ldr r2, =_sbss
 8001ad0:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001ad4:	24001d2c 	.word	0x24001d2c

08001ad8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC3_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f000 f9d0 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ae8:	f004 f9a8 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_Init+0x68>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	4913      	ldr	r1, [pc, #76]	; (8001b48 <HAL_Init+0x6c>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_Init+0x68>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_Init+0x6c>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_Init+0x70>)
 8001b1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b20:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_Init+0x74>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f814 	bl	8001b54 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e002      	b.n	8001b3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b36:	f7ff fa3d 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58024400 	.word	0x58024400
 8001b48:	080099f8 	.word	0x080099f8
 8001b4c:	2400001c 	.word	0x2400001c
 8001b50:	24000018 	.word	0x24000018

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_InitTick+0x60>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e021      	b.n	8001bac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_InitTick+0x64>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_InitTick+0x60>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f9c3 	bl	8001f0a <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 f97f 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x68>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	24000024 	.word	0x24000024
 8001bb8:	24000018 	.word	0x24000018
 8001bbc:	24000020 	.word	0x24000020

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	24000024 	.word	0x24000024
 8001be4:	24001d28 	.word	0x24001d28

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	24001d28 	.word	0x24001d28

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000024 	.word	0x24000024

08001c48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_SuspendTick+0x1c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_SuspendTick+0x1c>)
 8001c52:	f023 0302 	bic.w	r3, r3, #2
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetREVID+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0c1b      	lsrs	r3, r3, #16
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	5c001000 	.word	0x5c001000

08001c80 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_EnableCompensationCell+0x1c>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_EnableCompensationCell+0x1c>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	58000400 	.word	0x58000400

08001ca0 <__NVIC_SetPriorityGrouping>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00
 8001ce4:	05fa0000 	.word	0x05fa0000

08001ce8 <__NVIC_GetPriorityGrouping>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_DisableIRQ>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db12      	blt.n	8001d78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	490a      	ldr	r1, [pc, #40]	; (8001d84 <__NVIC_DisableIRQ+0x44>)
 8001d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	3320      	adds	r3, #32
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6c:	f3bf 8f4f 	dsb	sy
}
 8001d70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d72:	f3bf 8f6f 	isb	sy
}
 8001d76:	bf00      	nop
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f7ff ff8e 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff05 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff1c 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff0f 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff1f 	bl	8001d40 <__NVIC_DisableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff96 	bl	8001e44 <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff fe5c 	bl	8001be8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e316      	b.n	800256a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a66      	ldr	r2, [pc, #408]	; (80020dc <HAL_DMA_Init+0x1b8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d04a      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_DMA_Init+0x1bc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d045      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a63      	ldr	r2, [pc, #396]	; (80020e4 <HAL_DMA_Init+0x1c0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d040      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a62      	ldr	r2, [pc, #392]	; (80020e8 <HAL_DMA_Init+0x1c4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d03b      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a60      	ldr	r2, [pc, #384]	; (80020ec <HAL_DMA_Init+0x1c8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d036      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a5f      	ldr	r2, [pc, #380]	; (80020f0 <HAL_DMA_Init+0x1cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d031      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a5d      	ldr	r2, [pc, #372]	; (80020f4 <HAL_DMA_Init+0x1d0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02c      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_DMA_Init+0x1d4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d027      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a5a      	ldr	r2, [pc, #360]	; (80020fc <HAL_DMA_Init+0x1d8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d022      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a59      	ldr	r2, [pc, #356]	; (8002100 <HAL_DMA_Init+0x1dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01d      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a57      	ldr	r2, [pc, #348]	; (8002104 <HAL_DMA_Init+0x1e0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d018      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a56      	ldr	r2, [pc, #344]	; (8002108 <HAL_DMA_Init+0x1e4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a54      	ldr	r2, [pc, #336]	; (800210c <HAL_DMA_Init+0x1e8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00e      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a53      	ldr	r2, [pc, #332]	; (8002110 <HAL_DMA_Init+0x1ec>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a51      	ldr	r2, [pc, #324]	; (8002114 <HAL_DMA_Init+0x1f0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_Init+0xb8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a50      	ldr	r2, [pc, #320]	; (8002118 <HAL_DMA_Init+0x1f4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Init+0xbc>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_DMA_Init+0xbe>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 813b 	beq.w	800225e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a37      	ldr	r2, [pc, #220]	; (80020dc <HAL_DMA_Init+0x1b8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d04a      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <HAL_DMA_Init+0x1bc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d045      	beq.n	8002098 <HAL_DMA_Init+0x174>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a34      	ldr	r2, [pc, #208]	; (80020e4 <HAL_DMA_Init+0x1c0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d040      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <HAL_DMA_Init+0x1c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d03b      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a31      	ldr	r2, [pc, #196]	; (80020ec <HAL_DMA_Init+0x1c8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d036      	beq.n	8002098 <HAL_DMA_Init+0x174>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <HAL_DMA_Init+0x1cc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d031      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <HAL_DMA_Init+0x1d0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02c      	beq.n	8002098 <HAL_DMA_Init+0x174>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <HAL_DMA_Init+0x1d4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d027      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_DMA_Init+0x1d8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d022      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_DMA_Init+0x1dc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d01d      	beq.n	8002098 <HAL_DMA_Init+0x174>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_DMA_Init+0x1e0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d018      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_DMA_Init+0x1e4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_DMA_Init+0x1e8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00e      	beq.n	8002098 <HAL_DMA_Init+0x174>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <HAL_DMA_Init+0x1ec>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_DMA_Init+0x174>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_DMA_Init+0x1f0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_DMA_Init+0x174>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_DMA_Init+0x1f4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d108      	bne.n	80020aa <HAL_DMA_Init+0x186>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e007      	b.n	80020ba <HAL_DMA_Init+0x196>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020ba:	e02f      	b.n	800211c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020bc:	f7ff fd94 	bl	8001be8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d928      	bls.n	800211c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e246      	b.n	800256a <HAL_DMA_Init+0x646>
 80020dc:	40020010 	.word	0x40020010
 80020e0:	40020028 	.word	0x40020028
 80020e4:	40020040 	.word	0x40020040
 80020e8:	40020058 	.word	0x40020058
 80020ec:	40020070 	.word	0x40020070
 80020f0:	40020088 	.word	0x40020088
 80020f4:	400200a0 	.word	0x400200a0
 80020f8:	400200b8 	.word	0x400200b8
 80020fc:	40020410 	.word	0x40020410
 8002100:	40020428 	.word	0x40020428
 8002104:	40020440 	.word	0x40020440
 8002108:	40020458 	.word	0x40020458
 800210c:	40020470 	.word	0x40020470
 8002110:	40020488 	.word	0x40020488
 8002114:	400204a0 	.word	0x400204a0
 8002118:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1c8      	bne.n	80020bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4b83      	ldr	r3, [pc, #524]	; (8002344 <HAL_DMA_Init+0x420>)
 8002136:	4013      	ands	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002142:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b04      	cmp	r3, #4
 800216e:	d107      	bne.n	8002180 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4313      	orrs	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002180:	4b71      	ldr	r3, [pc, #452]	; (8002348 <HAL_DMA_Init+0x424>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b71      	ldr	r3, [pc, #452]	; (800234c <HAL_DMA_Init+0x428>)
 8002186:	4013      	ands	r3, r2
 8002188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218c:	d328      	bcc.n	80021e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b28      	cmp	r3, #40	; 0x28
 8002194:	d903      	bls.n	800219e <HAL_DMA_Init+0x27a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b2e      	cmp	r3, #46	; 0x2e
 800219c:	d917      	bls.n	80021ce <HAL_DMA_Init+0x2aa>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b3e      	cmp	r3, #62	; 0x3e
 80021a4:	d903      	bls.n	80021ae <HAL_DMA_Init+0x28a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b42      	cmp	r3, #66	; 0x42
 80021ac:	d90f      	bls.n	80021ce <HAL_DMA_Init+0x2aa>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b46      	cmp	r3, #70	; 0x46
 80021b4:	d903      	bls.n	80021be <HAL_DMA_Init+0x29a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b48      	cmp	r3, #72	; 0x48
 80021bc:	d907      	bls.n	80021ce <HAL_DMA_Init+0x2aa>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b4e      	cmp	r3, #78	; 0x4e
 80021c4:	d905      	bls.n	80021d2 <HAL_DMA_Init+0x2ae>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b52      	cmp	r3, #82	; 0x52
 80021cc:	d801      	bhi.n	80021d2 <HAL_DMA_Init+0x2ae>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_DMA_Init+0x2b0>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f023 0307 	bic.w	r3, r3, #7
 80021f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b04      	cmp	r3, #4
 8002208:	d117      	bne.n	800223a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f002 fc51 	bl	8004ac4 <DMA_CheckFifoParam>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e197      	b.n	800256a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f002 fb8c 	bl	8004960 <DMA_CalcBaseAndBitshift>
 8002248:	4603      	mov	r3, r0
 800224a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	223f      	movs	r2, #63	; 0x3f
 8002256:	409a      	lsls	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e0cd      	b.n	80023fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <HAL_DMA_Init+0x42c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_DMA_Init+0x430>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01d      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a38      	ldr	r2, [pc, #224]	; (8002358 <HAL_DMA_Init+0x434>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d018      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a36      	ldr	r2, [pc, #216]	; (800235c <HAL_DMA_Init+0x438>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <HAL_DMA_Init+0x43c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a33      	ldr	r2, [pc, #204]	; (8002364 <HAL_DMA_Init+0x440>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a32      	ldr	r2, [pc, #200]	; (8002368 <HAL_DMA_Init+0x444>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Init+0x38a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a30      	ldr	r2, [pc, #192]	; (800236c <HAL_DMA_Init+0x448>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_DMA_Init+0x38e>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_Init+0x390>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8097 	beq.w	80023e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_DMA_Init+0x42c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d021      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_DMA_Init+0x430>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01c      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <HAL_DMA_Init+0x434>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d017      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_DMA_Init+0x438>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d012      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_DMA_Init+0x43c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00d      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <HAL_DMA_Init+0x440>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d008      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_DMA_Init+0x444>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_Init+0x3e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_DMA_Init+0x448>)
 8002306:	4293      	cmp	r3, r2
 8002308:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_DMA_Init+0x44c>)
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d020      	beq.n	8002374 <HAL_DMA_Init+0x450>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b80      	cmp	r3, #128	; 0x80
 8002338:	d102      	bne.n	8002340 <HAL_DMA_Init+0x41c>
 800233a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800233e:	e01a      	b.n	8002376 <HAL_DMA_Init+0x452>
 8002340:	2300      	movs	r3, #0
 8002342:	e018      	b.n	8002376 <HAL_DMA_Init+0x452>
 8002344:	fe10803f 	.word	0xfe10803f
 8002348:	5c001000 	.word	0x5c001000
 800234c:	ffff0000 	.word	0xffff0000
 8002350:	58025408 	.word	0x58025408
 8002354:	5802541c 	.word	0x5802541c
 8002358:	58025430 	.word	0x58025430
 800235c:	58025444 	.word	0x58025444
 8002360:	58025458 	.word	0x58025458
 8002364:	5802546c 	.word	0x5802546c
 8002368:	58025480 	.word	0x58025480
 800236c:	58025494 	.word	0x58025494
 8002370:	fffe000f 	.word	0xfffe000f
 8002374:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800237c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800238c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800239c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b6e      	ldr	r3, [pc, #440]	; (8002574 <HAL_DMA_Init+0x650>)
 80023bc:	4413      	add	r3, r2
 80023be:	4a6e      	ldr	r2, [pc, #440]	; (8002578 <HAL_DMA_Init+0x654>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f002 fac7 	bl	8004960 <DMA_CalcBaseAndBitshift>
 80023d2:	4603      	mov	r3, r0
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2201      	movs	r2, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e008      	b.n	80023fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0b7      	b.n	800256a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a5f      	ldr	r2, [pc, #380]	; (800257c <HAL_DMA_Init+0x658>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d072      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_DMA_Init+0x65c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d06d      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5c      	ldr	r2, [pc, #368]	; (8002584 <HAL_DMA_Init+0x660>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d068      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a5a      	ldr	r2, [pc, #360]	; (8002588 <HAL_DMA_Init+0x664>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d063      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a59      	ldr	r2, [pc, #356]	; (800258c <HAL_DMA_Init+0x668>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d05e      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_DMA_Init+0x66c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d059      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_DMA_Init+0x670>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d054      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_DMA_Init+0x674>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04f      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a53      	ldr	r2, [pc, #332]	; (800259c <HAL_DMA_Init+0x678>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d04a      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <HAL_DMA_Init+0x67c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d045      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_DMA_Init+0x680>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d040      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a4e      	ldr	r2, [pc, #312]	; (80025a8 <HAL_DMA_Init+0x684>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d03b      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_DMA_Init+0x688>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d036      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_DMA_Init+0x68c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d031      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_DMA_Init+0x690>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d02c      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_DMA_Init+0x694>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d027      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a47      	ldr	r2, [pc, #284]	; (80025bc <HAL_DMA_Init+0x698>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a45      	ldr	r2, [pc, #276]	; (80025c0 <HAL_DMA_Init+0x69c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01d      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_DMA_Init+0x6a0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d018      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_DMA_Init+0x6a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a41      	ldr	r2, [pc, #260]	; (80025cc <HAL_DMA_Init+0x6a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3f      	ldr	r2, [pc, #252]	; (80025d0 <HAL_DMA_Init+0x6ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a3e      	ldr	r2, [pc, #248]	; (80025d4 <HAL_DMA_Init+0x6b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_DMA_Init+0x5c6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_DMA_Init+0x6b4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_DMA_Init+0x5ca>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_DMA_Init+0x5cc>
 80024ee:	2300      	movs	r3, #0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d032      	beq.n	800255a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f002 fb61 	bl	8004bbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d102      	bne.n	8002508 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800251c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_DMA_Init+0x624>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b08      	cmp	r3, #8
 800252c:	d80c      	bhi.n	8002548 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f002 fbde 	bl	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e008      	b.n	800255a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	a7fdabf8 	.word	0xa7fdabf8
 8002578:	cccccccd 	.word	0xcccccccd
 800257c:	40020010 	.word	0x40020010
 8002580:	40020028 	.word	0x40020028
 8002584:	40020040 	.word	0x40020040
 8002588:	40020058 	.word	0x40020058
 800258c:	40020070 	.word	0x40020070
 8002590:	40020088 	.word	0x40020088
 8002594:	400200a0 	.word	0x400200a0
 8002598:	400200b8 	.word	0x400200b8
 800259c:	40020410 	.word	0x40020410
 80025a0:	40020428 	.word	0x40020428
 80025a4:	40020440 	.word	0x40020440
 80025a8:	40020458 	.word	0x40020458
 80025ac:	40020470 	.word	0x40020470
 80025b0:	40020488 	.word	0x40020488
 80025b4:	400204a0 	.word	0x400204a0
 80025b8:	400204b8 	.word	0x400204b8
 80025bc:	58025408 	.word	0x58025408
 80025c0:	5802541c 	.word	0x5802541c
 80025c4:	58025430 	.word	0x58025430
 80025c8:	58025444 	.word	0x58025444
 80025cc:	58025458 	.word	0x58025458
 80025d0:	5802546c 	.word	0x5802546c
 80025d4:	58025480 	.word	0x58025480
 80025d8:	58025494 	.word	0x58025494

080025dc <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0ec      	b.n	80027d2 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Start+0x2a>
 8002602:	2302      	movs	r3, #2
 8002604:	e0e5      	b.n	80027d2 <HAL_DMA_Start+0x1f6>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	f040 80d0 	bne.w	80027bc <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6b      	ldr	r2, [pc, #428]	; (80027dc <HAL_DMA_Start+0x200>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d04a      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_DMA_Start+0x204>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d045      	beq.n	80026ca <HAL_DMA_Start+0xee>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a68      	ldr	r2, [pc, #416]	; (80027e4 <HAL_DMA_Start+0x208>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d040      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a66      	ldr	r2, [pc, #408]	; (80027e8 <HAL_DMA_Start+0x20c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d03b      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_DMA_Start+0x210>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d036      	beq.n	80026ca <HAL_DMA_Start+0xee>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a63      	ldr	r2, [pc, #396]	; (80027f0 <HAL_DMA_Start+0x214>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a62      	ldr	r2, [pc, #392]	; (80027f4 <HAL_DMA_Start+0x218>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d02c      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a60      	ldr	r2, [pc, #384]	; (80027f8 <HAL_DMA_Start+0x21c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d027      	beq.n	80026ca <HAL_DMA_Start+0xee>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5f      	ldr	r2, [pc, #380]	; (80027fc <HAL_DMA_Start+0x220>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <HAL_DMA_Start+0x224>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01d      	beq.n	80026ca <HAL_DMA_Start+0xee>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5c      	ldr	r2, [pc, #368]	; (8002804 <HAL_DMA_Start+0x228>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_DMA_Start+0xee>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5a      	ldr	r2, [pc, #360]	; (8002808 <HAL_DMA_Start+0x22c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_DMA_Start+0xee>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a59      	ldr	r2, [pc, #356]	; (800280c <HAL_DMA_Start+0x230>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Start+0xee>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a57      	ldr	r2, [pc, #348]	; (8002810 <HAL_DMA_Start+0x234>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_DMA_Start+0xee>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a56      	ldr	r2, [pc, #344]	; (8002814 <HAL_DMA_Start+0x238>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Start+0xee>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_DMA_Start+0x23c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <HAL_DMA_Start+0x100>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <HAL_DMA_Start+0x110>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f001 ff88 	bl	8004608 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_DMA_Start+0x200>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d04a      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a36      	ldr	r2, [pc, #216]	; (80027e0 <HAL_DMA_Start+0x204>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d045      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a34      	ldr	r2, [pc, #208]	; (80027e4 <HAL_DMA_Start+0x208>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d040      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a33      	ldr	r2, [pc, #204]	; (80027e8 <HAL_DMA_Start+0x20c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d03b      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a31      	ldr	r2, [pc, #196]	; (80027ec <HAL_DMA_Start+0x210>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d036      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_DMA_Start+0x214>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d031      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2e      	ldr	r2, [pc, #184]	; (80027f4 <HAL_DMA_Start+0x218>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02c      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <HAL_DMA_Start+0x21c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d027      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <HAL_DMA_Start+0x220>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <HAL_DMA_Start+0x224>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01d      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a28      	ldr	r2, [pc, #160]	; (8002804 <HAL_DMA_Start+0x228>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a27      	ldr	r2, [pc, #156]	; (8002808 <HAL_DMA_Start+0x22c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a25      	ldr	r2, [pc, #148]	; (800280c <HAL_DMA_Start+0x230>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a24      	ldr	r2, [pc, #144]	; (8002810 <HAL_DMA_Start+0x234>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a22      	ldr	r2, [pc, #136]	; (8002814 <HAL_DMA_Start+0x238>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_Start+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <HAL_DMA_Start+0x23c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <HAL_DMA_Start+0x1ce>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e012      	b.n	80027d0 <HAL_DMA_Start+0x1f4>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e009      	b.n	80027d0 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40020010 	.word	0x40020010
 80027e0:	40020028 	.word	0x40020028
 80027e4:	40020040 	.word	0x40020040
 80027e8:	40020058 	.word	0x40020058
 80027ec:	40020070 	.word	0x40020070
 80027f0:	40020088 	.word	0x40020088
 80027f4:	400200a0 	.word	0x400200a0
 80027f8:	400200b8 	.word	0x400200b8
 80027fc:	40020410 	.word	0x40020410
 8002800:	40020428 	.word	0x40020428
 8002804:	40020440 	.word	0x40020440
 8002808:	40020458 	.word	0x40020458
 800280c:	40020470 	.word	0x40020470
 8002810:	40020488 	.word	0x40020488
 8002814:	400204a0 	.word	0x400204a0
 8002818:	400204b8 	.word	0x400204b8

0800281c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e226      	b.n	8002c86 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_DMA_Start_IT+0x2a>
 8002842:	2302      	movs	r3, #2
 8002844:	e21f      	b.n	8002c86 <HAL_DMA_Start_IT+0x46a>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 820a 	bne.w	8002c70 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a68      	ldr	r2, [pc, #416]	; (8002a10 <HAL_DMA_Start_IT+0x1f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d04a      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a66      	ldr	r2, [pc, #408]	; (8002a14 <HAL_DMA_Start_IT+0x1f8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d045      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <HAL_DMA_Start_IT+0x1fc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d040      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a63      	ldr	r2, [pc, #396]	; (8002a1c <HAL_DMA_Start_IT+0x200>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d03b      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <HAL_DMA_Start_IT+0x204>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d036      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a60      	ldr	r2, [pc, #384]	; (8002a24 <HAL_DMA_Start_IT+0x208>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d031      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5f      	ldr	r2, [pc, #380]	; (8002a28 <HAL_DMA_Start_IT+0x20c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d02c      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5d      	ldr	r2, [pc, #372]	; (8002a2c <HAL_DMA_Start_IT+0x210>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d027      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_DMA_Start_IT+0x214>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d022      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <HAL_DMA_Start_IT+0x218>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01d      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a59      	ldr	r2, [pc, #356]	; (8002a38 <HAL_DMA_Start_IT+0x21c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d018      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a57      	ldr	r2, [pc, #348]	; (8002a3c <HAL_DMA_Start_IT+0x220>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a56      	ldr	r2, [pc, #344]	; (8002a40 <HAL_DMA_Start_IT+0x224>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_DMA_Start_IT+0x228>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_DMA_Start_IT+0x22c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_DMA_Start_IT+0xee>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a51      	ldr	r2, [pc, #324]	; (8002a4c <HAL_DMA_Start_IT+0x230>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <HAL_DMA_Start_IT+0x100>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e007      	b.n	800292c <HAL_DMA_Start_IT+0x110>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f001 fe68 	bl	8004608 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <HAL_DMA_Start_IT+0x1f4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d04a      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <HAL_DMA_Start_IT+0x1f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d045      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_DMA_Start_IT+0x1fc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d040      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a30      	ldr	r2, [pc, #192]	; (8002a1c <HAL_DMA_Start_IT+0x200>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d03b      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <HAL_DMA_Start_IT+0x204>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d036      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2d      	ldr	r2, [pc, #180]	; (8002a24 <HAL_DMA_Start_IT+0x208>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d031      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <HAL_DMA_Start_IT+0x20c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02c      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <HAL_DMA_Start_IT+0x210>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d027      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <HAL_DMA_Start_IT+0x214>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d022      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <HAL_DMA_Start_IT+0x218>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d01d      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <HAL_DMA_Start_IT+0x21c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_DMA_Start_IT+0x220>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_DMA_Start_IT+0x224>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_DMA_Start_IT+0x228>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_DMA_Start_IT+0x22c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_DMA_Start_IT+0x1bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_DMA_Start_IT+0x230>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Start_IT+0x1c0>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_DMA_Start_IT+0x1c2>
 80029dc:	2300      	movs	r3, #0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 021e 	bic.w	r2, r3, #30
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0216 	orr.w	r2, r2, #22
 80029f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03e      	beq.n	8002a7c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0208 	orr.w	r2, r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e035      	b.n	8002a7c <HAL_DMA_Start_IT+0x260>
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40020028 	.word	0x40020028
 8002a18:	40020040 	.word	0x40020040
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	40020070 	.word	0x40020070
 8002a24:	40020088 	.word	0x40020088
 8002a28:	400200a0 	.word	0x400200a0
 8002a2c:	400200b8 	.word	0x400200b8
 8002a30:	40020410 	.word	0x40020410
 8002a34:	40020428 	.word	0x40020428
 8002a38:	40020440 	.word	0x40020440
 8002a3c:	40020458 	.word	0x40020458
 8002a40:	40020470 	.word	0x40020470
 8002a44:	40020488 	.word	0x40020488
 8002a48:	400204a0 	.word	0x400204a0
 8002a4c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020e 	bic.w	r2, r3, #14
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 020a 	orr.w	r2, r2, #10
 8002a62:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0204 	orr.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a83      	ldr	r2, [pc, #524]	; (8002c90 <HAL_DMA_Start_IT+0x474>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d072      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a82      	ldr	r2, [pc, #520]	; (8002c94 <HAL_DMA_Start_IT+0x478>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d06d      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a80      	ldr	r2, [pc, #512]	; (8002c98 <HAL_DMA_Start_IT+0x47c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d068      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7f      	ldr	r2, [pc, #508]	; (8002c9c <HAL_DMA_Start_IT+0x480>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d063      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a7d      	ldr	r2, [pc, #500]	; (8002ca0 <HAL_DMA_Start_IT+0x484>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d05e      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7c      	ldr	r2, [pc, #496]	; (8002ca4 <HAL_DMA_Start_IT+0x488>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d059      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <HAL_DMA_Start_IT+0x48c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d054      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a79      	ldr	r2, [pc, #484]	; (8002cac <HAL_DMA_Start_IT+0x490>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04f      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a77      	ldr	r2, [pc, #476]	; (8002cb0 <HAL_DMA_Start_IT+0x494>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d04a      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a76      	ldr	r2, [pc, #472]	; (8002cb4 <HAL_DMA_Start_IT+0x498>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d045      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a74      	ldr	r2, [pc, #464]	; (8002cb8 <HAL_DMA_Start_IT+0x49c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d040      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	; (8002cbc <HAL_DMA_Start_IT+0x4a0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d03b      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a71      	ldr	r2, [pc, #452]	; (8002cc0 <HAL_DMA_Start_IT+0x4a4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d036      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a70      	ldr	r2, [pc, #448]	; (8002cc4 <HAL_DMA_Start_IT+0x4a8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d031      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_DMA_Start_IT+0x4ac>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02c      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6d      	ldr	r2, [pc, #436]	; (8002ccc <HAL_DMA_Start_IT+0x4b0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d027      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6b      	ldr	r2, [pc, #428]	; (8002cd0 <HAL_DMA_Start_IT+0x4b4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d022      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <HAL_DMA_Start_IT+0x4b8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d01d      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a68      	ldr	r2, [pc, #416]	; (8002cd8 <HAL_DMA_Start_IT+0x4bc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d018      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_DMA_Start_IT+0x4c0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d013      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a65      	ldr	r2, [pc, #404]	; (8002ce0 <HAL_DMA_Start_IT+0x4c4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a64      	ldr	r2, [pc, #400]	; (8002ce4 <HAL_DMA_Start_IT+0x4c8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a62      	ldr	r2, [pc, #392]	; (8002ce8 <HAL_DMA_Start_IT+0x4cc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_DMA_Start_IT+0x350>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a61      	ldr	r2, [pc, #388]	; (8002cec <HAL_DMA_Start_IT+0x4d0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_DMA_Start_IT+0x354>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_DMA_Start_IT+0x356>
 8002b70:	2300      	movs	r3, #0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01a      	beq.n	8002bac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002baa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a37      	ldr	r2, [pc, #220]	; (8002c90 <HAL_DMA_Start_IT+0x474>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d04a      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <HAL_DMA_Start_IT+0x478>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d045      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_DMA_Start_IT+0x47c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d040      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <HAL_DMA_Start_IT+0x480>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d03b      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_DMA_Start_IT+0x484>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d036      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a30      	ldr	r2, [pc, #192]	; (8002ca4 <HAL_DMA_Start_IT+0x488>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d031      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2e      	ldr	r2, [pc, #184]	; (8002ca8 <HAL_DMA_Start_IT+0x48c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02c      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <HAL_DMA_Start_IT+0x490>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d027      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2b      	ldr	r2, [pc, #172]	; (8002cb0 <HAL_DMA_Start_IT+0x494>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_DMA_Start_IT+0x498>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01d      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <HAL_DMA_Start_IT+0x49c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <HAL_DMA_Start_IT+0x4a0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <HAL_DMA_Start_IT+0x4a4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <HAL_DMA_Start_IT+0x4a8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <HAL_DMA_Start_IT+0x4ac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_DMA_Start_IT+0x430>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <HAL_DMA_Start_IT+0x4b0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d108      	bne.n	8002c5e <HAL_DMA_Start_IT+0x442>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e012      	b.n	8002c84 <HAL_DMA_Start_IT+0x468>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e009      	b.n	8002c84 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020010 	.word	0x40020010
 8002c94:	40020028 	.word	0x40020028
 8002c98:	40020040 	.word	0x40020040
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	40020070 	.word	0x40020070
 8002ca4:	40020088 	.word	0x40020088
 8002ca8:	400200a0 	.word	0x400200a0
 8002cac:	400200b8 	.word	0x400200b8
 8002cb0:	40020410 	.word	0x40020410
 8002cb4:	40020428 	.word	0x40020428
 8002cb8:	40020440 	.word	0x40020440
 8002cbc:	40020458 	.word	0x40020458
 8002cc0:	40020470 	.word	0x40020470
 8002cc4:	40020488 	.word	0x40020488
 8002cc8:	400204a0 	.word	0x400204a0
 8002ccc:	400204b8 	.word	0x400204b8
 8002cd0:	58025408 	.word	0x58025408
 8002cd4:	5802541c 	.word	0x5802541c
 8002cd8:	58025430 	.word	0x58025430
 8002cdc:	58025444 	.word	0x58025444
 8002ce0:	58025458 	.word	0x58025458
 8002ce4:	5802546c 	.word	0x5802546c
 8002ce8:	58025480 	.word	0x58025480
 8002cec:	58025494 	.word	0x58025494

08002cf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7fe ff76 	bl	8001be8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e2dc      	b.n	80032c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e2cd      	b.n	80032c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a76      	ldr	r2, [pc, #472]	; (8002f04 <HAL_DMA_Abort+0x214>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04a      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a74      	ldr	r2, [pc, #464]	; (8002f08 <HAL_DMA_Abort+0x218>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d045      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a73      	ldr	r2, [pc, #460]	; (8002f0c <HAL_DMA_Abort+0x21c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a71      	ldr	r2, [pc, #452]	; (8002f10 <HAL_DMA_Abort+0x220>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a70      	ldr	r2, [pc, #448]	; (8002f14 <HAL_DMA_Abort+0x224>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_DMA_Abort+0x228>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_DMA_Abort+0x22c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6b      	ldr	r2, [pc, #428]	; (8002f20 <HAL_DMA_Abort+0x230>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_DMA_Abort+0x234>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <HAL_DMA_Abort+0x238>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a67      	ldr	r2, [pc, #412]	; (8002f2c <HAL_DMA_Abort+0x23c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_DMA_Abort+0x240>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a64      	ldr	r2, [pc, #400]	; (8002f34 <HAL_DMA_Abort+0x244>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a62      	ldr	r2, [pc, #392]	; (8002f38 <HAL_DMA_Abort+0x248>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <HAL_DMA_Abort+0x24c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Abort+0xd6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_DMA_Abort+0x250>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_Abort+0xda>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_Abort+0xdc>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 021e 	bic.w	r2, r2, #30
 8002dde:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e00a      	b.n	8002e0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 020e 	bic.w	r2, r2, #14
 8002e06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3c      	ldr	r2, [pc, #240]	; (8002f04 <HAL_DMA_Abort+0x214>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d072      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_DMA_Abort+0x218>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d06d      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a39      	ldr	r2, [pc, #228]	; (8002f0c <HAL_DMA_Abort+0x21c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d068      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a37      	ldr	r2, [pc, #220]	; (8002f10 <HAL_DMA_Abort+0x220>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d063      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a36      	ldr	r2, [pc, #216]	; (8002f14 <HAL_DMA_Abort+0x224>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d05e      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <HAL_DMA_Abort+0x228>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d059      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a33      	ldr	r2, [pc, #204]	; (8002f1c <HAL_DMA_Abort+0x22c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d054      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <HAL_DMA_Abort+0x230>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04f      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <HAL_DMA_Abort+0x234>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d04a      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_DMA_Abort+0x238>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d045      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2d      	ldr	r2, [pc, #180]	; (8002f2c <HAL_DMA_Abort+0x23c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d040      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2b      	ldr	r2, [pc, #172]	; (8002f30 <HAL_DMA_Abort+0x240>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d03b      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2a      	ldr	r2, [pc, #168]	; (8002f34 <HAL_DMA_Abort+0x244>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d036      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <HAL_DMA_Abort+0x248>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d031      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_DMA_Abort+0x24c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d02c      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <HAL_DMA_Abort+0x250>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d027      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_DMA_Abort+0x254>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_DMA_Abort+0x258>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01d      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <HAL_DMA_Abort+0x25c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d018      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <HAL_DMA_Abort+0x260>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <HAL_DMA_Abort+0x264>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_DMA_Abort+0x268>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_DMA_Abort+0x26c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_DMA_Abort+0x20e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_DMA_Abort+0x270>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d132      	bne.n	8002f64 <HAL_DMA_Abort+0x274>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e031      	b.n	8002f66 <HAL_DMA_Abort+0x276>
 8002f02:	bf00      	nop
 8002f04:	40020010 	.word	0x40020010
 8002f08:	40020028 	.word	0x40020028
 8002f0c:	40020040 	.word	0x40020040
 8002f10:	40020058 	.word	0x40020058
 8002f14:	40020070 	.word	0x40020070
 8002f18:	40020088 	.word	0x40020088
 8002f1c:	400200a0 	.word	0x400200a0
 8002f20:	400200b8 	.word	0x400200b8
 8002f24:	40020410 	.word	0x40020410
 8002f28:	40020428 	.word	0x40020428
 8002f2c:	40020440 	.word	0x40020440
 8002f30:	40020458 	.word	0x40020458
 8002f34:	40020470 	.word	0x40020470
 8002f38:	40020488 	.word	0x40020488
 8002f3c:	400204a0 	.word	0x400204a0
 8002f40:	400204b8 	.word	0x400204b8
 8002f44:	58025408 	.word	0x58025408
 8002f48:	5802541c 	.word	0x5802541c
 8002f4c:	58025430 	.word	0x58025430
 8002f50:	58025444 	.word	0x58025444
 8002f54:	58025458 	.word	0x58025458
 8002f58:	5802546c 	.word	0x5802546c
 8002f5c:	58025480 	.word	0x58025480
 8002f60:	58025494 	.word	0x58025494
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6d      	ldr	r2, [pc, #436]	; (8003134 <HAL_DMA_Abort+0x444>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d04a      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6b      	ldr	r2, [pc, #428]	; (8003138 <HAL_DMA_Abort+0x448>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d045      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_DMA_Abort+0x44c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a68      	ldr	r2, [pc, #416]	; (8003140 <HAL_DMA_Abort+0x450>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d03b      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a67      	ldr	r2, [pc, #412]	; (8003144 <HAL_DMA_Abort+0x454>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d036      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a65      	ldr	r2, [pc, #404]	; (8003148 <HAL_DMA_Abort+0x458>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a64      	ldr	r2, [pc, #400]	; (800314c <HAL_DMA_Abort+0x45c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a62      	ldr	r2, [pc, #392]	; (8003150 <HAL_DMA_Abort+0x460>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a61      	ldr	r2, [pc, #388]	; (8003154 <HAL_DMA_Abort+0x464>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5f      	ldr	r2, [pc, #380]	; (8003158 <HAL_DMA_Abort+0x468>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5e      	ldr	r2, [pc, #376]	; (800315c <HAL_DMA_Abort+0x46c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5c      	ldr	r2, [pc, #368]	; (8003160 <HAL_DMA_Abort+0x470>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5b      	ldr	r2, [pc, #364]	; (8003164 <HAL_DMA_Abort+0x474>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a59      	ldr	r2, [pc, #356]	; (8003168 <HAL_DMA_Abort+0x478>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_DMA_Abort+0x47c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_DMA_Abort+0x32a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_DMA_Abort+0x480>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <HAL_DMA_Abort+0x33c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e007      	b.n	800303c <HAL_DMA_Abort+0x34c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800303c:	e013      	b.n	8003066 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303e:	f7fe fdd3 	bl	8001be8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b05      	cmp	r3, #5
 800304a:	d90c      	bls.n	8003066 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e12d      	b.n	80032c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e5      	bne.n	800303e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_DMA_Abort+0x444>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_DMA_Abort+0x448>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2c      	ldr	r2, [pc, #176]	; (800313c <HAL_DMA_Abort+0x44c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <HAL_DMA_Abort+0x450>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_DMA_Abort+0x454>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_DMA_Abort+0x458>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a26      	ldr	r2, [pc, #152]	; (800314c <HAL_DMA_Abort+0x45c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_DMA_Abort+0x460>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a23      	ldr	r2, [pc, #140]	; (8003154 <HAL_DMA_Abort+0x464>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_DMA_Abort+0x468>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_DMA_Abort+0x46c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_DMA_Abort+0x470>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <HAL_DMA_Abort+0x474>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_DMA_Abort+0x478>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_DMA_Abort+0x47c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Abort+0x422>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_DMA_Abort+0x480>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_DMA_Abort+0x426>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_DMA_Abort+0x428>
 8003116:	2300      	movs	r3, #0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02b      	beq.n	8003174 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	223f      	movs	r2, #63	; 0x3f
 800312c:	409a      	lsls	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	e02a      	b.n	800318a <HAL_DMA_Abort+0x49a>
 8003134:	40020010 	.word	0x40020010
 8003138:	40020028 	.word	0x40020028
 800313c:	40020040 	.word	0x40020040
 8003140:	40020058 	.word	0x40020058
 8003144:	40020070 	.word	0x40020070
 8003148:	40020088 	.word	0x40020088
 800314c:	400200a0 	.word	0x400200a0
 8003150:	400200b8 	.word	0x400200b8
 8003154:	40020410 	.word	0x40020410
 8003158:	40020428 	.word	0x40020428
 800315c:	40020440 	.word	0x40020440
 8003160:	40020458 	.word	0x40020458
 8003164:	40020470 	.word	0x40020470
 8003168:	40020488 	.word	0x40020488
 800316c:	400204a0 	.word	0x400204a0
 8003170:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2201      	movs	r2, #1
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a4f      	ldr	r2, [pc, #316]	; (80032cc <HAL_DMA_Abort+0x5dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d072      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4d      	ldr	r2, [pc, #308]	; (80032d0 <HAL_DMA_Abort+0x5e0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d06d      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <HAL_DMA_Abort+0x5e4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d068      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4a      	ldr	r2, [pc, #296]	; (80032d8 <HAL_DMA_Abort+0x5e8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_DMA_Abort+0x5ec>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05e      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_DMA_Abort+0x5f0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d059      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a46      	ldr	r2, [pc, #280]	; (80032e4 <HAL_DMA_Abort+0x5f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d054      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a44      	ldr	r2, [pc, #272]	; (80032e8 <HAL_DMA_Abort+0x5f8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04f      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a43      	ldr	r2, [pc, #268]	; (80032ec <HAL_DMA_Abort+0x5fc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <HAL_DMA_Abort+0x600>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <HAL_DMA_Abort+0x604>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3e      	ldr	r2, [pc, #248]	; (80032f8 <HAL_DMA_Abort+0x608>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <HAL_DMA_Abort+0x60c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3b      	ldr	r2, [pc, #236]	; (8003300 <HAL_DMA_Abort+0x610>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3a      	ldr	r2, [pc, #232]	; (8003304 <HAL_DMA_Abort+0x614>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a38      	ldr	r2, [pc, #224]	; (8003308 <HAL_DMA_Abort+0x618>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a37      	ldr	r2, [pc, #220]	; (800330c <HAL_DMA_Abort+0x61c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a35      	ldr	r2, [pc, #212]	; (8003310 <HAL_DMA_Abort+0x620>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_DMA_Abort+0x624>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <HAL_DMA_Abort+0x628>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <HAL_DMA_Abort+0x62c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <HAL_DMA_Abort+0x630>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <HAL_DMA_Abort+0x634>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_Abort+0x58a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_DMA_Abort+0x638>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_DMA_Abort+0x58e>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_DMA_Abort+0x590>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800328c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
 800330c:	58025408 	.word	0x58025408
 8003310:	5802541c 	.word	0x5802541c
 8003314:	58025430 	.word	0x58025430
 8003318:	58025444 	.word	0x58025444
 800331c:	58025458 	.word	0x58025458
 8003320:	5802546c 	.word	0x5802546c
 8003324:	58025480 	.word	0x58025480
 8003328:	58025494 	.word	0x58025494

0800332c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e205      	b.n	800374a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e1fa      	b.n	800374a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a8c      	ldr	r2, [pc, #560]	; (800358c <HAL_DMA_Abort_IT+0x260>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d04a      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8b      	ldr	r2, [pc, #556]	; (8003590 <HAL_DMA_Abort_IT+0x264>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d045      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a89      	ldr	r2, [pc, #548]	; (8003594 <HAL_DMA_Abort_IT+0x268>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d040      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a88      	ldr	r2, [pc, #544]	; (8003598 <HAL_DMA_Abort_IT+0x26c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d03b      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a86      	ldr	r2, [pc, #536]	; (800359c <HAL_DMA_Abort_IT+0x270>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d036      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a85      	ldr	r2, [pc, #532]	; (80035a0 <HAL_DMA_Abort_IT+0x274>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d031      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a83      	ldr	r2, [pc, #524]	; (80035a4 <HAL_DMA_Abort_IT+0x278>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02c      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a82      	ldr	r2, [pc, #520]	; (80035a8 <HAL_DMA_Abort_IT+0x27c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d027      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a80      	ldr	r2, [pc, #512]	; (80035ac <HAL_DMA_Abort_IT+0x280>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d022      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7f      	ldr	r2, [pc, #508]	; (80035b0 <HAL_DMA_Abort_IT+0x284>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01d      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7d      	ldr	r2, [pc, #500]	; (80035b4 <HAL_DMA_Abort_IT+0x288>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7c      	ldr	r2, [pc, #496]	; (80035b8 <HAL_DMA_Abort_IT+0x28c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7a      	ldr	r2, [pc, #488]	; (80035bc <HAL_DMA_Abort_IT+0x290>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a79      	ldr	r2, [pc, #484]	; (80035c0 <HAL_DMA_Abort_IT+0x294>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a77      	ldr	r2, [pc, #476]	; (80035c4 <HAL_DMA_Abort_IT+0x298>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_Abort_IT+0xc8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a76      	ldr	r2, [pc, #472]	; (80035c8 <HAL_DMA_Abort_IT+0x29c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_Abort_IT+0xcc>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_DMA_Abort_IT+0xce>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d065      	beq.n	80034ca <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a60      	ldr	r2, [pc, #384]	; (800358c <HAL_DMA_Abort_IT+0x260>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d04a      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5e      	ldr	r2, [pc, #376]	; (8003590 <HAL_DMA_Abort_IT+0x264>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d045      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_DMA_Abort_IT+0x268>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d040      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_DMA_Abort_IT+0x26c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d03b      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_DMA_Abort_IT+0x270>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d036      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <HAL_DMA_Abort_IT+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d031      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_DMA_Abort_IT+0x278>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d02c      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a55      	ldr	r2, [pc, #340]	; (80035a8 <HAL_DMA_Abort_IT+0x27c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d027      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a54      	ldr	r2, [pc, #336]	; (80035ac <HAL_DMA_Abort_IT+0x280>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_DMA_Abort_IT+0x284>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01d      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a51      	ldr	r2, [pc, #324]	; (80035b4 <HAL_DMA_Abort_IT+0x288>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4f      	ldr	r2, [pc, #316]	; (80035b8 <HAL_DMA_Abort_IT+0x28c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4e      	ldr	r2, [pc, #312]	; (80035bc <HAL_DMA_Abort_IT+0x290>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4c      	ldr	r2, [pc, #304]	; (80035c0 <HAL_DMA_Abort_IT+0x294>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a4b      	ldr	r2, [pc, #300]	; (80035c4 <HAL_DMA_Abort_IT+0x298>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x17a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a49      	ldr	r2, [pc, #292]	; (80035c8 <HAL_DMA_Abort_IT+0x29c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <HAL_DMA_Abort_IT+0x18c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e147      	b.n	8003748 <HAL_DMA_Abort_IT+0x41c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e13e      	b.n	8003748 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 020e 	bic.w	r2, r2, #14
 80034d8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_DMA_Abort_IT+0x260>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d04a      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_DMA_Abort_IT+0x264>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d045      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a28      	ldr	r2, [pc, #160]	; (8003594 <HAL_DMA_Abort_IT+0x268>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d040      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_DMA_Abort_IT+0x26c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d03b      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a25      	ldr	r2, [pc, #148]	; (800359c <HAL_DMA_Abort_IT+0x270>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d036      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <HAL_DMA_Abort_IT+0x274>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d031      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <HAL_DMA_Abort_IT+0x278>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d02c      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a20      	ldr	r2, [pc, #128]	; (80035a8 <HAL_DMA_Abort_IT+0x27c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d027      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_DMA_Abort_IT+0x280>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d022      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <HAL_DMA_Abort_IT+0x284>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01d      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_DMA_Abort_IT+0x288>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d018      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_DMA_Abort_IT+0x28c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_DMA_Abort_IT+0x290>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a17      	ldr	r2, [pc, #92]	; (80035c0 <HAL_DMA_Abort_IT+0x294>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a16      	ldr	r2, [pc, #88]	; (80035c4 <HAL_DMA_Abort_IT+0x298>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_DMA_Abort_IT+0x24e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_DMA_Abort_IT+0x29c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d128      	bne.n	80035cc <HAL_DMA_Abort_IT+0x2a0>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e027      	b.n	80035dc <HAL_DMA_Abort_IT+0x2b0>
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5c      	ldr	r2, [pc, #368]	; (8003754 <HAL_DMA_Abort_IT+0x428>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d072      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a5b      	ldr	r2, [pc, #364]	; (8003758 <HAL_DMA_Abort_IT+0x42c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d06d      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a59      	ldr	r2, [pc, #356]	; (800375c <HAL_DMA_Abort_IT+0x430>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d068      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_DMA_Abort_IT+0x434>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d063      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a56      	ldr	r2, [pc, #344]	; (8003764 <HAL_DMA_Abort_IT+0x438>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d05e      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a55      	ldr	r2, [pc, #340]	; (8003768 <HAL_DMA_Abort_IT+0x43c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d059      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a53      	ldr	r2, [pc, #332]	; (800376c <HAL_DMA_Abort_IT+0x440>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d054      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_DMA_Abort_IT+0x444>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d04f      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a50      	ldr	r2, [pc, #320]	; (8003774 <HAL_DMA_Abort_IT+0x448>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4f      	ldr	r2, [pc, #316]	; (8003778 <HAL_DMA_Abort_IT+0x44c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a4d      	ldr	r2, [pc, #308]	; (800377c <HAL_DMA_Abort_IT+0x450>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4c      	ldr	r2, [pc, #304]	; (8003780 <HAL_DMA_Abort_IT+0x454>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a4a      	ldr	r2, [pc, #296]	; (8003784 <HAL_DMA_Abort_IT+0x458>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a49      	ldr	r2, [pc, #292]	; (8003788 <HAL_DMA_Abort_IT+0x45c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a47      	ldr	r2, [pc, #284]	; (800378c <HAL_DMA_Abort_IT+0x460>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a46      	ldr	r2, [pc, #280]	; (8003790 <HAL_DMA_Abort_IT+0x464>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_DMA_Abort_IT+0x468>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a43      	ldr	r2, [pc, #268]	; (8003798 <HAL_DMA_Abort_IT+0x46c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a41      	ldr	r2, [pc, #260]	; (800379c <HAL_DMA_Abort_IT+0x470>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <HAL_DMA_Abort_IT+0x474>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <HAL_DMA_Abort_IT+0x478>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <HAL_DMA_Abort_IT+0x47c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3b      	ldr	r2, [pc, #236]	; (80037ac <HAL_DMA_Abort_IT+0x480>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Abort_IT+0x3a0>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <HAL_DMA_Abort_IT+0x484>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Abort_IT+0x3a4>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Abort_IT+0x3a6>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d028      	beq.n	8003728 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2201      	movs	r2, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003704:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00c      	beq.n	8003728 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003726:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40020010 	.word	0x40020010
 8003758:	40020028 	.word	0x40020028
 800375c:	40020040 	.word	0x40020040
 8003760:	40020058 	.word	0x40020058
 8003764:	40020070 	.word	0x40020070
 8003768:	40020088 	.word	0x40020088
 800376c:	400200a0 	.word	0x400200a0
 8003770:	400200b8 	.word	0x400200b8
 8003774:	40020410 	.word	0x40020410
 8003778:	40020428 	.word	0x40020428
 800377c:	40020440 	.word	0x40020440
 8003780:	40020458 	.word	0x40020458
 8003784:	40020470 	.word	0x40020470
 8003788:	40020488 	.word	0x40020488
 800378c:	400204a0 	.word	0x400204a0
 8003790:	400204b8 	.word	0x400204b8
 8003794:	58025408 	.word	0x58025408
 8003798:	5802541c 	.word	0x5802541c
 800379c:	58025430 	.word	0x58025430
 80037a0:	58025444 	.word	0x58025444
 80037a4:	58025458 	.word	0x58025458
 80037a8:	5802546c 	.word	0x5802546c
 80037ac:	58025480 	.word	0x58025480
 80037b0:	58025494 	.word	0x58025494

080037b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037c0:	4b67      	ldr	r3, [pc, #412]	; (8003960 <HAL_DMA_IRQHandler+0x1ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a67      	ldr	r2, [pc, #412]	; (8003964 <HAL_DMA_IRQHandler+0x1b0>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5f      	ldr	r2, [pc, #380]	; (8003968 <HAL_DMA_IRQHandler+0x1b4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5d      	ldr	r2, [pc, #372]	; (800396c <HAL_DMA_IRQHandler+0x1b8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a5c      	ldr	r2, [pc, #368]	; (8003970 <HAL_DMA_IRQHandler+0x1bc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5a      	ldr	r2, [pc, #360]	; (8003974 <HAL_DMA_IRQHandler+0x1c0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a59      	ldr	r2, [pc, #356]	; (8003978 <HAL_DMA_IRQHandler+0x1c4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_DMA_IRQHandler+0x1c8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a56      	ldr	r2, [pc, #344]	; (8003980 <HAL_DMA_IRQHandler+0x1cc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a54      	ldr	r2, [pc, #336]	; (8003984 <HAL_DMA_IRQHandler+0x1d0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a53      	ldr	r2, [pc, #332]	; (8003988 <HAL_DMA_IRQHandler+0x1d4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a51      	ldr	r2, [pc, #324]	; (800398c <HAL_DMA_IRQHandler+0x1d8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a50      	ldr	r2, [pc, #320]	; (8003990 <HAL_DMA_IRQHandler+0x1dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4e      	ldr	r2, [pc, #312]	; (8003994 <HAL_DMA_IRQHandler+0x1e0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4d      	ldr	r2, [pc, #308]	; (8003998 <HAL_DMA_IRQHandler+0x1e4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_DMA_IRQHandler+0x1e8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a4a      	ldr	r2, [pc, #296]	; (80039a0 <HAL_DMA_IRQHandler+0x1ec>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_IRQHandler+0xd2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a48      	ldr	r2, [pc, #288]	; (80039a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_DMA_IRQHandler+0xd6>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_DMA_IRQHandler+0xd8>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 842b 	beq.w	80040e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2208      	movs	r2, #8
 800389c:	409a      	lsls	r2, r3
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80a2 	beq.w	80039ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <HAL_DMA_IRQHandler+0x1b4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d04a      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2d      	ldr	r2, [pc, #180]	; (800396c <HAL_DMA_IRQHandler+0x1b8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d045      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2b      	ldr	r2, [pc, #172]	; (8003970 <HAL_DMA_IRQHandler+0x1bc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d040      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <HAL_DMA_IRQHandler+0x1c0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d03b      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a28      	ldr	r2, [pc, #160]	; (8003978 <HAL_DMA_IRQHandler+0x1c4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d036      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_DMA_IRQHandler+0x1c8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d031      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a25      	ldr	r2, [pc, #148]	; (8003980 <HAL_DMA_IRQHandler+0x1cc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02c      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a24      	ldr	r2, [pc, #144]	; (8003984 <HAL_DMA_IRQHandler+0x1d0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_DMA_IRQHandler+0x1d4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_DMA_IRQHandler+0x1d8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_DMA_IRQHandler+0x1dc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_DMA_IRQHandler+0x1e0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_DMA_IRQHandler+0x1e4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_DMA_IRQHandler+0x1e8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <HAL_DMA_IRQHandler+0x1ec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_DMA_IRQHandler+0x194>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d12f      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x1f4>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e02e      	b.n	80039bc <HAL_DMA_IRQHandler+0x208>
 800395e:	bf00      	nop
 8003960:	24000018 	.word	0x24000018
 8003964:	1b4e81b5 	.word	0x1b4e81b5
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	40020070 	.word	0x40020070
 800397c:	40020088 	.word	0x40020088
 8003980:	400200a0 	.word	0x400200a0
 8003984:	400200b8 	.word	0x400200b8
 8003988:	40020410 	.word	0x40020410
 800398c:	40020428 	.word	0x40020428
 8003990:	40020440 	.word	0x40020440
 8003994:	40020458 	.word	0x40020458
 8003998:	40020470 	.word	0x40020470
 800399c:	40020488 	.word	0x40020488
 80039a0:	400204a0 	.word	0x400204a0
 80039a4:	400204b8 	.word	0x400204b8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0204 	bic.w	r2, r2, #4
 80039ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2208      	movs	r2, #8
 80039da:	409a      	lsls	r2, r3
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d06e      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a69      	ldr	r2, [pc, #420]	; (8003bac <HAL_DMA_IRQHandler+0x3f8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d04a      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a67      	ldr	r2, [pc, #412]	; (8003bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d045      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a66      	ldr	r2, [pc, #408]	; (8003bb4 <HAL_DMA_IRQHandler+0x400>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d040      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a64      	ldr	r2, [pc, #400]	; (8003bb8 <HAL_DMA_IRQHandler+0x404>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d03b      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a63      	ldr	r2, [pc, #396]	; (8003bbc <HAL_DMA_IRQHandler+0x408>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d036      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <HAL_DMA_IRQHandler+0x40c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d031      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <HAL_DMA_IRQHandler+0x410>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d02c      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5e      	ldr	r2, [pc, #376]	; (8003bc8 <HAL_DMA_IRQHandler+0x414>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d027      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_DMA_IRQHandler+0x418>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5b      	ldr	r2, [pc, #364]	; (8003bd0 <HAL_DMA_IRQHandler+0x41c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01d      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5a      	ldr	r2, [pc, #360]	; (8003bd4 <HAL_DMA_IRQHandler+0x420>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_DMA_IRQHandler+0x424>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a57      	ldr	r2, [pc, #348]	; (8003bdc <HAL_DMA_IRQHandler+0x428>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a55      	ldr	r2, [pc, #340]	; (8003be0 <HAL_DMA_IRQHandler+0x42c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a54      	ldr	r2, [pc, #336]	; (8003be4 <HAL_DMA_IRQHandler+0x430>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2ee>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_DMA_IRQHandler+0x434>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x304>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e003      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x30c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f043 0202 	orr.w	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2204      	movs	r2, #4
 8003aea:	409a      	lsls	r2, r3
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 808f 	beq.w	8003c14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <HAL_DMA_IRQHandler+0x3f8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04a      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d045      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <HAL_DMA_IRQHandler+0x400>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <HAL_DMA_IRQHandler+0x404>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_DMA_IRQHandler+0x408>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d036      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_DMA_IRQHandler+0x40c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_DMA_IRQHandler+0x410>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02c      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_DMA_IRQHandler+0x414>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <HAL_DMA_IRQHandler+0x418>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_DMA_IRQHandler+0x41c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_DMA_IRQHandler+0x420>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_DMA_IRQHandler+0x424>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_DMA_IRQHandler+0x428>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_DMA_IRQHandler+0x42c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <HAL_DMA_IRQHandler+0x430>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x3e2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_DMA_IRQHandler+0x434>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d12a      	bne.n	8003bec <HAL_DMA_IRQHandler+0x438>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e023      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x440>
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2204      	movs	r2, #4
 8003c02:	409a      	lsls	r2, r3
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a6 	beq.w	8003d76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a85      	ldr	r2, [pc, #532]	; (8003e44 <HAL_DMA_IRQHandler+0x690>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d04a      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a83      	ldr	r2, [pc, #524]	; (8003e48 <HAL_DMA_IRQHandler+0x694>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d045      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a82      	ldr	r2, [pc, #520]	; (8003e4c <HAL_DMA_IRQHandler+0x698>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d040      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a80      	ldr	r2, [pc, #512]	; (8003e50 <HAL_DMA_IRQHandler+0x69c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d03b      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7f      	ldr	r2, [pc, #508]	; (8003e54 <HAL_DMA_IRQHandler+0x6a0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d036      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7d      	ldr	r2, [pc, #500]	; (8003e58 <HAL_DMA_IRQHandler+0x6a4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d031      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7c      	ldr	r2, [pc, #496]	; (8003e5c <HAL_DMA_IRQHandler+0x6a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d02c      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7a      	ldr	r2, [pc, #488]	; (8003e60 <HAL_DMA_IRQHandler+0x6ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d027      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a79      	ldr	r2, [pc, #484]	; (8003e64 <HAL_DMA_IRQHandler+0x6b0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d022      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a77      	ldr	r2, [pc, #476]	; (8003e68 <HAL_DMA_IRQHandler+0x6b4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01d      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a76      	ldr	r2, [pc, #472]	; (8003e6c <HAL_DMA_IRQHandler+0x6b8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d018      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a74      	ldr	r2, [pc, #464]	; (8003e70 <HAL_DMA_IRQHandler+0x6bc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a73      	ldr	r2, [pc, #460]	; (8003e74 <HAL_DMA_IRQHandler+0x6c0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a71      	ldr	r2, [pc, #452]	; (8003e78 <HAL_DMA_IRQHandler+0x6c4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a70      	ldr	r2, [pc, #448]	; (8003e7c <HAL_DMA_IRQHandler+0x6c8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_DMA_IRQHandler+0x516>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6e      	ldr	r2, [pc, #440]	; (8003e80 <HAL_DMA_IRQHandler+0x6cc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x52c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e009      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x540>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03e      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2210      	movs	r2, #16
 8003d02:	409a      	lsls	r2, r3
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d108      	bne.n	8003d36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d024      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
 8003d34:	e01f      	b.n	8003d76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01b      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
 8003d46:	e016      	b.n	8003d76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0208 	bic.w	r2, r2, #8
 8003d64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2220      	movs	r2, #32
 8003d80:	409a      	lsls	r2, r3
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8110 	beq.w	8003fac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <HAL_DMA_IRQHandler+0x690>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <HAL_DMA_IRQHandler+0x694>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d045      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <HAL_DMA_IRQHandler+0x698>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d040      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <HAL_DMA_IRQHandler+0x69c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d03b      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <HAL_DMA_IRQHandler+0x6a0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d036      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <HAL_DMA_IRQHandler+0x6a4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d031      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <HAL_DMA_IRQHandler+0x6a8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02c      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_DMA_IRQHandler+0x6ac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d027      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <HAL_DMA_IRQHandler+0x6b0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <HAL_DMA_IRQHandler+0x6b4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01d      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_DMA_IRQHandler+0x6b8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_DMA_IRQHandler+0x6bc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_DMA_IRQHandler+0x6c0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <HAL_DMA_IRQHandler+0x6c4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_DMA_IRQHandler+0x6c8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x678>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <HAL_DMA_IRQHandler+0x6cc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d12b      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x6d0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e02a      	b.n	8003e98 <HAL_DMA_IRQHandler+0x6e4>
 8003e42:	bf00      	nop
 8003e44:	40020010 	.word	0x40020010
 8003e48:	40020028 	.word	0x40020028
 8003e4c:	40020040 	.word	0x40020040
 8003e50:	40020058 	.word	0x40020058
 8003e54:	40020070 	.word	0x40020070
 8003e58:	40020088 	.word	0x40020088
 8003e5c:	400200a0 	.word	0x400200a0
 8003e60:	400200b8 	.word	0x400200b8
 8003e64:	40020410 	.word	0x40020410
 8003e68:	40020428 	.word	0x40020428
 8003e6c:	40020440 	.word	0x40020440
 8003e70:	40020458 	.word	0x40020458
 8003e74:	40020470 	.word	0x40020470
 8003e78:	40020488 	.word	0x40020488
 8003e7c:	400204a0 	.word	0x400204a0
 8003e80:	400204b8 	.word	0x400204b8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8087 	beq.w	8003fac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d139      	bne.n	8003f2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0216 	bic.w	r2, r2, #22
 8003ec8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_DMA_IRQHandler+0x736>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0208 	bic.w	r2, r2, #8
 8003ef8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	223f      	movs	r2, #63	; 0x3f
 8003f04:	409a      	lsls	r2, r3
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 834a 	beq.w	80045b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
          }
          return;
 8003f2c:	e344      	b.n	80045b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d108      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02c      	beq.n	8003fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
 8003f5a:	e027      	b.n	8003fac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
 8003f6c:	e01e      	b.n	8003fac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0210 	bic.w	r2, r2, #16
 8003f8a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8306 	beq.w	80045c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8088 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a7a      	ldr	r2, [pc, #488]	; (80041bc <HAL_DMA_IRQHandler+0xa08>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d04a      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a79      	ldr	r2, [pc, #484]	; (80041c0 <HAL_DMA_IRQHandler+0xa0c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d045      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <HAL_DMA_IRQHandler+0xa10>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d040      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a76      	ldr	r2, [pc, #472]	; (80041c8 <HAL_DMA_IRQHandler+0xa14>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d03b      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a74      	ldr	r2, [pc, #464]	; (80041cc <HAL_DMA_IRQHandler+0xa18>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d036      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a73      	ldr	r2, [pc, #460]	; (80041d0 <HAL_DMA_IRQHandler+0xa1c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d031      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a71      	ldr	r2, [pc, #452]	; (80041d4 <HAL_DMA_IRQHandler+0xa20>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02c      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a70      	ldr	r2, [pc, #448]	; (80041d8 <HAL_DMA_IRQHandler+0xa24>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d027      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <HAL_DMA_IRQHandler+0xa28>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d022      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6d      	ldr	r2, [pc, #436]	; (80041e0 <HAL_DMA_IRQHandler+0xa2c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d01d      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a6b      	ldr	r2, [pc, #428]	; (80041e4 <HAL_DMA_IRQHandler+0xa30>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d018      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <HAL_DMA_IRQHandler+0xa34>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a68      	ldr	r2, [pc, #416]	; (80041ec <HAL_DMA_IRQHandler+0xa38>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a67      	ldr	r2, [pc, #412]	; (80041f0 <HAL_DMA_IRQHandler+0xa3c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_DMA_IRQHandler+0xa40>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_DMA_IRQHandler+0x8b8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a64      	ldr	r2, [pc, #400]	; (80041f8 <HAL_DMA_IRQHandler+0xa44>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <HAL_DMA_IRQHandler+0x8ca>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e007      	b.n	800408e <HAL_DMA_IRQHandler+0x8da>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	429a      	cmp	r2, r3
 8004098:	d307      	bcc.n	80040aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f2      	bne.n	800408e <HAL_DMA_IRQHandler+0x8da>
 80040a8:	e000      	b.n	80040ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040aa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2203      	movs	r2, #3
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040ca:	e003      	b.n	80040d4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8272 	beq.w	80045c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
 80040e6:	e26c      	b.n	80045c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a43      	ldr	r2, [pc, #268]	; (80041fc <HAL_DMA_IRQHandler+0xa48>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a42      	ldr	r2, [pc, #264]	; (8004200 <HAL_DMA_IRQHandler+0xa4c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01d      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a40      	ldr	r2, [pc, #256]	; (8004204 <HAL_DMA_IRQHandler+0xa50>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <HAL_DMA_IRQHandler+0xa54>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a3d      	ldr	r2, [pc, #244]	; (800420c <HAL_DMA_IRQHandler+0xa58>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a3c      	ldr	r2, [pc, #240]	; (8004210 <HAL_DMA_IRQHandler+0xa5c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a3a      	ldr	r2, [pc, #232]	; (8004214 <HAL_DMA_IRQHandler+0xa60>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_DMA_IRQHandler+0x984>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a39      	ldr	r2, [pc, #228]	; (8004218 <HAL_DMA_IRQHandler+0xa64>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_DMA_IRQHandler+0x988>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_DMA_IRQHandler+0x98a>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 823f 	beq.w	80045c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2204      	movs	r2, #4
 8004156:	409a      	lsls	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80cd 	beq.w	80042fc <HAL_DMA_IRQHandler+0xb48>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80c7 	beq.w	80042fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2204      	movs	r2, #4
 8004178:	409a      	lsls	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d049      	beq.n	800421c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8210 	beq.w	80045bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a4:	e20a      	b.n	80045bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8206 	beq.w	80045bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041b8:	e200      	b.n	80045bc <HAL_DMA_IRQHandler+0xe08>
 80041ba:	bf00      	nop
 80041bc:	40020010 	.word	0x40020010
 80041c0:	40020028 	.word	0x40020028
 80041c4:	40020040 	.word	0x40020040
 80041c8:	40020058 	.word	0x40020058
 80041cc:	40020070 	.word	0x40020070
 80041d0:	40020088 	.word	0x40020088
 80041d4:	400200a0 	.word	0x400200a0
 80041d8:	400200b8 	.word	0x400200b8
 80041dc:	40020410 	.word	0x40020410
 80041e0:	40020428 	.word	0x40020428
 80041e4:	40020440 	.word	0x40020440
 80041e8:	40020458 	.word	0x40020458
 80041ec:	40020470 	.word	0x40020470
 80041f0:	40020488 	.word	0x40020488
 80041f4:	400204a0 	.word	0x400204a0
 80041f8:	400204b8 	.word	0x400204b8
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d160      	bne.n	80042e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a8c      	ldr	r2, [pc, #560]	; (800445c <HAL_DMA_IRQHandler+0xca8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d04a      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a8a      	ldr	r2, [pc, #552]	; (8004460 <HAL_DMA_IRQHandler+0xcac>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d045      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a89      	ldr	r2, [pc, #548]	; (8004464 <HAL_DMA_IRQHandler+0xcb0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d040      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a87      	ldr	r2, [pc, #540]	; (8004468 <HAL_DMA_IRQHandler+0xcb4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d03b      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a86      	ldr	r2, [pc, #536]	; (800446c <HAL_DMA_IRQHandler+0xcb8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d036      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a84      	ldr	r2, [pc, #528]	; (8004470 <HAL_DMA_IRQHandler+0xcbc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a83      	ldr	r2, [pc, #524]	; (8004474 <HAL_DMA_IRQHandler+0xcc0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d02c      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a81      	ldr	r2, [pc, #516]	; (8004478 <HAL_DMA_IRQHandler+0xcc4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a80      	ldr	r2, [pc, #512]	; (800447c <HAL_DMA_IRQHandler+0xcc8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7e      	ldr	r2, [pc, #504]	; (8004480 <HAL_DMA_IRQHandler+0xccc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7d      	ldr	r2, [pc, #500]	; (8004484 <HAL_DMA_IRQHandler+0xcd0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7b      	ldr	r2, [pc, #492]	; (8004488 <HAL_DMA_IRQHandler+0xcd4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7a      	ldr	r2, [pc, #488]	; (800448c <HAL_DMA_IRQHandler+0xcd8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a78      	ldr	r2, [pc, #480]	; (8004490 <HAL_DMA_IRQHandler+0xcdc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a77      	ldr	r2, [pc, #476]	; (8004494 <HAL_DMA_IRQHandler+0xce0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xb12>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a75      	ldr	r2, [pc, #468]	; (8004498 <HAL_DMA_IRQHandler+0xce4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <HAL_DMA_IRQHandler+0xb24>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0208 	bic.w	r2, r2, #8
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e007      	b.n	80042e8 <HAL_DMA_IRQHandler+0xb34>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8165 	beq.w	80045bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042fa:	e15f      	b.n	80045bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2202      	movs	r2, #2
 8004306:	409a      	lsls	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80c5 	beq.w	800449c <HAL_DMA_IRQHandler+0xce8>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80bf 	beq.w	800449c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2202      	movs	r2, #2
 8004328:	409a      	lsls	r2, r3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d018      	beq.n	800436a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 813a 	beq.w	80045c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004354:	e134      	b.n	80045c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8130 	beq.w	80045c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004368:	e12a      	b.n	80045c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d168      	bne.n	8004446 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a38      	ldr	r2, [pc, #224]	; (800445c <HAL_DMA_IRQHandler+0xca8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04a      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <HAL_DMA_IRQHandler+0xcac>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d045      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a35      	ldr	r2, [pc, #212]	; (8004464 <HAL_DMA_IRQHandler+0xcb0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d040      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <HAL_DMA_IRQHandler+0xcb4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d03b      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_DMA_IRQHandler+0xcb8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d036      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a31      	ldr	r2, [pc, #196]	; (8004470 <HAL_DMA_IRQHandler+0xcbc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d031      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <HAL_DMA_IRQHandler+0xcc0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02c      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2e      	ldr	r2, [pc, #184]	; (8004478 <HAL_DMA_IRQHandler+0xcc4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d027      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2c      	ldr	r2, [pc, #176]	; (800447c <HAL_DMA_IRQHandler+0xcc8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <HAL_DMA_IRQHandler+0xccc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a29      	ldr	r2, [pc, #164]	; (8004484 <HAL_DMA_IRQHandler+0xcd0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a28      	ldr	r2, [pc, #160]	; (8004488 <HAL_DMA_IRQHandler+0xcd4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <HAL_DMA_IRQHandler+0xcd8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <HAL_DMA_IRQHandler+0xcdc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <HAL_DMA_IRQHandler+0xce0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_DMA_IRQHandler+0xc60>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_DMA_IRQHandler+0xce4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <HAL_DMA_IRQHandler+0xc72>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0214 	bic.w	r2, r2, #20
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e007      	b.n	8004436 <HAL_DMA_IRQHandler+0xc82>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 020a 	bic.w	r2, r2, #10
 8004434:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80b8 	beq.w	80045c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004458:	e0b2      	b.n	80045c0 <HAL_DMA_IRQHandler+0xe0c>
 800445a:	bf00      	nop
 800445c:	40020010 	.word	0x40020010
 8004460:	40020028 	.word	0x40020028
 8004464:	40020040 	.word	0x40020040
 8004468:	40020058 	.word	0x40020058
 800446c:	40020070 	.word	0x40020070
 8004470:	40020088 	.word	0x40020088
 8004474:	400200a0 	.word	0x400200a0
 8004478:	400200b8 	.word	0x400200b8
 800447c:	40020410 	.word	0x40020410
 8004480:	40020428 	.word	0x40020428
 8004484:	40020440 	.word	0x40020440
 8004488:	40020458 	.word	0x40020458
 800448c:	40020470 	.word	0x40020470
 8004490:	40020488 	.word	0x40020488
 8004494:	400204a0 	.word	0x400204a0
 8004498:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	2208      	movs	r2, #8
 80044a6:	409a      	lsls	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8088 	beq.w	80045c2 <HAL_DMA_IRQHandler+0xe0e>
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8082 	beq.w	80045c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <HAL_DMA_IRQHandler+0xe14>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <HAL_DMA_IRQHandler+0xe18>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <HAL_DMA_IRQHandler+0xe1c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a3c      	ldr	r2, [pc, #240]	; (80045d4 <HAL_DMA_IRQHandler+0xe20>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <HAL_DMA_IRQHandler+0xe24>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a39      	ldr	r2, [pc, #228]	; (80045dc <HAL_DMA_IRQHandler+0xe28>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <HAL_DMA_IRQHandler+0xe2c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a36      	ldr	r2, [pc, #216]	; (80045e4 <HAL_DMA_IRQHandler+0xe30>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a35      	ldr	r2, [pc, #212]	; (80045e8 <HAL_DMA_IRQHandler+0xe34>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a33      	ldr	r2, [pc, #204]	; (80045ec <HAL_DMA_IRQHandler+0xe38>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <HAL_DMA_IRQHandler+0xe3c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <HAL_DMA_IRQHandler+0xe40>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2f      	ldr	r2, [pc, #188]	; (80045f8 <HAL_DMA_IRQHandler+0xe44>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a2d      	ldr	r2, [pc, #180]	; (80045fc <HAL_DMA_IRQHandler+0xe48>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <HAL_DMA_IRQHandler+0xe4c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_IRQHandler+0xdaa>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <HAL_DMA_IRQHandler+0xe50>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <HAL_DMA_IRQHandler+0xdbc>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 021c 	bic.w	r2, r2, #28
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e007      	b.n	8004580 <HAL_DMA_IRQHandler+0xdcc>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 020e 	bic.w	r2, r2, #14
 800457e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
 80045b6:	e004      	b.n	80045c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045b8:	bf00      	nop
 80045ba:	e002      	b.n	80045c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045bc:	bf00      	nop
 80045be:	e000      	b.n	80045c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40020010 	.word	0x40020010
 80045cc:	40020028 	.word	0x40020028
 80045d0:	40020040 	.word	0x40020040
 80045d4:	40020058 	.word	0x40020058
 80045d8:	40020070 	.word	0x40020070
 80045dc:	40020088 	.word	0x40020088
 80045e0:	400200a0 	.word	0x400200a0
 80045e4:	400200b8 	.word	0x400200b8
 80045e8:	40020410 	.word	0x40020410
 80045ec:	40020428 	.word	0x40020428
 80045f0:	40020440 	.word	0x40020440
 80045f4:	40020458 	.word	0x40020458
 80045f8:	40020470 	.word	0x40020470
 80045fc:	40020488 	.word	0x40020488
 8004600:	400204a0 	.word	0x400204a0
 8004604:	400204b8 	.word	0x400204b8

08004608 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a84      	ldr	r2, [pc, #528]	; (8004838 <DMA_SetConfig+0x230>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d072      	beq.n	8004712 <DMA_SetConfig+0x10a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a82      	ldr	r2, [pc, #520]	; (800483c <DMA_SetConfig+0x234>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d06d      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a81      	ldr	r2, [pc, #516]	; (8004840 <DMA_SetConfig+0x238>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d068      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7f      	ldr	r2, [pc, #508]	; (8004844 <DMA_SetConfig+0x23c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d063      	beq.n	8004712 <DMA_SetConfig+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7e      	ldr	r2, [pc, #504]	; (8004848 <DMA_SetConfig+0x240>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d05e      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7c      	ldr	r2, [pc, #496]	; (800484c <DMA_SetConfig+0x244>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d059      	beq.n	8004712 <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a7b      	ldr	r2, [pc, #492]	; (8004850 <DMA_SetConfig+0x248>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d054      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a79      	ldr	r2, [pc, #484]	; (8004854 <DMA_SetConfig+0x24c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d04f      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a78      	ldr	r2, [pc, #480]	; (8004858 <DMA_SetConfig+0x250>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d04a      	beq.n	8004712 <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a76      	ldr	r2, [pc, #472]	; (800485c <DMA_SetConfig+0x254>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d045      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a75      	ldr	r2, [pc, #468]	; (8004860 <DMA_SetConfig+0x258>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d040      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a73      	ldr	r2, [pc, #460]	; (8004864 <DMA_SetConfig+0x25c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d03b      	beq.n	8004712 <DMA_SetConfig+0x10a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a72      	ldr	r2, [pc, #456]	; (8004868 <DMA_SetConfig+0x260>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d036      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a70      	ldr	r2, [pc, #448]	; (800486c <DMA_SetConfig+0x264>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d031      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6f      	ldr	r2, [pc, #444]	; (8004870 <DMA_SetConfig+0x268>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d02c      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a6d      	ldr	r2, [pc, #436]	; (8004874 <DMA_SetConfig+0x26c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d027      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6c      	ldr	r2, [pc, #432]	; (8004878 <DMA_SetConfig+0x270>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6a      	ldr	r2, [pc, #424]	; (800487c <DMA_SetConfig+0x274>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a69      	ldr	r2, [pc, #420]	; (8004880 <DMA_SetConfig+0x278>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a67      	ldr	r2, [pc, #412]	; (8004884 <DMA_SetConfig+0x27c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a66      	ldr	r2, [pc, #408]	; (8004888 <DMA_SetConfig+0x280>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a64      	ldr	r2, [pc, #400]	; (800488c <DMA_SetConfig+0x284>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <DMA_SetConfig+0x10a>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a63      	ldr	r2, [pc, #396]	; (8004890 <DMA_SetConfig+0x288>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <DMA_SetConfig+0x10a>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a61      	ldr	r2, [pc, #388]	; (8004894 <DMA_SetConfig+0x28c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <DMA_SetConfig+0x10e>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <DMA_SetConfig+0x110>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004724:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004736:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3e      	ldr	r2, [pc, #248]	; (8004838 <DMA_SetConfig+0x230>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d04a      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <DMA_SetConfig+0x234>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d045      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3b      	ldr	r2, [pc, #236]	; (8004840 <DMA_SetConfig+0x238>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d040      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3a      	ldr	r2, [pc, #232]	; (8004844 <DMA_SetConfig+0x23c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a38      	ldr	r2, [pc, #224]	; (8004848 <DMA_SetConfig+0x240>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d036      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <DMA_SetConfig+0x244>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a35      	ldr	r2, [pc, #212]	; (8004850 <DMA_SetConfig+0x248>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a34      	ldr	r2, [pc, #208]	; (8004854 <DMA_SetConfig+0x24c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a32      	ldr	r2, [pc, #200]	; (8004858 <DMA_SetConfig+0x250>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a31      	ldr	r2, [pc, #196]	; (800485c <DMA_SetConfig+0x254>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <DMA_SetConfig+0x258>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2e      	ldr	r2, [pc, #184]	; (8004864 <DMA_SetConfig+0x25c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2c      	ldr	r2, [pc, #176]	; (8004868 <DMA_SetConfig+0x260>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2b      	ldr	r2, [pc, #172]	; (800486c <DMA_SetConfig+0x264>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a29      	ldr	r2, [pc, #164]	; (8004870 <DMA_SetConfig+0x268>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <DMA_SetConfig+0x1d0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a28      	ldr	r2, [pc, #160]	; (8004874 <DMA_SetConfig+0x26c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <DMA_SetConfig+0x1d4>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <DMA_SetConfig+0x1d6>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d05a      	beq.n	8004898 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	223f      	movs	r2, #63	; 0x3f
 80047ec:	409a      	lsls	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004800:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d108      	bne.n	8004824 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004822:	e087      	b.n	8004934 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
}
 8004834:	e07e      	b.n	8004934 <DMA_SetConfig+0x32c>
 8004836:	bf00      	nop
 8004838:	40020010 	.word	0x40020010
 800483c:	40020028 	.word	0x40020028
 8004840:	40020040 	.word	0x40020040
 8004844:	40020058 	.word	0x40020058
 8004848:	40020070 	.word	0x40020070
 800484c:	40020088 	.word	0x40020088
 8004850:	400200a0 	.word	0x400200a0
 8004854:	400200b8 	.word	0x400200b8
 8004858:	40020410 	.word	0x40020410
 800485c:	40020428 	.word	0x40020428
 8004860:	40020440 	.word	0x40020440
 8004864:	40020458 	.word	0x40020458
 8004868:	40020470 	.word	0x40020470
 800486c:	40020488 	.word	0x40020488
 8004870:	400204a0 	.word	0x400204a0
 8004874:	400204b8 	.word	0x400204b8
 8004878:	58025408 	.word	0x58025408
 800487c:	5802541c 	.word	0x5802541c
 8004880:	58025430 	.word	0x58025430
 8004884:	58025444 	.word	0x58025444
 8004888:	58025458 	.word	0x58025458
 800488c:	5802546c 	.word	0x5802546c
 8004890:	58025480 	.word	0x58025480
 8004894:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a28      	ldr	r2, [pc, #160]	; (8004940 <DMA_SetConfig+0x338>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a27      	ldr	r2, [pc, #156]	; (8004944 <DMA_SetConfig+0x33c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d01d      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a25      	ldr	r2, [pc, #148]	; (8004948 <DMA_SetConfig+0x340>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a24      	ldr	r2, [pc, #144]	; (800494c <DMA_SetConfig+0x344>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <DMA_SetConfig+0x348>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a21      	ldr	r2, [pc, #132]	; (8004954 <DMA_SetConfig+0x34c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <DMA_SetConfig+0x350>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <DMA_SetConfig+0x2e0>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <DMA_SetConfig+0x354>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <DMA_SetConfig+0x2e4>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <DMA_SetConfig+0x2e6>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d020      	beq.n	8004934 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2201      	movs	r2, #1
 80048fc:	409a      	lsls	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d108      	bne.n	8004924 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	60da      	str	r2, [r3, #12]
}
 8004922:	e007      	b.n	8004934 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	58025408 	.word	0x58025408
 8004944:	5802541c 	.word	0x5802541c
 8004948:	58025430 	.word	0x58025430
 800494c:	58025444 	.word	0x58025444
 8004950:	58025458 	.word	0x58025458
 8004954:	5802546c 	.word	0x5802546c
 8004958:	58025480 	.word	0x58025480
 800495c:	58025494 	.word	0x58025494

08004960 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a42      	ldr	r2, [pc, #264]	; (8004a78 <DMA_CalcBaseAndBitshift+0x118>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d04a      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a41      	ldr	r2, [pc, #260]	; (8004a7c <DMA_CalcBaseAndBitshift+0x11c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d045      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <DMA_CalcBaseAndBitshift+0x120>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d040      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a3e      	ldr	r2, [pc, #248]	; (8004a84 <DMA_CalcBaseAndBitshift+0x124>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d03b      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <DMA_CalcBaseAndBitshift+0x128>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d036      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3b      	ldr	r2, [pc, #236]	; (8004a8c <DMA_CalcBaseAndBitshift+0x12c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d031      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a39      	ldr	r2, [pc, #228]	; (8004a90 <DMA_CalcBaseAndBitshift+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02c      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <DMA_CalcBaseAndBitshift+0x134>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d027      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a36      	ldr	r2, [pc, #216]	; (8004a98 <DMA_CalcBaseAndBitshift+0x138>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <DMA_CalcBaseAndBitshift+0x13c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d01d      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x140>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x144>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x148>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <DMA_CalcBaseAndBitshift+0x14c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x150>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <DMA_CalcBaseAndBitshift+0xa8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x154>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <DMA_CalcBaseAndBitshift+0xac>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <DMA_CalcBaseAndBitshift+0xae>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d024      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	3b10      	subs	r3, #16
 8004a1a:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x158>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	4a24      	ldr	r2, [pc, #144]	; (8004abc <DMA_CalcBaseAndBitshift+0x15c>)
 8004a2c:	5cd3      	ldrb	r3, [r2, r3]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d908      	bls.n	8004a4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4a:	e00d      	b.n	8004a68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5a:	e005      	b.n	8004a68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40020010 	.word	0x40020010
 8004a7c:	40020028 	.word	0x40020028
 8004a80:	40020040 	.word	0x40020040
 8004a84:	40020058 	.word	0x40020058
 8004a88:	40020070 	.word	0x40020070
 8004a8c:	40020088 	.word	0x40020088
 8004a90:	400200a0 	.word	0x400200a0
 8004a94:	400200b8 	.word	0x400200b8
 8004a98:	40020410 	.word	0x40020410
 8004a9c:	40020428 	.word	0x40020428
 8004aa0:	40020440 	.word	0x40020440
 8004aa4:	40020458 	.word	0x40020458
 8004aa8:	40020470 	.word	0x40020470
 8004aac:	40020488 	.word	0x40020488
 8004ab0:	400204a0 	.word	0x400204a0
 8004ab4:	400204b8 	.word	0x400204b8
 8004ab8:	aaaaaaab 	.word	0xaaaaaaab
 8004abc:	08009a08 	.word	0x08009a08
 8004ac0:	fffffc00 	.word	0xfffffc00

08004ac4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d120      	bne.n	8004b1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d858      	bhi.n	8004b92 <DMA_CheckFifoParam+0xce>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <DMA_CheckFifoParam+0x24>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b0b 	.word	0x08004b0b
 8004af0:	08004af9 	.word	0x08004af9
 8004af4:	08004b93 	.word	0x08004b93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d048      	beq.n	8004b96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b08:	e045      	b.n	8004b96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b12:	d142      	bne.n	8004b9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b18:	e03f      	b.n	8004b9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b22:	d123      	bne.n	8004b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d838      	bhi.n	8004b9e <DMA_CheckFifoParam+0xda>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <DMA_CheckFifoParam+0x70>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b4b 	.word	0x08004b4b
 8004b3c:	08004b45 	.word	0x08004b45
 8004b40:	08004b5d 	.word	0x08004b5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
        break;
 8004b48:	e030      	b.n	8004bac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b5a:	e022      	b.n	8004ba2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b64:	d11f      	bne.n	8004ba6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b6a:	e01c      	b.n	8004ba6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d902      	bls.n	8004b7a <DMA_CheckFifoParam+0xb6>
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d003      	beq.n	8004b80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b78:	e018      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b7e:	e015      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b90:	e00b      	b.n	8004baa <DMA_CheckFifoParam+0xe6>
        break;
 8004b92:	bf00      	nop
 8004b94:	e00a      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        break;
 8004b96:	bf00      	nop
 8004b98:	e008      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e006      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
    break;
 8004baa:	bf00      	nop
    }
  }

  return status;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a38      	ldr	r2, [pc, #224]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d022      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a36      	ldr	r2, [pc, #216]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01d      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a33      	ldr	r2, [pc, #204]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a30      	ldr	r2, [pc, #192]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	3b08      	subs	r3, #8
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a24      	ldr	r2, [pc, #144]	; (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c58:	e024      	b.n	8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3b10      	subs	r3, #16
 8004c62:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d806      	bhi.n	8004c82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d902      	bls.n	8004c82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3308      	adds	r3, #8
 8004c80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	58025408 	.word	0x58025408
 8004cb4:	5802541c 	.word	0x5802541c
 8004cb8:	58025430 	.word	0x58025430
 8004cbc:	58025444 	.word	0x58025444
 8004cc0:	58025458 	.word	0x58025458
 8004cc4:	5802546c 	.word	0x5802546c
 8004cc8:	58025480 	.word	0x58025480
 8004ccc:	58025494 	.word	0x58025494
 8004cd0:	cccccccd 	.word	0xcccccccd
 8004cd4:	16009600 	.word	0x16009600
 8004cd8:	58025880 	.word	0x58025880
 8004cdc:	aaaaaaab 	.word	0xaaaaaaab
 8004ce0:	400204b8 	.word	0x400204b8
 8004ce4:	4002040f 	.word	0x4002040f
 8004ce8:	10008200 	.word	0x10008200
 8004cec:	40020880 	.word	0x40020880

08004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04a      	beq.n	8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d847      	bhi.n	8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d78:	671a      	str	r2, [r3, #112]	; 0x70
 8004d7a:	e009      	b.n	8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	461a      	mov	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	2201      	movs	r2, #1
 8004d96:	409a      	lsls	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	58025408 	.word	0x58025408
 8004dac:	5802541c 	.word	0x5802541c
 8004db0:	58025430 	.word	0x58025430
 8004db4:	58025444 	.word	0x58025444
 8004db8:	58025458 	.word	0x58025458
 8004dbc:	5802546c 	.word	0x5802546c
 8004dc0:	58025480 	.word	0x58025480
 8004dc4:	58025494 	.word	0x58025494
 8004dc8:	1600963f 	.word	0x1600963f
 8004dcc:	58025940 	.word	0x58025940
 8004dd0:	1000823f 	.word	0x1000823f
 8004dd4:	40020940 	.word	0x40020940

08004dd8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	460b      	mov	r3, r1
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e00a      	b.n	8004e0a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	605a      	str	r2, [r3, #4]
      break;
 8004e00:	e002      	b.n	8004e08 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	bf00      	nop
  }

  return status;
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e003      	b.n	8004e32 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	; 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e4e:	4b89      	ldr	r3, [pc, #548]	; (8005074 <HAL_GPIO_Init+0x234>)
 8004e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e52:	e194      	b.n	800517e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	4013      	ands	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8186 	beq.w	8005178 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d00b      	beq.n	8004e8c <HAL_GPIO_Init+0x4c>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d007      	beq.n	8004e8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e80:	2b11      	cmp	r3, #17
 8004e82:	d003      	beq.n	8004e8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b12      	cmp	r3, #18
 8004e8a:	d130      	bne.n	8004eee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	091b      	lsrs	r3, r3, #4
 8004ed8:	f003 0201 	and.w	r2, r3, #1
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0xee>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b12      	cmp	r3, #18
 8004f2c:	d123      	bne.n	8004f76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	08da      	lsrs	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3208      	adds	r2, #8
 8004f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	08da      	lsrs	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3208      	adds	r2, #8
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	2203      	movs	r2, #3
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f003 0203 	and.w	r2, r3, #3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80e0 	beq.w	8005178 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb8:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <HAL_GPIO_Init+0x238>)
 8004fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fbe:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <HAL_GPIO_Init+0x238>)
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <HAL_GPIO_Init+0x238>)
 8004fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <HAL_GPIO_Init+0x23c>)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	3302      	adds	r3, #2
 8004fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	220f      	movs	r2, #15
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a20      	ldr	r2, [pc, #128]	; (8005080 <HAL_GPIO_Init+0x240>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d052      	beq.n	80050a8 <HAL_GPIO_Init+0x268>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <HAL_GPIO_Init+0x244>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d031      	beq.n	800506e <HAL_GPIO_Init+0x22e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <HAL_GPIO_Init+0x248>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02b      	beq.n	800506a <HAL_GPIO_Init+0x22a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_GPIO_Init+0x24c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d025      	beq.n	8005066 <HAL_GPIO_Init+0x226>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_GPIO_Init+0x250>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <HAL_GPIO_Init+0x222>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <HAL_GPIO_Init+0x254>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d019      	beq.n	800505e <HAL_GPIO_Init+0x21e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <HAL_GPIO_Init+0x258>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_GPIO_Init+0x21a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_GPIO_Init+0x25c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_GPIO_Init+0x216>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_GPIO_Init+0x260>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <HAL_GPIO_Init+0x212>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_GPIO_Init+0x264>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_GPIO_Init+0x20e>
 800504a:	2309      	movs	r3, #9
 800504c:	e02d      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 800504e:	230a      	movs	r3, #10
 8005050:	e02b      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 8005052:	2308      	movs	r3, #8
 8005054:	e029      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 8005056:	2307      	movs	r3, #7
 8005058:	e027      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 800505a:	2306      	movs	r3, #6
 800505c:	e025      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 800505e:	2305      	movs	r3, #5
 8005060:	e023      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 8005062:	2304      	movs	r3, #4
 8005064:	e021      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 8005066:	2303      	movs	r3, #3
 8005068:	e01f      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 800506a:	2302      	movs	r3, #2
 800506c:	e01d      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 800506e:	2301      	movs	r3, #1
 8005070:	e01b      	b.n	80050aa <HAL_GPIO_Init+0x26a>
 8005072:	bf00      	nop
 8005074:	58000080 	.word	0x58000080
 8005078:	58024400 	.word	0x58024400
 800507c:	58000400 	.word	0x58000400
 8005080:	58020000 	.word	0x58020000
 8005084:	58020400 	.word	0x58020400
 8005088:	58020800 	.word	0x58020800
 800508c:	58020c00 	.word	0x58020c00
 8005090:	58021000 	.word	0x58021000
 8005094:	58021400 	.word	0x58021400
 8005098:	58021800 	.word	0x58021800
 800509c:	58021c00 	.word	0x58021c00
 80050a0:	58022000 	.word	0x58022000
 80050a4:	58022400 	.word	0x58022400
 80050a8:	2300      	movs	r3, #0
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	f002 0203 	and.w	r2, r2, #3
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	4093      	lsls	r3, r2
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050ba:	4938      	ldr	r1, [pc, #224]	; (800519c <HAL_GPIO_Init+0x35c>)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	3302      	adds	r3, #2
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	f47f ae63 	bne.w	8004e54 <HAL_GPIO_Init+0x14>
  }
}
 800518e:	bf00      	nop
 8005190:	bf00      	nop
 8005192:	3724      	adds	r7, #36	; 0x24
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	58000400 	.word	0x58000400

080051a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	807b      	strh	r3, [r7, #2]
 80051ac:	4613      	mov	r3, r2
 80051ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051b0:	787b      	ldrb	r3, [r7, #1]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051b6:	887a      	ldrh	r2, [r7, #2]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051bc:	e003      	b.n	80051c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051be:	887b      	ldrh	r3, [r7, #2]
 80051c0:	041a      	lsls	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	619a      	str	r2, [r3, #24]
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051e4:	887a      	ldrh	r2, [r7, #2]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4013      	ands	r3, r2
 80051ea:	041a      	lsls	r2, r3, #16
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	43d9      	mvns	r1, r3
 80051f0:	887b      	ldrh	r3, [r7, #2]
 80051f2:	400b      	ands	r3, r1
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	619a      	str	r2, [r3, #24]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	4603      	mov	r3, r0
 800520e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	4618      	mov	r0, r3
 800522e:	f7fb fe71 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d00a      	beq.n	8005266 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005250:	4b16      	ldr	r3, [pc, #88]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d001      	beq.n	8005262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01f      	b.n	80052a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e01d      	b.n	80052a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f023 0207 	bic.w	r2, r3, #7
 800526e:	490f      	ldr	r1, [pc, #60]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4313      	orrs	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005276:	f7fc fcb7 	bl	8001be8 <HAL_GetTick>
 800527a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800527c:	e009      	b.n	8005292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800527e:	f7fc fcb3 	bl	8001be8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528c:	d901      	bls.n	8005292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e007      	b.n	80052a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	d1ee      	bne.n	800527e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	58024800 	.word	0x58024800

080052b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	; 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e3ff      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8087 	beq.w	80053de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d0:	4b99      	ldr	r3, [pc, #612]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052da:	4b97      	ldr	r3, [pc, #604]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d007      	beq.n	80052f6 <HAL_RCC_OscConfig+0x46>
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	2b18      	cmp	r3, #24
 80052ea:	d110      	bne.n	800530e <HAL_RCC_OscConfig+0x5e>
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d10b      	bne.n	800530e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f6:	4b90      	ldr	r3, [pc, #576]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d06c      	beq.n	80053dc <HAL_RCC_OscConfig+0x12c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d168      	bne.n	80053dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e3d9      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x76>
 8005318:	4b87      	ldr	r3, [pc, #540]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a86      	ldr	r2, [pc, #536]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e02e      	b.n	8005384 <HAL_RCC_OscConfig+0xd4>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x98>
 800532e:	4b82      	ldr	r3, [pc, #520]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a81      	ldr	r2, [pc, #516]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b7f      	ldr	r3, [pc, #508]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7e      	ldr	r2, [pc, #504]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e01d      	b.n	8005384 <HAL_RCC_OscConfig+0xd4>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0xbc>
 8005352:	4b79      	ldr	r3, [pc, #484]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a78      	ldr	r2, [pc, #480]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b76      	ldr	r3, [pc, #472]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a75      	ldr	r2, [pc, #468]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0xd4>
 800536c:	4b72      	ldr	r3, [pc, #456]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a71      	ldr	r2, [pc, #452]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a6e      	ldr	r2, [pc, #440]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800537e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fc fc2c 	bl	8001be8 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005394:	f7fc fc28 	bl	8001be8 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e38d      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a6:	4b64      	ldr	r3, [pc, #400]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0xe4>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fc fc18 	bl	8001be8 <HAL_GetTick>
 80053b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fc fc14 	bl	8001be8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e379      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ce:	4b5a      	ldr	r3, [pc, #360]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x10c>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80ae 	beq.w	8005548 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f6:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_RCC_OscConfig+0x162>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2b18      	cmp	r3, #24
 8005406:	d13a      	bne.n	800547e <HAL_RCC_OscConfig+0x1ce>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d135      	bne.n	800547e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005412:	4b49      	ldr	r3, [pc, #292]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x17a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e34b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542a:	f7fc fc1d 	bl	8001c68 <HAL_GetREVID>
 800542e:	4603      	mov	r3, r0
 8005430:	f241 0203 	movw	r2, #4099	; 0x1003
 8005434:	4293      	cmp	r3, r2
 8005436:	d817      	bhi.n	8005468 <HAL_RCC_OscConfig+0x1b8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d108      	bne.n	8005452 <HAL_RCC_OscConfig+0x1a2>
 8005440:	4b3d      	ldr	r3, [pc, #244]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005448:	4a3b      	ldr	r2, [pc, #236]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800544a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005450:	e07a      	b.n	8005548 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	031b      	lsls	r3, r3, #12
 8005460:	4935      	ldr	r1, [pc, #212]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005462:	4313      	orrs	r3, r2
 8005464:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005466:	e06f      	b.n	8005548 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	4930      	ldr	r1, [pc, #192]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800547c:	e064      	b.n	8005548 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d045      	beq.n	8005512 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 0219 	bic.w	r2, r3, #25
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	4929      	ldr	r1, [pc, #164]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fc fba6 	bl	8001be8 <HAL_GetTick>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a0:	f7fc fba2 	bl	8001be8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e307      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054be:	f7fc fbd3 	bl	8001c68 <HAL_GetREVID>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d817      	bhi.n	80054fc <HAL_RCC_OscConfig+0x24c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d108      	bne.n	80054e6 <HAL_RCC_OscConfig+0x236>
 80054d4:	4b18      	ldr	r3, [pc, #96]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054dc:	4a16      	ldr	r2, [pc, #88]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80054de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e2:	6053      	str	r3, [r2, #4]
 80054e4:	e030      	b.n	8005548 <HAL_RCC_OscConfig+0x298>
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	031b      	lsls	r3, r3, #12
 80054f4:	4910      	ldr	r1, [pc, #64]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
 80054fa:	e025      	b.n	8005548 <HAL_RCC_OscConfig+0x298>
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	490b      	ldr	r1, [pc, #44]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	e01a      	b.n	8005548 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a08      	ldr	r2, [pc, #32]	; (8005538 <HAL_RCC_OscConfig+0x288>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fc fb63 	bl	8001be8 <HAL_GetTick>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005524:	e00a      	b.n	800553c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005526:	f7fc fb5f 	bl	8001be8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d903      	bls.n	800553c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e2c4      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
 8005538:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800553c:	4ba4      	ldr	r3, [pc, #656]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ee      	bne.n	8005526 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a9 	beq.w	80056a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005556:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005560:	4b9b      	ldr	r3, [pc, #620]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d007      	beq.n	800557c <HAL_RCC_OscConfig+0x2cc>
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b18      	cmp	r3, #24
 8005570:	d13a      	bne.n	80055e8 <HAL_RCC_OscConfig+0x338>
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d135      	bne.n	80055e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800557c:	4b94      	ldr	r3, [pc, #592]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_OscConfig+0x2e4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d001      	beq.n	8005594 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e296      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005594:	f7fc fb68 	bl	8001c68 <HAL_GetREVID>
 8005598:	4603      	mov	r3, r0
 800559a:	f241 0203 	movw	r2, #4099	; 0x1003
 800559e:	4293      	cmp	r3, r2
 80055a0:	d817      	bhi.n	80055d2 <HAL_RCC_OscConfig+0x322>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d108      	bne.n	80055bc <HAL_RCC_OscConfig+0x30c>
 80055aa:	4b89      	ldr	r3, [pc, #548]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055b2:	4a87      	ldr	r2, [pc, #540]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ba:	e075      	b.n	80056a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055bc:	4b84      	ldr	r3, [pc, #528]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	069b      	lsls	r3, r3, #26
 80055ca:	4981      	ldr	r1, [pc, #516]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d0:	e06a      	b.n	80056a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055d2:	4b7f      	ldr	r3, [pc, #508]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	497b      	ldr	r1, [pc, #492]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055e6:	e05f      	b.n	80056a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d042      	beq.n	8005676 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055f0:	4b77      	ldr	r3, [pc, #476]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a76      	ldr	r2, [pc, #472]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fc faf4 	bl	8001be8 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005604:	f7fc faf0 	bl	8001be8 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e255      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005616:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005622:	f7fc fb21 	bl	8001c68 <HAL_GetREVID>
 8005626:	4603      	mov	r3, r0
 8005628:	f241 0203 	movw	r2, #4099	; 0x1003
 800562c:	4293      	cmp	r3, r2
 800562e:	d817      	bhi.n	8005660 <HAL_RCC_OscConfig+0x3b0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	2b20      	cmp	r3, #32
 8005636:	d108      	bne.n	800564a <HAL_RCC_OscConfig+0x39a>
 8005638:	4b65      	ldr	r3, [pc, #404]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005640:	4a63      	ldr	r2, [pc, #396]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005646:	6053      	str	r3, [r2, #4]
 8005648:	e02e      	b.n	80056a8 <HAL_RCC_OscConfig+0x3f8>
 800564a:	4b61      	ldr	r3, [pc, #388]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	069b      	lsls	r3, r3, #26
 8005658:	495d      	ldr	r1, [pc, #372]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
 800565e:	e023      	b.n	80056a8 <HAL_RCC_OscConfig+0x3f8>
 8005660:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	4958      	ldr	r1, [pc, #352]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005670:	4313      	orrs	r3, r2
 8005672:	60cb      	str	r3, [r1, #12]
 8005674:	e018      	b.n	80056a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005676:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a55      	ldr	r2, [pc, #340]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fc fab1 	bl	8001be8 <HAL_GetTick>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800568a:	f7fc faad 	bl	8001be8 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e212      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800569c:	4b4c      	ldr	r3, [pc, #304]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f0      	bne.n	800568a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d036      	beq.n	8005722 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d019      	beq.n	80056f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056bc:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80056be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c0:	4a43      	ldr	r2, [pc, #268]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fc fa8e 	bl	8001be8 <HAL_GetTick>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fc fa8a 	bl	8001be8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e1ef      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056e2:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x420>
 80056ee:	e018      	b.n	8005722 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f0:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80056f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f4:	4a36      	ldr	r2, [pc, #216]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fc fa74 	bl	8001be8 <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005704:	f7fc fa70 	bl	8001be8 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e1d5      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005716:	4b2e      	ldr	r3, [pc, #184]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d036      	beq.n	800579c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d019      	beq.n	800576a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005736:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a25      	ldr	r2, [pc, #148]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800573c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005742:	f7fc fa51 	bl	8001be8 <HAL_GetTick>
 8005746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800574a:	f7fc fa4d 	bl	8001be8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1b2      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800575c:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCC_OscConfig+0x49a>
 8005768:	e018      	b.n	800579c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800576a:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005776:	f7fc fa37 	bl	8001be8 <HAL_GetTick>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800577e:	f7fc fa33 	bl	8001be8 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e198      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <HAL_RCC_OscConfig+0x520>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f0      	bne.n	800577e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8085 	beq.w	80058b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_RCC_OscConfig+0x524>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_RCC_OscConfig+0x524>)
 80057b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b6:	f7fc fa17 	bl	8001be8 <HAL_GetTick>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057bc:	e00c      	b.n	80057d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057be:	f7fc fa13 	bl	8001be8 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	; 0x64
 80057ca:	d905      	bls.n	80057d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e178      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
 80057d0:	58024400 	.word	0x58024400
 80057d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d8:	4b96      	ldr	r3, [pc, #600]	; (8005a34 <HAL_RCC_OscConfig+0x784>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ec      	beq.n	80057be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x54a>
 80057ec:	4b92      	ldr	r3, [pc, #584]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	4a91      	ldr	r2, [pc, #580]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6713      	str	r3, [r2, #112]	; 0x70
 80057f8:	e02d      	b.n	8005856 <HAL_RCC_OscConfig+0x5a6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x56c>
 8005802:	4b8d      	ldr	r3, [pc, #564]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4a8c      	ldr	r2, [pc, #560]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	6713      	str	r3, [r2, #112]	; 0x70
 800580e:	4b8a      	ldr	r3, [pc, #552]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a89      	ldr	r2, [pc, #548]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	e01c      	b.n	8005856 <HAL_RCC_OscConfig+0x5a6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b05      	cmp	r3, #5
 8005822:	d10c      	bne.n	800583e <HAL_RCC_OscConfig+0x58e>
 8005824:	4b84      	ldr	r3, [pc, #528]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a83      	ldr	r2, [pc, #524]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	4b81      	ldr	r3, [pc, #516]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a80      	ldr	r2, [pc, #512]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
 800583c:	e00b      	b.n	8005856 <HAL_RCC_OscConfig+0x5a6>
 800583e:	4b7e      	ldr	r3, [pc, #504]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	4a7d      	ldr	r2, [pc, #500]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	6713      	str	r3, [r2, #112]	; 0x70
 800584a:	4b7b      	ldr	r3, [pc, #492]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a7a      	ldr	r2, [pc, #488]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d015      	beq.n	800588a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585e:	f7fc f9c3 	bl	8001be8 <HAL_GetTick>
 8005862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005864:	e00a      	b.n	800587c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fc f9bf 	bl	8001be8 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e122      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800587c:	4b6e      	ldr	r3, [pc, #440]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ee      	beq.n	8005866 <HAL_RCC_OscConfig+0x5b6>
 8005888:	e014      	b.n	80058b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fc f9ad 	bl	8001be8 <HAL_GetTick>
 800588e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fc f9a9 	bl	8001be8 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e10c      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058a8:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ee      	bne.n	8005892 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8101 	beq.w	8005ac0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058be:	4b5e      	ldr	r3, [pc, #376]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c6:	2b18      	cmp	r3, #24
 80058c8:	f000 80bc 	beq.w	8005a44 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	f040 8095 	bne.w	8005a00 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d6:	4b58      	ldr	r3, [pc, #352]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a57      	ldr	r2, [pc, #348]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80058dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fc f981 	bl	8001be8 <HAL_GetTick>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ea:	f7fc f97d 	bl	8001be8 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0e2      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058fc:	4b4e      	ldr	r3, [pc, #312]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005908:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800590a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590c:	4b4b      	ldr	r3, [pc, #300]	; (8005a3c <HAL_RCC_OscConfig+0x78c>)
 800590e:	4013      	ands	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005918:	0112      	lsls	r2, r2, #4
 800591a:	430a      	orrs	r2, r1
 800591c:	4946      	ldr	r1, [pc, #280]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800591e:	4313      	orrs	r3, r2
 8005920:	628b      	str	r3, [r1, #40]	; 0x28
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	3b01      	subs	r3, #1
 8005928:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	3b01      	subs	r3, #1
 8005932:	025b      	lsls	r3, r3, #9
 8005934:	b29b      	uxth	r3, r3
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	3b01      	subs	r3, #1
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	3b01      	subs	r3, #1
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005952:	4939      	ldr	r1, [pc, #228]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005954:	4313      	orrs	r3, r2
 8005956:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a36      	ldr	r2, [pc, #216]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005964:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <HAL_RCC_OscConfig+0x790>)
 800596a:	4013      	ands	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005970:	00d2      	lsls	r2, r2, #3
 8005972:	4931      	ldr	r1, [pc, #196]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005974:	4313      	orrs	r3, r2
 8005976:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005978:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	f023 020c 	bic.w	r2, r3, #12
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	492c      	ldr	r1, [pc, #176]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005986:	4313      	orrs	r3, r2
 8005988:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800598a:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f023 0202 	bic.w	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	4928      	ldr	r1, [pc, #160]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005998:	4313      	orrs	r3, r2
 800599a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800599c:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4a25      	ldr	r2, [pc, #148]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a8:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059b4:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fc f906 	bl	8001be8 <HAL_GetTick>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fc f902 	bl	8001be8 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e067      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f2:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0x730>
 80059fe:	e05f      	b.n	8005ac0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a00:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fc f8ec 	bl	8001be8 <HAL_GetTick>
 8005a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fc f8e8 	bl	8001be8 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e04d      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <HAL_RCC_OscConfig+0x788>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x764>
 8005a32:	e045      	b.n	8005ac0 <HAL_RCC_OscConfig+0x810>
 8005a34:	58024800 	.word	0x58024800
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	fffffc0c 	.word	0xfffffc0c
 8005a40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_RCC_OscConfig+0x81c>)
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <HAL_RCC_OscConfig+0x81c>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d031      	beq.n	8005abc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d12a      	bne.n	8005abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d122      	bne.n	8005abc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d11a      	bne.n	8005abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	0a5b      	lsrs	r3, r3, #9
 8005a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d111      	bne.n	8005abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d108      	bne.n	8005abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	0e1b      	lsrs	r3, r3, #24
 8005aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3730      	adds	r7, #48	; 0x30
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400

08005ad0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e19c      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b8a      	ldr	r3, [pc, #552]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d910      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b87      	ldr	r3, [pc, #540]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	4985      	ldr	r1, [pc, #532]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b83      	ldr	r3, [pc, #524]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e184      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d010      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	4b7b      	ldr	r3, [pc, #492]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d908      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b30:	4b78      	ldr	r3, [pc, #480]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	4975      	ldr	r1, [pc, #468]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	4b70      	ldr	r3, [pc, #448]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d908      	bls.n	8005b70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	496a      	ldr	r1, [pc, #424]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	4b64      	ldr	r3, [pc, #400]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d908      	bls.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b8c:	4b61      	ldr	r3, [pc, #388]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	495e      	ldr	r1, [pc, #376]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	4b59      	ldr	r3, [pc, #356]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d908      	bls.n	8005bcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bba:	4b56      	ldr	r3, [pc, #344]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4953      	ldr	r1, [pc, #332]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	4b4d      	ldr	r3, [pc, #308]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d908      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be8:	4b4a      	ldr	r3, [pc, #296]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f023 020f 	bic.w	r2, r3, #15
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4947      	ldr	r1, [pc, #284]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d055      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c06:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	4940      	ldr	r1, [pc, #256]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c20:	4b3c      	ldr	r3, [pc, #240]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d121      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0f6      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c38:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d115      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0ea      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c50:	4b30      	ldr	r3, [pc, #192]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0de      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0d6      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f023 0207 	bic.w	r2, r3, #7
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4925      	ldr	r1, [pc, #148]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fb ffb1 	bl	8001be8 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8a:	f7fb ffad 	bl	8001be8 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0be      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d1eb      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d010      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d208      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f023 020f 	bic.w	r2, r3, #15
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	490e      	ldr	r1, [pc, #56]	; (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d214      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 020f 	bic.w	r2, r3, #15
 8005cf6:	4906      	ldr	r1, [pc, #24]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e086      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
 8005d10:	52002000 	.word	0x52002000
 8005d14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d010      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d208      	bcs.n	8005d46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d34:	4b3c      	ldr	r3, [pc, #240]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	4939      	ldr	r1, [pc, #228]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d010      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d208      	bcs.n	8005d74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d62:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	492e      	ldr	r1, [pc, #184]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d208      	bcs.n	8005da2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	4922      	ldr	r1, [pc, #136]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d010      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d208      	bcs.n	8005dd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4917      	ldr	r1, [pc, #92]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dd0:	f000 f834 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	4912      	ldr	r1, [pc, #72]	; (8005e2c <HAL_RCC_ClockConfig+0x35c>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dee:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <HAL_RCC_ClockConfig+0x35c>)
 8005df8:	5cd3      	ldrb	r3, [r2, r3]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x360>)
 8005e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e08:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x364>)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x368>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fb fe9e 	bl	8001b54 <HAL_InitTick>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	080099f8 	.word	0x080099f8
 8005e30:	2400001c 	.word	0x2400001c
 8005e34:	24000018 	.word	0x24000018
 8005e38:	24000020 	.word	0x24000020

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e42:	4bb3      	ldr	r3, [pc, #716]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4a:	2b18      	cmp	r3, #24
 8005e4c:	f200 8155 	bhi.w	80060fa <HAL_RCC_GetSysClockFreq+0x2be>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	080060fb 	.word	0x080060fb
 8005e60:	080060fb 	.word	0x080060fb
 8005e64:	080060fb 	.word	0x080060fb
 8005e68:	080060fb 	.word	0x080060fb
 8005e6c:	080060fb 	.word	0x080060fb
 8005e70:	080060fb 	.word	0x080060fb
 8005e74:	080060fb 	.word	0x080060fb
 8005e78:	08005ee3 	.word	0x08005ee3
 8005e7c:	080060fb 	.word	0x080060fb
 8005e80:	080060fb 	.word	0x080060fb
 8005e84:	080060fb 	.word	0x080060fb
 8005e88:	080060fb 	.word	0x080060fb
 8005e8c:	080060fb 	.word	0x080060fb
 8005e90:	080060fb 	.word	0x080060fb
 8005e94:	080060fb 	.word	0x080060fb
 8005e98:	08005ee9 	.word	0x08005ee9
 8005e9c:	080060fb 	.word	0x080060fb
 8005ea0:	080060fb 	.word	0x080060fb
 8005ea4:	080060fb 	.word	0x080060fb
 8005ea8:	080060fb 	.word	0x080060fb
 8005eac:	080060fb 	.word	0x080060fb
 8005eb0:	080060fb 	.word	0x080060fb
 8005eb4:	080060fb 	.word	0x080060fb
 8005eb8:	08005eef 	.word	0x08005eef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebc:	4b94      	ldr	r3, [pc, #592]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec8:	4b91      	ldr	r3, [pc, #580]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a90      	ldr	r2, [pc, #576]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005eda:	e111      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005edc:	4b8d      	ldr	r3, [pc, #564]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ede:	61bb      	str	r3, [r7, #24]
    break;
 8005ee0:	e10e      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ee4:	61bb      	str	r3, [r7, #24]
    break;
 8005ee6:	e10b      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ee8:	4b8c      	ldr	r3, [pc, #560]	; (800611c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eea:	61bb      	str	r3, [r7, #24]
    break;
 8005eec:	e108      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eee:	4b88      	ldr	r3, [pc, #544]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ef8:	4b85      	ldr	r3, [pc, #532]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f04:	4b82      	ldr	r3, [pc, #520]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f0e:	4b80      	ldr	r3, [pc, #512]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	08db      	lsrs	r3, r3, #3
 8005f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80e1 	beq.w	80060f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f000 8083 	beq.w	8006040 <HAL_RCC_GetSysClockFreq+0x204>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f200 80a1 	bhi.w	8006084 <HAL_RCC_GetSysClockFreq+0x248>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0x114>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d056      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f4e:	e099      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f50:	4b6f      	ldr	r3, [pc, #444]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02d      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f5c:	4b6c      	ldr	r3, [pc, #432]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	4a6b      	ldr	r2, [pc, #428]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b62      	ldr	r3, [pc, #392]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fb6:	e087      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b51      	ldr	r3, [pc, #324]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ffa:	e065      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2ec>
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b40      	ldr	r3, [pc, #256]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006022:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603e:	e043      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800612c <HAL_RCC_GetSysClockFreq+0x2f0>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b2f      	ldr	r3, [pc, #188]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a02 	vldr	s12, [r7, #8]
 8006066:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006082:	e021      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d2:	3301      	adds	r3, #1
 80060d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ec:	ee17 3a90 	vmov	r3, s15
 80060f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060f2:	e005      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
    break;
 80060f8:	e002      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060fc:	61bb      	str	r3, [r7, #24]
    break;
 80060fe:	bf00      	nop
  }

  return sysclockfreq;
 8006100:	69bb      	ldr	r3, [r7, #24]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3724      	adds	r7, #36	; 0x24
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	58024400 	.word	0x58024400
 8006114:	03d09000 	.word	0x03d09000
 8006118:	003d0900 	.word	0x003d0900
 800611c:	007f2815 	.word	0x007f2815
 8006120:	46000000 	.word	0x46000000
 8006124:	4c742400 	.word	0x4c742400
 8006128:	4a742400 	.word	0x4a742400
 800612c:	4afe502a 	.word	0x4afe502a

08006130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006136:	f7ff fe81 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 800613a:	4602      	mov	r2, r0
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <HAL_RCC_GetHCLKFreq+0x50>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	490f      	ldr	r1, [pc, #60]	; (8006184 <HAL_RCC_GetHCLKFreq+0x54>)
 8006148:	5ccb      	ldrb	r3, [r1, r3]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_RCC_GetHCLKFreq+0x50>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <HAL_RCC_GetHCLKFreq+0x54>)
 800615e:	5cd3      	ldrb	r3, [r2, r3]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	fa22 f303 	lsr.w	r3, r2, r3
 800616a:	4a07      	ldr	r2, [pc, #28]	; (8006188 <HAL_RCC_GetHCLKFreq+0x58>)
 800616c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006174:	4b04      	ldr	r3, [pc, #16]	; (8006188 <HAL_RCC_GetHCLKFreq+0x58>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	58024400 	.word	0x58024400
 8006184:	080099f8 	.word	0x080099f8
 8006188:	2400001c 	.word	0x2400001c
 800618c:	24000018 	.word	0x24000018

08006190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006194:	f7ff ffcc 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	4904      	ldr	r1, [pc, #16]	; (80061b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061a6:	5ccb      	ldrb	r3, [r1, r3]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	58024400 	.word	0x58024400
 80061b8:	080099f8 	.word	0x080099f8

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061c0:	f7ff ffb6 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4904      	ldr	r1, [pc, #16]	; (80061e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	58024400 	.word	0x58024400
 80061e4:	080099f8 	.word	0x080099f8

080061e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061f4:	2300      	movs	r3, #0
 80061f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d03f      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800620c:	d02a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800620e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006212:	d824      	bhi.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006218:	d018      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800621a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621e:	d81e      	bhi.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006228:	d007      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800622a:	e018      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622c:	4bab      	ldr	r3, [pc, #684]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	4aaa      	ldr	r2, [pc, #680]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006238:	e015      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3304      	adds	r3, #4
 800623e:	2102      	movs	r1, #2
 8006240:	4618      	mov	r0, r3
 8006242:	f001 f9cf 	bl	80075e4 <RCCEx_PLL2_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800624a:	e00c      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3324      	adds	r3, #36	; 0x24
 8006250:	2102      	movs	r1, #2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fa78 	bl	8007748 <RCCEx_PLL3_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
      break;
 8006262:	e000      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800626c:	4b9b      	ldr	r3, [pc, #620]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800626e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006278:	4998      	ldr	r1, [pc, #608]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627a:	4313      	orrs	r3, r2
 800627c:	650b      	str	r3, [r1, #80]	; 0x50
 800627e:	e001      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d03d      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	2b04      	cmp	r3, #4
 8006296:	d826      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062b5 	.word	0x080062b5
 80062a4:	080062c3 	.word	0x080062c3
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	080062ed 	.word	0x080062ed
 80062b0:	080062ed 	.word	0x080062ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b4:	4b89      	ldr	r3, [pc, #548]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a88      	ldr	r2, [pc, #544]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c0:	e015      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3304      	adds	r3, #4
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f98b 	bl	80075e4 <RCCEx_PLL2_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062d2:	e00c      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3324      	adds	r3, #36	; 0x24
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fa34 	bl	8007748 <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e4:	e003      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ea:	e000      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f4:	4b79      	ldr	r3, [pc, #484]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f8:	f023 0207 	bic.w	r2, r3, #7
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006300:	4976      	ldr	r1, [pc, #472]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	650b      	str	r3, [r1, #80]	; 0x50
 8006306:	e001      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006314:	2b00      	cmp	r3, #0
 8006316:	d042      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006320:	d02b      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d825      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006328:	2bc0      	cmp	r3, #192	; 0xc0
 800632a:	d028      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800632c:	2bc0      	cmp	r3, #192	; 0xc0
 800632e:	d821      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d016      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d81d      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d007      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006340:	e018      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006342:	4b66      	ldr	r3, [pc, #408]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4a65      	ldr	r2, [pc, #404]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800634c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800634e:	e017      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3304      	adds	r3, #4
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f001 f944 	bl	80075e4 <RCCEx_PLL2_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006360:	e00e      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3324      	adds	r3, #36	; 0x24
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f9ed 	bl	8007748 <RCCEx_PLL3_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006372:	e005      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	75fb      	strb	r3, [r7, #23]
      break;
 8006378:	e002      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800637e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006386:	4b55      	ldr	r3, [pc, #340]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	4952      	ldr	r1, [pc, #328]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006394:	4313      	orrs	r3, r2
 8006396:	650b      	str	r3, [r1, #80]	; 0x50
 8006398:	e001      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d049      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063b4:	d030      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80063b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063ba:	d82a      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063c0:	d02c      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80063c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063c6:	d824      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063cc:	d018      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80063ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d2:	d81e      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063dc:	d007      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063de:	e018      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e0:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a3d      	ldr	r2, [pc, #244]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ec:	e017      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 f8f5 	bl	80075e4 <RCCEx_PLL2_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063fe:	e00e      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f99e 	bl	8007748 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006410:	e005      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	75fb      	strb	r3, [r7, #23]
      break;
 8006416:	e002      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800641c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006424:	4b2d      	ldr	r3, [pc, #180]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006428:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006432:	492a      	ldr	r1, [pc, #168]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006434:	4313      	orrs	r3, r2
 8006436:	658b      	str	r3, [r1, #88]	; 0x58
 8006438:	e001      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006446:	2b00      	cmp	r3, #0
 8006448:	d04c      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006454:	d030      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800645a:	d82a      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800645c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006460:	d02c      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006462:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006466:	d824      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800646c:	d018      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800646e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006472:	d81e      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800647c:	d007      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800647e:	e018      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b16      	ldr	r3, [pc, #88]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800648c:	e017      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f001 f8a5 	bl	80075e4 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800649e:	e00e      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f94e 	bl	8007748 <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064b0:	e005      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
      break;
 80064b6:	e002      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10d      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064c4:	4b05      	ldr	r3, [pc, #20]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064d2:	4902      	ldr	r1, [pc, #8]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	658b      	str	r3, [r1, #88]	; 0x58
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064da:	bf00      	nop
 80064dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d032      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d01c      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d817      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d00c      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d813      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d016      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d10f      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4baf      	ldr	r3, [pc, #700]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4aae      	ldr	r2, [pc, #696]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006518:	e00e      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2102      	movs	r1, #2
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f85f 	bl	80075e4 <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800652a:	e005      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
      break;
 8006530:	e002      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800653e:	4ba3      	ldr	r3, [pc, #652]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006542:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800654a:	49a0      	ldr	r1, [pc, #640]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800654c:	4313      	orrs	r3, r2
 800654e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006550:	e001      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d047      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656a:	d030      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800656c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006570:	d82a      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006576:	d02c      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800657c:	d824      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800657e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006582:	d018      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006588:	d81e      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d007      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006594:	e018      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006596:	4b8d      	ldr	r3, [pc, #564]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	4a8c      	ldr	r2, [pc, #560]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800659c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065a2:	e017      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 f81a 	bl	80075e4 <RCCEx_PLL2_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065b4:	e00e      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3324      	adds	r3, #36	; 0x24
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 f8c3 	bl	8007748 <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065c6:	e005      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
      break;
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065da:	4b7c      	ldr	r3, [pc, #496]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e6:	4979      	ldr	r1, [pc, #484]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	650b      	str	r3, [r1, #80]	; 0x50
 80065ec:	e001      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d049      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006606:	d02e      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800660c:	d828      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800660e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006612:	d02a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006618:	d822      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800661a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800661e:	d026      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006624:	d81c      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662a:	d010      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800662c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006630:	d816      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01d      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663a:	d111      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	2101      	movs	r1, #1
 8006642:	4618      	mov	r0, r3
 8006644:	f000 ffce 	bl	80075e4 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800664c:	e012      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3324      	adds	r3, #36	; 0x24
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f877 	bl	8007748 <RCCEx_PLL3_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800665e:	e009      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
      break;
 8006664:	e006      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006666:	bf00      	nop
 8006668:	e004      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800667a:	4b54      	ldr	r3, [pc, #336]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800667c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006686:	4951      	ldr	r1, [pc, #324]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006688:	4313      	orrs	r3, r2
 800668a:	650b      	str	r3, [r1, #80]	; 0x50
 800668c:	e001      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d04b      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a8:	d02e      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80066aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ae:	d828      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b4:	d02a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ba:	d822      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c0:	d026      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c6:	d81c      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066cc:	d010      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80066ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d2:	d816      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80066d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066dc:	d111      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3304      	adds	r3, #4
 80066e2:	2101      	movs	r1, #1
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 ff7d 	bl	80075e4 <RCCEx_PLL2_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066ee:	e012      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	2101      	movs	r1, #1
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 f826 	bl	8007748 <RCCEx_PLL3_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006700:	e009      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	75fb      	strb	r3, [r7, #23]
      break;
 8006706:	e006      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006708:	bf00      	nop
 800670a:	e004      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800670c:	bf00      	nop
 800670e:	e002      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800671c:	4b2b      	ldr	r3, [pc, #172]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800671e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006720:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800672a:	4928      	ldr	r1, [pc, #160]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800672c:	4313      	orrs	r3, r2
 800672e:	658b      	str	r3, [r1, #88]	; 0x58
 8006730:	e001      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d02f      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674a:	d00e      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800674c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006750:	d814      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d015      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800675a:	d10f      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675c:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006768:	e00c      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3304      	adds	r3, #4
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f000 ff37 	bl	80075e4 <RCCEx_PLL2_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800677a:	e003      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
      break;
 8006780:	e000      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800678a:	4b10      	ldr	r3, [pc, #64]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800678c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006796:	490d      	ldr	r1, [pc, #52]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006798:	4313      	orrs	r3, r2
 800679a:	650b      	str	r3, [r1, #80]	; 0x50
 800679c:	e001      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d033      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d81c      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	080067f7 	.word	0x080067f7
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067df 	.word	0x080067df
 80067c8:	080067f7 	.word	0x080067f7
 80067cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d0:	4bb8      	ldr	r3, [pc, #736]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	4ab7      	ldr	r2, [pc, #732]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067dc:	e00c      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	2102      	movs	r1, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fefd 	bl	80075e4 <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
      break;
 80067f4:	e000      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067fe:	4bad      	ldr	r3, [pc, #692]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006802:	f023 0203 	bic.w	r2, r3, #3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	49aa      	ldr	r1, [pc, #680]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800680c:	4313      	orrs	r3, r2
 800680e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006810:	e001      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8086 	beq.w	8006930 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006824:	4ba4      	ldr	r3, [pc, #656]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4aa3      	ldr	r2, [pc, #652]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800682a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006830:	f7fb f9da 	bl	8001be8 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006836:	e009      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006838:	f7fb f9d6 	bl	8001be8 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	; 0x64
 8006844:	d902      	bls.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	75fb      	strb	r3, [r7, #23]
        break;
 800684a:	e005      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800684c:	4b9a      	ldr	r3, [pc, #616]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ef      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d166      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800685e:	4b95      	ldr	r3, [pc, #596]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006868:	4053      	eors	r3, r2
 800686a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686e:	2b00      	cmp	r3, #0
 8006870:	d013      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006872:	4b90      	ldr	r3, [pc, #576]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800687c:	4b8d      	ldr	r3, [pc, #564]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	4a8c      	ldr	r2, [pc, #560]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006886:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006888:	4b8a      	ldr	r3, [pc, #552]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4a89      	ldr	r2, [pc, #548]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006892:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006894:	4a87      	ldr	r2, [pc, #540]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a4:	d115      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a6:	f7fb f99f 	bl	8001be8 <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ac:	e00b      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ae:	f7fb f99b 	bl	8001be8 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	4293      	cmp	r3, r2
 80068be:	d902      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	75fb      	strb	r3, [r7, #23]
            break;
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068c6:	4b7b      	ldr	r3, [pc, #492]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0ed      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d126      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e6:	d10d      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80068e8:	4b72      	ldr	r3, [pc, #456]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068f6:	0919      	lsrs	r1, r3, #4
 80068f8:	4b70      	ldr	r3, [pc, #448]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80068fa:	400b      	ands	r3, r1
 80068fc:	496d      	ldr	r1, [pc, #436]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	610b      	str	r3, [r1, #16]
 8006902:	e005      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006904:	4b6b      	ldr	r3, [pc, #428]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	4a6a      	ldr	r2, [pc, #424]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800690a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800690e:	6113      	str	r3, [r2, #16]
 8006910:	4b68      	ldr	r3, [pc, #416]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800691a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691e:	4965      	ldr	r1, [pc, #404]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006920:	4313      	orrs	r3, r2
 8006922:	670b      	str	r3, [r1, #112]	; 0x70
 8006924:	e004      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	75bb      	strb	r3, [r7, #22]
 800692a:	e001      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d07e      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006940:	2b28      	cmp	r3, #40	; 0x28
 8006942:	d867      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006a1b 	.word	0x08006a1b
 8006950:	08006a15 	.word	0x08006a15
 8006954:	08006a15 	.word	0x08006a15
 8006958:	08006a15 	.word	0x08006a15
 800695c:	08006a15 	.word	0x08006a15
 8006960:	08006a15 	.word	0x08006a15
 8006964:	08006a15 	.word	0x08006a15
 8006968:	08006a15 	.word	0x08006a15
 800696c:	080069f1 	.word	0x080069f1
 8006970:	08006a15 	.word	0x08006a15
 8006974:	08006a15 	.word	0x08006a15
 8006978:	08006a15 	.word	0x08006a15
 800697c:	08006a15 	.word	0x08006a15
 8006980:	08006a15 	.word	0x08006a15
 8006984:	08006a15 	.word	0x08006a15
 8006988:	08006a15 	.word	0x08006a15
 800698c:	08006a03 	.word	0x08006a03
 8006990:	08006a15 	.word	0x08006a15
 8006994:	08006a15 	.word	0x08006a15
 8006998:	08006a15 	.word	0x08006a15
 800699c:	08006a15 	.word	0x08006a15
 80069a0:	08006a15 	.word	0x08006a15
 80069a4:	08006a15 	.word	0x08006a15
 80069a8:	08006a15 	.word	0x08006a15
 80069ac:	08006a1b 	.word	0x08006a1b
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006a15 	.word	0x08006a15
 80069b8:	08006a15 	.word	0x08006a15
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006a15 	.word	0x08006a15
 80069c8:	08006a15 	.word	0x08006a15
 80069cc:	08006a1b 	.word	0x08006a1b
 80069d0:	08006a15 	.word	0x08006a15
 80069d4:	08006a15 	.word	0x08006a15
 80069d8:	08006a15 	.word	0x08006a15
 80069dc:	08006a15 	.word	0x08006a15
 80069e0:	08006a15 	.word	0x08006a15
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006a15 	.word	0x08006a15
 80069ec:	08006a1b 	.word	0x08006a1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	2101      	movs	r1, #1
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fdf4 	bl	80075e4 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a00:	e00c      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3324      	adds	r3, #36	; 0x24
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fe9d 	bl	8007748 <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
      break;
 8006a18:	e000      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a2e:	4921      	ldr	r1, [pc, #132]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	654b      	str	r3, [r1, #84]	; 0x54
 8006a34:	e001      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d03e      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d820      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a97 	.word	0x08006a97
 8006a58:	08006a6d 	.word	0x08006a6d
 8006a5c:	08006a7f 	.word	0x08006a7f
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006a97 	.word	0x08006a97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	2101      	movs	r1, #1
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fdb6 	bl	80075e4 <RCCEx_PLL2_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a7c:	e00c      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3324      	adds	r3, #36	; 0x24
 8006a82:	2101      	movs	r1, #1
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fe5f 	bl	8007748 <RCCEx_PLL3_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a8e:	e003      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	75fb      	strb	r3, [r7, #23]
      break;
 8006a94:	e000      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d110      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	f023 0207 	bic.w	r2, r3, #7
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	4902      	ldr	r1, [pc, #8]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	654b      	str	r3, [r1, #84]	; 0x54
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006ab2:	bf00      	nop
 8006ab4:	58024400 	.word	0x58024400
 8006ab8:	58024800 	.word	0x58024800
 8006abc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d039      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d820      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b23 	.word	0x08006b23
 8006ae4:	08006af9 	.word	0x08006af9
 8006ae8:	08006b0b 	.word	0x08006b0b
 8006aec:	08006b23 	.word	0x08006b23
 8006af0:	08006b23 	.word	0x08006b23
 8006af4:	08006b23 	.word	0x08006b23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	2101      	movs	r1, #1
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fd70 	bl	80075e4 <RCCEx_PLL2_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b08:	e00c      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3324      	adds	r3, #36	; 0x24
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fe19 	bl	8007748 <RCCEx_PLL3_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b1a:	e003      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b20:	e000      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b2a:	4bb7      	ldr	r3, [pc, #732]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2e:	f023 0207 	bic.w	r2, r3, #7
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b38:	49b3      	ldr	r1, [pc, #716]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b3e:	e001      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d04b      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5a:	d02e      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b60:	d828      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b66:	d02a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6c:	d822      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b72:	d026      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b78:	d81c      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7e:	d010      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b84:	d816      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01d      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8e:	d111      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fd24 	bl	80075e4 <RCCEx_PLL2_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ba0:	e012      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3324      	adds	r3, #36	; 0x24
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fdcd 	bl	8007748 <RCCEx_PLL3_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bb2:	e009      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb8:	e006      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bba:	bf00      	nop
 8006bbc:	e004      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bce:	4b8e      	ldr	r3, [pc, #568]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bdc:	498a      	ldr	r1, [pc, #552]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	654b      	str	r3, [r1, #84]	; 0x54
 8006be2:	e001      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d04b      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bfe:	d02e      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006c00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c04:	d828      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	d02a      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c10:	d822      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c16:	d026      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1c:	d81c      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c22:	d010      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d816      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01d      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d111      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fcd2 	bl	80075e4 <RCCEx_PLL2_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c44:	e012      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fd7b 	bl	8007748 <RCCEx_PLL3_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c56:	e009      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e006      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e004      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c62:	bf00      	nop
 8006c64:	e002      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c66:	bf00      	nop
 8006c68:	e000      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c72:	4b65      	ldr	r3, [pc, #404]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c80:	4961      	ldr	r1, [pc, #388]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	658b      	str	r3, [r1, #88]	; 0x58
 8006c86:	e001      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d04b      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ca2:	d02e      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006ca4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ca8:	d828      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cae:	d02a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb4:	d822      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cba:	d026      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006cbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cc0:	d81c      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc6:	d010      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ccc:	d816      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01d      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd6:	d111      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fc80 	bl	80075e4 <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ce8:	e012      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3324      	adds	r3, #36	; 0x24
 8006cee:	2102      	movs	r1, #2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fd29 	bl	8007748 <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cfa:	e009      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	e006      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d02:	bf00      	nop
 8006d04:	e004      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d16:	4b3c      	ldr	r3, [pc, #240]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d24:	4938      	ldr	r1, [pc, #224]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	658b      	str	r3, [r1, #88]	; 0x58
 8006d2a:	e001      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d46:	d10a      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fcfa 	bl	8007748 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6c:	4926      	ldr	r1, [pc, #152]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d88:	d10a      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3324      	adds	r3, #36	; 0x24
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fcd9 	bl	8007748 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006da0:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dae:	4916      	ldr	r1, [pc, #88]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d036      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dca:	d01f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd0:	d817      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dda:	d009      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006ddc:	e011      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fbfd 	bl	80075e4 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dee:	e00e      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	2102      	movs	r1, #2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fca6 	bl	8007748 <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e00:	e005      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
      break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e08:	58024400 	.word	0x58024400
      break;
 8006e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e14:	4b93      	ldr	r3, [pc, #588]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e22:	4990      	ldr	r1, [pc, #576]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	658b      	str	r3, [r1, #88]	; 0x58
 8006e28:	e001      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d033      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e44:	d01c      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e4a:	d816      	bhi.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e50:	d003      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e56:	d007      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e58:	e00f      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e5a:	4b82      	ldr	r3, [pc, #520]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a81      	ldr	r2, [pc, #516]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e66:	e00c      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fc6a 	bl	8007748 <RCCEx_PLL3_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e78:	e003      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7e:	e000      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e88:	4b76      	ldr	r3, [pc, #472]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e96:	4973      	ldr	r1, [pc, #460]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e9c:	e001      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d029      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eba:	d007      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006ebc:	e00f      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebe:	4b69      	ldr	r3, [pc, #420]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	4a68      	ldr	r2, [pc, #416]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fb86 	bl	80075e4 <RCCEx_PLL2_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006edc:	e002      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006eea:	4b5e      	ldr	r3, [pc, #376]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	495b      	ldr	r1, [pc, #364]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006efc:	e001      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3324      	adds	r3, #36	; 0x24
 8006f12:	2102      	movs	r1, #2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fc17 	bl	8007748 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d030      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f38:	d017      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f3e:	d811      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f44:	d013      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4a:	d80b      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f54:	d106      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f56:	4b43      	ldr	r3, [pc, #268]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	4a42      	ldr	r2, [pc, #264]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f62:	e007      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	75fb      	strb	r3, [r7, #23]
      break;
 8006f68:	e004      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f7a:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f86:	4937      	ldr	r1, [pc, #220]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f8c:	e001      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f9e:	4b31      	ldr	r3, [pc, #196]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006faa:	492e      	ldr	r1, [pc, #184]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d009      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fbc:	4b29      	ldr	r3, [pc, #164]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fca:	4926      	ldr	r1, [pc, #152]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fdc:	4b21      	ldr	r3, [pc, #132]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe8:	491e      	ldr	r1, [pc, #120]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ffa:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	4a19      	ldr	r2, [pc, #100]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007004:	6113      	str	r3, [r2, #16]
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007010:	4914      	ldr	r1, [pc, #80]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007012:	4313      	orrs	r3, r2
 8007014:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	da08      	bge.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702a:	490e      	ldr	r1, [pc, #56]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800702c:	4313      	orrs	r3, r2
 800702e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704a:	4906      	ldr	r1, [pc, #24]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007050:	7dbb      	ldrb	r3, [r7, #22]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	58024400 	.word	0x58024400

08007068 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800706c:	f7ff f860 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 8007070:	4602      	mov	r2, r0
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	091b      	lsrs	r3, r3, #4
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	4904      	ldr	r1, [pc, #16]	; (8007090 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800707e:	5ccb      	ldrb	r3, [r1, r3]
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007088:	4618      	mov	r0, r3
 800708a:	bd80      	pop	{r7, pc}
 800708c:	58024400 	.word	0x58024400
 8007090:	080099f8 	.word	0x080099f8

08007094 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800709c:	4ba1      	ldr	r3, [pc, #644]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070a6:	4b9f      	ldr	r3, [pc, #636]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	0b1b      	lsrs	r3, r3, #12
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070b2:	4b9c      	ldr	r3, [pc, #624]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	091b      	lsrs	r3, r3, #4
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070be:	4b99      	ldr	r3, [pc, #612]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	08db      	lsrs	r3, r3, #3
 80070c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8111 	beq.w	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	f000 8083 	beq.w	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f200 80a1 	bhi.w	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d056      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070fe:	e099      	b.n	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007100:	4b88      	ldr	r3, [pc, #544]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d02d      	beq.n	8007168 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800710c:	4b85      	ldr	r3, [pc, #532]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	08db      	lsrs	r3, r3, #3
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	4a84      	ldr	r2, [pc, #528]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
 800711c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	ee07 3a90 	vmov	s15, r3
 8007124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b7b      	ldr	r3, [pc, #492]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	ed97 6a03 	vldr	s12, [r7, #12]
 800714a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007166:	e087      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071aa:	e065      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ee:	e043      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b48      	ldr	r3, [pc, #288]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a45 	vldr	s11, [pc, #276]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007232:	e021      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b37      	ldr	r3, [pc, #220]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007276:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007278:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	0a5b      	lsrs	r3, r3, #9
 800727e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800728e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007292:	edd7 6a07 	vldr	s13, [r7, #28]
 8007296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729e:	ee17 2a90 	vmov	r2, s15
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072cc:	ee17 2a90 	vmov	r2, s15
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	0e1b      	lsrs	r3, r3, #24
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007302:	e008      	b.n	8007316 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	609a      	str	r2, [r3, #8]
}
 8007316:	bf00      	nop
 8007318:	3724      	adds	r7, #36	; 0x24
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	58024400 	.word	0x58024400
 8007328:	03d09000 	.word	0x03d09000
 800732c:	46000000 	.word	0x46000000
 8007330:	4c742400 	.word	0x4c742400
 8007334:	4a742400 	.word	0x4a742400
 8007338:	4afe502a 	.word	0x4afe502a

0800733c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800733c:	b480      	push	{r7}
 800733e:	b089      	sub	sp, #36	; 0x24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007344:	4ba1      	ldr	r3, [pc, #644]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800734e:	4b9f      	ldr	r3, [pc, #636]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	0d1b      	lsrs	r3, r3, #20
 8007354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007358:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800735a:	4b9c      	ldr	r3, [pc, #624]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007366:	4b99      	ldr	r3, [pc, #612]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	08db      	lsrs	r3, r3, #3
 800736c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	fb02 f303 	mul.w	r3, r2, r3
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8111 	beq.w	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b02      	cmp	r3, #2
 800738e:	f000 8083 	beq.w	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b02      	cmp	r3, #2
 8007396:	f200 80a1 	bhi.w	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d056      	beq.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073a6:	e099      	b.n	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a8:	4b88      	ldr	r3, [pc, #544]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d02d      	beq.n	8007410 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073b4:	4b85      	ldr	r3, [pc, #532]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	4a84      	ldr	r2, [pc, #528]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073de:	4b7b      	ldr	r3, [pc, #492]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800740e:	e087      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b6a      	ldr	r3, [pc, #424]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a03 	vldr	s12, [r7, #12]
 8007436:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007452:	e065      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a03 	vldr	s12, [r7, #12]
 800747a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007496:	e043      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b48      	ldr	r3, [pc, #288]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80074be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074da:	e021      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ee:	4b37      	ldr	r3, [pc, #220]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007502:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800751e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007520:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	0a5b      	lsrs	r3, r3, #9
 8007526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800753a:	edd7 6a07 	vldr	s13, [r7, #28]
 800753e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007546:	ee17 2a90 	vmov	r2, s15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800754e:	4b1f      	ldr	r3, [pc, #124]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007568:	edd7 6a07 	vldr	s13, [r7, #28]
 800756c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007574:	ee17 2a90 	vmov	r2, s15
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	0e1b      	lsrs	r3, r3, #24
 8007582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007596:	edd7 6a07 	vldr	s13, [r7, #28]
 800759a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a2:	ee17 2a90 	vmov	r2, s15
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075aa:	e008      	b.n	80075be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
}
 80075be:	bf00      	nop
 80075c0:	3724      	adds	r7, #36	; 0x24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400
 80075d0:	03d09000 	.word	0x03d09000
 80075d4:	46000000 	.word	0x46000000
 80075d8:	4c742400 	.word	0x4c742400
 80075dc:	4a742400 	.word	0x4a742400
 80075e0:	4afe502a 	.word	0x4afe502a

080075e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f2:	4b53      	ldr	r3, [pc, #332]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d101      	bne.n	8007602 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e099      	b.n	8007736 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007602:	4b4f      	ldr	r3, [pc, #316]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800760c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760e:	f7fa faeb 	bl	8001be8 <HAL_GetTick>
 8007612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007614:	e008      	b.n	8007628 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007616:	f7fa fae7 	bl	8001be8 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e086      	b.n	8007736 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007628:	4b45      	ldr	r3, [pc, #276]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f0      	bne.n	8007616 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007634:	4b42      	ldr	r3, [pc, #264]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	031b      	lsls	r3, r3, #12
 8007642:	493f      	ldr	r1, [pc, #252]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	628b      	str	r3, [r1, #40]	; 0x28
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	3b01      	subs	r3, #1
 8007658:	025b      	lsls	r3, r3, #9
 800765a:	b29b      	uxth	r3, r3
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	3b01      	subs	r3, #1
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	3b01      	subs	r3, #1
 8007672:	061b      	lsls	r3, r3, #24
 8007674:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007678:	4931      	ldr	r1, [pc, #196]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800767a:	4313      	orrs	r3, r2
 800767c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800767e:	4b30      	ldr	r3, [pc, #192]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	492d      	ldr	r1, [pc, #180]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800768c:	4313      	orrs	r3, r2
 800768e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007690:	4b2b      	ldr	r3, [pc, #172]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f023 0220 	bic.w	r2, r3, #32
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	4928      	ldr	r1, [pc, #160]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a26      	ldr	r2, [pc, #152]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b2:	4b24      	ldr	r3, [pc, #144]	; (8007744 <RCCEx_PLL2_Config+0x160>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	69d2      	ldr	r2, [r2, #28]
 80076ba:	00d2      	lsls	r2, r2, #3
 80076bc:	4920      	ldr	r1, [pc, #128]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076c2:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	f043 0310 	orr.w	r3, r3, #16
 80076cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e0:	e00f      	b.n	8007702 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d106      	bne.n	80076f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4a14      	ldr	r2, [pc, #80]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f4:	e005      	b.n	8007702 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	4a11      	ldr	r2, [pc, #68]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007700:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a0e      	ldr	r2, [pc, #56]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800770c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770e:	f7fa fa6b 	bl	8001be8 <HAL_GetTick>
 8007712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007714:	e008      	b.n	8007728 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007716:	f7fa fa67 	bl	8001be8 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e006      	b.n	8007736 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f0      	beq.n	8007716 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
 8007744:	ffff0007 	.word	0xffff0007

08007748 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007756:	4b53      	ldr	r3, [pc, #332]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d101      	bne.n	8007766 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e099      	b.n	800789a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007766:	4b4f      	ldr	r3, [pc, #316]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4e      	ldr	r2, [pc, #312]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800776c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007772:	f7fa fa39 	bl	8001be8 <HAL_GetTick>
 8007776:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007778:	e008      	b.n	800778c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800777a:	f7fa fa35 	bl	8001be8 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e086      	b.n	800789a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800778c:	4b45      	ldr	r3, [pc, #276]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007798:	4b42      	ldr	r3, [pc, #264]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	493f      	ldr	r1, [pc, #252]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	628b      	str	r3, [r1, #40]	; 0x28
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	025b      	lsls	r3, r3, #9
 80077be:	b29b      	uxth	r3, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	041b      	lsls	r3, r3, #16
 80077ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	061b      	lsls	r3, r3, #24
 80077d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077dc:	4931      	ldr	r1, [pc, #196]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	492d      	ldr	r1, [pc, #180]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077f4:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	4928      	ldr	r1, [pc, #160]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	4a26      	ldr	r2, [pc, #152]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800780c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <RCCEx_PLL3_Config+0x160>)
 8007818:	4013      	ands	r3, r2
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	69d2      	ldr	r2, [r2, #28]
 800781e:	00d2      	lsls	r2, r2, #3
 8007820:	4920      	ldr	r1, [pc, #128]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007822:	4313      	orrs	r3, r2
 8007824:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007826:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800782c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800783e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007844:	e00f      	b.n	8007866 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d106      	bne.n	800785a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800784c:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007856:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007858:	e005      	b.n	8007866 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007864:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007866:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800786c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007872:	f7fa f9b9 	bl	8001be8 <HAL_GetTick>
 8007876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007878:	e008      	b.n	800788c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800787a:	f7fa f9b5 	bl	8001be8 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e006      	b.n	800789a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	58024400 	.word	0x58024400
 80078a8:	ffff0007 	.word	0xffff0007

080078ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e0eb      	b.n	8007a9a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a75      	ldr	r2, [pc, #468]	; (8007aa4 <HAL_SPI_Init+0x1f8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00f      	beq.n	80078f2 <HAL_SPI_Init+0x46>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a74      	ldr	r2, [pc, #464]	; (8007aa8 <HAL_SPI_Init+0x1fc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00a      	beq.n	80078f2 <HAL_SPI_Init+0x46>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a72      	ldr	r2, [pc, #456]	; (8007aac <HAL_SPI_Init+0x200>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d005      	beq.n	80078f2 <HAL_SPI_Init+0x46>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	2b0f      	cmp	r3, #15
 80078ec:	d901      	bls.n	80078f2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0d3      	b.n	8007a9a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fb94 	bl	8008020 <SPI_GetPacketSize>
 80078f8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a69      	ldr	r2, [pc, #420]	; (8007aa4 <HAL_SPI_Init+0x1f8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00c      	beq.n	800791e <HAL_SPI_Init+0x72>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a67      	ldr	r2, [pc, #412]	; (8007aa8 <HAL_SPI_Init+0x1fc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <HAL_SPI_Init+0x72>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a66      	ldr	r2, [pc, #408]	; (8007aac <HAL_SPI_Init+0x200>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d002      	beq.n	800791e <HAL_SPI_Init+0x72>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b08      	cmp	r3, #8
 800791c:	d811      	bhi.n	8007942 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007922:	4a60      	ldr	r2, [pc, #384]	; (8007aa4 <HAL_SPI_Init+0x1f8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a5e      	ldr	r2, [pc, #376]	; (8007aa8 <HAL_SPI_Init+0x1fc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_SPI_Init+0x90>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a5d      	ldr	r2, [pc, #372]	; (8007aac <HAL_SPI_Init+0x200>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d104      	bne.n	8007946 <HAL_SPI_Init+0x9a>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b10      	cmp	r3, #16
 8007940:	d901      	bls.n	8007946 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e0a9      	b.n	8007a9a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7f9 fb44 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007980:	d119      	bne.n	80079b6 <HAL_SPI_Init+0x10a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800798a:	d103      	bne.n	8007994 <HAL_SPI_Init+0xe8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10c      	bne.n	80079b6 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a4:	d107      	bne.n	80079b6 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69da      	ldr	r2, [r3, #28]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	431a      	orrs	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c8:	ea42 0103 	orr.w	r1, r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	ea42 0103 	orr.w	r1, r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d113      	bne.n	8007a56 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0201 	bic.w	r2, r2, #1
 8007a64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	40013000 	.word	0x40013000
 8007aa8:	40003800 	.word	0x40003800
 8007aac:	40003c00 	.word	0x40003c00

08007ab0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007ac8:	6a3a      	ldr	r2, [r7, #32]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4013      	ands	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ae2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3330      	adds	r3, #48	; 0x30
 8007aea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d113      	bne.n	8007b1e <HAL_SPI_IRQHandler+0x6e>
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10e      	bne.n	8007b1e <HAL_SPI_IRQHandler+0x6e>
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
    handled = 1UL;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10f      	bne.n	8007b48 <HAL_SPI_IRQHandler+0x98>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x98>
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d105      	bne.n	8007b48 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
    handled = 1UL;
 8007b44:	2301      	movs	r3, #1
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10f      	bne.n	8007b72 <HAL_SPI_IRQHandler+0xc2>
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <HAL_SPI_IRQHandler+0xc2>
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d105      	bne.n	8007b72 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
    handled = 1UL;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f040 816f 	bne.w	8007e58 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80a0 	beq.w	8007cc6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699a      	ldr	r2, [r3, #24]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f042 0208 	orr.w	r2, r2, #8
 8007b94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0210 	orr.w	r2, r2, #16
 8007ba4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bb4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0208 	bic.w	r2, r2, #8
 8007bc4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00f      	beq.n	8007bf0 <HAL_SPI_IRQHandler+0x140>
 8007bd0:	7cfb      	ldrb	r3, [r7, #19]
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d004      	beq.n	8007be0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <HAL_SPI_IRQHandler+0x140>
 8007be0:	7cfb      	ldrb	r3, [r7, #19]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d059      	beq.n	8007c9a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d154      	bne.n	8007c9a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d13d      	bne.n	8007c7a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007bfe:	e036      	b.n	8007c6e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b0f      	cmp	r3, #15
 8007c06:	d90b      	bls.n	8007c20 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c12:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c18:	1d1a      	adds	r2, r3, #4
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	665a      	str	r2, [r3, #100]	; 0x64
 8007c1e:	e01d      	b.n	8007c5c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	d90b      	bls.n	8007c40 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	8812      	ldrh	r2, [r2, #0]
 8007c30:	b292      	uxth	r2, r2
 8007c32:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c38:	1c9a      	adds	r2, r3, #2
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	665a      	str	r2, [r3, #100]	; 0x64
 8007c3e:	e00d      	b.n	8007c5c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1c2      	bne.n	8007c00 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f930 	bl	8007ee0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7f9 f966 	bl	8000f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007c98:	e0e3      	b.n	8007e62 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c9a:	7cfb      	ldrb	r3, [r7, #19]
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	d103      	bne.n	8007ca8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8f9 	bl	8007e98 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007ca6:	e0d9      	b.n	8007e5c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007ca8:	7cfb      	ldrb	r3, [r7, #19]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d103      	bne.n	8007cb6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8e8 	bl	8007e84 <HAL_SPI_RxCpltCallback>
    return;
 8007cb4:	e0d2      	b.n	8007e5c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007cb6:	7cfb      	ldrb	r3, [r7, #19]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	f040 80cf 	bne.w	8007e5c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8d6 	bl	8007e70 <HAL_SPI_TxCpltCallback>
    return;
 8007cc4:	e0ca      	b.n	8007e5c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <HAL_SPI_IRQHandler+0x23c>
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ce8:	619a      	str	r2, [r3, #24]

    return;
 8007cea:	e0ba      	b.n	8007e62 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 80b5 	beq.w	8007e62 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d08:	f043 0204 	orr.w	r2, r3, #4
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d20:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00f      	beq.n	8007d4c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d32:	f043 0201 	orr.w	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d4a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00f      	beq.n	8007d76 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5c:	f043 0208 	orr.w	r2, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699a      	ldr	r2, [r3, #24]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d74:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00f      	beq.n	8007da0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0220 	orr.w	r2, r2, #32
 8007d9e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d05a      	beq.n	8007e60 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0201 	bic.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6919      	ldr	r1, [r3, #16]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4b28      	ldr	r3, [pc, #160]	; (8007e68 <HAL_SPI_IRQHandler+0x3b8>)
 8007dc6:	400b      	ands	r3, r1
 8007dc8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dd4:	d138      	bne.n	8007e48 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007de4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d013      	beq.n	8007e16 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df2:	4a1e      	ldr	r2, [pc, #120]	; (8007e6c <HAL_SPI_IRQHandler+0x3bc>)
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fb fa96 	bl	800332c <HAL_DMA_Abort_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d020      	beq.n	8007e60 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e22:	4a12      	ldr	r2, [pc, #72]	; (8007e6c <HAL_SPI_IRQHandler+0x3bc>)
 8007e24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fb fa7e 	bl	800332c <HAL_DMA_Abort_IT>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d014      	beq.n	8007e60 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e46:	e00b      	b.n	8007e60 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7f9 f887 	bl	8000f64 <HAL_SPI_ErrorCallback>
    return;
 8007e56:	e003      	b.n	8007e60 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007e58:	bf00      	nop
 8007e5a:	e002      	b.n	8007e62 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e5c:	bf00      	nop
 8007e5e:	e000      	b.n	8007e62 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e60:	bf00      	nop
  }
}
 8007e62:	3728      	adds	r7, #40	; 0x28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	fffffc94 	.word	0xfffffc94
 8007e6c:	08007ead 	.word	0x08007ead

08007e70 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7f9 f846 	bl	8000f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0208 	orr.w	r2, r2, #8
 8007efe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0210 	orr.w	r2, r2, #16
 8007f0e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0201 	bic.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6919      	ldr	r1, [r3, #16]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b3c      	ldr	r3, [pc, #240]	; (800801c <SPI_CloseTransfer+0x13c>)
 8007f2c:	400b      	ands	r3, r1
 8007f2e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689a      	ldr	r2, [r3, #8]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f3e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d014      	beq.n	8007f76 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00f      	beq.n	8007f76 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0220 	orr.w	r2, r2, #32
 8007f74:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d014      	beq.n	8007fac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00f      	beq.n	8007fac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f92:	f043 0204 	orr.w	r2, r3, #4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007faa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00f      	beq.n	8007fd6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fbc:	f043 0201 	orr.w	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00f      	beq.n	8008000 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe6:	f043 0208 	orr.w	r2, r3, #8
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ffe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	fffffc90 	.word	0xfffffc90

08008020 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3307      	adds	r3, #7
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	fb02 f303 	mul.w	r3, r2, r3
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e042      	b.n	80080ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7f9 f91c 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2224      	movs	r2, #36	; 0x24
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fb87 	bl	80087ac <UART_SetConfig>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e022      	b.n	80080ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f8db 	bl	800926c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0201 	orr.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 f962 	bl	80093b0 <UART_CheckIdleState>
 80080ec:	4603      	mov	r3, r0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800810c:	2b20      	cmp	r3, #32
 800810e:	d168      	bne.n	80081e2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_UART_Transmit_DMA+0x24>
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e061      	b.n	80081e4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <HAL_UART_Transmit_DMA+0x36>
 800812a:	2302      	movs	r3, #2
 800812c:	e05a      	b.n	80081e4 <HAL_UART_Transmit_DMA+0xec>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	88fa      	ldrh	r2, [r7, #6]
 8008140:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	88fa      	ldrh	r2, [r7, #6]
 8008148:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2221      	movs	r2, #33	; 0x21
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008160:	2b00      	cmp	r3, #0
 8008162:	d02c      	beq.n	80081be <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008168:	4a20      	ldr	r2, [pc, #128]	; (80081ec <HAL_UART_Transmit_DMA+0xf4>)
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008170:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <HAL_UART_Transmit_DMA+0xf8>)
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008178:	4a1e      	ldr	r2, [pc, #120]	; (80081f4 <HAL_UART_Transmit_DMA+0xfc>)
 800817a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	4619      	mov	r1, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3328      	adds	r3, #40	; 0x28
 8008194:	461a      	mov	r2, r3
 8008196:	88fb      	ldrh	r3, [r7, #6]
 8008198:	f7fa fb40 	bl	800281c <HAL_DMA_Start_IT>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2210      	movs	r2, #16
 80081a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e012      	b.n	80081e4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2240      	movs	r2, #64	; 0x40
 80081c4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081dc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	e000      	b.n	80081e4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
  }
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	080095e9 	.word	0x080095e9
 80081f0:	08009639 	.word	0x08009639
 80081f4:	08009655 	.word	0x08009655

080081f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	f640 030f 	movw	r3, #2063	; 0x80f
 800821e:	4013      	ands	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d118      	bne.n	800825a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8282 	beq.w	8008754 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
      }
      return;
 8008258:	e27c      	b.n	8008754 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80ef 	beq.w	8008440 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4b73      	ldr	r3, [pc, #460]	; (8008434 <HAL_UART_IRQHandler+0x23c>)
 8008266:	4013      	ands	r3, r2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d105      	bne.n	8008278 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	4b72      	ldr	r3, [pc, #456]	; (8008438 <HAL_UART_IRQHandler+0x240>)
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80e4 	beq.w	8008440 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d010      	beq.n	80082a4 <HAL_UART_IRQHandler+0xac>
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2201      	movs	r2, #1
 8008292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d010      	beq.n	80082d0 <HAL_UART_IRQHandler+0xd8>
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2202      	movs	r2, #2
 80082be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c6:	f043 0204 	orr.w	r2, r3, #4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d010      	beq.n	80082fc <HAL_UART_IRQHandler+0x104>
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2204      	movs	r2, #4
 80082ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f2:	f043 0202 	orr.w	r2, r3, #2
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d015      	beq.n	8008332 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4b48      	ldr	r3, [pc, #288]	; (8008434 <HAL_UART_IRQHandler+0x23c>)
 8008314:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00b      	beq.n	8008332 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2208      	movs	r2, #8
 8008320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008328:	f043 0208 	orr.w	r2, r3, #8
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008338:	2b00      	cmp	r3, #0
 800833a:	d011      	beq.n	8008360 <HAL_UART_IRQHandler+0x168>
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800834e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008356:	f043 0220 	orr.w	r2, r3, #32
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 81f6 	beq.w	8008758 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b00      	cmp	r3, #0
 8008374:	d011      	beq.n	800839a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d004      	beq.n	80083ba <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d031      	beq.n	800841e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 f8e2 	bl	8009584 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d123      	bne.n	8008416 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d013      	beq.n	800840e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ea:	4a14      	ldr	r2, [pc, #80]	; (800843c <HAL_UART_IRQHandler+0x244>)
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fa ff9a 	bl	800332c <HAL_DMA_Abort_IT>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d017      	beq.n	800842e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840c:	e00f      	b.n	800842e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7f8 fdb8 	bl	8000f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008414:	e00b      	b.n	800842e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7f8 fdb4 	bl	8000f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	e007      	b.n	800842e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f8 fdb0 	bl	8000f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800842c:	e194      	b.n	8008758 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842e:	bf00      	nop
    return;
 8008430:	e192      	b.n	8008758 <HAL_UART_IRQHandler+0x560>
 8008432:	bf00      	nop
 8008434:	10000001 	.word	0x10000001
 8008438:	04000120 	.word	0x04000120
 800843c:	080096d5 	.word	0x080096d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	2b01      	cmp	r3, #1
 8008446:	f040 810f 	bne.w	8008668 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	f003 0310 	and.w	r3, r3, #16
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8109 	beq.w	8008668 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8103 	beq.w	8008668 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2210      	movs	r2, #16
 8008468:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	f040 80bb 	bne.w	80085f0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a96      	ldr	r2, [pc, #600]	; (80086dc <HAL_UART_IRQHandler+0x4e4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d059      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a94      	ldr	r2, [pc, #592]	; (80086e0 <HAL_UART_IRQHandler+0x4e8>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d053      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a92      	ldr	r2, [pc, #584]	; (80086e4 <HAL_UART_IRQHandler+0x4ec>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d04d      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a90      	ldr	r2, [pc, #576]	; (80086e8 <HAL_UART_IRQHandler+0x4f0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d047      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a8e      	ldr	r2, [pc, #568]	; (80086ec <HAL_UART_IRQHandler+0x4f4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d041      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a8c      	ldr	r2, [pc, #560]	; (80086f0 <HAL_UART_IRQHandler+0x4f8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d03b      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a8a      	ldr	r2, [pc, #552]	; (80086f4 <HAL_UART_IRQHandler+0x4fc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d035      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a88      	ldr	r2, [pc, #544]	; (80086f8 <HAL_UART_IRQHandler+0x500>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02f      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a86      	ldr	r2, [pc, #536]	; (80086fc <HAL_UART_IRQHandler+0x504>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d029      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a84      	ldr	r2, [pc, #528]	; (8008700 <HAL_UART_IRQHandler+0x508>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d023      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a82      	ldr	r2, [pc, #520]	; (8008704 <HAL_UART_IRQHandler+0x50c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d01d      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a80      	ldr	r2, [pc, #512]	; (8008708 <HAL_UART_IRQHandler+0x510>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d017      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a7e      	ldr	r2, [pc, #504]	; (800870c <HAL_UART_IRQHandler+0x514>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d011      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a7c      	ldr	r2, [pc, #496]	; (8008710 <HAL_UART_IRQHandler+0x518>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a7a      	ldr	r2, [pc, #488]	; (8008714 <HAL_UART_IRQHandler+0x51c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d005      	beq.n	800853a <HAL_UART_IRQHandler+0x342>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a78      	ldr	r2, [pc, #480]	; (8008718 <HAL_UART_IRQHandler+0x520>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d105      	bne.n	8008546 <HAL_UART_IRQHandler+0x34e>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	b29b      	uxth	r3, r3
 8008544:	e004      	b.n	8008550 <HAL_UART_IRQHandler+0x358>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	b29b      	uxth	r3, r3
 8008550:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008552:	893b      	ldrh	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8101 	beq.w	800875c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008560:	893a      	ldrh	r2, [r7, #8]
 8008562:	429a      	cmp	r2, r3
 8008564:	f080 80fa 	bcs.w	800875c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	893a      	ldrh	r2, [r7, #8]
 800856c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857a:	d02b      	beq.n	80085d4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800858a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0201 	bic.w	r2, r2, #1
 800859a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0210 	bic.w	r2, r2, #16
 80085c8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fa fb8e 	bl	8002cf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f8d3 	bl	8008794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085ee:	e0b5      	b.n	800875c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 80a8 	beq.w	8008760 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008610:	897b      	ldrh	r3, [r7, #10]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 80a4 	beq.w	8008760 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008626:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6899      	ldr	r1, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4b3a      	ldr	r3, [pc, #232]	; (800871c <HAL_UART_IRQHandler+0x524>)
 8008634:	400b      	ands	r3, r1
 8008636:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0210 	bic.w	r2, r2, #16
 800865a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800865c:	897b      	ldrh	r3, [r7, #10]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f897 	bl	8008794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008666:	e07b      	b.n	8008760 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <HAL_UART_IRQHandler+0x496>
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f854 	bl	8009734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800868c:	e06b      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008694:	2b00      	cmp	r3, #0
 8008696:	d012      	beq.n	80086be <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d104      	bne.n	80086ac <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d057      	beq.n	8008764 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
    }
    return;
 80086bc:	e052      	b.n	8008764 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02b      	beq.n	8008720 <HAL_UART_IRQHandler+0x528>
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d026      	beq.n	8008720 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 f814 	bl	8009700 <UART_EndTransmit_IT>
    return;
 80086d8:	e045      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
 80086da:	bf00      	nop
 80086dc:	40020010 	.word	0x40020010
 80086e0:	40020028 	.word	0x40020028
 80086e4:	40020040 	.word	0x40020040
 80086e8:	40020058 	.word	0x40020058
 80086ec:	40020070 	.word	0x40020070
 80086f0:	40020088 	.word	0x40020088
 80086f4:	400200a0 	.word	0x400200a0
 80086f8:	400200b8 	.word	0x400200b8
 80086fc:	40020410 	.word	0x40020410
 8008700:	40020428 	.word	0x40020428
 8008704:	40020440 	.word	0x40020440
 8008708:	40020458 	.word	0x40020458
 800870c:	40020470 	.word	0x40020470
 8008710:	40020488 	.word	0x40020488
 8008714:	400204a0 	.word	0x400204a0
 8008718:	400204b8 	.word	0x400204b8
 800871c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <HAL_UART_IRQHandler+0x544>
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f811 	bl	800975c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873a:	e014      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00f      	beq.n	8008766 <HAL_UART_IRQHandler+0x56e>
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da0c      	bge.n	8008766 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fffb 	bl	8009748 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008752:	e008      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
      return;
 8008754:	bf00      	nop
 8008756:	e006      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
    return;
 8008758:	bf00      	nop
 800875a:	e004      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
      return;
 800875c:	bf00      	nop
 800875e:	e002      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
      return;
 8008760:	bf00      	nop
 8008762:	e000      	b.n	8008766 <HAL_UART_IRQHandler+0x56e>
    return;
 8008764:	bf00      	nop
  }
}
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087ac:	b5b0      	push	{r4, r5, r7, lr}
 80087ae:	b08e      	sub	sp, #56	; 0x38
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	431a      	orrs	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	4bbf      	ldr	r3, [pc, #764]	; (8008ad8 <UART_SetConfig+0x32c>)
 80087da:	4013      	ands	r3, r2
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087e2:	430b      	orrs	r3, r1
 80087e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4ab5      	ldr	r2, [pc, #724]	; (8008adc <UART_SetConfig+0x330>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008812:	4313      	orrs	r3, r2
 8008814:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	4bb0      	ldr	r3, [pc, #704]	; (8008ae0 <UART_SetConfig+0x334>)
 800881e:	4013      	ands	r3, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008826:	430b      	orrs	r3, r1
 8008828:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	f023 010f 	bic.w	r1, r3, #15
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4aa7      	ldr	r2, [pc, #668]	; (8008ae4 <UART_SetConfig+0x338>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d176      	bne.n	8008938 <UART_SetConfig+0x18c>
 800884a:	4ba7      	ldr	r3, [pc, #668]	; (8008ae8 <UART_SetConfig+0x33c>)
 800884c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008852:	2b28      	cmp	r3, #40	; 0x28
 8008854:	d86c      	bhi.n	8008930 <UART_SetConfig+0x184>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <UART_SetConfig+0xb0>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008901 	.word	0x08008901
 8008860:	08008931 	.word	0x08008931
 8008864:	08008931 	.word	0x08008931
 8008868:	08008931 	.word	0x08008931
 800886c:	08008931 	.word	0x08008931
 8008870:	08008931 	.word	0x08008931
 8008874:	08008931 	.word	0x08008931
 8008878:	08008931 	.word	0x08008931
 800887c:	08008909 	.word	0x08008909
 8008880:	08008931 	.word	0x08008931
 8008884:	08008931 	.word	0x08008931
 8008888:	08008931 	.word	0x08008931
 800888c:	08008931 	.word	0x08008931
 8008890:	08008931 	.word	0x08008931
 8008894:	08008931 	.word	0x08008931
 8008898:	08008931 	.word	0x08008931
 800889c:	08008911 	.word	0x08008911
 80088a0:	08008931 	.word	0x08008931
 80088a4:	08008931 	.word	0x08008931
 80088a8:	08008931 	.word	0x08008931
 80088ac:	08008931 	.word	0x08008931
 80088b0:	08008931 	.word	0x08008931
 80088b4:	08008931 	.word	0x08008931
 80088b8:	08008931 	.word	0x08008931
 80088bc:	08008919 	.word	0x08008919
 80088c0:	08008931 	.word	0x08008931
 80088c4:	08008931 	.word	0x08008931
 80088c8:	08008931 	.word	0x08008931
 80088cc:	08008931 	.word	0x08008931
 80088d0:	08008931 	.word	0x08008931
 80088d4:	08008931 	.word	0x08008931
 80088d8:	08008931 	.word	0x08008931
 80088dc:	08008921 	.word	0x08008921
 80088e0:	08008931 	.word	0x08008931
 80088e4:	08008931 	.word	0x08008931
 80088e8:	08008931 	.word	0x08008931
 80088ec:	08008931 	.word	0x08008931
 80088f0:	08008931 	.word	0x08008931
 80088f4:	08008931 	.word	0x08008931
 80088f8:	08008931 	.word	0x08008931
 80088fc:	08008929 	.word	0x08008929
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008906:	e222      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008908:	2304      	movs	r3, #4
 800890a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890e:	e21e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008910:	2308      	movs	r3, #8
 8008912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008916:	e21a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008918:	2310      	movs	r3, #16
 800891a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891e:	e216      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008920:	2320      	movs	r3, #32
 8008922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008926:	e212      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892e:	e20e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e20a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a6b      	ldr	r2, [pc, #428]	; (8008aec <UART_SetConfig+0x340>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d130      	bne.n	80089a4 <UART_SetConfig+0x1f8>
 8008942:	4b69      	ldr	r3, [pc, #420]	; (8008ae8 <UART_SetConfig+0x33c>)
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b05      	cmp	r3, #5
 800894c:	d826      	bhi.n	800899c <UART_SetConfig+0x1f0>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x1a8>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	0800896d 	.word	0x0800896d
 8008958:	08008975 	.word	0x08008975
 800895c:	0800897d 	.word	0x0800897d
 8008960:	08008985 	.word	0x08008985
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008995 	.word	0x08008995
 800896c:	2300      	movs	r3, #0
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	e1ec      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e1e8      	b.n	8008d4e <UART_SetConfig+0x5a2>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	e1e4      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898a:	e1e0      	b.n	8008d4e <UART_SetConfig+0x5a2>
 800898c:	2320      	movs	r3, #32
 800898e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008992:	e1dc      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899a:	e1d8      	b.n	8008d4e <UART_SetConfig+0x5a2>
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a2:	e1d4      	b.n	8008d4e <UART_SetConfig+0x5a2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a51      	ldr	r2, [pc, #324]	; (8008af0 <UART_SetConfig+0x344>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d130      	bne.n	8008a10 <UART_SetConfig+0x264>
 80089ae:	4b4e      	ldr	r3, [pc, #312]	; (8008ae8 <UART_SetConfig+0x33c>)
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d826      	bhi.n	8008a08 <UART_SetConfig+0x25c>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0x214>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089d9 	.word	0x080089d9
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e1b6      	b.n	8008d4e <UART_SetConfig+0x5a2>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	e1b2      	b.n	8008d4e <UART_SetConfig+0x5a2>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ee:	e1ae      	b.n	8008d4e <UART_SetConfig+0x5a2>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f6:	e1aa      	b.n	8008d4e <UART_SetConfig+0x5a2>
 80089f8:	2320      	movs	r3, #32
 80089fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fe:	e1a6      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a06:	e1a2      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0e:	e19e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a37      	ldr	r2, [pc, #220]	; (8008af4 <UART_SetConfig+0x348>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d130      	bne.n	8008a7c <UART_SetConfig+0x2d0>
 8008a1a:	4b33      	ldr	r3, [pc, #204]	; (8008ae8 <UART_SetConfig+0x33c>)
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d826      	bhi.n	8008a74 <UART_SetConfig+0x2c8>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x280>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a45 	.word	0x08008a45
 8008a30:	08008a4d 	.word	0x08008a4d
 8008a34:	08008a55 	.word	0x08008a55
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e180      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	e17c      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5a:	e178      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a62:	e174      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e170      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e16c      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	e168      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1d      	ldr	r2, [pc, #116]	; (8008af8 <UART_SetConfig+0x34c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d142      	bne.n	8008b0c <UART_SetConfig+0x360>
 8008a86:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <UART_SetConfig+0x33c>)
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d838      	bhi.n	8008b04 <UART_SetConfig+0x358>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x2ec>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008afd 	.word	0x08008afd
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e14a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008abe:	e146      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac6:	e142      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ace:	e13e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e13a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008ad8:	cfff69f3 	.word	0xcfff69f3
 8008adc:	58000c00 	.word	0x58000c00
 8008ae0:	11fff4ff 	.word	0x11fff4ff
 8008ae4:	40011000 	.word	0x40011000
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	40004400 	.word	0x40004400
 8008af0:	40004800 	.word	0x40004800
 8008af4:	40004c00 	.word	0x40004c00
 8008af8:	40005000 	.word	0x40005000
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b02:	e124      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008b04:	2380      	movs	r3, #128	; 0x80
 8008b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0a:	e120      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4acc      	ldr	r2, [pc, #816]	; (8008e44 <UART_SetConfig+0x698>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d176      	bne.n	8008c04 <UART_SetConfig+0x458>
 8008b16:	4bcc      	ldr	r3, [pc, #816]	; (8008e48 <UART_SetConfig+0x69c>)
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b1e:	2b28      	cmp	r3, #40	; 0x28
 8008b20:	d86c      	bhi.n	8008bfc <UART_SetConfig+0x450>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <UART_SetConfig+0x37c>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008bcd 	.word	0x08008bcd
 8008b2c:	08008bfd 	.word	0x08008bfd
 8008b30:	08008bfd 	.word	0x08008bfd
 8008b34:	08008bfd 	.word	0x08008bfd
 8008b38:	08008bfd 	.word	0x08008bfd
 8008b3c:	08008bfd 	.word	0x08008bfd
 8008b40:	08008bfd 	.word	0x08008bfd
 8008b44:	08008bfd 	.word	0x08008bfd
 8008b48:	08008bd5 	.word	0x08008bd5
 8008b4c:	08008bfd 	.word	0x08008bfd
 8008b50:	08008bfd 	.word	0x08008bfd
 8008b54:	08008bfd 	.word	0x08008bfd
 8008b58:	08008bfd 	.word	0x08008bfd
 8008b5c:	08008bfd 	.word	0x08008bfd
 8008b60:	08008bfd 	.word	0x08008bfd
 8008b64:	08008bfd 	.word	0x08008bfd
 8008b68:	08008bdd 	.word	0x08008bdd
 8008b6c:	08008bfd 	.word	0x08008bfd
 8008b70:	08008bfd 	.word	0x08008bfd
 8008b74:	08008bfd 	.word	0x08008bfd
 8008b78:	08008bfd 	.word	0x08008bfd
 8008b7c:	08008bfd 	.word	0x08008bfd
 8008b80:	08008bfd 	.word	0x08008bfd
 8008b84:	08008bfd 	.word	0x08008bfd
 8008b88:	08008be5 	.word	0x08008be5
 8008b8c:	08008bfd 	.word	0x08008bfd
 8008b90:	08008bfd 	.word	0x08008bfd
 8008b94:	08008bfd 	.word	0x08008bfd
 8008b98:	08008bfd 	.word	0x08008bfd
 8008b9c:	08008bfd 	.word	0x08008bfd
 8008ba0:	08008bfd 	.word	0x08008bfd
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008bed 	.word	0x08008bed
 8008bac:	08008bfd 	.word	0x08008bfd
 8008bb0:	08008bfd 	.word	0x08008bfd
 8008bb4:	08008bfd 	.word	0x08008bfd
 8008bb8:	08008bfd 	.word	0x08008bfd
 8008bbc:	08008bfd 	.word	0x08008bfd
 8008bc0:	08008bfd 	.word	0x08008bfd
 8008bc4:	08008bfd 	.word	0x08008bfd
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd2:	e0bc      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e0b8      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be2:	e0b4      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008be4:	2310      	movs	r3, #16
 8008be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bea:	e0b0      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008bec:	2320      	movs	r3, #32
 8008bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf2:	e0ac      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008bf4:	2340      	movs	r3, #64	; 0x40
 8008bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfa:	e0a8      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c02:	e0a4      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a90      	ldr	r2, [pc, #576]	; (8008e4c <UART_SetConfig+0x6a0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d130      	bne.n	8008c70 <UART_SetConfig+0x4c4>
 8008c0e:	4b8e      	ldr	r3, [pc, #568]	; (8008e48 <UART_SetConfig+0x69c>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d826      	bhi.n	8008c68 <UART_SetConfig+0x4bc>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x474>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c41 	.word	0x08008c41
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3e:	e086      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e082      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e07e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e07a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e076      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e072      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e06e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a76      	ldr	r2, [pc, #472]	; (8008e50 <UART_SetConfig+0x6a4>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d130      	bne.n	8008cdc <UART_SetConfig+0x530>
 8008c7a:	4b73      	ldr	r3, [pc, #460]	; (8008e48 <UART_SetConfig+0x69c>)
 8008c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d826      	bhi.n	8008cd4 <UART_SetConfig+0x528>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <UART_SetConfig+0x4e0>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cad 	.word	0x08008cad
 8008c94:	08008cb5 	.word	0x08008cb5
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008caa:	e050      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb2:	e04c      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cba:	e048      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc2:	e044      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cca:	e040      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd2:	e03c      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e038      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a5c      	ldr	r2, [pc, #368]	; (8008e54 <UART_SetConfig+0x6a8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d130      	bne.n	8008d48 <UART_SetConfig+0x59c>
 8008ce6:	4b58      	ldr	r3, [pc, #352]	; (8008e48 <UART_SetConfig+0x69c>)
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d826      	bhi.n	8008d40 <UART_SetConfig+0x594>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <UART_SetConfig+0x54c>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d11 	.word	0x08008d11
 8008cfc:	08008d19 	.word	0x08008d19
 8008d00:	08008d21 	.word	0x08008d21
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d31 	.word	0x08008d31
 8008d0c:	08008d39 	.word	0x08008d39
 8008d10:	2302      	movs	r3, #2
 8008d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d16:	e01a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d18:	2304      	movs	r3, #4
 8008d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1e:	e016      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d20:	2308      	movs	r3, #8
 8008d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d26:	e012      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d28:	2310      	movs	r3, #16
 8008d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2e:	e00e      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d30:	2320      	movs	r3, #32
 8008d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d36:	e00a      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d38:	2340      	movs	r3, #64	; 0x40
 8008d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3e:	e006      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d40:	2380      	movs	r3, #128	; 0x80
 8008d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d46:	e002      	b.n	8008d4e <UART_SetConfig+0x5a2>
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a40      	ldr	r2, [pc, #256]	; (8008e54 <UART_SetConfig+0x6a8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	f040 80ef 	bne.w	8008f38 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	dc46      	bgt.n	8008df0 <UART_SetConfig+0x644>
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	f2c0 8081 	blt.w	8008e6a <UART_SetConfig+0x6be>
 8008d68:	3b02      	subs	r3, #2
 8008d6a:	2b1e      	cmp	r3, #30
 8008d6c:	d87d      	bhi.n	8008e6a <UART_SetConfig+0x6be>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <UART_SetConfig+0x5c8>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008df7 	.word	0x08008df7
 8008d78:	08008e6b 	.word	0x08008e6b
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008e6b 	.word	0x08008e6b
 8008d84:	08008e6b 	.word	0x08008e6b
 8008d88:	08008e6b 	.word	0x08008e6b
 8008d8c:	08008e0f 	.word	0x08008e0f
 8008d90:	08008e6b 	.word	0x08008e6b
 8008d94:	08008e6b 	.word	0x08008e6b
 8008d98:	08008e6b 	.word	0x08008e6b
 8008d9c:	08008e6b 	.word	0x08008e6b
 8008da0:	08008e6b 	.word	0x08008e6b
 8008da4:	08008e6b 	.word	0x08008e6b
 8008da8:	08008e6b 	.word	0x08008e6b
 8008dac:	08008e1f 	.word	0x08008e1f
 8008db0:	08008e6b 	.word	0x08008e6b
 8008db4:	08008e6b 	.word	0x08008e6b
 8008db8:	08008e6b 	.word	0x08008e6b
 8008dbc:	08008e6b 	.word	0x08008e6b
 8008dc0:	08008e6b 	.word	0x08008e6b
 8008dc4:	08008e6b 	.word	0x08008e6b
 8008dc8:	08008e6b 	.word	0x08008e6b
 8008dcc:	08008e6b 	.word	0x08008e6b
 8008dd0:	08008e6b 	.word	0x08008e6b
 8008dd4:	08008e6b 	.word	0x08008e6b
 8008dd8:	08008e6b 	.word	0x08008e6b
 8008ddc:	08008e6b 	.word	0x08008e6b
 8008de0:	08008e6b 	.word	0x08008e6b
 8008de4:	08008e6b 	.word	0x08008e6b
 8008de8:	08008e6b 	.word	0x08008e6b
 8008dec:	08008e5d 	.word	0x08008e5d
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d036      	beq.n	8008e62 <UART_SetConfig+0x6b6>
 8008df4:	e039      	b.n	8008e6a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008df6:	f7fe f937 	bl	8007068 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008dfc:	e03b      	b.n	8008e76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe f946 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e0c:	e033      	b.n	8008e76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fa92 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e1c:	e02b      	b.n	8008e76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <UART_SetConfig+0x69c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e2a:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <UART_SetConfig+0x69c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	08db      	lsrs	r3, r3, #3
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	4a08      	ldr	r2, [pc, #32]	; (8008e58 <UART_SetConfig+0x6ac>)
 8008e36:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e3c:	e01b      	b.n	8008e76 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008e3e:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <UART_SetConfig+0x6ac>)
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e42:	e018      	b.n	8008e76 <UART_SetConfig+0x6ca>
 8008e44:	40011400 	.word	0x40011400
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	40007800 	.word	0x40007800
 8008e50:	40007c00 	.word	0x40007c00
 8008e54:	58000c00 	.word	0x58000c00
 8008e58:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e5c:	4bc4      	ldr	r3, [pc, #784]	; (8009170 <UART_SetConfig+0x9c4>)
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e60:	e009      	b.n	8008e76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e68:	e005      	b.n	8008e76 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 81da 	beq.w	8009232 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	4abc      	ldr	r2, [pc, #752]	; (8009174 <UART_SetConfig+0x9c8>)
 8008e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e90:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4413      	add	r3, r2
 8008e9c:	6a3a      	ldr	r2, [r7, #32]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d305      	bcc.n	8008eae <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ea8:	6a3a      	ldr	r2, [r7, #32]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d903      	bls.n	8008eb6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008eb4:	e1bd      	b.n	8009232 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f04f 0100 	mov.w	r1, #0
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	4aac      	ldr	r2, [pc, #688]	; (8009174 <UART_SetConfig+0x9c8>)
 8008ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	f04f 0300 	mov.w	r3, #0
 8008ece:	f7f7 fa03 	bl	80002d8 <__aeabi_uldivmod>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	020b      	lsls	r3, r1, #8
 8008ee4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ee8:	0202      	lsls	r2, r0, #8
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	6849      	ldr	r1, [r1, #4]
 8008eee:	0849      	lsrs	r1, r1, #1
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	f04f 0100 	mov.w	r1, #0
 8008ef6:	1814      	adds	r4, r2, r0
 8008ef8:	eb43 0501 	adc.w	r5, r3, r1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	461a      	mov	r2, r3
 8008f02:	f04f 0300 	mov.w	r3, #0
 8008f06:	4620      	mov	r0, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7f7 f9e5 	bl	80002d8 <__aeabi_uldivmod>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4613      	mov	r3, r2
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f1c:	d308      	bcc.n	8008f30 <UART_SetConfig+0x784>
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f24:	d204      	bcs.n	8008f30 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	e180      	b.n	8009232 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f36:	e17c      	b.n	8009232 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f40:	f040 80bf 	bne.w	80090c2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	dc49      	bgt.n	8008fe0 <UART_SetConfig+0x834>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	db7c      	blt.n	800904a <UART_SetConfig+0x89e>
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d87a      	bhi.n	800904a <UART_SetConfig+0x89e>
 8008f54:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <UART_SetConfig+0x7b0>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008fe7 	.word	0x08008fe7
 8008f60:	08008fef 	.word	0x08008fef
 8008f64:	0800904b 	.word	0x0800904b
 8008f68:	0800904b 	.word	0x0800904b
 8008f6c:	08008ff7 	.word	0x08008ff7
 8008f70:	0800904b 	.word	0x0800904b
 8008f74:	0800904b 	.word	0x0800904b
 8008f78:	0800904b 	.word	0x0800904b
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	0800904b 	.word	0x0800904b
 8008f84:	0800904b 	.word	0x0800904b
 8008f88:	0800904b 	.word	0x0800904b
 8008f8c:	0800904b 	.word	0x0800904b
 8008f90:	0800904b 	.word	0x0800904b
 8008f94:	0800904b 	.word	0x0800904b
 8008f98:	0800904b 	.word	0x0800904b
 8008f9c:	08009017 	.word	0x08009017
 8008fa0:	0800904b 	.word	0x0800904b
 8008fa4:	0800904b 	.word	0x0800904b
 8008fa8:	0800904b 	.word	0x0800904b
 8008fac:	0800904b 	.word	0x0800904b
 8008fb0:	0800904b 	.word	0x0800904b
 8008fb4:	0800904b 	.word	0x0800904b
 8008fb8:	0800904b 	.word	0x0800904b
 8008fbc:	0800904b 	.word	0x0800904b
 8008fc0:	0800904b 	.word	0x0800904b
 8008fc4:	0800904b 	.word	0x0800904b
 8008fc8:	0800904b 	.word	0x0800904b
 8008fcc:	0800904b 	.word	0x0800904b
 8008fd0:	0800904b 	.word	0x0800904b
 8008fd4:	0800904b 	.word	0x0800904b
 8008fd8:	0800904b 	.word	0x0800904b
 8008fdc:	0800903d 	.word	0x0800903d
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d02e      	beq.n	8009042 <UART_SetConfig+0x896>
 8008fe4:	e031      	b.n	800904a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe6:	f7fd f8d3 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 8008fea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fec:	e033      	b.n	8009056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fee:	f7fd f8e5 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8008ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008ff4:	e02f      	b.n	8009056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff6:	f107 0314 	add.w	r3, r7, #20
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe f84a 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009004:	e027      	b.n	8009056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009006:	f107 0308 	add.w	r3, r7, #8
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe f996 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009014:	e01f      	b.n	8009056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009016:	4b58      	ldr	r3, [pc, #352]	; (8009178 <UART_SetConfig+0x9cc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009022:	4b55      	ldr	r3, [pc, #340]	; (8009178 <UART_SetConfig+0x9cc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	08db      	lsrs	r3, r3, #3
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	4a53      	ldr	r2, [pc, #332]	; (800917c <UART_SetConfig+0x9d0>)
 800902e:	fa22 f303 	lsr.w	r3, r2, r3
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009034:	e00f      	b.n	8009056 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009036:	4b51      	ldr	r3, [pc, #324]	; (800917c <UART_SetConfig+0x9d0>)
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800903a:	e00c      	b.n	8009056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800903c:	4b4c      	ldr	r3, [pc, #304]	; (8009170 <UART_SetConfig+0x9c4>)
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009040:	e009      	b.n	8009056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009048:	e005      	b.n	8009056 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80ea 	beq.w	8009232 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	4a44      	ldr	r2, [pc, #272]	; (8009174 <UART_SetConfig+0x9c8>)
 8009064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009068:	461a      	mov	r2, r3
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009070:	005a      	lsls	r2, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	441a      	add	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009082:	b29b      	uxth	r3, r3
 8009084:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	2b0f      	cmp	r3, #15
 800908a:	d916      	bls.n	80090ba <UART_SetConfig+0x90e>
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009092:	d212      	bcs.n	80090ba <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	b29b      	uxth	r3, r3
 8009098:	f023 030f 	bic.w	r3, r3, #15
 800909c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	085b      	lsrs	r3, r3, #1
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090ac:	4313      	orrs	r3, r2
 80090ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090b6:	60da      	str	r2, [r3, #12]
 80090b8:	e0bb      	b.n	8009232 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090c0:	e0b7      	b.n	8009232 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	dc4a      	bgt.n	8009160 <UART_SetConfig+0x9b4>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f2c0 8086 	blt.w	80091dc <UART_SetConfig+0xa30>
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	f200 8083 	bhi.w	80091dc <UART_SetConfig+0xa30>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x930>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009167 	.word	0x08009167
 80090e0:	08009181 	.word	0x08009181
 80090e4:	080091dd 	.word	0x080091dd
 80090e8:	080091dd 	.word	0x080091dd
 80090ec:	08009189 	.word	0x08009189
 80090f0:	080091dd 	.word	0x080091dd
 80090f4:	080091dd 	.word	0x080091dd
 80090f8:	080091dd 	.word	0x080091dd
 80090fc:	08009199 	.word	0x08009199
 8009100:	080091dd 	.word	0x080091dd
 8009104:	080091dd 	.word	0x080091dd
 8009108:	080091dd 	.word	0x080091dd
 800910c:	080091dd 	.word	0x080091dd
 8009110:	080091dd 	.word	0x080091dd
 8009114:	080091dd 	.word	0x080091dd
 8009118:	080091dd 	.word	0x080091dd
 800911c:	080091a9 	.word	0x080091a9
 8009120:	080091dd 	.word	0x080091dd
 8009124:	080091dd 	.word	0x080091dd
 8009128:	080091dd 	.word	0x080091dd
 800912c:	080091dd 	.word	0x080091dd
 8009130:	080091dd 	.word	0x080091dd
 8009134:	080091dd 	.word	0x080091dd
 8009138:	080091dd 	.word	0x080091dd
 800913c:	080091dd 	.word	0x080091dd
 8009140:	080091dd 	.word	0x080091dd
 8009144:	080091dd 	.word	0x080091dd
 8009148:	080091dd 	.word	0x080091dd
 800914c:	080091dd 	.word	0x080091dd
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091dd 	.word	0x080091dd
 8009158:	080091dd 	.word	0x080091dd
 800915c:	080091cf 	.word	0x080091cf
 8009160:	2b40      	cmp	r3, #64	; 0x40
 8009162:	d037      	beq.n	80091d4 <UART_SetConfig+0xa28>
 8009164:	e03a      	b.n	80091dc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009166:	f7fd f813 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 800916a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800916c:	e03c      	b.n	80091e8 <UART_SetConfig+0xa3c>
 800916e:	bf00      	nop
 8009170:	003d0900 	.word	0x003d0900
 8009174:	08009a10 	.word	0x08009a10
 8009178:	58024400 	.word	0x58024400
 800917c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009180:	f7fd f81c 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8009184:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009186:	e02f      	b.n	80091e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd ff81 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009196:	e027      	b.n	80091e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe f8cd 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091a6:	e01f      	b.n	80091e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091a8:	4b2c      	ldr	r3, [pc, #176]	; (800925c <UART_SetConfig+0xab0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d009      	beq.n	80091c8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <UART_SetConfig+0xab0>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	08db      	lsrs	r3, r3, #3
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	4a28      	ldr	r2, [pc, #160]	; (8009260 <UART_SetConfig+0xab4>)
 80091c0:	fa22 f303 	lsr.w	r3, r2, r3
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091c6:	e00f      	b.n	80091e8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <UART_SetConfig+0xab4>)
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091cc:	e00c      	b.n	80091e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091ce:	4b25      	ldr	r3, [pc, #148]	; (8009264 <UART_SetConfig+0xab8>)
 80091d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091d2:	e009      	b.n	80091e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091da:	e005      	b.n	80091e8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091e6:	bf00      	nop
    }

    if (pclk != 0U)
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d021      	beq.n	8009232 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <UART_SetConfig+0xabc>)
 80091f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	085b      	lsrs	r3, r3, #1
 8009206:	441a      	add	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	b29b      	uxth	r3, r3
 8009212:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d908      	bls.n	800922c <UART_SetConfig+0xa80>
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009220:	d204      	bcs.n	800922c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	e002      	b.n	8009232 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800924e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009252:	4618      	mov	r0, r3
 8009254:	3738      	adds	r7, #56	; 0x38
 8009256:	46bd      	mov	sp, r7
 8009258:	bdb0      	pop	{r4, r5, r7, pc}
 800925a:	bf00      	nop
 800925c:	58024400 	.word	0x58024400
 8009260:	03d09000 	.word	0x03d09000
 8009264:	003d0900 	.word	0x003d0900
 8009268:	08009a10 	.word	0x08009a10

0800926c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800936a:	d10a      	bne.n	8009382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093c0:	f7f8 fc12 	bl	8001be8 <HAL_GetTick>
 80093c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d10e      	bne.n	80093f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f82f 	bl	8009446 <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e025      	b.n	800943e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d10e      	bne.n	800941e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f819 	bl	8009446 <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e00f      	b.n	800943e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009456:	e062      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945e:	d05e      	beq.n	800951e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009460:	f7f8 fbc2 	bl	8001be8 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	429a      	cmp	r2, r3
 800946e:	d302      	bcc.n	8009476 <UART_WaitOnFlagUntilTimeout+0x30>
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d11d      	bne.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009484:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0201 	bic.w	r2, r2, #1
 8009494:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2220      	movs	r2, #32
 800949a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e045      	b.n	800953e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d02e      	beq.n	800951e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ce:	d126      	bne.n	800951e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e00f      	b.n	800953e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69da      	ldr	r2, [r3, #28]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4013      	ands	r3, r2
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	bf0c      	ite	eq
 800952e:	2301      	moveq	r3, #1
 8009530:	2300      	movne	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	429a      	cmp	r2, r3
 800953a:	d08d      	beq.n	8009458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800955c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800956c:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
	...

08009584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800959a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6899      	ldr	r1, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <UART_EndRxTransfer+0x60>)
 80095a8:	400b      	ands	r3, r1
 80095aa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d107      	bne.n	80095c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0210 	bic.w	r2, r2, #16
 80095c2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	effffffe 	.word	0xeffffffe

080095e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095fe:	d014      	beq.n	800962a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009616:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009626:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009628:	e002      	b.n	8009630 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff f89e 	bl	800876c <HAL_UART_TxCpltCallback>
}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff f89a 	bl	8008780 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009668:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009670:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967c:	2b80      	cmp	r3, #128	; 0x80
 800967e:	d109      	bne.n	8009694 <UART_DMAError+0x40>
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b21      	cmp	r3, #33	; 0x21
 8009684:	d106      	bne.n	8009694 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2200      	movs	r2, #0
 800968a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800968e:	6978      	ldr	r0, [r7, #20]
 8009690:	f7ff ff59 	bl	8009546 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969e:	2b40      	cmp	r3, #64	; 0x40
 80096a0:	d109      	bne.n	80096b6 <UART_DMAError+0x62>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b22      	cmp	r3, #34	; 0x22
 80096a6:	d106      	bne.n	80096b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80096b0:	6978      	ldr	r0, [r7, #20]
 80096b2:	f7ff ff67 	bl	8009584 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096bc:	f043 0210 	orr.w	r2, r3, #16
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	f7f7 fc5c 	bl	8000f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096cc:	bf00      	nop
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7f7 fc46 	bl	8000f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009716:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2220      	movs	r2, #32
 800971c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff f820 	bl	800876c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_UARTEx_EnableFifoMode+0x16>
 8009782:	2302      	movs	r3, #2
 8009784:	e02b      	b.n	80097de <HAL_UARTEx_EnableFifoMode+0x6e>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2224      	movs	r2, #36	; 0x24
 8009792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0201 	bic.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80097bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f88a 	bl	80098e0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e02d      	b.n	800985a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2224      	movs	r2, #36	; 0x24
 800980a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0201 	bic.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f850 	bl	80098e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009872:	2b01      	cmp	r3, #1
 8009874:	d101      	bne.n	800987a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009876:	2302      	movs	r3, #2
 8009878:	e02d      	b.n	80098d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2224      	movs	r2, #36	; 0x24
 8009886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f812 	bl	80098e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2220      	movs	r2, #32
 80098c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d108      	bne.n	8009902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009900:	e031      	b.n	8009966 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009902:	2310      	movs	r3, #16
 8009904:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009906:	2310      	movs	r3, #16
 8009908:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	0e5b      	lsrs	r3, r3, #25
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	0f5b      	lsrs	r3, r3, #29
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	7b3a      	ldrb	r2, [r7, #12]
 800992e:	4911      	ldr	r1, [pc, #68]	; (8009974 <UARTEx_SetNbDataToProcess+0x94>)
 8009930:	5c8a      	ldrb	r2, [r1, r2]
 8009932:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009936:	7b3a      	ldrb	r2, [r7, #12]
 8009938:	490f      	ldr	r1, [pc, #60]	; (8009978 <UARTEx_SetNbDataToProcess+0x98>)
 800993a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800993c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	7b7a      	ldrb	r2, [r7, #13]
 800994c:	4909      	ldr	r1, [pc, #36]	; (8009974 <UARTEx_SetNbDataToProcess+0x94>)
 800994e:	5c8a      	ldrb	r2, [r1, r2]
 8009950:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009954:	7b7a      	ldrb	r2, [r7, #13]
 8009956:	4908      	ldr	r1, [pc, #32]	; (8009978 <UARTEx_SetNbDataToProcess+0x98>)
 8009958:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800995a:	fb93 f3f2 	sdiv	r3, r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	08009a28 	.word	0x08009a28
 8009978:	08009a30 	.word	0x08009a30

0800997c <__libc_init_array>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4d0d      	ldr	r5, [pc, #52]	; (80099b4 <__libc_init_array+0x38>)
 8009980:	4c0d      	ldr	r4, [pc, #52]	; (80099b8 <__libc_init_array+0x3c>)
 8009982:	1b64      	subs	r4, r4, r5
 8009984:	10a4      	asrs	r4, r4, #2
 8009986:	2600      	movs	r6, #0
 8009988:	42a6      	cmp	r6, r4
 800998a:	d109      	bne.n	80099a0 <__libc_init_array+0x24>
 800998c:	4d0b      	ldr	r5, [pc, #44]	; (80099bc <__libc_init_array+0x40>)
 800998e:	4c0c      	ldr	r4, [pc, #48]	; (80099c0 <__libc_init_array+0x44>)
 8009990:	f000 f820 	bl	80099d4 <_init>
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	2600      	movs	r6, #0
 800999a:	42a6      	cmp	r6, r4
 800999c:	d105      	bne.n	80099aa <__libc_init_array+0x2e>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a4:	4798      	blx	r3
 80099a6:	3601      	adds	r6, #1
 80099a8:	e7ee      	b.n	8009988 <__libc_init_array+0xc>
 80099aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ae:	4798      	blx	r3
 80099b0:	3601      	adds	r6, #1
 80099b2:	e7f2      	b.n	800999a <__libc_init_array+0x1e>
 80099b4:	08009a40 	.word	0x08009a40
 80099b8:	08009a40 	.word	0x08009a40
 80099bc:	08009a40 	.word	0x08009a40
 80099c0:	08009a44 	.word	0x08009a44

080099c4 <memset>:
 80099c4:	4402      	add	r2, r0
 80099c6:	4603      	mov	r3, r0
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d100      	bne.n	80099ce <memset+0xa>
 80099cc:	4770      	bx	lr
 80099ce:	f803 1b01 	strb.w	r1, [r3], #1
 80099d2:	e7f9      	b.n	80099c8 <memset+0x4>

080099d4 <_init>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr

080099e0 <_fini>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	bf00      	nop
 80099e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e6:	bc08      	pop	{r3}
 80099e8:	469e      	mov	lr, r3
 80099ea:	4770      	bx	lr
