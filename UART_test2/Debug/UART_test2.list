
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  080098c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006080  24000040  080098ec  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240060c0  080098ec  000260c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dabb  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fd5  00000000  00000000  0003db11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  000418b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374e7  00000000  00000000  000425b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000130db  00000000  00000000  00079a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f72e  00000000  00000000  0008cb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec2a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038fc  00000000  00000000  001ec2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009850 	.word	0x08009850

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009850 	.word	0x08009850

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80005da:	81fb      	strh	r3, [r7, #14]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	81bb      	strh	r3, [r7, #12]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	817b      	strh	r3, [r7, #10]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a97      	ldr	r2, [pc, #604]	; (8000860 <main+0x290>)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	3301      	adds	r3, #1
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
 800060e:	897b      	ldrh	r3, [r7, #10]
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b93      	ldr	r3, [pc, #588]	; (8000864 <main+0x294>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b8d      	ldr	r3, [pc, #564]	; (8000864 <main+0x294>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b88      	ldr	r3, [pc, #544]	; (8000864 <main+0x294>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a87      	ldr	r2, [pc, #540]	; (8000864 <main+0x294>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 f9d2 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f9aa 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fb20 	bl	8000ca8 <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 fa8e 	bl	8001b88 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fadc 	bl	8000c28 <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 fa80 	bl	8000b74 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fa26 	bl	8000ac4 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f85e 	bl	800173c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fa51 	bl	8001b28 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b78      	ldr	r3, [pc, #480]	; (8000868 <main+0x298>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <main+0x298>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 fa3c 	bl	8001b10 <HAL_GetTick>
 8000698:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
 800069e:	e030      	b.n	8000702 <main+0x132>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	486f      	ldr	r0, [pc, #444]	; (800086c <main+0x29c>)
 80006ae:	f008 fe08 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e16e      	b.n	800099a <main+0x3ca>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a68      	ldr	r2, [pc, #416]	; (8000860 <main+0x290>)
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b69      	ldr	r3, [pc, #420]	; (800086c <main+0x29c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4864      	ldr	r0, [pc, #400]	; (800086c <main+0x29c>)
 80006dc:	f008 fdf1 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x11a>
      {
        return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e157      	b.n	800099a <main+0x3ca>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <main+0x290>)
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b5d      	ldr	r3, [pc, #372]	; (800086c <main+0x29c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	3301      	adds	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000708:	d3ca      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4855      	ldr	r0, [pc, #340]	; (800086c <main+0x29c>)
 8000718:	f008 fdd3 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x156>
  {
    return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e139      	b.n	800099a <main+0x3ca>
  }
  BSP_LED_Off(LED1);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 ffde 	bl	80016e8 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 800072c:	e005      	b.n	800073a <main+0x16a>
  {
    BSP_LED_Toggle(LED2);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f804 	bl	800173c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 f9f7 	bl	8001b28 <HAL_Delay>
  while(UserButtonStatus == 0)
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <main+0x298>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f5      	beq.n	800072e <main+0x15e>
  }
  UserButtonStatus = 0;
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <main+0x298>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <main+0x2a0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 ffca 	bl	80016e8 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 ffc7 	bl	80016e8 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075a:	4b46      	ldr	r3, [pc, #280]	; (8000874 <main+0x2a4>)
 800075c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000760:	2b01      	cmp	r3, #1
 8000762:	d101      	bne.n	8000768 <main+0x198>
 8000764:	2302      	movs	r3, #2
 8000766:	e118      	b.n	800099a <main+0x3ca>
 8000768:	4b42      	ldr	r3, [pc, #264]	; (8000874 <main+0x2a4>)
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000770:	4b40      	ldr	r3, [pc, #256]	; (8000874 <main+0x2a4>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000778:	d107      	bne.n	800078a <main+0x1ba>
    {
      SPI_1LINE_RX(&hspi1);
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <main+0x2a4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <main+0x2a4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000788:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <main+0x2a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <main+0x2a4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000798:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <main+0x2a4>)
 800079c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800079e:	4a36      	ldr	r2, [pc, #216]	; (8000878 <main+0x2a8>)
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <main+0x2a4>)
 80007a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a6:	4a35      	ldr	r2, [pc, #212]	; (800087c <main+0x2ac>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <main+0x2b0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b33      	ldr	r3, [pc, #204]	; (8000880 <main+0x2b0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0218 	orr.w	r2, r2, #24
 80007b8:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <main+0x2a4>)
 80007bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <main+0x2a4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3330      	adds	r3, #48	; 0x30
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <main+0x2b4>)
 80007c8:	89fb      	ldrh	r3, [r7, #14]
 80007ca:	f001 fe59 	bl	8002480 <HAL_DMA_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00d      	beq.n	80007f0 <main+0x220>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <main+0x2a4>)
 80007d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	4a25      	ldr	r2, [pc, #148]	; (8000874 <main+0x2a4>)
 80007e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <main+0x2a4>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007ec:	f000 fb93 	bl	8000f16 <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0x2a4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6859      	ldr	r1, [r3, #4]
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <main+0x2a4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <main+0x2b8>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main+0x2a4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0x2a4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800080e:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <main+0x2a4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0x2a4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800081e:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0x2a4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <main+0x2a4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <main+0x2a4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <main+0x2a4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800083e:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000840:	e002      	b.n	8000848 <main+0x278>
  {
	    BSP_LED_Toggle(LED3);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 ff7a 	bl	800173c <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <main+0x2bc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d1f8      	bne.n	8000842 <main+0x272>
  }
  wTransferState = TRANSFER_WAIT;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <main+0x2bc>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  int j = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  for( int i = 0; i < txCount; ++i, j += 5 ){
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	e025      	b.n	80008ac <main+0x2dc>
 8000860:	24000080 	.word	0x24000080
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	24000060 	.word	0x24000060
 800086c:	2400590c 	.word	0x2400590c
 8000870:	2400005c 	.word	0x2400005c
 8000874:	24005f24 	.word	0x24005f24
 8000878:	08000e7d 	.word	0x08000e7d
 800087c:	08000e9d 	.word	0x08000e9d
 8000880:	24005fac 	.word	0x24005fac
 8000884:	24000880 	.word	0x24000880
 8000888:	ffff0000 	.word	0xffff0000
 800088c:	24005880 	.word	0x24005880
	  aTxBuffer[i] = aRxBuffer[j];
 8000890:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <main+0x3d4>)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000898:	4a43      	ldr	r2, [pc, #268]	; (80009a8 <main+0x3d8>)
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i, j += 5 ){
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3301      	adds	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3305      	adds	r3, #5
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	897b      	ldrh	r3, [r7, #10]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbed      	blt.n	8000890 <main+0x2c0>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b8:	493b      	ldr	r1, [pc, #236]	; (80009a8 <main+0x3d8>)
 80008ba:	483c      	ldr	r0, [pc, #240]	; (80009ac <main+0x3dc>)
 80008bc:	f007 fb64 	bl	8007f88 <HAL_UART_Transmit_DMA>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <main+0x2fc>
  {
    Error_Handler();
 80008c6:	f000 fb26 	bl	8000f16 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (wTransferState != TRANSFER_COMPLETE) {}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <main+0x3e0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d1fb      	bne.n	80008ce <main+0x2fe>
	  wTransferState = TRANSFER_WAIT;
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <main+0x3e0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
	  j = rxOffset;
 80008dc:	89bb      	ldrh	r3, [r7, #12]
 80008de:	61fb      	str	r3, [r7, #28]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00d      	b.n	8000902 <main+0x332>
		  aTxBuffer[i] = aRxBuffer[j];
 80008e6:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <main+0x3d4>)
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <main+0x3d8>)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3305      	adds	r3, #5
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	897b      	ldrh	r3, [r7, #10]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbed      	blt.n	80008e6 <main+0x316>
	  }
	  while ((UartReady == RESET)) {}
 800090a:	bf00      	nop
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <main+0x3e4>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0fa      	beq.n	800090c <main+0x33c>
	  UartReady = RESET;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <main+0x3e4>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	  /*##-2- Start the transmission process #####################################*/
	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 800091c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000920:	4921      	ldr	r1, [pc, #132]	; (80009a8 <main+0x3d8>)
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <main+0x3dc>)
 8000924:	f007 fb30 	bl	8007f88 <HAL_UART_Transmit_DMA>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <main+0x362>
	  {
	    Error_Handler();
 800092e:	f000 faf2 	bl	8000f16 <Error_Handler>
	  }
	  while (wTransferState != TRANSFER_H_COMPLETE) {}
 8000932:	bf00      	nop
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <main+0x3e0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d1fb      	bne.n	8000934 <main+0x364>
	  wTransferState = TRANSFER_WAIT;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <main+0x3e0>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
	  j = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	e00d      	b.n	8000968 <main+0x398>
		  aTxBuffer[i] = aRxBuffer[j];
 800094c:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <main+0x3d4>)
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <main+0x3d8>)
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	3301      	adds	r3, #1
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3305      	adds	r3, #5
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	897b      	ldrh	r3, [r7, #10]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbed      	blt.n	800094c <main+0x37c>
	  }

	  while ((UartReady == RESET)) {}
 8000970:	bf00      	nop
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <main+0x3e4>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0fa      	beq.n	8000972 <main+0x3a2>
	  UartReady = RESET;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <main+0x3e4>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
	  /*##-2- Start the transmission process #####################################*/
	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 8000982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <main+0x3d8>)
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <main+0x3dc>)
 800098a:	f007 fafd 	bl	8007f88 <HAL_UART_Transmit_DMA>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d09b      	beq.n	80008cc <main+0x2fc>
	  {
		Error_Handler();
 8000994:	f000 fabf 	bl	8000f16 <Error_Handler>
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000998:	e798      	b.n	80008cc <main+0x2fc>
	  }
  }
}
 800099a:	4618      	mov	r0, r3
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	24000880 	.word	0x24000880
 80009a8:	24000080 	.word	0x24000080
 80009ac:	2400590c 	.word	0x2400590c
 80009b0:	24005880 	.word	0x24005880
 80009b4:	2400005c 	.word	0x2400005c

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09c      	sub	sp, #112	; 0x70
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	224c      	movs	r2, #76	; 0x4c
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f008 ff3a 	bl	8009840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2220      	movs	r2, #32
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 ff34 	bl	8009840 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 fb81 	bl	80050e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <SystemClock_Config+0x100>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <SystemClock_Config+0x100>)
 80009e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <SystemClock_Config+0x100>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <SystemClock_Config+0x104>)
 80009fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fc:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <SystemClock_Config+0x104>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <SystemClock_Config+0x104>)
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <SystemClock_Config+0x100>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <SystemClock_Config+0x108>)
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f023 0303 	bic.w	r3, r3, #3
 8000a28:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <SystemClock_Config+0x108>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a30:	2321      	movs	r3, #33	; 0x21
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000a4a:	2373      	movs	r3, #115	; 0x73
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fb72 	bl	8005154 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a76:	f000 fa4e 	bl	8000f16 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	233f      	movs	r3, #63	; 0x3f
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a86:	2308      	movs	r3, #8
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a98:	2340      	movs	r3, #64	; 0x40
 8000a9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 ff67 	bl	8005974 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000aac:	f000 fa33 	bl	8000f16 <Error_Handler>
  }


}
 8000ab0:	bf00      	nop
 8000ab2:	3770      	adds	r7, #112	; 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58024800 	.word	0x58024800
 8000abc:	58000400 	.word	0x58000400
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <MX_SPI1_Init+0xac>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000ad0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000ad8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000adc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000ae0:	220d      	movs	r2, #13
 8000ae2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000ae6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000af4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000af8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b40:	2220      	movs	r2, #32
 8000b42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_SPI1_Init+0xa8>)
 8000b58:	f006 fdfa 	bl	8007750 <HAL_SPI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b62:	f000 f9d8 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24005f24 	.word	0x24005f24
 8000b70:	40013000 	.word	0x40013000

08000b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b7a:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <MX_USART3_UART_Init+0xac>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b80:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <MX_USART3_UART_Init+0xb0>)
 8000b82:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b98:	220c      	movs	r2, #12
 8000b9a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000ba4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ba8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc2:	4816      	ldr	r0, [pc, #88]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bc4:	f007 f98f 	bl	8007ee6 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000bce:	f000 f9a2 	bl	8000f16 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bd6:	f008 fd44 	bl	8009662 <HAL_UARTEx_SetTxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000be0:	f000 f999 	bl	8000f16 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000be8:	f008 fd79 	bl	80096de <HAL_UARTEx_SetRxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000bf2:	f000 f990 	bl	8000f16 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_USART3_UART_Init+0xa8>)
 8000bf8:	f008 fcf8 	bl	80095ec <HAL_UARTEx_EnableFifoMode>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000c02:	f000 f988 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2027      	movs	r0, #39	; 0x27
 8000c0c:	f001 f8a7 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c10:	2027      	movs	r0, #39	; 0x27
 8000c12:	f001 f8be 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2400590c 	.word	0x2400590c
 8000c20:	40004800 	.word	0x40004800
 8000c24:	00b6c7c0 	.word	0x00b6c7c0

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_DMA_Init+0x7c>)
 8000c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <MX_DMA_Init+0x7c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_DMA_Init+0x7c>)
 8000c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_DMA_Init+0x7c>)
 8000c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <MX_DMA_Init+0x7c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_DMA_Init+0x7c>)
 8000c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200b      	movs	r0, #11
 8000c70:	f001 f875 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c74:	200b      	movs	r0, #11
 8000c76:	f001 f88c 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f001 f86d 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c84:	200c      	movs	r0, #12
 8000c86:	f001 f884 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f001 f865 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f001 f87c 	bl	8001d92 <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b57      	ldr	r3, [pc, #348]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a55      	ldr	r2, [pc, #340]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cdc:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a3f      	ldr	r2, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a37      	ldr	r2, [pc, #220]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d54:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_GPIO_Init+0x174>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d96:	4822      	ldr	r0, [pc, #136]	; (8000e20 <MX_GPIO_Init+0x178>)
 8000d98:	f004 f954 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4820      	ldr	r0, [pc, #128]	; (8000e24 <MX_GPIO_Init+0x17c>)
 8000da2:	f004 f94f 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	481b      	ldr	r0, [pc, #108]	; (8000e28 <MX_GPIO_Init+0x180>)
 8000dbc:	f003 ff92 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dc0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_GPIO_Init+0x178>)
 8000dda:	f003 ff83 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <MX_GPIO_Init+0x17c>)
 8000df6:	f003 ff75 	bl	8004ce4 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 fbd4 	bl	80015a8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 fbd1 	bl	80015a8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f000 fbce 	bl	80015a8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 fcbe 	bl	8001790 <BSP_PB_Init>
}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020400 	.word	0x58020400
 8000e24:	58021000 	.word	0x58021000
 8000e28:	58020800 	.word	0x58020800

08000e2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e3c:	d105      	bne.n	8000e4a <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f083 0301 	eor.w	r3, r3, #1
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e48:	6013      	str	r3, [r2, #0]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	24000060 	.word	0x24000060

08000e5c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Turn LED1 on: Transfer in transmission process is complete */
  BSP_LED_On(LED1);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 fc15 	bl	8001694 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_SPI_RxCpltCallback+0x1c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	24005880 	.word	0x24005880

08000e7c <tx_complete>:

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fc05 	bl	8001694 <BSP_LED_On>
	  wTransferState = TRANSFER_COMPLETE;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <tx_complete+0x1c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24005880 	.word	0x24005880

08000e9c <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fbf5 	bl	8001694 <BSP_LED_On>
	  wTransferState = TRANSFER_H_COMPLETE;
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <tx_h_complete+0x1c>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	24005880 	.word	0x24005880

08000ebc <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_SPI_ErrorCallback+0x1c>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	24005880 	.word	0x24005880

08000edc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_UART_TxCpltCallback+0x1c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f000 fbd2 	bl	8001694 <BSP_LED_On>

}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2400005c 	.word	0x2400005c

08000efc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f000 fbc5 	bl	8001694 <BSP_LED_On>
  Error_Handler();
 8000f0a:	f000 f804 	bl	8000f16 <Error_Handler>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1a:	b672      	cpsid	i
}
 8000f1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 fc0c 	bl	800173c <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000f24:	2064      	movs	r0, #100	; 0x64
 8000f26:	f000 fdff 	bl	8001b28 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000f2a:	e7f8      	b.n	8000f1e <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x30>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58024400 	.word	0x58024400

08000f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0bc      	sub	sp, #240	; 0xf0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	22bc      	movs	r2, #188	; 0xbc
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 fc5d 	bl	8009840 <memset>
  if(hspi->Instance==SPI1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4aa0      	ldr	r2, [pc, #640]	; (800120c <HAL_SPI_MspInit+0x2ac>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	f040 8096 	bne.w	80010be <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8000fa2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 f861 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 8000fd0:	f7ff ffa1 	bl	8000f16 <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd4:	4b8e      	ldr	r3, [pc, #568]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8000fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fda:	4a8d      	ldr	r2, [pc, #564]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fe4:	4b8a      	ldr	r3, [pc, #552]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8000fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b87      	ldr	r3, [pc, #540]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	4a85      	ldr	r2, [pc, #532]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001002:	4b83      	ldr	r3, [pc, #524]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001010:	f248 0360 	movw	r3, #32864	; 0x8060
 8001014:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001034:	4619      	mov	r1, r3
 8001036:	4877      	ldr	r0, [pc, #476]	; (8001214 <HAL_SPI_MspInit+0x2b4>)
 8001038:	f003 fe54 	bl	8004ce4 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 800103c:	4b76      	ldr	r3, [pc, #472]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 800103e:	4a77      	ldr	r2, [pc, #476]	; (800121c <HAL_SPI_MspInit+0x2bc>)
 8001040:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001042:	4b75      	ldr	r3, [pc, #468]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001044:	2225      	movs	r2, #37	; 0x25
 8001046:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b73      	ldr	r3, [pc, #460]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b72      	ldr	r3, [pc, #456]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105a:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105c:	4b6e      	ldr	r3, [pc, #440]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 800105e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001062:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001064:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106a:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 800106e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001072:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 800107c:	2204      	movs	r2, #4
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001086:	4b64      	ldr	r3, [pc, #400]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800108c:	4b62      	ldr	r3, [pc, #392]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 800108e:	2200      	movs	r2, #0
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001092:	4861      	ldr	r0, [pc, #388]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 8001094:	f000 fe98 	bl	8001dc8 <HAL_DMA_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 800109e:	f7ff ff3a 	bl	8000f16 <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a5c      	ldr	r2, [pc, #368]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 80010a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80010a8:	4a5b      	ldr	r2, [pc, #364]	; (8001218 <HAL_SPI_MspInit+0x2b8>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2023      	movs	r0, #35	; 0x23
 80010b4:	f000 fe53 	bl	8001d5e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010b8:	2023      	movs	r0, #35	; 0x23
 80010ba:	f000 fe6a 	bl	8001d92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a57      	ldr	r2, [pc, #348]	; (8001220 <HAL_SPI_MspInit+0x2c0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f040 809d 	bne.w	8001204 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80010d6:	2304      	movs	r3, #4
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80010da:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80010e0:	2308      	movs	r3, #8
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80010e4:	2302      	movs	r3, #2
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 ffc5 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8001108:	f7ff ff05 	bl	8000f16 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800110e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001112:	4a3f      	ldr	r2, [pc, #252]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800111c:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800111e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a37      	ldr	r2, [pc, #220]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	4a30      	ldr	r2, [pc, #192]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	4a28      	ldr	r2, [pc, #160]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_SPI_MspInit+0x2b0>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001184:	230c      	movs	r3, #12
 8001186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800119c:	2305      	movs	r3, #5
 800119e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011a6:	4619      	mov	r1, r3
 80011a8:	481e      	ldr	r0, [pc, #120]	; (8001224 <HAL_SPI_MspInit+0x2c4>)
 80011aa:	f003 fd9b 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c8:	2305      	movs	r3, #5
 80011ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011d2:	4619      	mov	r1, r3
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <HAL_SPI_MspInit+0x2c8>)
 80011d6:	f003 fd85 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011da:	2308      	movs	r3, #8
 80011dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f2:	2305      	movs	r3, #5
 80011f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_SPI_MspInit+0x2cc>)
 8001200:	f003 fd70 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	37f0      	adds	r7, #240	; 0xf0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40013000 	.word	0x40013000
 8001210:	58024400 	.word	0x58024400
 8001214:	58020000 	.word	0x58020000
 8001218:	24005fac 	.word	0x24005fac
 800121c:	40020410 	.word	0x40020410
 8001220:	40003800 	.word	0x40003800
 8001224:	58020800 	.word	0x58020800
 8001228:	58020400 	.word	0x58020400
 800122c:	58020c00 	.word	0x58020c00

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ba      	sub	sp, #232	; 0xe8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	22bc      	movs	r2, #188	; 0xbc
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f008 faf5 	bl	8009840 <memset>
  if(huart->Instance==USART1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a94      	ldr	r2, [pc, #592]	; (80014ac <HAL_UART_MspInit+0x27c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	f040 8098 	bne.w	8001392 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001266:	2304      	movs	r3, #4
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 800126a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001270:	2309      	movs	r3, #9
 8001272:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001274:	2308      	movs	r3, #8
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001278:	2302      	movs	r3, #2
 800127a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800127c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001280:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001282:	2300      	movs	r3, #0
 8001284:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800128a:	2310      	movs	r3, #16
 800128c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fef9 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 80012a0:	f7ff fe39 	bl	8000f16 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a4:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80012a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012aa:	4a81      	ldr	r2, [pc, #516]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80012b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b7b      	ldr	r3, [pc, #492]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	4a79      	ldr	r2, [pc, #484]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d2:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80012fa:	2304      	movs	r3, #4
 80012fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001304:	4619      	mov	r1, r3
 8001306:	486b      	ldr	r0, [pc, #428]	; (80014b4 <HAL_UART_MspInit+0x284>)
 8001308:	f003 fcec 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800130c:	2340      	movs	r3, #64	; 0x40
 800130e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001324:	2307      	movs	r3, #7
 8001326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800132e:	4619      	mov	r1, r3
 8001330:	4860      	ldr	r0, [pc, #384]	; (80014b4 <HAL_UART_MspInit+0x284>)
 8001332:	f003 fcd7 	bl	8004ce4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001338:	4a60      	ldr	r2, [pc, #384]	; (80014bc <HAL_UART_MspInit+0x28c>)
 800133a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800133c:	4b5e      	ldr	r3, [pc, #376]	; (80014b8 <HAL_UART_MspInit+0x288>)
 800133e:	222a      	movs	r2, #42	; 0x2a
 8001340:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001348:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <HAL_UART_MspInit+0x288>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800134e:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001354:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001356:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_UART_MspInit+0x288>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001362:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_UART_MspInit+0x288>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136e:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001374:	4850      	ldr	r0, [pc, #320]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001376:	f000 fd27 	bl	8001dc8 <HAL_DMA_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001380:	f7ff fdc9 	bl	8000f16 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_UART_MspInit+0x288>)
 8001388:	679a      	str	r2, [r3, #120]	; 0x78
 800138a:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_UART_MspInit+0x288>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001390:	e088      	b.n	80014a4 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_UART_MspInit+0x290>)
 8001398:	4293      	cmp	r3, r2
 800139a:	f040 8083 	bne.w	80014a4 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80013a2:	2304      	movs	r3, #4
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80013a6:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80013ac:	2309      	movs	r3, #9
 80013ae:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80013b0:	2308      	movs	r3, #8
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80013b4:	2302      	movs	r3, #2
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80013b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013bc:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80013be:	2300      	movs	r3, #0
 80013c0:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fe5b 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 80013dc:	f7ff fd9b 	bl	8000f16 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80013e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e6:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_UART_MspInit+0x280>)
 80013f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_UART_MspInit+0x280>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a2a      	ldr	r2, [pc, #168]	; (80014b0 <HAL_UART_MspInit+0x280>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_UART_MspInit+0x280>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800141c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001436:	2307      	movs	r3, #7
 8001438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001440:	4619      	mov	r1, r3
 8001442:	4820      	ldr	r0, [pc, #128]	; (80014c4 <HAL_UART_MspInit+0x294>)
 8001444:	f003 fc4e 	bl	8004ce4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_UART_MspInit+0x298>)
 800144a:	4a20      	ldr	r2, [pc, #128]	; (80014cc <HAL_UART_MspInit+0x29c>)
 800144c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_UART_MspInit+0x298>)
 8001450:	222e      	movs	r2, #46	; 0x2e
 8001452:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_UART_MspInit+0x298>)
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0x298>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0x298>)
 8001462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001466:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x298>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_UART_MspInit+0x298>)
 8001470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001474:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_UART_MspInit+0x298>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_UART_MspInit+0x298>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x298>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <HAL_UART_MspInit+0x298>)
 800148a:	f000 fc9d 	bl	8001dc8 <HAL_DMA_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001494:	f7ff fd3f 	bl	8000f16 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_UART_MspInit+0x298>)
 800149c:	679a      	str	r2, [r3, #120]	; 0x78
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_UART_MspInit+0x298>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014a4:	bf00      	nop
 80014a6:	37e8      	adds	r7, #232	; 0xe8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40011000 	.word	0x40011000
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58020400 	.word	0x58020400
 80014b8:	24005e1c 	.word	0x24005e1c
 80014bc:	40020010 	.word	0x40020010
 80014c0:	40004800 	.word	0x40004800
 80014c4:	58020c00 	.word	0x58020c00
 80014c8:	24005da4 	.word	0x24005da4
 80014cc:	40020028 	.word	0x40020028

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 fae4 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <DMA1_Stream0_IRQHandler+0x10>)
 800152a:	f002 f895 	bl	8003658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24005e1c 	.word	0x24005e1c

08001538 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 800153c:	2001      	movs	r0, #1
 800153e:	f000 f8a9 	bl	8001694 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001542:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA1_Stream1_IRQHandler+0x14>)
 8001544:	f002 f888 	bl	8003658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	24005da4 	.word	0x24005da4

08001550 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED1);
 8001554:	2000      	movs	r0, #0
 8001556:	f000 f89d 	bl	8001694 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800155a:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA2_Stream0_IRQHandler+0x14>)
 800155c:	f002 f87c 	bl	8003658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	24005fac 	.word	0x24005fac

08001568 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800156c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001570:	f003 fd9b 	bl	80050aa <HAL_GPIO_EXTI_IRQHandler>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 800157c:	2001      	movs	r0, #1
 800157e:	f000 f889 	bl	8001694 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8001582:	4802      	ldr	r0, [pc, #8]	; (800158c <USART3_IRQHandler+0x14>)
 8001584:	f006 fd80 	bl	8008088 <HAL_UART_IRQHandler>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2400590c 	.word	0x2400590c

08001590 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <SPI1_IRQHandler+0x14>)
 8001596:	f006 f9dd 	bl	8007954 <HAL_SPI_IRQHandler>
  BSP_LED_On(LED2);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 f87a 	bl	8001694 <BSP_LED_On>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24005f24 	.word	0x24005f24

080015a8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <BSP_LED_Init+0x28>
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d006      	beq.n	80015d0 <BSP_LED_Init+0x28>
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d003      	beq.n	80015d0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015c8:	f06f 0301 	mvn.w	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	e055      	b.n	800167c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <BSP_LED_Init+0xe0>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <BSP_LED_Init+0xe0>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <BSP_LED_Init+0xe0>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	e021      	b.n	800163a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10f      	bne.n	800161c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <BSP_LED_Init+0xe0>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <BSP_LED_Init+0xe0>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <BSP_LED_Init+0xe0>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	e00e      	b.n	800163a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <BSP_LED_Init+0xe0>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001622:	4a19      	ldr	r2, [pc, #100]	; (8001688 <BSP_LED_Init+0xe0>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <BSP_LED_Init+0xe0>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <BSP_LED_Init+0xe4>)
 800163e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001642:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <BSP_LED_Init+0xe8>)
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	f107 0218 	add.w	r2, r7, #24
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fb40 	bl	8004ce4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <BSP_LED_Init+0xe8>)
 8001668:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <BSP_LED_Init+0xe4>)
 8001670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001674:	2200      	movs	r2, #0
 8001676:	4619      	mov	r1, r3
 8001678:	f003 fce4 	bl	8005044 <HAL_GPIO_WritePin>
  }

  return ret;
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800167e:	4618      	mov	r0, r3
 8001680:	3730      	adds	r7, #48	; 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58024400 	.word	0x58024400
 800168c:	08009868 	.word	0x08009868
 8001690:	24000000 	.word	0x24000000

08001694 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <BSP_LED_On+0x28>
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d006      	beq.n	80016bc <BSP_LED_On+0x28>
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d003      	beq.n	80016bc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016b4:	f06f 0301 	mvn.w	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e00b      	b.n	80016d4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <BSP_LED_On+0x4c>)
 80016c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <BSP_LED_On+0x50>)
 80016c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	f003 fcb8 	bl	8005044 <HAL_GPIO_WritePin>
  }

  return ret;
 80016d4:	68fb      	ldr	r3, [r7, #12]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24000000 	.word	0x24000000
 80016e4:	08009868 	.word	0x08009868

080016e8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <BSP_LED_Off+0x28>
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d006      	beq.n	8001710 <BSP_LED_Off+0x28>
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d003      	beq.n	8001710 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001708:	f06f 0301 	mvn.w	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e00b      	b.n	8001728 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <BSP_LED_Off+0x4c>)
 8001714:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <BSP_LED_Off+0x50>)
 800171c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	f003 fc8e 	bl	8005044 <HAL_GPIO_WritePin>
  }

  return ret;
 8001728:	68fb      	ldr	r3, [r7, #12]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	24000000 	.word	0x24000000
 8001738:	08009868 	.word	0x08009868

0800173c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <BSP_LED_Toggle+0x28>
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d006      	beq.n	8001764 <BSP_LED_Toggle+0x28>
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d003      	beq.n	8001764 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800175c:	f06f 0301 	mvn.w	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e00b      	b.n	800177c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <BSP_LED_Toggle+0x4c>)
 8001768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4907      	ldr	r1, [pc, #28]	; (800178c <BSP_LED_Toggle+0x50>)
 8001770:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f003 fc7d 	bl	8005076 <HAL_GPIO_TogglePin>
  }

  return ret;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	24000000 	.word	0x24000000
 800178c:	08009868 	.word	0x08009868

08001790 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <BSP_PB_Init+0xc8>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <BSP_PB_Init+0xc8>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <BSP_PB_Init+0xc8>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80017be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80017c4:	2302      	movs	r3, #2
 80017c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4a20      	ldr	r2, [pc, #128]	; (800185c <BSP_PB_Init+0xcc>)
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	f107 020c 	add.w	r2, r7, #12
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fa7d 	bl	8004ce4 <HAL_GPIO_Init>
 80017ea:	e030      	b.n	800184e <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <BSP_PB_Init+0xd0>)
 80017ee:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <BSP_PB_Init+0xcc>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	f107 020c 	add.w	r2, r7, #12
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fa70 	bl	8004ce4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <BSP_PB_Init+0xd4>)
 800180a:	441a      	add	r2, r3
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4916      	ldr	r1, [pc, #88]	; (8001868 <BSP_PB_Init+0xd8>)
 8001810:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f003 fa4f 	bl	8004cba <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4a10      	ldr	r2, [pc, #64]	; (8001864 <BSP_PB_Init+0xd4>)
 8001822:	1898      	adds	r0, r3, r2
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <BSP_PB_Init+0xdc>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	461a      	mov	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	f003 fa24 	bl	8004c7c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001834:	2028      	movs	r0, #40	; 0x28
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <BSP_PB_Init+0xe0>)
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	f000 fa8c 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001846:	2328      	movs	r3, #40	; 0x28
 8001848:	4618      	mov	r0, r3
 800184a:	f000 faa2 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58024400 	.word	0x58024400
 800185c:	2400000c 	.word	0x2400000c
 8001860:	11110000 	.word	0x11110000
 8001864:	24006024 	.word	0x24006024
 8001868:	08009870 	.word	0x08009870
 800186c:	24000010 	.word	0x24000010
 8001870:	24000014 	.word	0x24000014

08001874 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fff0 	bl	8001874 <BSP_PB_Callback>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189c:	4b39      	ldr	r3, [pc, #228]	; (8001984 <SystemInit+0xec>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a38      	ldr	r2, [pc, #224]	; (8001984 <SystemInit+0xec>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <SystemInit+0xf0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d807      	bhi.n	80018c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b8:	4b33      	ldr	r3, [pc, #204]	; (8001988 <SystemInit+0xf0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	4a31      	ldr	r2, [pc, #196]	; (8001988 <SystemInit+0xf0>)
 80018c2:	f043 0307 	orr.w	r3, r3, #7
 80018c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <SystemInit+0xf4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2f      	ldr	r2, [pc, #188]	; (800198c <SystemInit+0xf4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <SystemInit+0xf4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <SystemInit+0xf4>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	492b      	ldr	r1, [pc, #172]	; (800198c <SystemInit+0xf4>)
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <SystemInit+0xf8>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <SystemInit+0xf0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <SystemInit+0xf0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <SystemInit+0xf0>)
 80018fc:	f043 0307 	orr.w	r3, r3, #7
 8001900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <SystemInit+0xf4>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <SystemInit+0xf4>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <SystemInit+0xf4>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <SystemInit+0xf4>)
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <SystemInit+0xfc>)
 8001918:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <SystemInit+0xf4>)
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <SystemInit+0x100>)
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <SystemInit+0xf4>)
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <SystemInit+0x104>)
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <SystemInit+0xf4>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <SystemInit+0xf4>)
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <SystemInit+0x104>)
 8001930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <SystemInit+0xf4>)
 8001934:	2200      	movs	r2, #0
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <SystemInit+0xf4>)
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <SystemInit+0x104>)
 800193c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <SystemInit+0xf4>)
 8001940:	2200      	movs	r2, #0
 8001942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <SystemInit+0xf4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <SystemInit+0xf4>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <SystemInit+0xf4>)
 8001952:	2200      	movs	r2, #0
 8001954:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <SystemInit+0x108>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <SystemInit+0x10c>)
 800195c:	4013      	ands	r3, r2
 800195e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001962:	d202      	bcs.n	800196a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <SystemInit+0x110>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <SystemInit+0x114>)
 800196c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001970:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SystemInit+0xec>)
 8001974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001978:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	52002000 	.word	0x52002000
 800198c:	58024400 	.word	0x58024400
 8001990:	eaf6ed7f 	.word	0xeaf6ed7f
 8001994:	02020200 	.word	0x02020200
 8001998:	01ff0000 	.word	0x01ff0000
 800199c:	01010280 	.word	0x01010280
 80019a0:	5c001000 	.word	0x5c001000
 80019a4:	ffff0000 	.word	0xffff0000
 80019a8:	51008108 	.word	0x51008108
 80019ac:	52004000 	.word	0x52004000

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b4:	f7ff ff70 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	; (80019f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	; (80019fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019de:	f007 ff0b 	bl	80097f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7fe fdf5 	bl	80005d0 <main>
  bx  lr
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019f0:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 80019f4:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 80019f8:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 80019fc:	240060c0 	.word	0x240060c0

08001a00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC3_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	f000 f99c 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a10:	f004 f966 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_Init+0x68>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	4913      	ldr	r1, [pc, #76]	; (8001a70 <HAL_Init+0x6c>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_Init+0x68>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_Init+0x6c>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_Init+0x70>)
 8001a46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_Init+0x74>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f814 	bl	8001a7c <HAL_InitTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e002      	b.n	8001a64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5e:	f7ff fa65 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	08009874 	.word	0x08009874
 8001a74:	2400001c 	.word	0x2400001c
 8001a78:	24000018 	.word	0x24000018

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_InitTick+0x60>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e021      	b.n	8001ad4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_InitTick+0x64>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_InitTick+0x60>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f981 	bl	8001dae <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f94b 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x68>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	24000024 	.word	0x24000024
 8001ae0:	24000018 	.word	0x24000018
 8001ae4:	24000020 	.word	0x24000020

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	24000024 	.word	0x24000024
 8001b0c:	240060bc 	.word	0x240060bc

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	240060bc 	.word	0x240060bc

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	24000024 	.word	0x24000024

08001b70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetREVID+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0c1b      	lsrs	r3, r3, #16
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	5c001000 	.word	0x5c001000

08001b88 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_EnableCompensationCell+0x1c>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_EnableCompensationCell+0x1c>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6213      	str	r3, [r2, #32]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	58000400 	.word	0x58000400

08001ba8 <__NVIC_SetPriorityGrouping>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00
 8001bec:	05fa0000 	.word	0x05fa0000

08001bf0 <__NVIC_GetPriorityGrouping>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff40 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff33 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa4 	bl	8001d04 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fe9e 	bl	8001b10 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e316      	b.n	800240e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a66      	ldr	r2, [pc, #408]	; (8001f80 <HAL_DMA_Init+0x1b8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d04a      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a65      	ldr	r2, [pc, #404]	; (8001f84 <HAL_DMA_Init+0x1bc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d045      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_DMA_Init+0x1c0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d040      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <HAL_DMA_Init+0x1c4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d03b      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <HAL_DMA_Init+0x1c8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d036      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <HAL_DMA_Init+0x1cc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d031      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <HAL_DMA_Init+0x1d0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02c      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <HAL_DMA_Init+0x1d4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d027      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <HAL_DMA_Init+0x1d8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d022      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a59      	ldr	r2, [pc, #356]	; (8001fa4 <HAL_DMA_Init+0x1dc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d01d      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_DMA_Init+0x1e0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d018      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_DMA_Init+0x1e4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a54      	ldr	r2, [pc, #336]	; (8001fb0 <HAL_DMA_Init+0x1e8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00e      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a53      	ldr	r2, [pc, #332]	; (8001fb4 <HAL_DMA_Init+0x1ec>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a51      	ldr	r2, [pc, #324]	; (8001fb8 <HAL_DMA_Init+0x1f0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_DMA_Init+0xb8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a50      	ldr	r2, [pc, #320]	; (8001fbc <HAL_DMA_Init+0x1f4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_DMA_Init+0xbc>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_DMA_Init+0xbe>
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 813b 	beq.w	8002102 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <HAL_DMA_Init+0x1b8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04a      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <HAL_DMA_Init+0x1bc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d045      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <HAL_DMA_Init+0x1c0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_DMA_Init+0x1c4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d03b      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <HAL_DMA_Init+0x1c8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d036      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <HAL_DMA_Init+0x1cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <HAL_DMA_Init+0x1d0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02c      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2d      	ldr	r2, [pc, #180]	; (8001f9c <HAL_DMA_Init+0x1d4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d027      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_DMA_Init+0x1d8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_DMA_Init+0x1dc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01d      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <HAL_DMA_Init+0x1e0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_DMA_Init+0x1e4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_DMA_Init+0x1e8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_DMA_Init+0x1ec>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_DMA_Init+0x1f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_DMA_Init+0x174>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_DMA_Init+0x1f4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d108      	bne.n	8001f4e <HAL_DMA_Init+0x186>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e007      	b.n	8001f5e <HAL_DMA_Init+0x196>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f5e:	e02f      	b.n	8001fc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f60:	f7ff fdd6 	bl	8001b10 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d928      	bls.n	8001fc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e246      	b.n	800240e <HAL_DMA_Init+0x646>
 8001f80:	40020010 	.word	0x40020010
 8001f84:	40020028 	.word	0x40020028
 8001f88:	40020040 	.word	0x40020040
 8001f8c:	40020058 	.word	0x40020058
 8001f90:	40020070 	.word	0x40020070
 8001f94:	40020088 	.word	0x40020088
 8001f98:	400200a0 	.word	0x400200a0
 8001f9c:	400200b8 	.word	0x400200b8
 8001fa0:	40020410 	.word	0x40020410
 8001fa4:	40020428 	.word	0x40020428
 8001fa8:	40020440 	.word	0x40020440
 8001fac:	40020458 	.word	0x40020458
 8001fb0:	40020470 	.word	0x40020470
 8001fb4:	40020488 	.word	0x40020488
 8001fb8:	400204a0 	.word	0x400204a0
 8001fbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1c8      	bne.n	8001f60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4b83      	ldr	r3, [pc, #524]	; (80021e8 <HAL_DMA_Init+0x420>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001fe6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b04      	cmp	r3, #4
 8002012:	d107      	bne.n	8002024 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	4313      	orrs	r3, r2
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002024:	4b71      	ldr	r3, [pc, #452]	; (80021ec <HAL_DMA_Init+0x424>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_DMA_Init+0x428>)
 800202a:	4013      	ands	r3, r2
 800202c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002030:	d328      	bcc.n	8002084 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b28      	cmp	r3, #40	; 0x28
 8002038:	d903      	bls.n	8002042 <HAL_DMA_Init+0x27a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b2e      	cmp	r3, #46	; 0x2e
 8002040:	d917      	bls.n	8002072 <HAL_DMA_Init+0x2aa>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b3e      	cmp	r3, #62	; 0x3e
 8002048:	d903      	bls.n	8002052 <HAL_DMA_Init+0x28a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b42      	cmp	r3, #66	; 0x42
 8002050:	d90f      	bls.n	8002072 <HAL_DMA_Init+0x2aa>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b46      	cmp	r3, #70	; 0x46
 8002058:	d903      	bls.n	8002062 <HAL_DMA_Init+0x29a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b48      	cmp	r3, #72	; 0x48
 8002060:	d907      	bls.n	8002072 <HAL_DMA_Init+0x2aa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b4e      	cmp	r3, #78	; 0x4e
 8002068:	d905      	bls.n	8002076 <HAL_DMA_Init+0x2ae>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b52      	cmp	r3, #82	; 0x52
 8002070:	d801      	bhi.n	8002076 <HAL_DMA_Init+0x2ae>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_DMA_Init+0x2b0>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002082:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d117      	bne.n	80020de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f002 fc51 	bl	8004968 <DMA_CheckFifoParam>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e197      	b.n	800240e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f002 fb8c 	bl	8004804 <DMA_CalcBaseAndBitshift>
 80020ec:	4603      	mov	r3, r0
 80020ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	223f      	movs	r2, #63	; 0x3f
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	e0cd      	b.n	800229e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a3b      	ldr	r2, [pc, #236]	; (80021f4 <HAL_DMA_Init+0x42c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a39      	ldr	r2, [pc, #228]	; (80021f8 <HAL_DMA_Init+0x430>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01d      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a38      	ldr	r2, [pc, #224]	; (80021fc <HAL_DMA_Init+0x434>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d018      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a36      	ldr	r2, [pc, #216]	; (8002200 <HAL_DMA_Init+0x438>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a35      	ldr	r2, [pc, #212]	; (8002204 <HAL_DMA_Init+0x43c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a33      	ldr	r2, [pc, #204]	; (8002208 <HAL_DMA_Init+0x440>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a32      	ldr	r2, [pc, #200]	; (800220c <HAL_DMA_Init+0x444>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_Init+0x38a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <HAL_DMA_Init+0x448>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_DMA_Init+0x38e>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_DMA_Init+0x390>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8097 	beq.w	800228c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_DMA_Init+0x42c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d021      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_DMA_Init+0x430>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01c      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_DMA_Init+0x434>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d017      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_DMA_Init+0x438>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d012      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_DMA_Init+0x43c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_DMA_Init+0x440>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d008      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_DMA_Init+0x444>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_Init+0x3e4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_DMA_Init+0x448>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_DMA_Init+0x44c>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d020      	beq.n	8002218 <HAL_DMA_Init+0x450>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d102      	bne.n	80021e4 <HAL_DMA_Init+0x41c>
 80021de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021e2:	e01a      	b.n	800221a <HAL_DMA_Init+0x452>
 80021e4:	2300      	movs	r3, #0
 80021e6:	e018      	b.n	800221a <HAL_DMA_Init+0x452>
 80021e8:	fe10803f 	.word	0xfe10803f
 80021ec:	5c001000 	.word	0x5c001000
 80021f0:	ffff0000 	.word	0xffff0000
 80021f4:	58025408 	.word	0x58025408
 80021f8:	5802541c 	.word	0x5802541c
 80021fc:	58025430 	.word	0x58025430
 8002200:	58025444 	.word	0x58025444
 8002204:	58025458 	.word	0x58025458
 8002208:	5802546c 	.word	0x5802546c
 800220c:	58025480 	.word	0x58025480
 8002210:	58025494 	.word	0x58025494
 8002214:	fffe000f 	.word	0xfffe000f
 8002218:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002248:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b6e      	ldr	r3, [pc, #440]	; (8002418 <HAL_DMA_Init+0x650>)
 8002260:	4413      	add	r3, r2
 8002262:	4a6e      	ldr	r2, [pc, #440]	; (800241c <HAL_DMA_Init+0x654>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f002 fac7 	bl	8004804 <DMA_CalcBaseAndBitshift>
 8002276:	4603      	mov	r3, r0
 8002278:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	e008      	b.n	800229e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0b7      	b.n	800240e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a5f      	ldr	r2, [pc, #380]	; (8002420 <HAL_DMA_Init+0x658>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d072      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5d      	ldr	r2, [pc, #372]	; (8002424 <HAL_DMA_Init+0x65c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d06d      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a5c      	ldr	r2, [pc, #368]	; (8002428 <HAL_DMA_Init+0x660>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d068      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5a      	ldr	r2, [pc, #360]	; (800242c <HAL_DMA_Init+0x664>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d063      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a59      	ldr	r2, [pc, #356]	; (8002430 <HAL_DMA_Init+0x668>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d05e      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a57      	ldr	r2, [pc, #348]	; (8002434 <HAL_DMA_Init+0x66c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d059      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_DMA_Init+0x670>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d054      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a54      	ldr	r2, [pc, #336]	; (800243c <HAL_DMA_Init+0x674>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d04f      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a53      	ldr	r2, [pc, #332]	; (8002440 <HAL_DMA_Init+0x678>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d04a      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_DMA_Init+0x67c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d045      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_DMA_Init+0x680>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d040      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a4e      	ldr	r2, [pc, #312]	; (800244c <HAL_DMA_Init+0x684>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d03b      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_DMA_Init+0x688>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d036      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a4b      	ldr	r2, [pc, #300]	; (8002454 <HAL_DMA_Init+0x68c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d031      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <HAL_DMA_Init+0x690>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d02c      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a48      	ldr	r2, [pc, #288]	; (800245c <HAL_DMA_Init+0x694>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d027      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_DMA_Init+0x698>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d022      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a45      	ldr	r2, [pc, #276]	; (8002464 <HAL_DMA_Init+0x69c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01d      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a44      	ldr	r2, [pc, #272]	; (8002468 <HAL_DMA_Init+0x6a0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d018      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a42      	ldr	r2, [pc, #264]	; (800246c <HAL_DMA_Init+0x6a4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_DMA_Init+0x6a8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00e      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <HAL_DMA_Init+0x6ac>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <HAL_DMA_Init+0x6b0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_DMA_Init+0x5c6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3c      	ldr	r2, [pc, #240]	; (800247c <HAL_DMA_Init+0x6b4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_DMA_Init+0x5ca>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_DMA_Init+0x5cc>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f002 fb61 	bl	8004a60 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b80      	cmp	r3, #128	; 0x80
 80023a4:	d102      	bne.n	80023ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_DMA_Init+0x624>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d80c      	bhi.n	80023ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f002 fbde 	bl	8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	e008      	b.n	80023fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	a7fdabf8 	.word	0xa7fdabf8
 800241c:	cccccccd 	.word	0xcccccccd
 8002420:	40020010 	.word	0x40020010
 8002424:	40020028 	.word	0x40020028
 8002428:	40020040 	.word	0x40020040
 800242c:	40020058 	.word	0x40020058
 8002430:	40020070 	.word	0x40020070
 8002434:	40020088 	.word	0x40020088
 8002438:	400200a0 	.word	0x400200a0
 800243c:	400200b8 	.word	0x400200b8
 8002440:	40020410 	.word	0x40020410
 8002444:	40020428 	.word	0x40020428
 8002448:	40020440 	.word	0x40020440
 800244c:	40020458 	.word	0x40020458
 8002450:	40020470 	.word	0x40020470
 8002454:	40020488 	.word	0x40020488
 8002458:	400204a0 	.word	0x400204a0
 800245c:	400204b8 	.word	0x400204b8
 8002460:	58025408 	.word	0x58025408
 8002464:	5802541c 	.word	0x5802541c
 8002468:	58025430 	.word	0x58025430
 800246c:	58025444 	.word	0x58025444
 8002470:	58025458 	.word	0x58025458
 8002474:	5802546c 	.word	0x5802546c
 8002478:	58025480 	.word	0x58025480
 800247c:	58025494 	.word	0x58025494

08002480 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0ec      	b.n	8002676 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Start+0x2a>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e0e5      	b.n	8002676 <HAL_DMA_Start+0x1f6>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 80d0 	bne.w	8002660 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_DMA_Start+0x200>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04a      	beq.n	800256e <HAL_DMA_Start+0xee>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_DMA_Start+0x204>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d045      	beq.n	800256e <HAL_DMA_Start+0xee>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_DMA_Start+0x208>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d040      	beq.n	800256e <HAL_DMA_Start+0xee>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a66      	ldr	r2, [pc, #408]	; (800268c <HAL_DMA_Start+0x20c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d03b      	beq.n	800256e <HAL_DMA_Start+0xee>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_DMA_Start+0x210>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d036      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a63      	ldr	r2, [pc, #396]	; (8002694 <HAL_DMA_Start+0x214>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_DMA_Start+0xee>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_DMA_Start+0x218>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d02c      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_DMA_Start+0x21c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d027      	beq.n	800256e <HAL_DMA_Start+0xee>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5f      	ldr	r2, [pc, #380]	; (80026a0 <HAL_DMA_Start+0x220>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5d      	ldr	r2, [pc, #372]	; (80026a4 <HAL_DMA_Start+0x224>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01d      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_DMA_Start+0x228>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d018      	beq.n	800256e <HAL_DMA_Start+0xee>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5a      	ldr	r2, [pc, #360]	; (80026ac <HAL_DMA_Start+0x22c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_DMA_Start+0x230>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_DMA_Start+0x234>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_DMA_Start+0xee>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a56      	ldr	r2, [pc, #344]	; (80026b8 <HAL_DMA_Start+0x238>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_DMA_Start+0xee>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a54      	ldr	r2, [pc, #336]	; (80026bc <HAL_DMA_Start+0x23c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <HAL_DMA_Start+0x100>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e007      	b.n	8002590 <HAL_DMA_Start+0x110>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f001 ff88 	bl	80044ac <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a37      	ldr	r2, [pc, #220]	; (8002680 <HAL_DMA_Start+0x200>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d04a      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a36      	ldr	r2, [pc, #216]	; (8002684 <HAL_DMA_Start+0x204>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d045      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a34      	ldr	r2, [pc, #208]	; (8002688 <HAL_DMA_Start+0x208>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d040      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a33      	ldr	r2, [pc, #204]	; (800268c <HAL_DMA_Start+0x20c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d03b      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_DMA_Start+0x210>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d036      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a30      	ldr	r2, [pc, #192]	; (8002694 <HAL_DMA_Start+0x214>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d031      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <HAL_DMA_Start+0x218>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02c      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2d      	ldr	r2, [pc, #180]	; (800269c <HAL_DMA_Start+0x21c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d027      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_DMA_Start+0x220>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_DMA_Start+0x224>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d01d      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <HAL_DMA_Start+0x228>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_DMA_Start+0x22c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <HAL_DMA_Start+0x230>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_DMA_Start+0x234>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_DMA_Start+0x238>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_DMA_Start+0x1bc>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_DMA_Start+0x23c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <HAL_DMA_Start+0x1ce>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e012      	b.n	8002674 <HAL_DMA_Start+0x1f4>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e009      	b.n	8002674 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40020010 	.word	0x40020010
 8002684:	40020028 	.word	0x40020028
 8002688:	40020040 	.word	0x40020040
 800268c:	40020058 	.word	0x40020058
 8002690:	40020070 	.word	0x40020070
 8002694:	40020088 	.word	0x40020088
 8002698:	400200a0 	.word	0x400200a0
 800269c:	400200b8 	.word	0x400200b8
 80026a0:	40020410 	.word	0x40020410
 80026a4:	40020428 	.word	0x40020428
 80026a8:	40020440 	.word	0x40020440
 80026ac:	40020458 	.word	0x40020458
 80026b0:	40020470 	.word	0x40020470
 80026b4:	40020488 	.word	0x40020488
 80026b8:	400204a0 	.word	0x400204a0
 80026bc:	400204b8 	.word	0x400204b8

080026c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e226      	b.n	8002b2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Start_IT+0x2a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e21f      	b.n	8002b2a <HAL_DMA_Start_IT+0x46a>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 820a 	bne.w	8002b14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_DMA_Start_IT+0x1f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <HAL_DMA_Start_IT+0x1f8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a65      	ldr	r2, [pc, #404]	; (80028bc <HAL_DMA_Start_IT+0x1fc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a63      	ldr	r2, [pc, #396]	; (80028c0 <HAL_DMA_Start_IT+0x200>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a62      	ldr	r2, [pc, #392]	; (80028c4 <HAL_DMA_Start_IT+0x204>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a60      	ldr	r2, [pc, #384]	; (80028c8 <HAL_DMA_Start_IT+0x208>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5f      	ldr	r2, [pc, #380]	; (80028cc <HAL_DMA_Start_IT+0x20c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5d      	ldr	r2, [pc, #372]	; (80028d0 <HAL_DMA_Start_IT+0x210>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5c      	ldr	r2, [pc, #368]	; (80028d4 <HAL_DMA_Start_IT+0x214>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5a      	ldr	r2, [pc, #360]	; (80028d8 <HAL_DMA_Start_IT+0x218>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a59      	ldr	r2, [pc, #356]	; (80028dc <HAL_DMA_Start_IT+0x21c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a57      	ldr	r2, [pc, #348]	; (80028e0 <HAL_DMA_Start_IT+0x220>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_DMA_Start_IT+0x224>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a54      	ldr	r2, [pc, #336]	; (80028e8 <HAL_DMA_Start_IT+0x228>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a53      	ldr	r2, [pc, #332]	; (80028ec <HAL_DMA_Start_IT+0x22c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_Start_IT+0xee>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a51      	ldr	r2, [pc, #324]	; (80028f0 <HAL_DMA_Start_IT+0x230>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_DMA_Start_IT+0x100>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <HAL_DMA_Start_IT+0x110>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f001 fe68 	bl	80044ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <HAL_DMA_Start_IT+0x1f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a33      	ldr	r2, [pc, #204]	; (80028b8 <HAL_DMA_Start_IT+0x1f8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a31      	ldr	r2, [pc, #196]	; (80028bc <HAL_DMA_Start_IT+0x1fc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_DMA_Start_IT+0x200>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_DMA_Start_IT+0x204>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2d      	ldr	r2, [pc, #180]	; (80028c8 <HAL_DMA_Start_IT+0x208>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <HAL_DMA_Start_IT+0x20c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_DMA_Start_IT+0x210>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_DMA_Start_IT+0x214>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_DMA_Start_IT+0x218>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a25      	ldr	r2, [pc, #148]	; (80028dc <HAL_DMA_Start_IT+0x21c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_DMA_Start_IT+0x220>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <HAL_DMA_Start_IT+0x224>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <HAL_DMA_Start_IT+0x228>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_DMA_Start_IT+0x22c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Start_IT+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_DMA_Start_IT+0x230>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Start_IT+0x1c0>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_DMA_Start_IT+0x1c2>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d036      	beq.n	80028f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 021e 	bic.w	r2, r3, #30
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0216 	orr.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d03e      	beq.n	8002920 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0208 	orr.w	r2, r2, #8
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e035      	b.n	8002920 <HAL_DMA_Start_IT+0x260>
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 020e 	bic.w	r2, r3, #14
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 020a 	orr.w	r2, r2, #10
 8002906:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0204 	orr.w	r2, r2, #4
 800291e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a83      	ldr	r2, [pc, #524]	; (8002b34 <HAL_DMA_Start_IT+0x474>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d072      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a82      	ldr	r2, [pc, #520]	; (8002b38 <HAL_DMA_Start_IT+0x478>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d06d      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a80      	ldr	r2, [pc, #512]	; (8002b3c <HAL_DMA_Start_IT+0x47c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d068      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7f      	ldr	r2, [pc, #508]	; (8002b40 <HAL_DMA_Start_IT+0x480>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d063      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7d      	ldr	r2, [pc, #500]	; (8002b44 <HAL_DMA_Start_IT+0x484>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d05e      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7c      	ldr	r2, [pc, #496]	; (8002b48 <HAL_DMA_Start_IT+0x488>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d059      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a7a      	ldr	r2, [pc, #488]	; (8002b4c <HAL_DMA_Start_IT+0x48c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d054      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a79      	ldr	r2, [pc, #484]	; (8002b50 <HAL_DMA_Start_IT+0x490>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04f      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a77      	ldr	r2, [pc, #476]	; (8002b54 <HAL_DMA_Start_IT+0x494>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04a      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a76      	ldr	r2, [pc, #472]	; (8002b58 <HAL_DMA_Start_IT+0x498>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d045      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a74      	ldr	r2, [pc, #464]	; (8002b5c <HAL_DMA_Start_IT+0x49c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d040      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a73      	ldr	r2, [pc, #460]	; (8002b60 <HAL_DMA_Start_IT+0x4a0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d03b      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_DMA_Start_IT+0x4a4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d036      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <HAL_DMA_Start_IT+0x4a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d031      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_DMA_Start_IT+0x4ac>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02c      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6d      	ldr	r2, [pc, #436]	; (8002b70 <HAL_DMA_Start_IT+0x4b0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d027      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_DMA_Start_IT+0x4b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_DMA_Start_IT+0x4b8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01d      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_DMA_Start_IT+0x4bc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_DMA_Start_IT+0x4c0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_DMA_Start_IT+0x4c4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <HAL_DMA_Start_IT+0x4c8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a62      	ldr	r2, [pc, #392]	; (8002b8c <HAL_DMA_Start_IT+0x4cc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_DMA_Start_IT+0x350>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_DMA_Start_IT+0x4d0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Start_IT+0x354>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <HAL_DMA_Start_IT+0x356>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01a      	beq.n	8002a50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a37      	ldr	r2, [pc, #220]	; (8002b34 <HAL_DMA_Start_IT+0x474>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a36      	ldr	r2, [pc, #216]	; (8002b38 <HAL_DMA_Start_IT+0x478>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a34      	ldr	r2, [pc, #208]	; (8002b3c <HAL_DMA_Start_IT+0x47c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a33      	ldr	r2, [pc, #204]	; (8002b40 <HAL_DMA_Start_IT+0x480>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a31      	ldr	r2, [pc, #196]	; (8002b44 <HAL_DMA_Start_IT+0x484>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a30      	ldr	r2, [pc, #192]	; (8002b48 <HAL_DMA_Start_IT+0x488>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <HAL_DMA_Start_IT+0x48c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	; (8002b50 <HAL_DMA_Start_IT+0x490>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_DMA_Start_IT+0x494>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_DMA_Start_IT+0x498>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_DMA_Start_IT+0x49c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_DMA_Start_IT+0x4a0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <HAL_DMA_Start_IT+0x4a4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_DMA_Start_IT+0x4a8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_DMA_Start_IT+0x4ac>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_Start_IT+0x430>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_DMA_Start_IT+0x4b0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <HAL_DMA_Start_IT+0x442>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e012      	b.n	8002b28 <HAL_DMA_Start_IT+0x468>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e009      	b.n	8002b28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028
 8002b3c:	40020040 	.word	0x40020040
 8002b40:	40020058 	.word	0x40020058
 8002b44:	40020070 	.word	0x40020070
 8002b48:	40020088 	.word	0x40020088
 8002b4c:	400200a0 	.word	0x400200a0
 8002b50:	400200b8 	.word	0x400200b8
 8002b54:	40020410 	.word	0x40020410
 8002b58:	40020428 	.word	0x40020428
 8002b5c:	40020440 	.word	0x40020440
 8002b60:	40020458 	.word	0x40020458
 8002b64:	40020470 	.word	0x40020470
 8002b68:	40020488 	.word	0x40020488
 8002b6c:	400204a0 	.word	0x400204a0
 8002b70:	400204b8 	.word	0x400204b8
 8002b74:	58025408 	.word	0x58025408
 8002b78:	5802541c 	.word	0x5802541c
 8002b7c:	58025430 	.word	0x58025430
 8002b80:	58025444 	.word	0x58025444
 8002b84:	58025458 	.word	0x58025458
 8002b88:	5802546c 	.word	0x5802546c
 8002b8c:	58025480 	.word	0x58025480
 8002b90:	58025494 	.word	0x58025494

08002b94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7fe ffb8 	bl	8001b10 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e2dc      	b.n	8003166 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d008      	beq.n	8002bca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e2cd      	b.n	8003166 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a76      	ldr	r2, [pc, #472]	; (8002da8 <HAL_DMA_Abort+0x214>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d04a      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a74      	ldr	r2, [pc, #464]	; (8002dac <HAL_DMA_Abort+0x218>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d045      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a73      	ldr	r2, [pc, #460]	; (8002db0 <HAL_DMA_Abort+0x21c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d040      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a71      	ldr	r2, [pc, #452]	; (8002db4 <HAL_DMA_Abort+0x220>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d03b      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a70      	ldr	r2, [pc, #448]	; (8002db8 <HAL_DMA_Abort+0x224>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d036      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_DMA_Abort+0x228>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d031      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6d      	ldr	r2, [pc, #436]	; (8002dc0 <HAL_DMA_Abort+0x22c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d02c      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6b      	ldr	r2, [pc, #428]	; (8002dc4 <HAL_DMA_Abort+0x230>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d027      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6a      	ldr	r2, [pc, #424]	; (8002dc8 <HAL_DMA_Abort+0x234>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d022      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a68      	ldr	r2, [pc, #416]	; (8002dcc <HAL_DMA_Abort+0x238>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01d      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a67      	ldr	r2, [pc, #412]	; (8002dd0 <HAL_DMA_Abort+0x23c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d018      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a65      	ldr	r2, [pc, #404]	; (8002dd4 <HAL_DMA_Abort+0x240>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a64      	ldr	r2, [pc, #400]	; (8002dd8 <HAL_DMA_Abort+0x244>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a62      	ldr	r2, [pc, #392]	; (8002ddc <HAL_DMA_Abort+0x248>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a61      	ldr	r2, [pc, #388]	; (8002de0 <HAL_DMA_Abort+0x24c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort+0xd6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a5f      	ldr	r2, [pc, #380]	; (8002de4 <HAL_DMA_Abort+0x250>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_DMA_Abort+0xda>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_DMA_Abort+0xdc>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 021e 	bic.w	r2, r2, #30
 8002c82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e00a      	b.n	8002cb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 020e 	bic.w	r2, r2, #14
 8002caa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <HAL_DMA_Abort+0x214>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d072      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <HAL_DMA_Abort+0x218>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d06d      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <HAL_DMA_Abort+0x21c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d068      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a37      	ldr	r2, [pc, #220]	; (8002db4 <HAL_DMA_Abort+0x220>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d063      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <HAL_DMA_Abort+0x224>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d05e      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <HAL_DMA_Abort+0x228>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d059      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a33      	ldr	r2, [pc, #204]	; (8002dc0 <HAL_DMA_Abort+0x22c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d054      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_DMA_Abort+0x230>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04f      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <HAL_DMA_Abort+0x234>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04a      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <HAL_DMA_Abort+0x238>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d045      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <HAL_DMA_Abort+0x23c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d040      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <HAL_DMA_Abort+0x240>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03b      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <HAL_DMA_Abort+0x244>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_DMA_Abort+0x248>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_DMA_Abort+0x24c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d02c      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <HAL_DMA_Abort+0x250>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d027      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <HAL_DMA_Abort+0x254>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_DMA_Abort+0x258>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_DMA_Abort+0x25c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_DMA_Abort+0x260>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_DMA_Abort+0x264>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_DMA_Abort+0x268>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_DMA_Abort+0x26c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_DMA_Abort+0x20e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <HAL_DMA_Abort+0x270>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d132      	bne.n	8002e08 <HAL_DMA_Abort+0x274>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e031      	b.n	8002e0a <HAL_DMA_Abort+0x276>
 8002da6:	bf00      	nop
 8002da8:	40020010 	.word	0x40020010
 8002dac:	40020028 	.word	0x40020028
 8002db0:	40020040 	.word	0x40020040
 8002db4:	40020058 	.word	0x40020058
 8002db8:	40020070 	.word	0x40020070
 8002dbc:	40020088 	.word	0x40020088
 8002dc0:	400200a0 	.word	0x400200a0
 8002dc4:	400200b8 	.word	0x400200b8
 8002dc8:	40020410 	.word	0x40020410
 8002dcc:	40020428 	.word	0x40020428
 8002dd0:	40020440 	.word	0x40020440
 8002dd4:	40020458 	.word	0x40020458
 8002dd8:	40020470 	.word	0x40020470
 8002ddc:	40020488 	.word	0x40020488
 8002de0:	400204a0 	.word	0x400204a0
 8002de4:	400204b8 	.word	0x400204b8
 8002de8:	58025408 	.word	0x58025408
 8002dec:	5802541c 	.word	0x5802541c
 8002df0:	58025430 	.word	0x58025430
 8002df4:	58025444 	.word	0x58025444
 8002df8:	58025458 	.word	0x58025458
 8002dfc:	5802546c 	.word	0x5802546c
 8002e00:	58025480 	.word	0x58025480
 8002e04:	58025494 	.word	0x58025494
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6d      	ldr	r2, [pc, #436]	; (8002fd8 <HAL_DMA_Abort+0x444>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04a      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	; (8002fdc <HAL_DMA_Abort+0x448>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d045      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6a      	ldr	r2, [pc, #424]	; (8002fe0 <HAL_DMA_Abort+0x44c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d040      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	; (8002fe4 <HAL_DMA_Abort+0x450>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d03b      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_DMA_Abort+0x454>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d036      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_DMA_Abort+0x458>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_DMA_Abort+0x45c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d02c      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a62      	ldr	r2, [pc, #392]	; (8002ff4 <HAL_DMA_Abort+0x460>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_DMA_Abort+0x464>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5f      	ldr	r2, [pc, #380]	; (8002ffc <HAL_DMA_Abort+0x468>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5e      	ldr	r2, [pc, #376]	; (8003000 <HAL_DMA_Abort+0x46c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d018      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_DMA_Abort+0x470>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5b      	ldr	r2, [pc, #364]	; (8003008 <HAL_DMA_Abort+0x474>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_DMA_Abort+0x478>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_DMA_Abort+0x47c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_Abort+0x32a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_DMA_Abort+0x480>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_Abort+0x33c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e007      	b.n	8002ee0 <HAL_DMA_Abort+0x34c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ee0:	e013      	b.n	8002f0a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee2:	f7fe fe15 	bl	8001b10 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d90c      	bls.n	8002f0a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2203      	movs	r2, #3
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e12d      	b.n	8003166 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e5      	bne.n	8002ee2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <HAL_DMA_Abort+0x444>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d04a      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <HAL_DMA_Abort+0x448>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d045      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <HAL_DMA_Abort+0x44c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d040      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	; (8002fe4 <HAL_DMA_Abort+0x450>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d03b      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <HAL_DMA_Abort+0x454>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d036      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <HAL_DMA_Abort+0x458>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d031      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <HAL_DMA_Abort+0x45c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d02c      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <HAL_DMA_Abort+0x460>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d027      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <HAL_DMA_Abort+0x464>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <HAL_DMA_Abort+0x468>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01d      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a20      	ldr	r2, [pc, #128]	; (8003000 <HAL_DMA_Abort+0x46c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d018      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <HAL_DMA_Abort+0x470>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_DMA_Abort+0x474>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00e      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	; (800300c <HAL_DMA_Abort+0x478>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <HAL_DMA_Abort+0x47c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_DMA_Abort+0x422>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_DMA_Abort+0x480>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_DMA_Abort+0x426>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_DMA_Abort+0x428>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02b      	beq.n	8003018 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	223f      	movs	r2, #63	; 0x3f
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	e02a      	b.n	800302e <HAL_DMA_Abort+0x49a>
 8002fd8:	40020010 	.word	0x40020010
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	40020040 	.word	0x40020040
 8002fe4:	40020058 	.word	0x40020058
 8002fe8:	40020070 	.word	0x40020070
 8002fec:	40020088 	.word	0x40020088
 8002ff0:	400200a0 	.word	0x400200a0
 8002ff4:	400200b8 	.word	0x400200b8
 8002ff8:	40020410 	.word	0x40020410
 8002ffc:	40020428 	.word	0x40020428
 8003000:	40020440 	.word	0x40020440
 8003004:	40020458 	.word	0x40020458
 8003008:	40020470 	.word	0x40020470
 800300c:	40020488 	.word	0x40020488
 8003010:	400204a0 	.word	0x400204a0
 8003014:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4f      	ldr	r2, [pc, #316]	; (8003170 <HAL_DMA_Abort+0x5dc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d072      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a4d      	ldr	r2, [pc, #308]	; (8003174 <HAL_DMA_Abort+0x5e0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d06d      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_DMA_Abort+0x5e4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d068      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a4a      	ldr	r2, [pc, #296]	; (800317c <HAL_DMA_Abort+0x5e8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d063      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a49      	ldr	r2, [pc, #292]	; (8003180 <HAL_DMA_Abort+0x5ec>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d05e      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a47      	ldr	r2, [pc, #284]	; (8003184 <HAL_DMA_Abort+0x5f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d059      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a46      	ldr	r2, [pc, #280]	; (8003188 <HAL_DMA_Abort+0x5f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d054      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a44      	ldr	r2, [pc, #272]	; (800318c <HAL_DMA_Abort+0x5f8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d04f      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a43      	ldr	r2, [pc, #268]	; (8003190 <HAL_DMA_Abort+0x5fc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a41      	ldr	r2, [pc, #260]	; (8003194 <HAL_DMA_Abort+0x600>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a40      	ldr	r2, [pc, #256]	; (8003198 <HAL_DMA_Abort+0x604>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3e      	ldr	r2, [pc, #248]	; (800319c <HAL_DMA_Abort+0x608>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <HAL_DMA_Abort+0x60c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <HAL_DMA_Abort+0x610>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <HAL_DMA_Abort+0x614>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_DMA_Abort+0x618>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a37      	ldr	r2, [pc, #220]	; (80031b0 <HAL_DMA_Abort+0x61c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a35      	ldr	r2, [pc, #212]	; (80031b4 <HAL_DMA_Abort+0x620>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <HAL_DMA_Abort+0x624>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a32      	ldr	r2, [pc, #200]	; (80031bc <HAL_DMA_Abort+0x628>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <HAL_DMA_Abort+0x62c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <HAL_DMA_Abort+0x630>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <HAL_DMA_Abort+0x634>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_Abort+0x58a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <HAL_DMA_Abort+0x638>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_DMA_Abort+0x58e>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_DMA_Abort+0x590>
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003130:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003148:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003152:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40020010 	.word	0x40020010
 8003174:	40020028 	.word	0x40020028
 8003178:	40020040 	.word	0x40020040
 800317c:	40020058 	.word	0x40020058
 8003180:	40020070 	.word	0x40020070
 8003184:	40020088 	.word	0x40020088
 8003188:	400200a0 	.word	0x400200a0
 800318c:	400200b8 	.word	0x400200b8
 8003190:	40020410 	.word	0x40020410
 8003194:	40020428 	.word	0x40020428
 8003198:	40020440 	.word	0x40020440
 800319c:	40020458 	.word	0x40020458
 80031a0:	40020470 	.word	0x40020470
 80031a4:	40020488 	.word	0x40020488
 80031a8:	400204a0 	.word	0x400204a0
 80031ac:	400204b8 	.word	0x400204b8
 80031b0:	58025408 	.word	0x58025408
 80031b4:	5802541c 	.word	0x5802541c
 80031b8:	58025430 	.word	0x58025430
 80031bc:	58025444 	.word	0x58025444
 80031c0:	58025458 	.word	0x58025458
 80031c4:	5802546c 	.word	0x5802546c
 80031c8:	58025480 	.word	0x58025480
 80031cc:	58025494 	.word	0x58025494

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e205      	b.n	80035ee <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d004      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e1fa      	b.n	80035ee <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a8c      	ldr	r2, [pc, #560]	; (8003430 <HAL_DMA_Abort_IT+0x260>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04a      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a8b      	ldr	r2, [pc, #556]	; (8003434 <HAL_DMA_Abort_IT+0x264>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d045      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a89      	ldr	r2, [pc, #548]	; (8003438 <HAL_DMA_Abort_IT+0x268>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d040      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a88      	ldr	r2, [pc, #544]	; (800343c <HAL_DMA_Abort_IT+0x26c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d03b      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a86      	ldr	r2, [pc, #536]	; (8003440 <HAL_DMA_Abort_IT+0x270>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d036      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a85      	ldr	r2, [pc, #532]	; (8003444 <HAL_DMA_Abort_IT+0x274>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d031      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_DMA_Abort_IT+0x278>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02c      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a82      	ldr	r2, [pc, #520]	; (800344c <HAL_DMA_Abort_IT+0x27c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d027      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a80      	ldr	r2, [pc, #512]	; (8003450 <HAL_DMA_Abort_IT+0x280>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7f      	ldr	r2, [pc, #508]	; (8003454 <HAL_DMA_Abort_IT+0x284>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01d      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7d      	ldr	r2, [pc, #500]	; (8003458 <HAL_DMA_Abort_IT+0x288>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_DMA_Abort_IT+0x28c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_DMA_Abort_IT+0x290>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a79      	ldr	r2, [pc, #484]	; (8003464 <HAL_DMA_Abort_IT+0x294>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a77      	ldr	r2, [pc, #476]	; (8003468 <HAL_DMA_Abort_IT+0x298>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a76      	ldr	r2, [pc, #472]	; (800346c <HAL_DMA_Abort_IT+0x29c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_DMA_Abort_IT+0xcc>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_DMA_Abort_IT+0xce>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d065      	beq.n	800336e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a60      	ldr	r2, [pc, #384]	; (8003430 <HAL_DMA_Abort_IT+0x260>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d04a      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5e      	ldr	r2, [pc, #376]	; (8003434 <HAL_DMA_Abort_IT+0x264>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d045      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5d      	ldr	r2, [pc, #372]	; (8003438 <HAL_DMA_Abort_IT+0x268>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d040      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5b      	ldr	r2, [pc, #364]	; (800343c <HAL_DMA_Abort_IT+0x26c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d03b      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5a      	ldr	r2, [pc, #360]	; (8003440 <HAL_DMA_Abort_IT+0x270>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d036      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_DMA_Abort_IT+0x274>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a57      	ldr	r2, [pc, #348]	; (8003448 <HAL_DMA_Abort_IT+0x278>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d02c      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a55      	ldr	r2, [pc, #340]	; (800344c <HAL_DMA_Abort_IT+0x27c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d027      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a54      	ldr	r2, [pc, #336]	; (8003450 <HAL_DMA_Abort_IT+0x280>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_DMA_Abort_IT+0x284>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01d      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a51      	ldr	r2, [pc, #324]	; (8003458 <HAL_DMA_Abort_IT+0x288>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4f      	ldr	r2, [pc, #316]	; (800345c <HAL_DMA_Abort_IT+0x28c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4e      	ldr	r2, [pc, #312]	; (8003460 <HAL_DMA_Abort_IT+0x290>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4c      	ldr	r2, [pc, #304]	; (8003464 <HAL_DMA_Abort_IT+0x294>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <HAL_DMA_Abort_IT+0x298>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_DMA_Abort_IT+0x17a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a49      	ldr	r2, [pc, #292]	; (800346c <HAL_DMA_Abort_IT+0x29c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <HAL_DMA_Abort_IT+0x18c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e147      	b.n	80035ec <HAL_DMA_Abort_IT+0x41c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e13e      	b.n	80035ec <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 020e 	bic.w	r2, r2, #14
 800337c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_DMA_Abort_IT+0x260>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04a      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_DMA_Abort_IT+0x264>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d045      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a28      	ldr	r2, [pc, #160]	; (8003438 <HAL_DMA_Abort_IT+0x268>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d040      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a26      	ldr	r2, [pc, #152]	; (800343c <HAL_DMA_Abort_IT+0x26c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03b      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <HAL_DMA_Abort_IT+0x270>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d036      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a23      	ldr	r2, [pc, #140]	; (8003444 <HAL_DMA_Abort_IT+0x274>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_DMA_Abort_IT+0x278>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d02c      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a20      	ldr	r2, [pc, #128]	; (800344c <HAL_DMA_Abort_IT+0x27c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d027      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_DMA_Abort_IT+0x280>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_DMA_Abort_IT+0x284>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_DMA_Abort_IT+0x288>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d018      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_DMA_Abort_IT+0x28c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_DMA_Abort_IT+0x290>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_DMA_Abort_IT+0x294>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <HAL_DMA_Abort_IT+0x298>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_DMA_Abort_IT+0x24e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_DMA_Abort_IT+0x29c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d128      	bne.n	8003470 <HAL_DMA_Abort_IT+0x2a0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e027      	b.n	8003480 <HAL_DMA_Abort_IT+0x2b0>
 8003430:	40020010 	.word	0x40020010
 8003434:	40020028 	.word	0x40020028
 8003438:	40020040 	.word	0x40020040
 800343c:	40020058 	.word	0x40020058
 8003440:	40020070 	.word	0x40020070
 8003444:	40020088 	.word	0x40020088
 8003448:	400200a0 	.word	0x400200a0
 800344c:	400200b8 	.word	0x400200b8
 8003450:	40020410 	.word	0x40020410
 8003454:	40020428 	.word	0x40020428
 8003458:	40020440 	.word	0x40020440
 800345c:	40020458 	.word	0x40020458
 8003460:	40020470 	.word	0x40020470
 8003464:	40020488 	.word	0x40020488
 8003468:	400204a0 	.word	0x400204a0
 800346c:	400204b8 	.word	0x400204b8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5c      	ldr	r2, [pc, #368]	; (80035f8 <HAL_DMA_Abort_IT+0x428>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d072      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5b      	ldr	r2, [pc, #364]	; (80035fc <HAL_DMA_Abort_IT+0x42c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d06d      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a59      	ldr	r2, [pc, #356]	; (8003600 <HAL_DMA_Abort_IT+0x430>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d068      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_DMA_Abort_IT+0x434>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d063      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a56      	ldr	r2, [pc, #344]	; (8003608 <HAL_DMA_Abort_IT+0x438>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d05e      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_DMA_Abort_IT+0x43c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d059      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a53      	ldr	r2, [pc, #332]	; (8003610 <HAL_DMA_Abort_IT+0x440>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d054      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_DMA_Abort_IT+0x444>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d04f      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_DMA_Abort_IT+0x448>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d04a      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4f      	ldr	r2, [pc, #316]	; (800361c <HAL_DMA_Abort_IT+0x44c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d045      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4d      	ldr	r2, [pc, #308]	; (8003620 <HAL_DMA_Abort_IT+0x450>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d040      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4c      	ldr	r2, [pc, #304]	; (8003624 <HAL_DMA_Abort_IT+0x454>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d03b      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a4a      	ldr	r2, [pc, #296]	; (8003628 <HAL_DMA_Abort_IT+0x458>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d036      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a49      	ldr	r2, [pc, #292]	; (800362c <HAL_DMA_Abort_IT+0x45c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d031      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a47      	ldr	r2, [pc, #284]	; (8003630 <HAL_DMA_Abort_IT+0x460>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d02c      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a46      	ldr	r2, [pc, #280]	; (8003634 <HAL_DMA_Abort_IT+0x464>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d027      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a44      	ldr	r2, [pc, #272]	; (8003638 <HAL_DMA_Abort_IT+0x468>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d022      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a43      	ldr	r2, [pc, #268]	; (800363c <HAL_DMA_Abort_IT+0x46c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d01d      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a41      	ldr	r2, [pc, #260]	; (8003640 <HAL_DMA_Abort_IT+0x470>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d018      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <HAL_DMA_Abort_IT+0x474>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3e      	ldr	r2, [pc, #248]	; (8003648 <HAL_DMA_Abort_IT+0x478>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00e      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <HAL_DMA_Abort_IT+0x47c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <HAL_DMA_Abort_IT+0x480>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_DMA_Abort_IT+0x3a0>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <HAL_DMA_Abort_IT+0x484>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_DMA_Abort_IT+0x3a4>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_DMA_Abort_IT+0x3a6>
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d028      	beq.n	80035cc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003588:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40020010 	.word	0x40020010
 80035fc:	40020028 	.word	0x40020028
 8003600:	40020040 	.word	0x40020040
 8003604:	40020058 	.word	0x40020058
 8003608:	40020070 	.word	0x40020070
 800360c:	40020088 	.word	0x40020088
 8003610:	400200a0 	.word	0x400200a0
 8003614:	400200b8 	.word	0x400200b8
 8003618:	40020410 	.word	0x40020410
 800361c:	40020428 	.word	0x40020428
 8003620:	40020440 	.word	0x40020440
 8003624:	40020458 	.word	0x40020458
 8003628:	40020470 	.word	0x40020470
 800362c:	40020488 	.word	0x40020488
 8003630:	400204a0 	.word	0x400204a0
 8003634:	400204b8 	.word	0x400204b8
 8003638:	58025408 	.word	0x58025408
 800363c:	5802541c 	.word	0x5802541c
 8003640:	58025430 	.word	0x58025430
 8003644:	58025444 	.word	0x58025444
 8003648:	58025458 	.word	0x58025458
 800364c:	5802546c 	.word	0x5802546c
 8003650:	58025480 	.word	0x58025480
 8003654:	58025494 	.word	0x58025494

08003658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003664:	4b67      	ldr	r3, [pc, #412]	; (8003804 <HAL_DMA_IRQHandler+0x1ac>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a67      	ldr	r2, [pc, #412]	; (8003808 <HAL_DMA_IRQHandler+0x1b0>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0a9b      	lsrs	r3, r3, #10
 8003670:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5f      	ldr	r2, [pc, #380]	; (800380c <HAL_DMA_IRQHandler+0x1b4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d04a      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5d      	ldr	r2, [pc, #372]	; (8003810 <HAL_DMA_IRQHandler+0x1b8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d045      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5c      	ldr	r2, [pc, #368]	; (8003814 <HAL_DMA_IRQHandler+0x1bc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d040      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5a      	ldr	r2, [pc, #360]	; (8003818 <HAL_DMA_IRQHandler+0x1c0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d03b      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a59      	ldr	r2, [pc, #356]	; (800381c <HAL_DMA_IRQHandler+0x1c4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d036      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a57      	ldr	r2, [pc, #348]	; (8003820 <HAL_DMA_IRQHandler+0x1c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d031      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a56      	ldr	r2, [pc, #344]	; (8003824 <HAL_DMA_IRQHandler+0x1cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d02c      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a54      	ldr	r2, [pc, #336]	; (8003828 <HAL_DMA_IRQHandler+0x1d0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d027      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a53      	ldr	r2, [pc, #332]	; (800382c <HAL_DMA_IRQHandler+0x1d4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_DMA_IRQHandler+0x1d8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01d      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a50      	ldr	r2, [pc, #320]	; (8003834 <HAL_DMA_IRQHandler+0x1dc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d018      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <HAL_DMA_IRQHandler+0x1e0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4d      	ldr	r2, [pc, #308]	; (800383c <HAL_DMA_IRQHandler+0x1e4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4b      	ldr	r2, [pc, #300]	; (8003840 <HAL_DMA_IRQHandler+0x1e8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <HAL_DMA_IRQHandler+0x1ec>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_DMA_IRQHandler+0xd2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a48      	ldr	r2, [pc, #288]	; (8003848 <HAL_DMA_IRQHandler+0x1f0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <HAL_DMA_IRQHandler+0xd6>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_DMA_IRQHandler+0xd8>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 842b 	beq.w	8003f8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2208      	movs	r2, #8
 8003740:	409a      	lsls	r2, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80a2 	beq.w	8003890 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2e      	ldr	r2, [pc, #184]	; (800380c <HAL_DMA_IRQHandler+0x1b4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d04a      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_DMA_IRQHandler+0x1b8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d045      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <HAL_DMA_IRQHandler+0x1bc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d040      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_DMA_IRQHandler+0x1c0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d03b      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_DMA_IRQHandler+0x1c4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d036      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_DMA_IRQHandler+0x1c8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d031      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a25      	ldr	r2, [pc, #148]	; (8003824 <HAL_DMA_IRQHandler+0x1cc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02c      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a24      	ldr	r2, [pc, #144]	; (8003828 <HAL_DMA_IRQHandler+0x1d0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d027      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_DMA_IRQHandler+0x1d4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a21      	ldr	r2, [pc, #132]	; (8003830 <HAL_DMA_IRQHandler+0x1d8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d01d      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_DMA_IRQHandler+0x1dc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_DMA_IRQHandler+0x1e0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_DMA_IRQHandler+0x1e4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_DMA_IRQHandler+0x1e8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_DMA_IRQHandler+0x1ec>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_DMA_IRQHandler+0x194>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_DMA_IRQHandler+0x1f0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d12f      	bne.n	800384c <HAL_DMA_IRQHandler+0x1f4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e02e      	b.n	8003860 <HAL_DMA_IRQHandler+0x208>
 8003802:	bf00      	nop
 8003804:	24000018 	.word	0x24000018
 8003808:	1b4e81b5 	.word	0x1b4e81b5
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2208      	movs	r2, #8
 800387e:	409a      	lsls	r2, r3
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d06e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a69      	ldr	r2, [pc, #420]	; (8003a50 <HAL_DMA_IRQHandler+0x3f8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04a      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a67      	ldr	r2, [pc, #412]	; (8003a54 <HAL_DMA_IRQHandler+0x3fc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d045      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <HAL_DMA_IRQHandler+0x400>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a64      	ldr	r2, [pc, #400]	; (8003a5c <HAL_DMA_IRQHandler+0x404>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a63      	ldr	r2, [pc, #396]	; (8003a60 <HAL_DMA_IRQHandler+0x408>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d036      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a61      	ldr	r2, [pc, #388]	; (8003a64 <HAL_DMA_IRQHandler+0x40c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a60      	ldr	r2, [pc, #384]	; (8003a68 <HAL_DMA_IRQHandler+0x410>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02c      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5e      	ldr	r2, [pc, #376]	; (8003a6c <HAL_DMA_IRQHandler+0x414>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d027      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5d      	ldr	r2, [pc, #372]	; (8003a70 <HAL_DMA_IRQHandler+0x418>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5b      	ldr	r2, [pc, #364]	; (8003a74 <HAL_DMA_IRQHandler+0x41c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5a      	ldr	r2, [pc, #360]	; (8003a78 <HAL_DMA_IRQHandler+0x420>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_DMA_IRQHandler+0x424>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a57      	ldr	r2, [pc, #348]	; (8003a80 <HAL_DMA_IRQHandler+0x428>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a55      	ldr	r2, [pc, #340]	; (8003a84 <HAL_DMA_IRQHandler+0x42c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a54      	ldr	r2, [pc, #336]	; (8003a88 <HAL_DMA_IRQHandler+0x430>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_IRQHandler+0x2ee>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <HAL_DMA_IRQHandler+0x434>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10a      	bne.n	800395c <HAL_DMA_IRQHandler+0x304>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e003      	b.n	8003964 <HAL_DMA_IRQHandler+0x30c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2204      	movs	r2, #4
 800398e:	409a      	lsls	r2, r3
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 808f 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <HAL_DMA_IRQHandler+0x3f8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d04a      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <HAL_DMA_IRQHandler+0x3fc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d045      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <HAL_DMA_IRQHandler+0x400>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d040      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_DMA_IRQHandler+0x404>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d03b      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <HAL_DMA_IRQHandler+0x408>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d036      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_DMA_IRQHandler+0x40c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d031      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <HAL_DMA_IRQHandler+0x410>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d02c      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_DMA_IRQHandler+0x414>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d027      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <HAL_DMA_IRQHandler+0x418>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <HAL_DMA_IRQHandler+0x41c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_DMA_IRQHandler+0x420>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <HAL_DMA_IRQHandler+0x424>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <HAL_DMA_IRQHandler+0x428>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_DMA_IRQHandler+0x42c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <HAL_DMA_IRQHandler+0x430>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x3e2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <HAL_DMA_IRQHandler+0x434>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12a      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x438>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e023      	b.n	8003a98 <HAL_DMA_IRQHandler+0x440>
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0204 	orr.w	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a6 	beq.w	8003c1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a85      	ldr	r2, [pc, #532]	; (8003ce8 <HAL_DMA_IRQHandler+0x690>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d04a      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a83      	ldr	r2, [pc, #524]	; (8003cec <HAL_DMA_IRQHandler+0x694>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d045      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a82      	ldr	r2, [pc, #520]	; (8003cf0 <HAL_DMA_IRQHandler+0x698>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d040      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a80      	ldr	r2, [pc, #512]	; (8003cf4 <HAL_DMA_IRQHandler+0x69c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d03b      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7f      	ldr	r2, [pc, #508]	; (8003cf8 <HAL_DMA_IRQHandler+0x6a0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d036      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7d      	ldr	r2, [pc, #500]	; (8003cfc <HAL_DMA_IRQHandler+0x6a4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7c      	ldr	r2, [pc, #496]	; (8003d00 <HAL_DMA_IRQHandler+0x6a8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d02c      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7a      	ldr	r2, [pc, #488]	; (8003d04 <HAL_DMA_IRQHandler+0x6ac>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d027      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a79      	ldr	r2, [pc, #484]	; (8003d08 <HAL_DMA_IRQHandler+0x6b0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_DMA_IRQHandler+0x6b4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a76      	ldr	r2, [pc, #472]	; (8003d10 <HAL_DMA_IRQHandler+0x6b8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a74      	ldr	r2, [pc, #464]	; (8003d14 <HAL_DMA_IRQHandler+0x6bc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	; (8003d18 <HAL_DMA_IRQHandler+0x6c0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a71      	ldr	r2, [pc, #452]	; (8003d1c <HAL_DMA_IRQHandler+0x6c4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a70      	ldr	r2, [pc, #448]	; (8003d20 <HAL_DMA_IRQHandler+0x6c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x516>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_DMA_IRQHandler+0x6cc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10a      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x52c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e009      	b.n	8003b98 <HAL_DMA_IRQHandler+0x540>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d03e      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d018      	beq.n	8003bec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d024      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	e01f      	b.n	8003c1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01b      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
 8003bea:	e016      	b.n	8003c1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0208 	bic.w	r2, r2, #8
 8003c08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2220      	movs	r2, #32
 8003c24:	409a      	lsls	r2, r3
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8110 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <HAL_DMA_IRQHandler+0x690>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d04a      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <HAL_DMA_IRQHandler+0x694>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d045      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_DMA_IRQHandler+0x698>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d040      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_DMA_IRQHandler+0x69c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d03b      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <HAL_DMA_IRQHandler+0x6a0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d036      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <HAL_DMA_IRQHandler+0x6a4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d031      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <HAL_DMA_IRQHandler+0x6a8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d02c      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <HAL_DMA_IRQHandler+0x6ac>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d027      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a20      	ldr	r2, [pc, #128]	; (8003d08 <HAL_DMA_IRQHandler+0x6b0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d022      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_DMA_IRQHandler+0x6b4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d01d      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <HAL_DMA_IRQHandler+0x6b8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_DMA_IRQHandler+0x6bc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_DMA_IRQHandler+0x6c0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_DMA_IRQHandler+0x6c4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_DMA_IRQHandler+0x6c8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x678>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <HAL_DMA_IRQHandler+0x6cc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d12b      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x6d0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e02a      	b.n	8003d3c <HAL_DMA_IRQHandler+0x6e4>
 8003ce6:	bf00      	nop
 8003ce8:	40020010 	.word	0x40020010
 8003cec:	40020028 	.word	0x40020028
 8003cf0:	40020040 	.word	0x40020040
 8003cf4:	40020058 	.word	0x40020058
 8003cf8:	40020070 	.word	0x40020070
 8003cfc:	40020088 	.word	0x40020088
 8003d00:	400200a0 	.word	0x400200a0
 8003d04:	400200b8 	.word	0x400200b8
 8003d08:	40020410 	.word	0x40020410
 8003d0c:	40020428 	.word	0x40020428
 8003d10:	40020440 	.word	0x40020440
 8003d14:	40020458 	.word	0x40020458
 8003d18:	40020470 	.word	0x40020470
 8003d1c:	40020488 	.word	0x40020488
 8003d20:	400204a0 	.word	0x400204a0
 8003d24:	400204b8 	.word	0x400204b8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8087 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d139      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0216 	bic.w	r2, r2, #22
 8003d6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <HAL_DMA_IRQHandler+0x736>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0208 	bic.w	r2, r2, #8
 8003d9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	223f      	movs	r2, #63	; 0x3f
 8003da8:	409a      	lsls	r2, r3
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 834a 	beq.w	800445c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
          }
          return;
 8003dd0:	e344      	b.n	800445c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e027      	b.n	8003e50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d023      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e01e      	b.n	8003e50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0210 	bic.w	r2, r2, #16
 8003e2e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8306 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8088 	beq.w	8003f78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7a      	ldr	r2, [pc, #488]	; (8004060 <HAL_DMA_IRQHandler+0xa08>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a79      	ldr	r2, [pc, #484]	; (8004064 <HAL_DMA_IRQHandler+0xa0c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a77      	ldr	r2, [pc, #476]	; (8004068 <HAL_DMA_IRQHandler+0xa10>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a76      	ldr	r2, [pc, #472]	; (800406c <HAL_DMA_IRQHandler+0xa14>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a74      	ldr	r2, [pc, #464]	; (8004070 <HAL_DMA_IRQHandler+0xa18>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a73      	ldr	r2, [pc, #460]	; (8004074 <HAL_DMA_IRQHandler+0xa1c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a71      	ldr	r2, [pc, #452]	; (8004078 <HAL_DMA_IRQHandler+0xa20>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a70      	ldr	r2, [pc, #448]	; (800407c <HAL_DMA_IRQHandler+0xa24>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	; (8004080 <HAL_DMA_IRQHandler+0xa28>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6d      	ldr	r2, [pc, #436]	; (8004084 <HAL_DMA_IRQHandler+0xa2c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	; (8004088 <HAL_DMA_IRQHandler+0xa30>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6a      	ldr	r2, [pc, #424]	; (800408c <HAL_DMA_IRQHandler+0xa34>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	; (8004090 <HAL_DMA_IRQHandler+0xa38>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a67      	ldr	r2, [pc, #412]	; (8004094 <HAL_DMA_IRQHandler+0xa3c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a65      	ldr	r2, [pc, #404]	; (8004098 <HAL_DMA_IRQHandler+0xa40>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x8b8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a64      	ldr	r2, [pc, #400]	; (800409c <HAL_DMA_IRQHandler+0xa44>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x8ca>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e007      	b.n	8003f32 <HAL_DMA_IRQHandler+0x8da>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d307      	bcc.n	8003f4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f2      	bne.n	8003f32 <HAL_DMA_IRQHandler+0x8da>
 8003f4c:	e000      	b.n	8003f50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f4e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f6e:	e003      	b.n	8003f78 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8272 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
 8003f8a:	e26c      	b.n	8004466 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a43      	ldr	r2, [pc, #268]	; (80040a0 <HAL_DMA_IRQHandler+0xa48>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_DMA_IRQHandler+0xa4c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d01d      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <HAL_DMA_IRQHandler+0xa50>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <HAL_DMA_IRQHandler+0xa54>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_DMA_IRQHandler+0xa58>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_DMA_IRQHandler+0xa5c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3a      	ldr	r2, [pc, #232]	; (80040b8 <HAL_DMA_IRQHandler+0xa60>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x984>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_DMA_IRQHandler+0xa64>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x988>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x98a>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 823f 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80cd 	beq.w	80041a0 <HAL_DMA_IRQHandler+0xb48>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80c7 	beq.w	80041a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2204      	movs	r2, #4
 800401c:	409a      	lsls	r2, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d049      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8210 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004048:	e20a      	b.n	8004460 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8206 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800405c:	e200      	b.n	8004460 <HAL_DMA_IRQHandler+0xe08>
 800405e:	bf00      	nop
 8004060:	40020010 	.word	0x40020010
 8004064:	40020028 	.word	0x40020028
 8004068:	40020040 	.word	0x40020040
 800406c:	40020058 	.word	0x40020058
 8004070:	40020070 	.word	0x40020070
 8004074:	40020088 	.word	0x40020088
 8004078:	400200a0 	.word	0x400200a0
 800407c:	400200b8 	.word	0x400200b8
 8004080:	40020410 	.word	0x40020410
 8004084:	40020428 	.word	0x40020428
 8004088:	40020440 	.word	0x40020440
 800408c:	40020458 	.word	0x40020458
 8004090:	40020470 	.word	0x40020470
 8004094:	40020488 	.word	0x40020488
 8004098:	400204a0 	.word	0x400204a0
 800409c:	400204b8 	.word	0x400204b8
 80040a0:	58025408 	.word	0x58025408
 80040a4:	5802541c 	.word	0x5802541c
 80040a8:	58025430 	.word	0x58025430
 80040ac:	58025444 	.word	0x58025444
 80040b0:	58025458 	.word	0x58025458
 80040b4:	5802546c 	.word	0x5802546c
 80040b8:	58025480 	.word	0x58025480
 80040bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d160      	bne.n	800418c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a8c      	ldr	r2, [pc, #560]	; (8004300 <HAL_DMA_IRQHandler+0xca8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a8a      	ldr	r2, [pc, #552]	; (8004304 <HAL_DMA_IRQHandler+0xcac>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a89      	ldr	r2, [pc, #548]	; (8004308 <HAL_DMA_IRQHandler+0xcb0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a87      	ldr	r2, [pc, #540]	; (800430c <HAL_DMA_IRQHandler+0xcb4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a86      	ldr	r2, [pc, #536]	; (8004310 <HAL_DMA_IRQHandler+0xcb8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a84      	ldr	r2, [pc, #528]	; (8004314 <HAL_DMA_IRQHandler+0xcbc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a83      	ldr	r2, [pc, #524]	; (8004318 <HAL_DMA_IRQHandler+0xcc0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a81      	ldr	r2, [pc, #516]	; (800431c <HAL_DMA_IRQHandler+0xcc4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a80      	ldr	r2, [pc, #512]	; (8004320 <HAL_DMA_IRQHandler+0xcc8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7e      	ldr	r2, [pc, #504]	; (8004324 <HAL_DMA_IRQHandler+0xccc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7d      	ldr	r2, [pc, #500]	; (8004328 <HAL_DMA_IRQHandler+0xcd0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a7b      	ldr	r2, [pc, #492]	; (800432c <HAL_DMA_IRQHandler+0xcd4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7a      	ldr	r2, [pc, #488]	; (8004330 <HAL_DMA_IRQHandler+0xcd8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a78      	ldr	r2, [pc, #480]	; (8004334 <HAL_DMA_IRQHandler+0xcdc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a77      	ldr	r2, [pc, #476]	; (8004338 <HAL_DMA_IRQHandler+0xce0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_IRQHandler+0xb12>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a75      	ldr	r2, [pc, #468]	; (800433c <HAL_DMA_IRQHandler+0xce4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <HAL_DMA_IRQHandler+0xb24>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0208 	bic.w	r2, r2, #8
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <HAL_DMA_IRQHandler+0xb34>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0204 	bic.w	r2, r2, #4
 800418a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8165 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800419e:	e15f      	b.n	8004460 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2202      	movs	r2, #2
 80041aa:	409a      	lsls	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80c5 	beq.w	8004340 <HAL_DMA_IRQHandler+0xce8>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80bf 	beq.w	8004340 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2202      	movs	r2, #2
 80041cc:	409a      	lsls	r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d018      	beq.n	800420e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 813a 	beq.w	8004464 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f8:	e134      	b.n	8004464 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8130 	beq.w	8004464 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800420c:	e12a      	b.n	8004464 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d168      	bne.n	80042ea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a38      	ldr	r2, [pc, #224]	; (8004300 <HAL_DMA_IRQHandler+0xca8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d04a      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a37      	ldr	r2, [pc, #220]	; (8004304 <HAL_DMA_IRQHandler+0xcac>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d045      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a35      	ldr	r2, [pc, #212]	; (8004308 <HAL_DMA_IRQHandler+0xcb0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d040      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a34      	ldr	r2, [pc, #208]	; (800430c <HAL_DMA_IRQHandler+0xcb4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d03b      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a32      	ldr	r2, [pc, #200]	; (8004310 <HAL_DMA_IRQHandler+0xcb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d036      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a31      	ldr	r2, [pc, #196]	; (8004314 <HAL_DMA_IRQHandler+0xcbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d031      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <HAL_DMA_IRQHandler+0xcc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02c      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a2e      	ldr	r2, [pc, #184]	; (800431c <HAL_DMA_IRQHandler+0xcc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d027      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <HAL_DMA_IRQHandler+0xcc8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d022      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <HAL_DMA_IRQHandler+0xccc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d01d      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <HAL_DMA_IRQHandler+0xcd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d018      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a28      	ldr	r2, [pc, #160]	; (800432c <HAL_DMA_IRQHandler+0xcd4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a26      	ldr	r2, [pc, #152]	; (8004330 <HAL_DMA_IRQHandler+0xcd8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_DMA_IRQHandler+0xcdc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_DMA_IRQHandler+0xce0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xc60>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_DMA_IRQHandler+0xce4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <HAL_DMA_IRQHandler+0xc72>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0214 	bic.w	r2, r2, #20
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e007      	b.n	80042da <HAL_DMA_IRQHandler+0xc82>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 020a 	bic.w	r2, r2, #10
 80042d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80b8 	beq.w	8004464 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042fc:	e0b2      	b.n	8004464 <HAL_DMA_IRQHandler+0xe0c>
 80042fe:	bf00      	nop
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020088 	.word	0x40020088
 8004318:	400200a0 	.word	0x400200a0
 800431c:	400200b8 	.word	0x400200b8
 8004320:	40020410 	.word	0x40020410
 8004324:	40020428 	.word	0x40020428
 8004328:	40020440 	.word	0x40020440
 800432c:	40020458 	.word	0x40020458
 8004330:	40020470 	.word	0x40020470
 8004334:	40020488 	.word	0x40020488
 8004338:	400204a0 	.word	0x400204a0
 800433c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2208      	movs	r2, #8
 800434a:	409a      	lsls	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8088 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe0e>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8082 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a41      	ldr	r2, [pc, #260]	; (800446c <HAL_DMA_IRQHandler+0xe14>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <HAL_DMA_IRQHandler+0xe18>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3e      	ldr	r2, [pc, #248]	; (8004474 <HAL_DMA_IRQHandler+0xe1c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <HAL_DMA_IRQHandler+0xe20>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <HAL_DMA_IRQHandler+0xe24>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a39      	ldr	r2, [pc, #228]	; (8004480 <HAL_DMA_IRQHandler+0xe28>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_DMA_IRQHandler+0xe2c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <HAL_DMA_IRQHandler+0xe30>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a35      	ldr	r2, [pc, #212]	; (800448c <HAL_DMA_IRQHandler+0xe34>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a33      	ldr	r2, [pc, #204]	; (8004490 <HAL_DMA_IRQHandler+0xe38>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a32      	ldr	r2, [pc, #200]	; (8004494 <HAL_DMA_IRQHandler+0xe3c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a30      	ldr	r2, [pc, #192]	; (8004498 <HAL_DMA_IRQHandler+0xe40>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2f      	ldr	r2, [pc, #188]	; (800449c <HAL_DMA_IRQHandler+0xe44>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <HAL_DMA_IRQHandler+0xe48>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <HAL_DMA_IRQHandler+0xe4c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_IRQHandler+0xdaa>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <HAL_DMA_IRQHandler+0xe50>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <HAL_DMA_IRQHandler+0xdbc>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 021c 	bic.w	r2, r2, #28
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e007      	b.n	8004424 <HAL_DMA_IRQHandler+0xdcc>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020e 	bic.w	r2, r2, #14
 8004422:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2201      	movs	r2, #1
 800442e:	409a      	lsls	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
 800445a:	e004      	b.n	8004466 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004464:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004466:	3728      	adds	r7, #40	; 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40020010 	.word	0x40020010
 8004470:	40020028 	.word	0x40020028
 8004474:	40020040 	.word	0x40020040
 8004478:	40020058 	.word	0x40020058
 800447c:	40020070 	.word	0x40020070
 8004480:	40020088 	.word	0x40020088
 8004484:	400200a0 	.word	0x400200a0
 8004488:	400200b8 	.word	0x400200b8
 800448c:	40020410 	.word	0x40020410
 8004490:	40020428 	.word	0x40020428
 8004494:	40020440 	.word	0x40020440
 8004498:	40020458 	.word	0x40020458
 800449c:	40020470 	.word	0x40020470
 80044a0:	40020488 	.word	0x40020488
 80044a4:	400204a0 	.word	0x400204a0
 80044a8:	400204b8 	.word	0x400204b8

080044ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a84      	ldr	r2, [pc, #528]	; (80046dc <DMA_SetConfig+0x230>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d072      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a82      	ldr	r2, [pc, #520]	; (80046e0 <DMA_SetConfig+0x234>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d06d      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a81      	ldr	r2, [pc, #516]	; (80046e4 <DMA_SetConfig+0x238>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d068      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a7f      	ldr	r2, [pc, #508]	; (80046e8 <DMA_SetConfig+0x23c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d063      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7e      	ldr	r2, [pc, #504]	; (80046ec <DMA_SetConfig+0x240>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d05e      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a7c      	ldr	r2, [pc, #496]	; (80046f0 <DMA_SetConfig+0x244>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d059      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7b      	ldr	r2, [pc, #492]	; (80046f4 <DMA_SetConfig+0x248>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d054      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a79      	ldr	r2, [pc, #484]	; (80046f8 <DMA_SetConfig+0x24c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d04f      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a78      	ldr	r2, [pc, #480]	; (80046fc <DMA_SetConfig+0x250>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d04a      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a76      	ldr	r2, [pc, #472]	; (8004700 <DMA_SetConfig+0x254>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d045      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a75      	ldr	r2, [pc, #468]	; (8004704 <DMA_SetConfig+0x258>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d040      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a73      	ldr	r2, [pc, #460]	; (8004708 <DMA_SetConfig+0x25c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d03b      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <DMA_SetConfig+0x260>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d036      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a70      	ldr	r2, [pc, #448]	; (8004710 <DMA_SetConfig+0x264>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d031      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <DMA_SetConfig+0x268>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d02c      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a6d      	ldr	r2, [pc, #436]	; (8004718 <DMA_SetConfig+0x26c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d027      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6c      	ldr	r2, [pc, #432]	; (800471c <DMA_SetConfig+0x270>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d022      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6a      	ldr	r2, [pc, #424]	; (8004720 <DMA_SetConfig+0x274>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01d      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a69      	ldr	r2, [pc, #420]	; (8004724 <DMA_SetConfig+0x278>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d018      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a67      	ldr	r2, [pc, #412]	; (8004728 <DMA_SetConfig+0x27c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a66      	ldr	r2, [pc, #408]	; (800472c <DMA_SetConfig+0x280>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00e      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a64      	ldr	r2, [pc, #400]	; (8004730 <DMA_SetConfig+0x284>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d009      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a63      	ldr	r2, [pc, #396]	; (8004734 <DMA_SetConfig+0x288>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <DMA_SetConfig+0x10a>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <DMA_SetConfig+0x28c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <DMA_SetConfig+0x10e>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <DMA_SetConfig+0x110>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a3e      	ldr	r2, [pc, #248]	; (80046dc <DMA_SetConfig+0x230>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d04a      	beq.n	800467c <DMA_SetConfig+0x1d0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <DMA_SetConfig+0x234>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d045      	beq.n	800467c <DMA_SetConfig+0x1d0>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3b      	ldr	r2, [pc, #236]	; (80046e4 <DMA_SetConfig+0x238>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d040      	beq.n	800467c <DMA_SetConfig+0x1d0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a3a      	ldr	r2, [pc, #232]	; (80046e8 <DMA_SetConfig+0x23c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d03b      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a38      	ldr	r2, [pc, #224]	; (80046ec <DMA_SetConfig+0x240>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d036      	beq.n	800467c <DMA_SetConfig+0x1d0>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a37      	ldr	r2, [pc, #220]	; (80046f0 <DMA_SetConfig+0x244>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d031      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a35      	ldr	r2, [pc, #212]	; (80046f4 <DMA_SetConfig+0x248>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d02c      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a34      	ldr	r2, [pc, #208]	; (80046f8 <DMA_SetConfig+0x24c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d027      	beq.n	800467c <DMA_SetConfig+0x1d0>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a32      	ldr	r2, [pc, #200]	; (80046fc <DMA_SetConfig+0x250>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d022      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a31      	ldr	r2, [pc, #196]	; (8004700 <DMA_SetConfig+0x254>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d01d      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <DMA_SetConfig+0x258>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d018      	beq.n	800467c <DMA_SetConfig+0x1d0>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2e      	ldr	r2, [pc, #184]	; (8004708 <DMA_SetConfig+0x25c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2c      	ldr	r2, [pc, #176]	; (800470c <DMA_SetConfig+0x260>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <DMA_SetConfig+0x1d0>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2b      	ldr	r2, [pc, #172]	; (8004710 <DMA_SetConfig+0x264>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a29      	ldr	r2, [pc, #164]	; (8004714 <DMA_SetConfig+0x268>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <DMA_SetConfig+0x1d0>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a28      	ldr	r2, [pc, #160]	; (8004718 <DMA_SetConfig+0x26c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <DMA_SetConfig+0x1d4>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <DMA_SetConfig+0x1d6>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d05a      	beq.n	800473c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	223f      	movs	r2, #63	; 0x3f
 8004690:	409a      	lsls	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d108      	bne.n	80046c8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046c6:	e087      	b.n	80047d8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
}
 80046d8:	e07e      	b.n	80047d8 <DMA_SetConfig+0x32c>
 80046da:	bf00      	nop
 80046dc:	40020010 	.word	0x40020010
 80046e0:	40020028 	.word	0x40020028
 80046e4:	40020040 	.word	0x40020040
 80046e8:	40020058 	.word	0x40020058
 80046ec:	40020070 	.word	0x40020070
 80046f0:	40020088 	.word	0x40020088
 80046f4:	400200a0 	.word	0x400200a0
 80046f8:	400200b8 	.word	0x400200b8
 80046fc:	40020410 	.word	0x40020410
 8004700:	40020428 	.word	0x40020428
 8004704:	40020440 	.word	0x40020440
 8004708:	40020458 	.word	0x40020458
 800470c:	40020470 	.word	0x40020470
 8004710:	40020488 	.word	0x40020488
 8004714:	400204a0 	.word	0x400204a0
 8004718:	400204b8 	.word	0x400204b8
 800471c:	58025408 	.word	0x58025408
 8004720:	5802541c 	.word	0x5802541c
 8004724:	58025430 	.word	0x58025430
 8004728:	58025444 	.word	0x58025444
 800472c:	58025458 	.word	0x58025458
 8004730:	5802546c 	.word	0x5802546c
 8004734:	58025480 	.word	0x58025480
 8004738:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <DMA_SetConfig+0x338>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <DMA_SetConfig+0x2e0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <DMA_SetConfig+0x33c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01d      	beq.n	800478c <DMA_SetConfig+0x2e0>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a25      	ldr	r2, [pc, #148]	; (80047ec <DMA_SetConfig+0x340>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <DMA_SetConfig+0x2e0>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <DMA_SetConfig+0x344>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <DMA_SetConfig+0x2e0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <DMA_SetConfig+0x348>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <DMA_SetConfig+0x2e0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a21      	ldr	r2, [pc, #132]	; (80047f8 <DMA_SetConfig+0x34c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <DMA_SetConfig+0x2e0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <DMA_SetConfig+0x350>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <DMA_SetConfig+0x2e0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <DMA_SetConfig+0x354>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <DMA_SetConfig+0x2e4>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <DMA_SetConfig+0x2e6>
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d020      	beq.n	80047d8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2201      	movs	r2, #1
 80047a0:	409a      	lsls	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d108      	bne.n	80047c8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	60da      	str	r2, [r3, #12]
}
 80047c6:	e007      	b.n	80047d8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	58025408 	.word	0x58025408
 80047e8:	5802541c 	.word	0x5802541c
 80047ec:	58025430 	.word	0x58025430
 80047f0:	58025444 	.word	0x58025444
 80047f4:	58025458 	.word	0x58025458
 80047f8:	5802546c 	.word	0x5802546c
 80047fc:	58025480 	.word	0x58025480
 8004800:	58025494 	.word	0x58025494

08004804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a42      	ldr	r2, [pc, #264]	; (800491c <DMA_CalcBaseAndBitshift+0x118>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d04a      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a41      	ldr	r2, [pc, #260]	; (8004920 <DMA_CalcBaseAndBitshift+0x11c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d045      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <DMA_CalcBaseAndBitshift+0x120>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d040      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3e      	ldr	r2, [pc, #248]	; (8004928 <DMA_CalcBaseAndBitshift+0x124>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d03b      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a3c      	ldr	r2, [pc, #240]	; (800492c <DMA_CalcBaseAndBitshift+0x128>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d036      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a3b      	ldr	r2, [pc, #236]	; (8004930 <DMA_CalcBaseAndBitshift+0x12c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d031      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a39      	ldr	r2, [pc, #228]	; (8004934 <DMA_CalcBaseAndBitshift+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02c      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a38      	ldr	r2, [pc, #224]	; (8004938 <DMA_CalcBaseAndBitshift+0x134>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d027      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a36      	ldr	r2, [pc, #216]	; (800493c <DMA_CalcBaseAndBitshift+0x138>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d022      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a35      	ldr	r2, [pc, #212]	; (8004940 <DMA_CalcBaseAndBitshift+0x13c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01d      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a33      	ldr	r2, [pc, #204]	; (8004944 <DMA_CalcBaseAndBitshift+0x140>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d018      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a32      	ldr	r2, [pc, #200]	; (8004948 <DMA_CalcBaseAndBitshift+0x144>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a30      	ldr	r2, [pc, #192]	; (800494c <DMA_CalcBaseAndBitshift+0x148>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00e      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <DMA_CalcBaseAndBitshift+0x14c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <DMA_CalcBaseAndBitshift+0x150>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xa8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <DMA_CalcBaseAndBitshift+0x154>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <DMA_CalcBaseAndBitshift+0xac>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <DMA_CalcBaseAndBitshift+0xae>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d024      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3b10      	subs	r3, #16
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <DMA_CalcBaseAndBitshift+0x158>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	4a24      	ldr	r2, [pc, #144]	; (8004960 <DMA_CalcBaseAndBitshift+0x15c>)
 80048d0:	5cd3      	ldrb	r3, [r2, r3]
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d908      	bls.n	80048f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <DMA_CalcBaseAndBitshift+0x160>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	1d1a      	adds	r2, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	659a      	str	r2, [r3, #88]	; 0x58
 80048ee:	e00d      	b.n	800490c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <DMA_CalcBaseAndBitshift+0x160>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6593      	str	r3, [r2, #88]	; 0x58
 80048fe:	e005      	b.n	800490c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
 800495c:	aaaaaaab 	.word	0xaaaaaaab
 8004960:	08009884 	.word	0x08009884
 8004964:	fffffc00 	.word	0xfffffc00

08004968 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d120      	bne.n	80049be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	2b03      	cmp	r3, #3
 8004982:	d858      	bhi.n	8004a36 <DMA_CheckFifoParam+0xce>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <DMA_CheckFifoParam+0x24>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049af 	.word	0x080049af
 8004994:	0800499d 	.word	0x0800499d
 8004998:	08004a37 	.word	0x08004a37
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d048      	beq.n	8004a3a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049ac:	e045      	b.n	8004a3a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049b6:	d142      	bne.n	8004a3e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049bc:	e03f      	b.n	8004a3e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c6:	d123      	bne.n	8004a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d838      	bhi.n	8004a42 <DMA_CheckFifoParam+0xda>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <DMA_CheckFifoParam+0x70>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049ef 	.word	0x080049ef
 80049e0:	080049e9 	.word	0x080049e9
 80049e4:	08004a01 	.word	0x08004a01
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
        break;
 80049ec:	e030      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d025      	beq.n	8004a46 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049fe:	e022      	b.n	8004a46 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a08:	d11f      	bne.n	8004a4a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a0e:	e01c      	b.n	8004a4a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d902      	bls.n	8004a1e <DMA_CheckFifoParam+0xb6>
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d003      	beq.n	8004a24 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a1c:	e018      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
        break;
 8004a22:	e015      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00e      	beq.n	8004a4e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
    break;
 8004a34:	e00b      	b.n	8004a4e <DMA_CheckFifoParam+0xe6>
        break;
 8004a36:	bf00      	nop
 8004a38:	e00a      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        break;
 8004a3a:	bf00      	nop
 8004a3c:	e008      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e006      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        break;
 8004a42:	bf00      	nop
 8004a44:	e004      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
        break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
    break;
 8004a4e:	bf00      	nop
    }
  }

  return status;
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a38      	ldr	r2, [pc, #224]	; (8004b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a36      	ldr	r2, [pc, #216]	; (8004b58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a35      	ldr	r2, [pc, #212]	; (8004b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a33      	ldr	r2, [pc, #204]	; (8004b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a32      	ldr	r2, [pc, #200]	; (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a30      	ldr	r2, [pc, #192]	; (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	3b08      	subs	r3, #8
 8004ad0:	4a28      	ldr	r2, [pc, #160]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2201      	movs	r2, #1
 8004af6:	409a      	lsls	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004afc:	e024      	b.n	8004b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	3b10      	subs	r3, #16
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d806      	bhi.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d902      	bls.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3308      	adds	r3, #8
 8004b24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	58025408 	.word	0x58025408
 8004b58:	5802541c 	.word	0x5802541c
 8004b5c:	58025430 	.word	0x58025430
 8004b60:	58025444 	.word	0x58025444
 8004b64:	58025458 	.word	0x58025458
 8004b68:	5802546c 	.word	0x5802546c
 8004b6c:	58025480 	.word	0x58025480
 8004b70:	58025494 	.word	0x58025494
 8004b74:	cccccccd 	.word	0xcccccccd
 8004b78:	16009600 	.word	0x16009600
 8004b7c:	58025880 	.word	0x58025880
 8004b80:	aaaaaaab 	.word	0xaaaaaaab
 8004b84:	400204b8 	.word	0x400204b8
 8004b88:	4002040f 	.word	0x4002040f
 8004b8c:	10008200 	.word	0x10008200
 8004b90:	40020880 	.word	0x40020880

08004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04a      	beq.n	8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d847      	bhi.n	8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	; (8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d01d      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c1c:	671a      	str	r2, [r3, #112]	; 0x70
 8004c1e:	e009      	b.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c32:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	2201      	movs	r2, #1
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	58025408 	.word	0x58025408
 8004c50:	5802541c 	.word	0x5802541c
 8004c54:	58025430 	.word	0x58025430
 8004c58:	58025444 	.word	0x58025444
 8004c5c:	58025458 	.word	0x58025458
 8004c60:	5802546c 	.word	0x5802546c
 8004c64:	58025480 	.word	0x58025480
 8004c68:	58025494 	.word	0x58025494
 8004c6c:	1600963f 	.word	0x1600963f
 8004c70:	58025940 	.word	0x58025940
 8004c74:	1000823f 	.word	0x1000823f
 8004c78:	40020940 	.word	0x40020940

08004c7c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	460b      	mov	r3, r1
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e00a      	b.n	8004cae <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004c98:	7afb      	ldrb	r3, [r7, #11]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
      break;
 8004ca4:	e002      	b.n	8004cac <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8004caa:	bf00      	nop
  }

  return status;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e003      	b.n	8004cd6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cf2:	4b89      	ldr	r3, [pc, #548]	; (8004f18 <HAL_GPIO_Init+0x234>)
 8004cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cf6:	e194      	b.n	8005022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8186 	beq.w	800501c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d00b      	beq.n	8004d30 <HAL_GPIO_Init+0x4c>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d007      	beq.n	8004d30 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d24:	2b11      	cmp	r3, #17
 8004d26:	d003      	beq.n	8004d30 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b12      	cmp	r3, #18
 8004d2e:	d130      	bne.n	8004d92 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d66:	2201      	movs	r2, #1
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0201 	and.w	r2, r3, #1
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0xee>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b12      	cmp	r3, #18
 8004dd0:	d123      	bne.n	8004e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	08da      	lsrs	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3208      	adds	r2, #8
 8004dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	220f      	movs	r2, #15
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	08da      	lsrs	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3208      	adds	r2, #8
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	2203      	movs	r2, #3
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 0203 	and.w	r2, r3, #3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80e0 	beq.w	800501c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5c:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_GPIO_Init+0x238>)
 8004e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e62:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <HAL_GPIO_Init+0x238>)
 8004e64:	f043 0302 	orr.w	r3, r3, #2
 8004e68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_GPIO_Init+0x238>)
 8004e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <HAL_GPIO_Init+0x23c>)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	3302      	adds	r3, #2
 8004e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	220f      	movs	r2, #15
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_GPIO_Init+0x240>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d052      	beq.n	8004f4c <HAL_GPIO_Init+0x268>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_GPIO_Init+0x244>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d031      	beq.n	8004f12 <HAL_GPIO_Init+0x22e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_GPIO_Init+0x248>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02b      	beq.n	8004f0e <HAL_GPIO_Init+0x22a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <HAL_GPIO_Init+0x24c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d025      	beq.n	8004f0a <HAL_GPIO_Init+0x226>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <HAL_GPIO_Init+0x250>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01f      	beq.n	8004f06 <HAL_GPIO_Init+0x222>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <HAL_GPIO_Init+0x254>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d019      	beq.n	8004f02 <HAL_GPIO_Init+0x21e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <HAL_GPIO_Init+0x258>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_GPIO_Init+0x21a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_GPIO_Init+0x25c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00d      	beq.n	8004efa <HAL_GPIO_Init+0x216>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <HAL_GPIO_Init+0x260>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <HAL_GPIO_Init+0x212>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_GPIO_Init+0x264>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d101      	bne.n	8004ef2 <HAL_GPIO_Init+0x20e>
 8004eee:	2309      	movs	r3, #9
 8004ef0:	e02d      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004ef2:	230a      	movs	r3, #10
 8004ef4:	e02b      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	e029      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004efa:	2307      	movs	r3, #7
 8004efc:	e027      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004efe:	2306      	movs	r3, #6
 8004f00:	e025      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004f02:	2305      	movs	r3, #5
 8004f04:	e023      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004f06:	2304      	movs	r3, #4
 8004f08:	e021      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e01f      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e01d      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e01b      	b.n	8004f4e <HAL_GPIO_Init+0x26a>
 8004f16:	bf00      	nop
 8004f18:	58000080 	.word	0x58000080
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	58000400 	.word	0x58000400
 8004f24:	58020000 	.word	0x58020000
 8004f28:	58020400 	.word	0x58020400
 8004f2c:	58020800 	.word	0x58020800
 8004f30:	58020c00 	.word	0x58020c00
 8004f34:	58021000 	.word	0x58021000
 8004f38:	58021400 	.word	0x58021400
 8004f3c:	58021800 	.word	0x58021800
 8004f40:	58021c00 	.word	0x58021c00
 8004f44:	58022000 	.word	0x58022000
 8004f48:	58022400 	.word	0x58022400
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	f002 0203 	and.w	r2, r2, #3
 8004f54:	0092      	lsls	r2, r2, #2
 8004f56:	4093      	lsls	r3, r2
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f5e:	4938      	ldr	r1, [pc, #224]	; (8005040 <HAL_GPIO_Init+0x35c>)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	3302      	adds	r3, #2
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3301      	adds	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f ae63 	bne.w	8004cf8 <HAL_GPIO_Init+0x14>
  }
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	3724      	adds	r7, #36	; 0x24
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	58000400 	.word	0x58000400

08005044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
 8005050:	4613      	mov	r3, r2
 8005052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005054:	787b      	ldrb	r3, [r7, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005060:	e003      	b.n	800506a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	041a      	lsls	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	619a      	str	r2, [r3, #24]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4013      	ands	r3, r2
 800508e:	041a      	lsls	r2, r3, #16
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43d9      	mvns	r1, r3
 8005094:	887b      	ldrh	r3, [r7, #2]
 8005096:	400b      	ands	r3, r1
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	619a      	str	r2, [r3, #24]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	4603      	mov	r3, r0
 80050b2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fb feab 	bl	8000e2c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d00a      	beq.n	800510a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d001      	beq.n	8005106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e01f      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e01d      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 0207 	bic.w	r2, r3, #7
 8005112:	490f      	ldr	r1, [pc, #60]	; (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800511a:	f7fc fcf9 	bl	8001b10 <HAL_GetTick>
 800511e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005120:	e009      	b.n	8005136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005122:	f7fc fcf5 	bl	8001b10 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005130:	d901      	bls.n	8005136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e007      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005142:	d1ee      	bne.n	8005122 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	58024800 	.word	0x58024800

08005154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e3ff      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8087 	beq.w	8005282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005174:	4b99      	ldr	r3, [pc, #612]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800517e:	4b97      	ldr	r3, [pc, #604]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b10      	cmp	r3, #16
 8005188:	d007      	beq.n	800519a <HAL_RCC_OscConfig+0x46>
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	2b18      	cmp	r3, #24
 800518e:	d110      	bne.n	80051b2 <HAL_RCC_OscConfig+0x5e>
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d10b      	bne.n	80051b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519a:	4b90      	ldr	r3, [pc, #576]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d06c      	beq.n	8005280 <HAL_RCC_OscConfig+0x12c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d168      	bne.n	8005280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e3d9      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x76>
 80051bc:	4b87      	ldr	r3, [pc, #540]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a86      	ldr	r2, [pc, #536]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	e02e      	b.n	8005228 <HAL_RCC_OscConfig+0xd4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x98>
 80051d2:	4b82      	ldr	r3, [pc, #520]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a81      	ldr	r2, [pc, #516]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b7f      	ldr	r3, [pc, #508]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a7e      	ldr	r2, [pc, #504]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e01d      	b.n	8005228 <HAL_RCC_OscConfig+0xd4>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051f4:	d10c      	bne.n	8005210 <HAL_RCC_OscConfig+0xbc>
 80051f6:	4b79      	ldr	r3, [pc, #484]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a78      	ldr	r2, [pc, #480]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80051fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e00b      	b.n	8005228 <HAL_RCC_OscConfig+0xd4>
 8005210:	4b72      	ldr	r3, [pc, #456]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a71      	ldr	r2, [pc, #452]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a6e      	ldr	r2, [pc, #440]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fc fc6e 	bl	8001b10 <HAL_GetTick>
 8005234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005238:	f7fc fc6a 	bl	8001b10 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e38d      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800524a:	4b64      	ldr	r3, [pc, #400]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0xe4>
 8005256:	e014      	b.n	8005282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc fc5a 	bl	8001b10 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005260:	f7fc fc56 	bl	8001b10 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	; 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e379      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005272:	4b5a      	ldr	r3, [pc, #360]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x10c>
 800527e:	e000      	b.n	8005282 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80ae 	beq.w	80053ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005290:	4b52      	ldr	r3, [pc, #328]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005298:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800529a:	4b50      	ldr	r3, [pc, #320]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_RCC_OscConfig+0x162>
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2b18      	cmp	r3, #24
 80052aa:	d13a      	bne.n	8005322 <HAL_RCC_OscConfig+0x1ce>
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d135      	bne.n	8005322 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b6:	4b49      	ldr	r3, [pc, #292]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_RCC_OscConfig+0x17a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e34b      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ce:	f7fc fc4f 	bl	8001b70 <HAL_GetREVID>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052d8:	4293      	cmp	r3, r2
 80052da:	d817      	bhi.n	800530c <HAL_RCC_OscConfig+0x1b8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d108      	bne.n	80052f6 <HAL_RCC_OscConfig+0x1a2>
 80052e4:	4b3d      	ldr	r3, [pc, #244]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052ec:	4a3b      	ldr	r2, [pc, #236]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	e07a      	b.n	80053ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b39      	ldr	r3, [pc, #228]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	031b      	lsls	r3, r3, #12
 8005304:	4935      	ldr	r1, [pc, #212]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530a:	e06f      	b.n	80053ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b33      	ldr	r3, [pc, #204]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	4930      	ldr	r1, [pc, #192]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005320:	e064      	b.n	80053ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d045      	beq.n	80053b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 0219 	bic.w	r2, r3, #25
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4929      	ldr	r1, [pc, #164]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fbe8 	bl	8001b10 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005344:	f7fc fbe4 	bl	8001b10 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e307      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005356:	4b21      	ldr	r3, [pc, #132]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	f7fc fc05 	bl	8001b70 <HAL_GetREVID>
 8005366:	4603      	mov	r3, r0
 8005368:	f241 0203 	movw	r2, #4099	; 0x1003
 800536c:	4293      	cmp	r3, r2
 800536e:	d817      	bhi.n	80053a0 <HAL_RCC_OscConfig+0x24c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d108      	bne.n	800538a <HAL_RCC_OscConfig+0x236>
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005380:	4a16      	ldr	r2, [pc, #88]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	6053      	str	r3, [r2, #4]
 8005388:	e030      	b.n	80053ec <HAL_RCC_OscConfig+0x298>
 800538a:	4b14      	ldr	r3, [pc, #80]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	031b      	lsls	r3, r3, #12
 8005398:	4910      	ldr	r1, [pc, #64]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
 800539e:	e025      	b.n	80053ec <HAL_RCC_OscConfig+0x298>
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	490b      	ldr	r1, [pc, #44]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
 80053b4:	e01a      	b.n	80053ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <HAL_RCC_OscConfig+0x288>)
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fc fba5 	bl	8001b10 <HAL_GetTick>
 80053c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ca:	f7fc fba1 	bl	8001b10 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d903      	bls.n	80053e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e2c4      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
 80053dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e0:	4ba4      	ldr	r3, [pc, #656]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ee      	bne.n	80053ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80a9 	beq.w	800554c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fa:	4b9e      	ldr	r3, [pc, #632]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005402:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005404:	4b9b      	ldr	r3, [pc, #620]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d007      	beq.n	8005420 <HAL_RCC_OscConfig+0x2cc>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b18      	cmp	r3, #24
 8005414:	d13a      	bne.n	800548c <HAL_RCC_OscConfig+0x338>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d135      	bne.n	800548c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005420:	4b94      	ldr	r3, [pc, #592]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x2e4>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e296      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005438:	f7fc fb9a 	bl	8001b70 <HAL_GetREVID>
 800543c:	4603      	mov	r3, r0
 800543e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005442:	4293      	cmp	r3, r2
 8005444:	d817      	bhi.n	8005476 <HAL_RCC_OscConfig+0x322>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	2b20      	cmp	r3, #32
 800544c:	d108      	bne.n	8005460 <HAL_RCC_OscConfig+0x30c>
 800544e:	4b89      	ldr	r3, [pc, #548]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005456:	4a87      	ldr	r2, [pc, #540]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800545e:	e075      	b.n	800554c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005460:	4b84      	ldr	r3, [pc, #528]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	069b      	lsls	r3, r3, #26
 800546e:	4981      	ldr	r1, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005470:	4313      	orrs	r3, r2
 8005472:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005474:	e06a      	b.n	800554c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005476:	4b7f      	ldr	r3, [pc, #508]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	061b      	lsls	r3, r3, #24
 8005484:	497b      	ldr	r1, [pc, #492]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005486:	4313      	orrs	r3, r2
 8005488:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800548a:	e05f      	b.n	800554c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d042      	beq.n	800551a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005494:	4b77      	ldr	r3, [pc, #476]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a76      	ldr	r2, [pc, #472]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 800549a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fc fb36 	bl	8001b10 <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054a8:	f7fc fb32 	bl	8001b10 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e255      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ba:	4b6e      	ldr	r3, [pc, #440]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c6:	f7fc fb53 	bl	8001b70 <HAL_GetREVID>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d817      	bhi.n	8005504 <HAL_RCC_OscConfig+0x3b0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d108      	bne.n	80054ee <HAL_RCC_OscConfig+0x39a>
 80054dc:	4b65      	ldr	r3, [pc, #404]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054e4:	4a63      	ldr	r2, [pc, #396]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80054e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ea:	6053      	str	r3, [r2, #4]
 80054ec:	e02e      	b.n	800554c <HAL_RCC_OscConfig+0x3f8>
 80054ee:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	069b      	lsls	r3, r3, #26
 80054fc:	495d      	ldr	r1, [pc, #372]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
 8005502:	e023      	b.n	800554c <HAL_RCC_OscConfig+0x3f8>
 8005504:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	4958      	ldr	r1, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005514:	4313      	orrs	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
 8005518:	e018      	b.n	800554c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a55      	ldr	r2, [pc, #340]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fc faf3 	bl	8001b10 <HAL_GetTick>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800552e:	f7fc faef 	bl	8001b10 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e212      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005540:	4b4c      	ldr	r3, [pc, #304]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d036      	beq.n	80055c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d019      	beq.n	8005594 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005560:	4b44      	ldr	r3, [pc, #272]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	4a43      	ldr	r2, [pc, #268]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fc fad0 	bl	8001b10 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005574:	f7fc facc 	bl	8001b10 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1ef      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005586:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x420>
 8005592:	e018      	b.n	80055c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	4a36      	ldr	r2, [pc, #216]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fc fab6 	bl	8001b10 <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fc fab2 	bl	8001b10 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e1d5      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055ba:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80055bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d036      	beq.n	8005640 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d019      	beq.n	800560e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a25      	ldr	r2, [pc, #148]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 80055e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055e6:	f7fc fa93 	bl	8001b10 <HAL_GetTick>
 80055ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055ee:	f7fc fa8f 	bl	8001b10 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1b2      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005600:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x49a>
 800560c:	e018      	b.n	8005640 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800560e:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005618:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800561a:	f7fc fa79 	bl	8001b10 <HAL_GetTick>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005622:	f7fc fa75 	bl	8001b10 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e198      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_RCC_OscConfig+0x520>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f0      	bne.n	8005622 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8085 	beq.w	8005758 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_RCC_OscConfig+0x524>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <HAL_RCC_OscConfig+0x524>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800565a:	f7fc fa59 	bl	8001b10 <HAL_GetTick>
 800565e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005660:	e00c      	b.n	800567c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005662:	f7fc fa55 	bl	8001b10 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b64      	cmp	r3, #100	; 0x64
 800566e:	d905      	bls.n	800567c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e178      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
 8005674:	58024400 	.word	0x58024400
 8005678:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800567c:	4b96      	ldr	r3, [pc, #600]	; (80058d8 <HAL_RCC_OscConfig+0x784>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ec      	beq.n	8005662 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d106      	bne.n	800569e <HAL_RCC_OscConfig+0x54a>
 8005690:	4b92      	ldr	r3, [pc, #584]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a91      	ldr	r2, [pc, #580]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
 800569c:	e02d      	b.n	80056fa <HAL_RCC_OscConfig+0x5a6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x56c>
 80056a6:	4b8d      	ldr	r3, [pc, #564]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4a8c      	ldr	r2, [pc, #560]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70
 80056b2:	4b8a      	ldr	r3, [pc, #552]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a89      	ldr	r2, [pc, #548]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
 80056be:	e01c      	b.n	80056fa <HAL_RCC_OscConfig+0x5a6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d10c      	bne.n	80056e2 <HAL_RCC_OscConfig+0x58e>
 80056c8:	4b84      	ldr	r3, [pc, #528]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056cc:	4a83      	ldr	r2, [pc, #524]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056ce:	f043 0304 	orr.w	r3, r3, #4
 80056d2:	6713      	str	r3, [r2, #112]	; 0x70
 80056d4:	4b81      	ldr	r3, [pc, #516]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a80      	ldr	r2, [pc, #512]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
 80056e0:	e00b      	b.n	80056fa <HAL_RCC_OscConfig+0x5a6>
 80056e2:	4b7e      	ldr	r3, [pc, #504]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a7d      	ldr	r2, [pc, #500]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
 80056ee:	4b7b      	ldr	r3, [pc, #492]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a7a      	ldr	r2, [pc, #488]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80056f4:	f023 0304 	bic.w	r3, r3, #4
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d015      	beq.n	800572e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005702:	f7fc fa05 	bl	8001b10 <HAL_GetTick>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005708:	e00a      	b.n	8005720 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fc fa01 	bl	8001b10 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	; 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e122      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005720:	4b6e      	ldr	r3, [pc, #440]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ee      	beq.n	800570a <HAL_RCC_OscConfig+0x5b6>
 800572c:	e014      	b.n	8005758 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572e:	f7fc f9ef 	bl	8001b10 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fc f9eb 	bl	8001b10 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e10c      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800574c:	4b63      	ldr	r3, [pc, #396]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ee      	bne.n	8005736 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8101 	beq.w	8005964 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005762:	4b5e      	ldr	r3, [pc, #376]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800576a:	2b18      	cmp	r3, #24
 800576c:	f000 80bc 	beq.w	80058e8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b02      	cmp	r3, #2
 8005776:	f040 8095 	bne.w	80058a4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577a:	4b58      	ldr	r3, [pc, #352]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a57      	ldr	r2, [pc, #348]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fc f9c3 	bl	8001b10 <HAL_GetTick>
 800578a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578e:	f7fc f9bf 	bl	8001b10 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e0e2      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057a0:	4b4e      	ldr	r3, [pc, #312]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f0      	bne.n	800578e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ac:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80057ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057b0:	4b4b      	ldr	r3, [pc, #300]	; (80058e0 <HAL_RCC_OscConfig+0x78c>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057bc:	0112      	lsls	r2, r2, #4
 80057be:	430a      	orrs	r2, r1
 80057c0:	4946      	ldr	r1, [pc, #280]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	628b      	str	r3, [r1, #40]	; 0x28
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	3b01      	subs	r3, #1
 80057cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d4:	3b01      	subs	r3, #1
 80057d6:	025b      	lsls	r3, r3, #9
 80057d8:	b29b      	uxth	r3, r3
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	3b01      	subs	r3, #1
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	3b01      	subs	r3, #1
 80057f0:	061b      	lsls	r3, r3, #24
 80057f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057f6:	4939      	ldr	r1, [pc, #228]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a36      	ldr	r2, [pc, #216]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800580a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <HAL_RCC_OscConfig+0x790>)
 800580e:	4013      	ands	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005814:	00d2      	lsls	r2, r2, #3
 8005816:	4931      	ldr	r1, [pc, #196]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005818:	4313      	orrs	r3, r2
 800581a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800581c:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	f023 020c 	bic.w	r2, r3, #12
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	492c      	ldr	r1, [pc, #176]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800582a:	4313      	orrs	r3, r2
 800582c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f023 0202 	bic.w	r2, r3, #2
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	4928      	ldr	r1, [pc, #160]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800583c:	4313      	orrs	r3, r2
 800583e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005840:	4b26      	ldr	r3, [pc, #152]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	4a25      	ldr	r2, [pc, #148]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584c:	4b23      	ldr	r3, [pc, #140]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005858:	4b20      	ldr	r3, [pc, #128]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800585e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005870:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fc f948 	bl	8001b10 <HAL_GetTick>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7fc f944 	bl	8001b10 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e067      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x730>
 80058a2:	e05f      	b.n	8005964 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a4:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80058aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fc f92e 	bl	8001b10 <HAL_GetTick>
 80058b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b8:	f7fc f92a 	bl	8001b10 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e04d      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <HAL_RCC_OscConfig+0x788>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f0      	bne.n	80058b8 <HAL_RCC_OscConfig+0x764>
 80058d6:	e045      	b.n	8005964 <HAL_RCC_OscConfig+0x810>
 80058d8:	58024800 	.word	0x58024800
 80058dc:	58024400 	.word	0x58024400
 80058e0:	fffffc0c 	.word	0xfffffc0c
 80058e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058e8:	4b21      	ldr	r3, [pc, #132]	; (8005970 <HAL_RCC_OscConfig+0x81c>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058ee:	4b20      	ldr	r3, [pc, #128]	; (8005970 <HAL_RCC_OscConfig+0x81c>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d031      	beq.n	8005960 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f003 0203 	and.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d12a      	bne.n	8005960 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d122      	bne.n	8005960 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d11a      	bne.n	8005960 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	0a5b      	lsrs	r3, r3, #9
 800592e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005938:	429a      	cmp	r2, r3
 800593a:	d111      	bne.n	8005960 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d108      	bne.n	8005960 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	0e1b      	lsrs	r3, r3, #24
 8005952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3730      	adds	r7, #48	; 0x30
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400

08005974 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e19c      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005988:	4b8a      	ldr	r3, [pc, #552]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d910      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b87      	ldr	r3, [pc, #540]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	4985      	ldr	r1, [pc, #532]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b83      	ldr	r3, [pc, #524]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e184      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	4b7b      	ldr	r3, [pc, #492]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d908      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059d4:	4b78      	ldr	r3, [pc, #480]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	4975      	ldr	r1, [pc, #468]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	4b70      	ldr	r3, [pc, #448]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d908      	bls.n	8005a14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a02:	4b6d      	ldr	r3, [pc, #436]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	496a      	ldr	r1, [pc, #424]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	4b64      	ldr	r3, [pc, #400]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d908      	bls.n	8005a42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a30:	4b61      	ldr	r3, [pc, #388]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	495e      	ldr	r1, [pc, #376]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d908      	bls.n	8005a70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a5e:	4b56      	ldr	r3, [pc, #344]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	4953      	ldr	r1, [pc, #332]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	4b4d      	ldr	r3, [pc, #308]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d908      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8c:	4b4a      	ldr	r3, [pc, #296]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f023 020f 	bic.w	r2, r3, #15
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4947      	ldr	r1, [pc, #284]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d055      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005aaa:	4b43      	ldr	r3, [pc, #268]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	4940      	ldr	r1, [pc, #256]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ac4:	4b3c      	ldr	r3, [pc, #240]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d121      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0f6      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d107      	bne.n	8005aec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005adc:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d115      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0ea      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005af4:	4b30      	ldr	r3, [pc, #192]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0de      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b04:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0d6      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f023 0207 	bic.w	r2, r3, #7
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4925      	ldr	r1, [pc, #148]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b26:	f7fb fff3 	bl	8001b10 <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2e:	f7fb ffef 	bl	8001b10 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e0be      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d1eb      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d208      	bcs.n	8005b84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b72:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f023 020f 	bic.w	r2, r3, #15
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	490e      	ldr	r1, [pc, #56]	; (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d214      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 020f 	bic.w	r2, r3, #15
 8005b9a:	4906      	ldr	r1, [pc, #24]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e086      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
 8005bb4:	52002000 	.word	0x52002000
 8005bb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d010      	beq.n	8005bea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d208      	bcs.n	8005bea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bd8:	4b3c      	ldr	r3, [pc, #240]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	4939      	ldr	r1, [pc, #228]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d010      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	4b34      	ldr	r3, [pc, #208]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d208      	bcs.n	8005c18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c06:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	492e      	ldr	r1, [pc, #184]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	4b28      	ldr	r3, [pc, #160]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d208      	bcs.n	8005c46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c34:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	4922      	ldr	r1, [pc, #136]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d208      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c62:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4917      	ldr	r1, [pc, #92]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c74:	f000 f834 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	4912      	ldr	r1, [pc, #72]	; (8005cd0 <HAL_RCC_ClockConfig+0x35c>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c92:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <HAL_RCC_ClockConfig+0x35c>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <HAL_RCC_ClockConfig+0x360>)
 8005caa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cac:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <HAL_RCC_ClockConfig+0x364>)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <HAL_RCC_ClockConfig+0x368>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fb fee0 	bl	8001a7c <HAL_InitTick>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	08009874 	.word	0x08009874
 8005cd4:	2400001c 	.word	0x2400001c
 8005cd8:	24000018 	.word	0x24000018
 8005cdc:	24000020 	.word	0x24000020

08005ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce6:	4bb3      	ldr	r3, [pc, #716]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cee:	2b18      	cmp	r3, #24
 8005cf0:	f200 8155 	bhi.w	8005f9e <HAL_RCC_GetSysClockFreq+0x2be>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d61 	.word	0x08005d61
 8005d00:	08005f9f 	.word	0x08005f9f
 8005d04:	08005f9f 	.word	0x08005f9f
 8005d08:	08005f9f 	.word	0x08005f9f
 8005d0c:	08005f9f 	.word	0x08005f9f
 8005d10:	08005f9f 	.word	0x08005f9f
 8005d14:	08005f9f 	.word	0x08005f9f
 8005d18:	08005f9f 	.word	0x08005f9f
 8005d1c:	08005d87 	.word	0x08005d87
 8005d20:	08005f9f 	.word	0x08005f9f
 8005d24:	08005f9f 	.word	0x08005f9f
 8005d28:	08005f9f 	.word	0x08005f9f
 8005d2c:	08005f9f 	.word	0x08005f9f
 8005d30:	08005f9f 	.word	0x08005f9f
 8005d34:	08005f9f 	.word	0x08005f9f
 8005d38:	08005f9f 	.word	0x08005f9f
 8005d3c:	08005d8d 	.word	0x08005d8d
 8005d40:	08005f9f 	.word	0x08005f9f
 8005d44:	08005f9f 	.word	0x08005f9f
 8005d48:	08005f9f 	.word	0x08005f9f
 8005d4c:	08005f9f 	.word	0x08005f9f
 8005d50:	08005f9f 	.word	0x08005f9f
 8005d54:	08005f9f 	.word	0x08005f9f
 8005d58:	08005f9f 	.word	0x08005f9f
 8005d5c:	08005d93 	.word	0x08005d93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d6c:	4b91      	ldr	r3, [pc, #580]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	08db      	lsrs	r3, r3, #3
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	4a90      	ldr	r2, [pc, #576]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d7e:	e111      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d80:	4b8d      	ldr	r3, [pc, #564]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d82:	61bb      	str	r3, [r7, #24]
    break;
 8005d84:	e10e      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d86:	4b8d      	ldr	r3, [pc, #564]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d88:	61bb      	str	r3, [r7, #24]
    break;
 8005d8a:	e10b      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d8c:	4b8c      	ldr	r3, [pc, #560]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d8e:	61bb      	str	r3, [r7, #24]
    break;
 8005d90:	e108      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d92:	4b88      	ldr	r3, [pc, #544]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d9c:	4b85      	ldr	r3, [pc, #532]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005da8:	4b82      	ldr	r3, [pc, #520]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005db2:	4b80      	ldr	r3, [pc, #512]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	08db      	lsrs	r3, r3, #3
 8005db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80e1 	beq.w	8005f98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f000 8083 	beq.w	8005ee4 <HAL_RCC_GetSysClockFreq+0x204>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f200 80a1 	bhi.w	8005f28 <HAL_RCC_GetSysClockFreq+0x248>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_RCC_GetSysClockFreq+0x114>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d056      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005df2:	e099      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df4:	4b6f      	ldr	r3, [pc, #444]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02d      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e00:	4b6c      	ldr	r3, [pc, #432]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	08db      	lsrs	r3, r3, #3
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	4a6b      	ldr	r2, [pc, #428]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2a:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e5a:	e087      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6e:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e9e:	e065      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb2:	4b40      	ldr	r3, [pc, #256]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ee2:	e043      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f26:	e021      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3a:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f6c:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	0a5b      	lsrs	r3, r3, #9
 8005f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f76:	3301      	adds	r3, #1
 8005f78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f90:	ee17 3a90 	vmov	r3, s15
 8005f94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f96:	e005      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
    break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005f9e:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fa0:	61bb      	str	r3, [r7, #24]
    break;
 8005fa2:	bf00      	nop
  }

  return sysclockfreq;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3724      	adds	r7, #36	; 0x24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	03d09000 	.word	0x03d09000
 8005fbc:	003d0900 	.word	0x003d0900
 8005fc0:	007f2815 	.word	0x007f2815
 8005fc4:	46000000 	.word	0x46000000
 8005fc8:	4c742400 	.word	0x4c742400
 8005fcc:	4a742400 	.word	0x4a742400
 8005fd0:	4afe502a 	.word	0x4afe502a

08005fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fda:	f7ff fe81 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	4b10      	ldr	r3, [pc, #64]	; (8006024 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	0a1b      	lsrs	r3, r3, #8
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	490f      	ldr	r1, [pc, #60]	; (8006028 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fec:	5ccb      	ldrb	r3, [r1, r3]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	4a09      	ldr	r2, [pc, #36]	; (8006028 <HAL_RCC_GetHCLKFreq+0x54>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <HAL_RCC_GetHCLKFreq+0x58>)
 8006010:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006012:	4a07      	ldr	r2, [pc, #28]	; (8006030 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <HAL_RCC_GetHCLKFreq+0x58>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	58024400 	.word	0x58024400
 8006028:	08009874 	.word	0x08009874
 800602c:	2400001c 	.word	0x2400001c
 8006030:	24000018 	.word	0x24000018

08006034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006038:	f7ff ffcc 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4904      	ldr	r1, [pc, #16]	; (800605c <HAL_RCC_GetPCLK1Freq+0x28>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	58024400 	.word	0x58024400
 800605c:	08009874 	.word	0x08009874

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006064:	f7ff ffb6 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4904      	ldr	r1, [pc, #16]	; (8006088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	58024400 	.word	0x58024400
 8006088:	08009874 	.word	0x08009874

0800608c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006098:	2300      	movs	r3, #0
 800609a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d03f      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060b0:	d02a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060b6:	d824      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060bc:	d018      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060c2:	d81e      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060cc:	d007      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060ce:	e018      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d0:	4bab      	ldr	r3, [pc, #684]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	4aaa      	ldr	r2, [pc, #680]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060dc:	e015      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3304      	adds	r3, #4
 80060e2:	2102      	movs	r1, #2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f9cf 	bl	8007488 <RCCEx_PLL2_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060ee:	e00c      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3324      	adds	r3, #36	; 0x24
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fa78 	bl	80075ec <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006100:	e003      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]
      break;
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006110:	4b9b      	ldr	r3, [pc, #620]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611c:	4998      	ldr	r1, [pc, #608]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800611e:	4313      	orrs	r3, r2
 8006120:	650b      	str	r3, [r1, #80]	; 0x50
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	2b04      	cmp	r3, #4
 800613a:	d826      	bhi.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006159 	.word	0x08006159
 8006148:	08006167 	.word	0x08006167
 800614c:	08006179 	.word	0x08006179
 8006150:	08006191 	.word	0x08006191
 8006154:	08006191 	.word	0x08006191
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4b89      	ldr	r3, [pc, #548]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4a88      	ldr	r2, [pc, #544]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006164:	e015      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f98b 	bl	8007488 <RCCEx_PLL2_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006176:	e00c      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3324      	adds	r3, #36	; 0x24
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f001 fa34 	bl	80075ec <RCCEx_PLL3_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006188:	e003      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
      break;
 800618e:	e000      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006198:	4b79      	ldr	r3, [pc, #484]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619c:	f023 0207 	bic.w	r2, r3, #7
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	4976      	ldr	r1, [pc, #472]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	650b      	str	r3, [r1, #80]	; 0x50
 80061aa:	e001      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d042      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c4:	d02b      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ca:	d825      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061cc:	2bc0      	cmp	r3, #192	; 0xc0
 80061ce:	d028      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061d0:	2bc0      	cmp	r3, #192	; 0xc0
 80061d2:	d821      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061d4:	2b80      	cmp	r3, #128	; 0x80
 80061d6:	d016      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80061d8:	2b80      	cmp	r3, #128	; 0x80
 80061da:	d81d      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d007      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80061e4:	e018      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e6:	4b66      	ldr	r3, [pc, #408]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4a65      	ldr	r2, [pc, #404]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061f2:	e017      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f944 	bl	8007488 <RCCEx_PLL2_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006204:	e00e      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3324      	adds	r3, #36	; 0x24
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 f9ed 	bl	80075ec <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006216:	e005      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
      break;
 800621c:	e002      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800622a:	4b55      	ldr	r3, [pc, #340]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	4952      	ldr	r1, [pc, #328]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	650b      	str	r3, [r1, #80]	; 0x50
 800623c:	e001      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624a:	2b00      	cmp	r3, #0
 800624c:	d049      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006258:	d030      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800625a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800625e:	d82a      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006260:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006264:	d02c      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006266:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800626a:	d824      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800626c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006270:	d018      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006276:	d81e      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800627c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006280:	d007      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006282:	e018      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006284:	4b3e      	ldr	r3, [pc, #248]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	4a3d      	ldr	r2, [pc, #244]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800628a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800628e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006290:	e017      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3304      	adds	r3, #4
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f8f5 	bl	8007488 <RCCEx_PLL2_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062a2:	e00e      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3324      	adds	r3, #36	; 0x24
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 f99e 	bl	80075ec <RCCEx_PLL3_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062b4:	e005      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ba:	e002      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062bc:	bf00      	nop
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062c8:	4b2d      	ldr	r3, [pc, #180]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062d6:	492a      	ldr	r1, [pc, #168]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	658b      	str	r3, [r1, #88]	; 0x58
 80062dc:	e001      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04c      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062f8:	d030      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80062fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062fe:	d82a      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006304:	d02c      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800630a:	d824      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800630c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006310:	d018      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006316:	d81e      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800631c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006320:	d007      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006322:	e018      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4b16      	ldr	r3, [pc, #88]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4a15      	ldr	r2, [pc, #84]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006330:	e017      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f001 f8a5 	bl	8007488 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006342:	e00e      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f001 f94e 	bl	80075ec <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006354:	e005      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
      break;
 800635a:	e002      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800635c:	bf00      	nop
 800635e:	e000      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10d      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006376:	4902      	ldr	r1, [pc, #8]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006378:	4313      	orrs	r3, r2
 800637a:	658b      	str	r3, [r1, #88]	; 0x58
 800637c:	e004      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800637e:	bf00      	nop
 8006380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
 8006386:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d032      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d01c      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d817      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d00c      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d813      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d016      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d10f      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4baf      	ldr	r3, [pc, #700]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4aae      	ldr	r2, [pc, #696]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063bc:	e00e      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	2102      	movs	r1, #2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 f85f 	bl	8007488 <RCCEx_PLL2_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063ce:	e005      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063e2:	4ba3      	ldr	r3, [pc, #652]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ee:	49a0      	ldr	r1, [pc, #640]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063f4:	e001      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d047      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640e:	d030      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006414:	d82a      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800641a:	d02c      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800641c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006420:	d824      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	d018      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642c:	d81e      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d007      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006438:	e018      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643a:	4b8d      	ldr	r3, [pc, #564]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	4a8c      	ldr	r2, [pc, #560]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006446:	e017      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f81a 	bl	8007488 <RCCEx_PLL2_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006458:	e00e      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3324      	adds	r3, #36	; 0x24
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f8c3 	bl	80075ec <RCCEx_PLL3_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800646a:	e005      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
      break;
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800647e:	4b7c      	ldr	r3, [pc, #496]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648a:	4979      	ldr	r1, [pc, #484]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800648c:	4313      	orrs	r3, r2
 800648e:	650b      	str	r3, [r1, #80]	; 0x50
 8006490:	e001      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d049      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064aa:	d02e      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80064ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b0:	d828      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b6:	d02a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80064b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064bc:	d822      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064c2:	d026      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80064c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064c8:	d81c      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ce:	d010      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80064d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d4:	d816      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01d      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d111      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	2101      	movs	r1, #1
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 ffce 	bl	8007488 <RCCEx_PLL2_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064f0:	e012      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3324      	adds	r3, #36	; 0x24
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 f877 	bl	80075ec <RCCEx_PLL3_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006502:	e009      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	75fb      	strb	r3, [r7, #23]
      break;
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800650a:	bf00      	nop
 800650c:	e004      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800650e:	bf00      	nop
 8006510:	e002      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006512:	bf00      	nop
 8006514:	e000      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800651e:	4b54      	ldr	r3, [pc, #336]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006522:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	4951      	ldr	r1, [pc, #324]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800652c:	4313      	orrs	r3, r2
 800652e:	650b      	str	r3, [r1, #80]	; 0x50
 8006530:	e001      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04b      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654c:	d02e      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 800654e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006552:	d828      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d02a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d822      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006564:	d026      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006566:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800656a:	d81c      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800656c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006570:	d010      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006576:	d816      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01d      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800657c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006580:	d111      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	2101      	movs	r1, #1
 8006588:	4618      	mov	r0, r3
 800658a:	f000 ff7d 	bl	8007488 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006592:	e012      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f826 	bl	80075ec <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065a4:	e009      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
      break;
 80065aa:	e006      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065ac:	bf00      	nop
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065b0:	bf00      	nop
 80065b2:	e002      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065b4:	bf00      	nop
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065c0:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065ce:	4928      	ldr	r1, [pc, #160]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	658b      	str	r3, [r1, #88]	; 0x58
 80065d4:	e001      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d02f      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ee:	d00e      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80065f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f4:	d814      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d015      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065fe:	d10f      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006600:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800660c:	e00c      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	2101      	movs	r1, #1
 8006614:	4618      	mov	r0, r3
 8006616:	f000 ff37 	bl	8007488 <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800661e:	e003      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	75fb      	strb	r3, [r7, #23]
      break;
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006632:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663a:	490d      	ldr	r1, [pc, #52]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800663c:	4313      	orrs	r3, r2
 800663e:	650b      	str	r3, [r1, #80]	; 0x50
 8006640:	e001      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d033      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	2b03      	cmp	r3, #3
 8006658:	d81c      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	0800669b 	.word	0x0800669b
 8006664:	08006675 	.word	0x08006675
 8006668:	08006683 	.word	0x08006683
 800666c:	0800669b 	.word	0x0800669b
 8006670:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006674:	4bb8      	ldr	r3, [pc, #736]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	4ab7      	ldr	r2, [pc, #732]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800667a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006680:	e00c      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	2102      	movs	r1, #2
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fefd 	bl	8007488 <RCCEx_PLL2_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006692:	e003      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
      break;
 8006698:	e000      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800669a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066a2:	4bad      	ldr	r3, [pc, #692]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	f023 0203 	bic.w	r2, r3, #3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	49aa      	ldr	r1, [pc, #680]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066b4:	e001      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8086 	beq.w	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066c8:	4ba4      	ldr	r3, [pc, #656]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4aa3      	ldr	r2, [pc, #652]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066d4:	f7fb fa1c 	bl	8001b10 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066da:	e009      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066dc:	f7fb fa18 	bl	8001b10 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b64      	cmp	r3, #100	; 0x64
 80066e8:	d902      	bls.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	75fb      	strb	r3, [r7, #23]
        break;
 80066ee:	e005      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066f0:	4b9a      	ldr	r3, [pc, #616]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ef      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d166      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006702:	4b95      	ldr	r3, [pc, #596]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800670c:	4053      	eors	r3, r2
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006716:	4b90      	ldr	r3, [pc, #576]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006720:	4b8d      	ldr	r3, [pc, #564]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006724:	4a8c      	ldr	r2, [pc, #560]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800672a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800672c:	4b8a      	ldr	r3, [pc, #552]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	4a89      	ldr	r2, [pc, #548]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006736:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006738:	4a87      	ldr	r2, [pc, #540]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006748:	d115      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fb f9e1 	bl	8001b10 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006750:	e00b      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006752:	f7fb f9dd 	bl	8001b10 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006760:	4293      	cmp	r3, r2
 8006762:	d902      	bls.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	75fb      	strb	r3, [r7, #23]
            break;
 8006768:	e005      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800676a:	4b7b      	ldr	r3, [pc, #492]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0ed      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d126      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800678a:	d10d      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800678c:	4b72      	ldr	r3, [pc, #456]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800679a:	0919      	lsrs	r1, r3, #4
 800679c:	4b70      	ldr	r3, [pc, #448]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800679e:	400b      	ands	r3, r1
 80067a0:	496d      	ldr	r1, [pc, #436]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	610b      	str	r3, [r1, #16]
 80067a6:	e005      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80067a8:	4b6b      	ldr	r3, [pc, #428]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067b2:	6113      	str	r3, [r2, #16]
 80067b4:	4b68      	ldr	r3, [pc, #416]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c2:	4965      	ldr	r1, [pc, #404]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	670b      	str	r3, [r1, #112]	; 0x70
 80067c8:	e004      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	75bb      	strb	r3, [r7, #22]
 80067ce:	e001      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d07e      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e4:	2b28      	cmp	r3, #40	; 0x28
 80067e6:	d867      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	080068bf 	.word	0x080068bf
 80067f4:	080068b9 	.word	0x080068b9
 80067f8:	080068b9 	.word	0x080068b9
 80067fc:	080068b9 	.word	0x080068b9
 8006800:	080068b9 	.word	0x080068b9
 8006804:	080068b9 	.word	0x080068b9
 8006808:	080068b9 	.word	0x080068b9
 800680c:	080068b9 	.word	0x080068b9
 8006810:	08006895 	.word	0x08006895
 8006814:	080068b9 	.word	0x080068b9
 8006818:	080068b9 	.word	0x080068b9
 800681c:	080068b9 	.word	0x080068b9
 8006820:	080068b9 	.word	0x080068b9
 8006824:	080068b9 	.word	0x080068b9
 8006828:	080068b9 	.word	0x080068b9
 800682c:	080068b9 	.word	0x080068b9
 8006830:	080068a7 	.word	0x080068a7
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080068b9 	.word	0x080068b9
 800683c:	080068b9 	.word	0x080068b9
 8006840:	080068b9 	.word	0x080068b9
 8006844:	080068b9 	.word	0x080068b9
 8006848:	080068b9 	.word	0x080068b9
 800684c:	080068b9 	.word	0x080068b9
 8006850:	080068bf 	.word	0x080068bf
 8006854:	080068b9 	.word	0x080068b9
 8006858:	080068b9 	.word	0x080068b9
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068b9 	.word	0x080068b9
 8006868:	080068b9 	.word	0x080068b9
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068bf 	.word	0x080068bf
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068b9 	.word	0x080068b9
 800687c:	080068b9 	.word	0x080068b9
 8006880:	080068b9 	.word	0x080068b9
 8006884:	080068b9 	.word	0x080068b9
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068b9 	.word	0x080068b9
 8006890:	080068bf 	.word	0x080068bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3304      	adds	r3, #4
 8006898:	2101      	movs	r1, #1
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fdf4 	bl	8007488 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068a4:	e00c      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3324      	adds	r3, #36	; 0x24
 80068aa:	2101      	movs	r1, #1
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fe9d 	bl	80075ec <RCCEx_PLL3_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068b6:	e003      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
      break;
 80068bc:	e000      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80068be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068c6:	4b24      	ldr	r3, [pc, #144]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d2:	4921      	ldr	r1, [pc, #132]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	654b      	str	r3, [r1, #84]	; 0x54
 80068d8:	e001      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d03e      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d820      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	0800693b 	.word	0x0800693b
 80068fc:	08006911 	.word	0x08006911
 8006900:	08006923 	.word	0x08006923
 8006904:	0800693b 	.word	0x0800693b
 8006908:	0800693b 	.word	0x0800693b
 800690c:	0800693b 	.word	0x0800693b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	2101      	movs	r1, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fdb6 	bl	8007488 <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006920:	e00c      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3324      	adds	r3, #36	; 0x24
 8006926:	2101      	movs	r1, #1
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fe5f 	bl	80075ec <RCCEx_PLL3_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	e000      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800693a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d110      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006946:	f023 0207 	bic.w	r2, r3, #7
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694e:	4902      	ldr	r1, [pc, #8]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006950:	4313      	orrs	r3, r2
 8006952:	654b      	str	r3, [r1, #84]	; 0x54
 8006954:	e008      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
 800695c:	58024800 	.word	0x58024800
 8006960:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d039      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697a:	2b05      	cmp	r3, #5
 800697c:	d820      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069c7 	.word	0x080069c7
 8006988:	0800699d 	.word	0x0800699d
 800698c:	080069af 	.word	0x080069af
 8006990:	080069c7 	.word	0x080069c7
 8006994:	080069c7 	.word	0x080069c7
 8006998:	080069c7 	.word	0x080069c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3304      	adds	r3, #4
 80069a0:	2101      	movs	r1, #1
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fd70 	bl	8007488 <RCCEx_PLL2_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069ac:	e00c      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	2101      	movs	r1, #1
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fe19 	bl	80075ec <RCCEx_PLL3_Config>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
      break;
 80069c4:	e000      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80069c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ce:	4bb7      	ldr	r3, [pc, #732]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	f023 0207 	bic.w	r2, r3, #7
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069dc:	49b3      	ldr	r1, [pc, #716]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	658b      	str	r3, [r1, #88]	; 0x58
 80069e2:	e001      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d04b      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069fe:	d02e      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a04:	d828      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0a:	d02a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d822      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a16:	d026      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a1c:	d81c      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a22:	d010      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a28:	d816      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01d      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a32:	d111      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fd24 	bl	8007488 <RCCEx_PLL2_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a44:	e012      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3324      	adds	r3, #36	; 0x24
 8006a4a:	2102      	movs	r1, #2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fdcd 	bl	80075ec <RCCEx_PLL3_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a56:	e009      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5c:	e006      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e004      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a62:	bf00      	nop
 8006a64:	e002      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a66:	bf00      	nop
 8006a68:	e000      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a72:	4b8e      	ldr	r3, [pc, #568]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a80:	498a      	ldr	r1, [pc, #552]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	654b      	str	r3, [r1, #84]	; 0x54
 8006a86:	e001      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d04b      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aa2:	d02e      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006aa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aa8:	d828      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aae:	d02a      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab4:	d822      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aba:	d026      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ac0:	d81c      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac6:	d010      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d816      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01d      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad6:	d111      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fcd2 	bl	8007488 <RCCEx_PLL2_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ae8:	e012      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3324      	adds	r3, #36	; 0x24
 8006aee:	2102      	movs	r1, #2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fd7b 	bl	80075ec <RCCEx_PLL3_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006afa:	e009      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	75fb      	strb	r3, [r7, #23]
      break;
 8006b00:	e006      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b02:	bf00      	nop
 8006b04:	e004      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b06:	bf00      	nop
 8006b08:	e002      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e000      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b16:	4b65      	ldr	r3, [pc, #404]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b24:	4961      	ldr	r1, [pc, #388]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	658b      	str	r3, [r1, #88]	; 0x58
 8006b2a:	e001      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d04b      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b46:	d02e      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006b48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b4c:	d828      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b52:	d02a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b58:	d822      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b5e:	d026      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006b60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b64:	d81c      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b70:	d816      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01d      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7a:	d111      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fc80 	bl	8007488 <RCCEx_PLL2_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b8c:	e012      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3324      	adds	r3, #36	; 0x24
 8006b92:	2102      	movs	r1, #2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fd29 	bl	80075ec <RCCEx_PLL3_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b9e:	e009      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba4:	e006      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e004      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bba:	4b3c      	ldr	r3, [pc, #240]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bc8:	4938      	ldr	r1, [pc, #224]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	658b      	str	r3, [r1, #88]	; 0x58
 8006bce:	e001      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01a      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d10a      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3324      	adds	r3, #36	; 0x24
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fcfa 	bl	80075ec <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c10:	4926      	ldr	r1, [pc, #152]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2c:	d10a      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3324      	adds	r3, #36	; 0x24
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fcd9 	bl	80075ec <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c44:	4b19      	ldr	r3, [pc, #100]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c52:	4916      	ldr	r1, [pc, #88]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d036      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6e:	d01f      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c74:	d817      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7e:	d009      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006c80:	e011      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3304      	adds	r3, #4
 8006c86:	2100      	movs	r1, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fbfd 	bl	8007488 <RCCEx_PLL2_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c92:	e00e      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fca6 	bl	80075ec <RCCEx_PLL3_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ca4:	e005      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8006caa:	e002      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006cac:	58024400 	.word	0x58024400
      break;
 8006cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cb8:	4b93      	ldr	r3, [pc, #588]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cc6:	4990      	ldr	r1, [pc, #576]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	658b      	str	r3, [r1, #88]	; 0x58
 8006ccc:	e001      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d033      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ce8:	d01c      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006cea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cee:	d816      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf4:	d003      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cfa:	d007      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006cfc:	e00f      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfe:	4b82      	ldr	r3, [pc, #520]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	4a81      	ldr	r2, [pc, #516]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d0a:	e00c      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fc6a 	bl	80075ec <RCCEx_PLL3_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]
      break;
 8006d22:	e000      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d2c:	4b76      	ldr	r3, [pc, #472]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3a:	4973      	ldr	r1, [pc, #460]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	654b      	str	r3, [r1, #84]	; 0x54
 8006d40:	e001      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d029      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5e:	d007      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006d60:	e00f      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d62:	4b69      	ldr	r3, [pc, #420]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	4a68      	ldr	r2, [pc, #416]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d6e:	e00b      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3304      	adds	r3, #4
 8006d74:	2102      	movs	r1, #2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fb86 	bl	8007488 <RCCEx_PLL2_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d80:	e002      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
      break;
 8006d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d8e:	4b5e      	ldr	r3, [pc, #376]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	495b      	ldr	r1, [pc, #364]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006da0:	e001      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3324      	adds	r3, #36	; 0x24
 8006db6:	2102      	movs	r1, #2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fc17 	bl	80075ec <RCCEx_PLL3_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d030      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ddc:	d017      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de2:	d811      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d013      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dee:	d80b      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfa:	4b43      	ldr	r3, [pc, #268]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	4a42      	ldr	r2, [pc, #264]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e06:	e007      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0c:	e004      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e1e:	4b3a      	ldr	r3, [pc, #232]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	4937      	ldr	r1, [pc, #220]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e42:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	492e      	ldr	r1, [pc, #184]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e6e:	4926      	ldr	r1, [pc, #152]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e80:	4b21      	ldr	r3, [pc, #132]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8c:	491e      	ldr	r1, [pc, #120]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea8:	6113      	str	r3, [r2, #16]
 8006eaa:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006eb4:	4914      	ldr	r1, [pc, #80]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da08      	bge.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ec2:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ece:	490e      	ldr	r1, [pc, #56]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eee:	4906      	ldr	r1, [pc, #24]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006ef4:	7dbb      	ldrb	r3, [r7, #22]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	58024400 	.word	0x58024400

08006f0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f10:	f7ff f860 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	4904      	ldr	r1, [pc, #16]	; (8006f34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	58024400 	.word	0x58024400
 8006f34:	08009874 	.word	0x08009874

08006f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f40:	4ba1      	ldr	r3, [pc, #644]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f4a:	4b9f      	ldr	r3, [pc, #636]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	0b1b      	lsrs	r3, r3, #12
 8006f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f56:	4b9c      	ldr	r3, [pc, #624]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f62:	4b99      	ldr	r3, [pc, #612]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	08db      	lsrs	r3, r3, #3
 8006f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8111 	beq.w	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f000 8083 	beq.w	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	f200 80a1 	bhi.w	80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d056      	beq.n	8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fa2:	e099      	b.n	80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa4:	4b88      	ldr	r3, [pc, #544]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d02d      	beq.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fb0:	4b85      	ldr	r3, [pc, #532]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a84      	ldr	r2, [pc, #528]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b7b      	ldr	r3, [pc, #492]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800700a:	e087      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701e:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007032:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800704e:	e065      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a03 	vldr	s12, [r7, #12]
 8007076:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007092:	e043      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070d6:	e021      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b37      	ldr	r3, [pc, #220]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800711a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800711c:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	0a5b      	lsrs	r3, r3, #9
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007136:	edd7 6a07 	vldr	s13, [r7, #28]
 800713a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007142:	ee17 2a90 	vmov	r2, s15
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800714a:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007164:	edd7 6a07 	vldr	s13, [r7, #28]
 8007168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007170:	ee17 2a90 	vmov	r2, s15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007178:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800718e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007192:	edd7 6a07 	vldr	s13, [r7, #28]
 8007196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719e:	ee17 2a90 	vmov	r2, s15
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071a6:	e008      	b.n	80071ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	03d09000 	.word	0x03d09000
 80071d0:	46000000 	.word	0x46000000
 80071d4:	4c742400 	.word	0x4c742400
 80071d8:	4a742400 	.word	0x4a742400
 80071dc:	4afe502a 	.word	0x4afe502a

080071e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e8:	4ba1      	ldr	r3, [pc, #644]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80071f2:	4b9f      	ldr	r3, [pc, #636]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	0d1b      	lsrs	r3, r3, #20
 80071f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071fe:	4b9c      	ldr	r3, [pc, #624]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	0a1b      	lsrs	r3, r3, #8
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800720a:	4b99      	ldr	r3, [pc, #612]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720e:	08db      	lsrs	r3, r3, #3
 8007210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	fb02 f303 	mul.w	r3, r2, r3
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8111 	beq.w	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b02      	cmp	r3, #2
 8007232:	f000 8083 	beq.w	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f200 80a1 	bhi.w	8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d056      	beq.n	80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800724a:	e099      	b.n	8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800724c:	4b88      	ldr	r3, [pc, #544]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02d      	beq.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007258:	4b85      	ldr	r3, [pc, #532]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	08db      	lsrs	r3, r3, #3
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	4a84      	ldr	r2, [pc, #528]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
 8007268:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b7b      	ldr	r3, [pc, #492]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072b2:	e087      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c6:	4b6a      	ldr	r3, [pc, #424]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072f6:	e065      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730a:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731a:	ed97 6a03 	vldr	s12, [r7, #12]
 800731e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800733a:	e043      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800734a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734e:	4b48      	ldr	r3, [pc, #288]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007362:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800737e:	e021      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800738e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007392:	4b37      	ldr	r3, [pc, #220]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073c4:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	0a5b      	lsrs	r3, r3, #9
 80073ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073de:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ea:	ee17 2a90 	vmov	r2, s15
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80073f2:	4b1f      	ldr	r3, [pc, #124]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007418:	ee17 2a90 	vmov	r2, s15
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	0e1b      	lsrs	r3, r3, #24
 8007426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800743a:	edd7 6a07 	vldr	s13, [r7, #28]
 800743e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007446:	ee17 2a90 	vmov	r2, s15
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800744e:	e008      	b.n	8007462 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	609a      	str	r2, [r3, #8]
}
 8007462:	bf00      	nop
 8007464:	3724      	adds	r7, #36	; 0x24
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	58024400 	.word	0x58024400
 8007474:	03d09000 	.word	0x03d09000
 8007478:	46000000 	.word	0x46000000
 800747c:	4c742400 	.word	0x4c742400
 8007480:	4a742400 	.word	0x4a742400
 8007484:	4afe502a 	.word	0x4afe502a

08007488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007496:	4b53      	ldr	r3, [pc, #332]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d101      	bne.n	80074a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e099      	b.n	80075da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074a6:	4b4f      	ldr	r3, [pc, #316]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a4e      	ldr	r2, [pc, #312]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b2:	f7fa fb2d 	bl	8001b10 <HAL_GetTick>
 80074b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b8:	e008      	b.n	80074cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074ba:	f7fa fb29 	bl	8001b10 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e086      	b.n	80075da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074cc:	4b45      	ldr	r3, [pc, #276]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1f0      	bne.n	80074ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074d8:	4b42      	ldr	r3, [pc, #264]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	493f      	ldr	r1, [pc, #252]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	628b      	str	r3, [r1, #40]	; 0x28
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	025b      	lsls	r3, r3, #9
 80074fe:	b29b      	uxth	r3, r3
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	3b01      	subs	r3, #1
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	3b01      	subs	r3, #1
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800751c:	4931      	ldr	r1, [pc, #196]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800751e:	4313      	orrs	r3, r2
 8007520:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007522:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	492d      	ldr	r1, [pc, #180]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007530:	4313      	orrs	r3, r2
 8007532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007534:	4b2b      	ldr	r3, [pc, #172]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	f023 0220 	bic.w	r2, r3, #32
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	4928      	ldr	r1, [pc, #160]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007542:	4313      	orrs	r3, r2
 8007544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007546:	4b27      	ldr	r3, [pc, #156]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	4a26      	ldr	r2, [pc, #152]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800754c:	f023 0310 	bic.w	r3, r3, #16
 8007550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007552:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007556:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <RCCEx_PLL2_Config+0x160>)
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	69d2      	ldr	r2, [r2, #28]
 800755e:	00d2      	lsls	r2, r2, #3
 8007560:	4920      	ldr	r1, [pc, #128]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007566:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800756c:	f043 0310 	orr.w	r3, r3, #16
 8007570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007578:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800757e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007584:	e00f      	b.n	80075a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d106      	bne.n	800759a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800758c:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007598:	e005      	b.n	80075a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a0e      	ldr	r2, [pc, #56]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b2:	f7fa faad 	bl	8001b10 <HAL_GetTick>
 80075b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b8:	e008      	b.n	80075cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075ba:	f7fa faa9 	bl	8001b10 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e006      	b.n	80075da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	58024400 	.word	0x58024400
 80075e8:	ffff0007 	.word	0xffff0007

080075ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075fa:	4b53      	ldr	r3, [pc, #332]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d101      	bne.n	800760a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e099      	b.n	800773e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800760a:	4b4f      	ldr	r3, [pc, #316]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a4e      	ldr	r2, [pc, #312]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007616:	f7fa fa7b 	bl	8001b10 <HAL_GetTick>
 800761a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800761c:	e008      	b.n	8007630 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800761e:	f7fa fa77 	bl	8001b10 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e086      	b.n	800773e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007630:	4b45      	ldr	r3, [pc, #276]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f0      	bne.n	800761e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800763c:	4b42      	ldr	r3, [pc, #264]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	051b      	lsls	r3, r3, #20
 800764a:	493f      	ldr	r1, [pc, #252]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	628b      	str	r3, [r1, #40]	; 0x28
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	3b01      	subs	r3, #1
 8007656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	025b      	lsls	r3, r3, #9
 8007662:	b29b      	uxth	r3, r3
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	3b01      	subs	r3, #1
 800767a:	061b      	lsls	r3, r3, #24
 800767c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007680:	4931      	ldr	r1, [pc, #196]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007682:	4313      	orrs	r3, r2
 8007684:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007686:	4b30      	ldr	r3, [pc, #192]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	492d      	ldr	r1, [pc, #180]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007698:	4b2b      	ldr	r3, [pc, #172]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	4928      	ldr	r1, [pc, #160]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076aa:	4b27      	ldr	r3, [pc, #156]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	4a26      	ldr	r2, [pc, #152]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076b6:	4b24      	ldr	r3, [pc, #144]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ba:	4b24      	ldr	r3, [pc, #144]	; (800774c <RCCEx_PLL3_Config+0x160>)
 80076bc:	4013      	ands	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	69d2      	ldr	r2, [r2, #28]
 80076c2:	00d2      	lsls	r2, r2, #3
 80076c4:	4920      	ldr	r1, [pc, #128]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a19      	ldr	r2, [pc, #100]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e8:	e00f      	b.n	800770a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d106      	bne.n	80076fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076f0:	4b15      	ldr	r3, [pc, #84]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076fc:	e005      	b.n	800770a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	4a11      	ldr	r2, [pc, #68]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a0e      	ldr	r2, [pc, #56]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007716:	f7fa f9fb 	bl	8001b10 <HAL_GetTick>
 800771a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800771c:	e008      	b.n	8007730 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800771e:	f7fa f9f7 	bl	8001b10 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e006      	b.n	800773e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	ffff0007 	.word	0xffff0007

08007750 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e0eb      	b.n	800793e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a75      	ldr	r2, [pc, #468]	; (8007948 <HAL_SPI_Init+0x1f8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00f      	beq.n	8007796 <HAL_SPI_Init+0x46>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a74      	ldr	r2, [pc, #464]	; (800794c <HAL_SPI_Init+0x1fc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00a      	beq.n	8007796 <HAL_SPI_Init+0x46>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a72      	ldr	r2, [pc, #456]	; (8007950 <HAL_SPI_Init+0x200>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d005      	beq.n	8007796 <HAL_SPI_Init+0x46>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b0f      	cmp	r3, #15
 8007790:	d901      	bls.n	8007796 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e0d3      	b.n	800793e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb8a 	bl	8007eb0 <SPI_GetPacketSize>
 800779c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a69      	ldr	r2, [pc, #420]	; (8007948 <HAL_SPI_Init+0x1f8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00c      	beq.n	80077c2 <HAL_SPI_Init+0x72>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a67      	ldr	r2, [pc, #412]	; (800794c <HAL_SPI_Init+0x1fc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d007      	beq.n	80077c2 <HAL_SPI_Init+0x72>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a66      	ldr	r2, [pc, #408]	; (8007950 <HAL_SPI_Init+0x200>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d002      	beq.n	80077c2 <HAL_SPI_Init+0x72>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d811      	bhi.n	80077e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077c6:	4a60      	ldr	r2, [pc, #384]	; (8007948 <HAL_SPI_Init+0x1f8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d009      	beq.n	80077e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a5e      	ldr	r2, [pc, #376]	; (800794c <HAL_SPI_Init+0x1fc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_SPI_Init+0x90>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a5d      	ldr	r2, [pc, #372]	; (8007950 <HAL_SPI_Init+0x200>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d104      	bne.n	80077ea <HAL_SPI_Init+0x9a>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d901      	bls.n	80077ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e0a9      	b.n	800793e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7f9 fbae 	bl	8000f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007824:	d119      	bne.n	800785a <HAL_SPI_Init+0x10a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800782e:	d103      	bne.n	8007838 <HAL_SPI_Init+0xe8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007848:	d107      	bne.n	800785a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007858:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69da      	ldr	r2, [r3, #28]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	431a      	orrs	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	ea42 0103 	orr.w	r1, r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ba:	ea42 0103 	orr.w	r1, r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d113      	bne.n	80078fa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40013000 	.word	0x40013000
 800794c:	40003800 	.word	0x40003800
 8007950:	40003c00 	.word	0x40003c00

08007954 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08a      	sub	sp, #40	; 0x28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800796c:	6a3a      	ldr	r2, [r7, #32]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4013      	ands	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800797c:	2300      	movs	r3, #0
 800797e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007986:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3330      	adds	r3, #48	; 0x30
 800798e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d113      	bne.n	80079c2 <HAL_SPI_IRQHandler+0x6e>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10e      	bne.n	80079c2 <HAL_SPI_IRQHandler+0x6e>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d009      	beq.n	80079c2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
    handled = 1UL;
 80079be:	2301      	movs	r3, #1
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10f      	bne.n	80079ec <HAL_SPI_IRQHandler+0x98>
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <HAL_SPI_IRQHandler+0x98>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
    handled = 1UL;
 80079e8:	2301      	movs	r3, #1
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10f      	bne.n	8007a16 <HAL_SPI_IRQHandler+0xc2>
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <HAL_SPI_IRQHandler+0xc2>
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
    handled = 1UL;
 8007a12:	2301      	movs	r3, #1
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 816f 	bne.w	8007cfc <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80a0 	beq.w	8007b6a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0208 	orr.w	r2, r2, #8
 8007a38:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	699a      	ldr	r2, [r3, #24]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0210 	orr.w	r2, r2, #16
 8007a48:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a58:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0208 	bic.w	r2, r2, #8
 8007a68:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00f      	beq.n	8007a94 <HAL_SPI_IRQHandler+0x140>
 8007a74:	7cfb      	ldrb	r3, [r7, #19]
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d004      	beq.n	8007a84 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <HAL_SPI_IRQHandler+0x140>
 8007a84:	7cfb      	ldrb	r3, [r7, #19]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d059      	beq.n	8007b3e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d154      	bne.n	8007b3e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d13d      	bne.n	8007b1e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007aa2:	e036      	b.n	8007b12 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b0f      	cmp	r3, #15
 8007aaa:	d90b      	bls.n	8007ac4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ab6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007abc:	1d1a      	adds	r2, r3, #4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	665a      	str	r2, [r3, #100]	; 0x64
 8007ac2:	e01d      	b.n	8007b00 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d90b      	bls.n	8007ae4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	8812      	ldrh	r2, [r2, #0]
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007adc:	1c9a      	adds	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	665a      	str	r2, [r3, #100]	; 0x64
 8007ae2:	e00d      	b.n	8007b00 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1c2      	bne.n	8007aa4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f926 	bl	8007d70 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7f9 f9c0 	bl	8000ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007b3c:	e0e3      	b.n	8007d06 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007b3e:	7cfb      	ldrb	r3, [r7, #19]
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d103      	bne.n	8007b4c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8ef 	bl	8007d28 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007b4a:	e0d9      	b.n	8007d00 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007b4c:	7cfb      	ldrb	r3, [r7, #19]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d103      	bne.n	8007b5a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7f9 f982 	bl	8000e5c <HAL_SPI_RxCpltCallback>
    return;
 8007b58:	e0d2      	b.n	8007d00 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007b5a:	7cfb      	ldrb	r3, [r7, #19]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	f040 80cf 	bne.w	8007d00 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8d6 	bl	8007d14 <HAL_SPI_TxCpltCallback>
    return;
 8007b68:	e0ca      	b.n	8007d00 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00d      	beq.n	8007b90 <HAL_SPI_IRQHandler+0x23c>
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d008      	beq.n	8007b90 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699a      	ldr	r2, [r3, #24]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b8c:	619a      	str	r2, [r3, #24]

    return;
 8007b8e:	e0ba      	b.n	8007d06 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80b5 	beq.w	8007d06 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00f      	beq.n	8007bc6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	f043 0204 	orr.w	r2, r3, #4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	699a      	ldr	r2, [r3, #24]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00f      	beq.n	8007bf0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd6:	f043 0201 	orr.w	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00f      	beq.n	8007c1a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c00:	f043 0208 	orr.w	r2, r3, #8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c18:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0220 	orr.w	r2, r2, #32
 8007c42:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d05a      	beq.n	8007d04 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6919      	ldr	r1, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b28      	ldr	r3, [pc, #160]	; (8007d0c <HAL_SPI_IRQHandler+0x3b8>)
 8007c6a:	400b      	ands	r3, r1
 8007c6c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c78:	d138      	bne.n	8007cec <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c88:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c96:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <HAL_SPI_IRQHandler+0x3bc>)
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fb fa96 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d020      	beq.n	8007d04 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc6:	4a12      	ldr	r2, [pc, #72]	; (8007d10 <HAL_SPI_IRQHandler+0x3bc>)
 8007cc8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fb fa7e 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d014      	beq.n	8007d04 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007cea:	e00b      	b.n	8007d04 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7f9 f8e1 	bl	8000ebc <HAL_SPI_ErrorCallback>
    return;
 8007cfa:	e003      	b.n	8007d04 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007cfc:	bf00      	nop
 8007cfe:	e002      	b.n	8007d06 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007d04:	bf00      	nop
  }
}
 8007d06:	3728      	adds	r7, #40	; 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	fffffc94 	.word	0xfffffc94
 8007d10:	08007d3d 	.word	0x08007d3d

08007d14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7f9 f8aa 	bl	8000ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0208 	orr.w	r2, r2, #8
 8007d8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0210 	orr.w	r2, r2, #16
 8007d9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6919      	ldr	r1, [r3, #16]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b3c      	ldr	r3, [pc, #240]	; (8007eac <SPI_CloseTransfer+0x13c>)
 8007dbc:	400b      	ands	r3, r1
 8007dbe:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007dce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d014      	beq.n	8007e06 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00f      	beq.n	8007e06 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0220 	orr.w	r2, r2, #32
 8007e04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d014      	beq.n	8007e3c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00f      	beq.n	8007e3c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e22:	f043 0204 	orr.w	r2, r3, #4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00f      	beq.n	8007e66 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4c:	f043 0201 	orr.w	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	699a      	ldr	r2, [r3, #24]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00f      	beq.n	8007e90 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e76:	f043 0208 	orr.w	r2, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	fffffc90 	.word	0xfffffc90

08007eb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	3307      	adds	r3, #7
 8007ece:	08db      	lsrs	r3, r3, #3
 8007ed0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e042      	b.n	8007f7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7f9 f990 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2224      	movs	r2, #36	; 0x24
 8007f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb7d 	bl	8008628 <UART_SetConfig>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e022      	b.n	8007f7e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 f8d1 	bl	80090e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 f958 	bl	800922c <UART_CheckIdleState>
 8007f7c:	4603      	mov	r3, r0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d168      	bne.n	8008072 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_UART_Transmit_DMA+0x24>
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e061      	b.n	8008074 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Transmit_DMA+0x36>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e05a      	b.n	8008074 <HAL_UART_Transmit_DMA+0xec>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2221      	movs	r2, #33	; 0x21
 8007fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d02c      	beq.n	800804e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff8:	4a20      	ldr	r2, [pc, #128]	; (800807c <HAL_UART_Transmit_DMA+0xf4>)
 8007ffa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008000:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <HAL_UART_Transmit_DMA+0xf8>)
 8008002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008008:	4a1e      	ldr	r2, [pc, #120]	; (8008084 <HAL_UART_Transmit_DMA+0xfc>)
 800800a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008010:	2200      	movs	r2, #0
 8008012:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801c:	4619      	mov	r1, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3328      	adds	r3, #40	; 0x28
 8008024:	461a      	mov	r2, r3
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	f7fa fb4a 	bl	80026c0 <HAL_DMA_Start_IT>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00d      	beq.n	800804e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2210      	movs	r2, #16
 8008036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e012      	b.n	8008074 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2240      	movs	r2, #64	; 0x40
 8008054:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800806c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e000      	b.n	8008074 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008072:	2302      	movs	r3, #2
  }
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	08009465 	.word	0x08009465
 8008080:	080094b5 	.word	0x080094b5
 8008084:	080094d1 	.word	0x080094d1

08008088 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80080ae:	4013      	ands	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d118      	bne.n	80080ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d013      	beq.n	80080ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8282 	beq.w	80085e4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
      }
      return;
 80080e8:	e27c      	b.n	80085e4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80ef 	beq.w	80082d0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4b73      	ldr	r3, [pc, #460]	; (80082c4 <HAL_UART_IRQHandler+0x23c>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4b72      	ldr	r3, [pc, #456]	; (80082c8 <HAL_UART_IRQHandler+0x240>)
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80e4 	beq.w	80082d0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d010      	beq.n	8008134 <HAL_UART_IRQHandler+0xac>
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2201      	movs	r2, #1
 8008122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812a:	f043 0201 	orr.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d010      	beq.n	8008160 <HAL_UART_IRQHandler+0xd8>
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2202      	movs	r2, #2
 800814e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008156:	f043 0204 	orr.w	r2, r3, #4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d010      	beq.n	800818c <HAL_UART_IRQHandler+0x104>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2204      	movs	r2, #4
 800817a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008182:	f043 0202 	orr.w	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d015      	beq.n	80081c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d104      	bne.n	80081aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4b48      	ldr	r3, [pc, #288]	; (80082c4 <HAL_UART_IRQHandler+0x23c>)
 80081a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00b      	beq.n	80081c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2208      	movs	r2, #8
 80081b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b8:	f043 0208 	orr.w	r2, r3, #8
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <HAL_UART_IRQHandler+0x168>
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00c      	beq.n	80081f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e6:	f043 0220 	orr.w	r2, r3, #32
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 81f6 	beq.w	80085e8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d011      	beq.n	800822a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008230:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	d004      	beq.n	800824a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008246:	2b00      	cmp	r3, #0
 8008248:	d031      	beq.n	80082ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f8d8 	bl	8009400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	d123      	bne.n	80082a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800826c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827a:	4a14      	ldr	r2, [pc, #80]	; (80082cc <HAL_UART_IRQHandler+0x244>)
 800827c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008282:	4618      	mov	r0, r3
 8008284:	f7fa ffa4 	bl	80031d0 <HAL_DMA_Abort_IT>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d017      	beq.n	80082be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	e00f      	b.n	80082be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7f8 fe2c 	bl	8000efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a4:	e00b      	b.n	80082be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7f8 fe28 	bl	8000efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ac:	e007      	b.n	80082be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f8 fe24 	bl	8000efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80082bc:	e194      	b.n	80085e8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082be:	bf00      	nop
    return;
 80082c0:	e192      	b.n	80085e8 <HAL_UART_IRQHandler+0x560>
 80082c2:	bf00      	nop
 80082c4:	10000001 	.word	0x10000001
 80082c8:	04000120 	.word	0x04000120
 80082cc:	08009551 	.word	0x08009551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	f040 810f 	bne.w	80084f8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8109 	beq.w	80084f8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8103 	beq.w	80084f8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2210      	movs	r2, #16
 80082f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	f040 80bb 	bne.w	8008480 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a96      	ldr	r2, [pc, #600]	; (800856c <HAL_UART_IRQHandler+0x4e4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d059      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a94      	ldr	r2, [pc, #592]	; (8008570 <HAL_UART_IRQHandler+0x4e8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d053      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a92      	ldr	r2, [pc, #584]	; (8008574 <HAL_UART_IRQHandler+0x4ec>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d04d      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a90      	ldr	r2, [pc, #576]	; (8008578 <HAL_UART_IRQHandler+0x4f0>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d047      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a8e      	ldr	r2, [pc, #568]	; (800857c <HAL_UART_IRQHandler+0x4f4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d041      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a8c      	ldr	r2, [pc, #560]	; (8008580 <HAL_UART_IRQHandler+0x4f8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d03b      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a8a      	ldr	r2, [pc, #552]	; (8008584 <HAL_UART_IRQHandler+0x4fc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d035      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a88      	ldr	r2, [pc, #544]	; (8008588 <HAL_UART_IRQHandler+0x500>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d02f      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a86      	ldr	r2, [pc, #536]	; (800858c <HAL_UART_IRQHandler+0x504>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d029      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a84      	ldr	r2, [pc, #528]	; (8008590 <HAL_UART_IRQHandler+0x508>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d023      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a82      	ldr	r2, [pc, #520]	; (8008594 <HAL_UART_IRQHandler+0x50c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01d      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a80      	ldr	r2, [pc, #512]	; (8008598 <HAL_UART_IRQHandler+0x510>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d017      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a7e      	ldr	r2, [pc, #504]	; (800859c <HAL_UART_IRQHandler+0x514>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d011      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a7c      	ldr	r2, [pc, #496]	; (80085a0 <HAL_UART_IRQHandler+0x518>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00b      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7a      	ldr	r2, [pc, #488]	; (80085a4 <HAL_UART_IRQHandler+0x51c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d005      	beq.n	80083ca <HAL_UART_IRQHandler+0x342>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a78      	ldr	r2, [pc, #480]	; (80085a8 <HAL_UART_IRQHandler+0x520>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d105      	bne.n	80083d6 <HAL_UART_IRQHandler+0x34e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	e004      	b.n	80083e0 <HAL_UART_IRQHandler+0x358>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80083e2:	893b      	ldrh	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8101 	beq.w	80085ec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083f0:	893a      	ldrh	r2, [r7, #8]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f080 80fa 	bcs.w	80085ec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	893a      	ldrh	r2, [r7, #8]
 80083fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840a:	d02b      	beq.n	8008464 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800841a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0201 	bic.w	r2, r2, #1
 800842a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800843a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0210 	bic.w	r2, r2, #16
 8008458:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845e:	4618      	mov	r0, r3
 8008460:	f7fa fb98 	bl	8002b94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008470:	b29b      	uxth	r3, r3
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	b29b      	uxth	r3, r3
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8c9 	bl	8008610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800847e:	e0b5      	b.n	80085ec <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800848c:	b29b      	uxth	r3, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 80a8 	beq.w	80085f0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80084a0:	897b      	ldrh	r3, [r7, #10]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 80a4 	beq.w	80085f0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6899      	ldr	r1, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b3a      	ldr	r3, [pc, #232]	; (80085ac <HAL_UART_IRQHandler+0x524>)
 80084c4:	400b      	ands	r3, r1
 80084c6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0210 	bic.w	r2, r2, #16
 80084ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084ec:	897b      	ldrh	r3, [r7, #10]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f88d 	bl	8008610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084f6:	e07b      	b.n	80085f0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00d      	beq.n	800851e <HAL_UART_IRQHandler+0x496>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 f84a 	bl	80095b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800851c:	e06b      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008524:	2b00      	cmp	r3, #0
 8008526:	d012      	beq.n	800854e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d104      	bne.n	800853c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008540:	2b00      	cmp	r3, #0
 8008542:	d057      	beq.n	80085f4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
    }
    return;
 800854c:	e052      	b.n	80085f4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d02b      	beq.n	80085b0 <HAL_UART_IRQHandler+0x528>
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d026      	beq.n	80085b0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 f80a 	bl	800957c <UART_EndTransmit_IT>
    return;
 8008568:	e045      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
 800856a:	bf00      	nop
 800856c:	40020010 	.word	0x40020010
 8008570:	40020028 	.word	0x40020028
 8008574:	40020040 	.word	0x40020040
 8008578:	40020058 	.word	0x40020058
 800857c:	40020070 	.word	0x40020070
 8008580:	40020088 	.word	0x40020088
 8008584:	400200a0 	.word	0x400200a0
 8008588:	400200b8 	.word	0x400200b8
 800858c:	40020410 	.word	0x40020410
 8008590:	40020428 	.word	0x40020428
 8008594:	40020440 	.word	0x40020440
 8008598:	40020458 	.word	0x40020458
 800859c:	40020470 	.word	0x40020470
 80085a0:	40020488 	.word	0x40020488
 80085a4:	400204a0 	.word	0x400204a0
 80085a8:	400204b8 	.word	0x400204b8
 80085ac:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d008      	beq.n	80085cc <HAL_UART_IRQHandler+0x544>
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f807 	bl	80095d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085ca:	e014      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00f      	beq.n	80085f6 <HAL_UART_IRQHandler+0x56e>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	da0c      	bge.n	80085f6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fff1 	bl	80095c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e2:	e008      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80085e4:	bf00      	nop
 80085e6:	e006      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80085e8:	bf00      	nop
 80085ea:	e004      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80085ec:	bf00      	nop
 80085ee:	e002      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80085f4:	bf00      	nop
  }
}
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008628:	b5b0      	push	{r4, r5, r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	431a      	orrs	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	4313      	orrs	r3, r2
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	4bbf      	ldr	r3, [pc, #764]	; (8008954 <UART_SetConfig+0x32c>)
 8008656:	4013      	ands	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800865e:	430b      	orrs	r3, r1
 8008660:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4ab5      	ldr	r2, [pc, #724]	; (8008958 <UART_SetConfig+0x330>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868e:	4313      	orrs	r3, r2
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	4bb0      	ldr	r3, [pc, #704]	; (800895c <UART_SetConfig+0x334>)
 800869a:	4013      	ands	r3, r2
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086a2:	430b      	orrs	r3, r1
 80086a4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f023 010f 	bic.w	r1, r3, #15
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4aa7      	ldr	r2, [pc, #668]	; (8008960 <UART_SetConfig+0x338>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d176      	bne.n	80087b4 <UART_SetConfig+0x18c>
 80086c6:	4ba7      	ldr	r3, [pc, #668]	; (8008964 <UART_SetConfig+0x33c>)
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ce:	2b28      	cmp	r3, #40	; 0x28
 80086d0:	d86c      	bhi.n	80087ac <UART_SetConfig+0x184>
 80086d2:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <UART_SetConfig+0xb0>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	0800877d 	.word	0x0800877d
 80086dc:	080087ad 	.word	0x080087ad
 80086e0:	080087ad 	.word	0x080087ad
 80086e4:	080087ad 	.word	0x080087ad
 80086e8:	080087ad 	.word	0x080087ad
 80086ec:	080087ad 	.word	0x080087ad
 80086f0:	080087ad 	.word	0x080087ad
 80086f4:	080087ad 	.word	0x080087ad
 80086f8:	08008785 	.word	0x08008785
 80086fc:	080087ad 	.word	0x080087ad
 8008700:	080087ad 	.word	0x080087ad
 8008704:	080087ad 	.word	0x080087ad
 8008708:	080087ad 	.word	0x080087ad
 800870c:	080087ad 	.word	0x080087ad
 8008710:	080087ad 	.word	0x080087ad
 8008714:	080087ad 	.word	0x080087ad
 8008718:	0800878d 	.word	0x0800878d
 800871c:	080087ad 	.word	0x080087ad
 8008720:	080087ad 	.word	0x080087ad
 8008724:	080087ad 	.word	0x080087ad
 8008728:	080087ad 	.word	0x080087ad
 800872c:	080087ad 	.word	0x080087ad
 8008730:	080087ad 	.word	0x080087ad
 8008734:	080087ad 	.word	0x080087ad
 8008738:	08008795 	.word	0x08008795
 800873c:	080087ad 	.word	0x080087ad
 8008740:	080087ad 	.word	0x080087ad
 8008744:	080087ad 	.word	0x080087ad
 8008748:	080087ad 	.word	0x080087ad
 800874c:	080087ad 	.word	0x080087ad
 8008750:	080087ad 	.word	0x080087ad
 8008754:	080087ad 	.word	0x080087ad
 8008758:	0800879d 	.word	0x0800879d
 800875c:	080087ad 	.word	0x080087ad
 8008760:	080087ad 	.word	0x080087ad
 8008764:	080087ad 	.word	0x080087ad
 8008768:	080087ad 	.word	0x080087ad
 800876c:	080087ad 	.word	0x080087ad
 8008770:	080087ad 	.word	0x080087ad
 8008774:	080087ad 	.word	0x080087ad
 8008778:	080087a5 	.word	0x080087a5
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008782:	e222      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878a:	e21e      	b.n	8008bca <UART_SetConfig+0x5a2>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008792:	e21a      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879a:	e216      	b.n	8008bca <UART_SetConfig+0x5a2>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a2:	e212      	b.n	8008bca <UART_SetConfig+0x5a2>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087aa:	e20e      	b.n	8008bca <UART_SetConfig+0x5a2>
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087b2:	e20a      	b.n	8008bca <UART_SetConfig+0x5a2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a6b      	ldr	r2, [pc, #428]	; (8008968 <UART_SetConfig+0x340>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d130      	bne.n	8008820 <UART_SetConfig+0x1f8>
 80087be:	4b69      	ldr	r3, [pc, #420]	; (8008964 <UART_SetConfig+0x33c>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d826      	bhi.n	8008818 <UART_SetConfig+0x1f0>
 80087ca:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0x1a8>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	08008801 	.word	0x08008801
 80087e0:	08008809 	.word	0x08008809
 80087e4:	08008811 	.word	0x08008811
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ee:	e1ec      	b.n	8008bca <UART_SetConfig+0x5a2>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f6:	e1e8      	b.n	8008bca <UART_SetConfig+0x5a2>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fe:	e1e4      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008806:	e1e0      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008808:	2320      	movs	r3, #32
 800880a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880e:	e1dc      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008816:	e1d8      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881e:	e1d4      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a51      	ldr	r2, [pc, #324]	; (800896c <UART_SetConfig+0x344>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d130      	bne.n	800888c <UART_SetConfig+0x264>
 800882a:	4b4e      	ldr	r3, [pc, #312]	; (8008964 <UART_SetConfig+0x33c>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b05      	cmp	r3, #5
 8008834:	d826      	bhi.n	8008884 <UART_SetConfig+0x25c>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x214>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008855 	.word	0x08008855
 8008840:	0800885d 	.word	0x0800885d
 8008844:	08008865 	.word	0x08008865
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008875 	.word	0x08008875
 8008850:	0800887d 	.word	0x0800887d
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885a:	e1b6      	b.n	8008bca <UART_SetConfig+0x5a2>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008862:	e1b2      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886a:	e1ae      	b.n	8008bca <UART_SetConfig+0x5a2>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008872:	e1aa      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008874:	2320      	movs	r3, #32
 8008876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887a:	e1a6      	b.n	8008bca <UART_SetConfig+0x5a2>
 800887c:	2340      	movs	r3, #64	; 0x40
 800887e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008882:	e1a2      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888a:	e19e      	b.n	8008bca <UART_SetConfig+0x5a2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a37      	ldr	r2, [pc, #220]	; (8008970 <UART_SetConfig+0x348>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d130      	bne.n	80088f8 <UART_SetConfig+0x2d0>
 8008896:	4b33      	ldr	r3, [pc, #204]	; (8008964 <UART_SetConfig+0x33c>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d826      	bhi.n	80088f0 <UART_SetConfig+0x2c8>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x280>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088e1 	.word	0x080088e1
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c6:	e180      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ce:	e17c      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d6:	e178      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088de:	e174      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088e0:	2320      	movs	r3, #32
 80088e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e6:	e170      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ee:	e16c      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088f0:	2380      	movs	r3, #128	; 0x80
 80088f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f6:	e168      	b.n	8008bca <UART_SetConfig+0x5a2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1d      	ldr	r2, [pc, #116]	; (8008974 <UART_SetConfig+0x34c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d142      	bne.n	8008988 <UART_SetConfig+0x360>
 8008902:	4b18      	ldr	r3, [pc, #96]	; (8008964 <UART_SetConfig+0x33c>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b05      	cmp	r3, #5
 800890c:	d838      	bhi.n	8008980 <UART_SetConfig+0x358>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <UART_SetConfig+0x2ec>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	0800892d 	.word	0x0800892d
 8008918:	08008935 	.word	0x08008935
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008945 	.word	0x08008945
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008979 	.word	0x08008979
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008932:	e14a      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893a:	e146      	b.n	8008bca <UART_SetConfig+0x5a2>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008942:	e142      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894a:	e13e      	b.n	8008bca <UART_SetConfig+0x5a2>
 800894c:	2320      	movs	r3, #32
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e13a      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008954:	cfff69f3 	.word	0xcfff69f3
 8008958:	58000c00 	.word	0x58000c00
 800895c:	11fff4ff 	.word	0x11fff4ff
 8008960:	40011000 	.word	0x40011000
 8008964:	58024400 	.word	0x58024400
 8008968:	40004400 	.word	0x40004400
 800896c:	40004800 	.word	0x40004800
 8008970:	40004c00 	.word	0x40004c00
 8008974:	40005000 	.word	0x40005000
 8008978:	2340      	movs	r3, #64	; 0x40
 800897a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897e:	e124      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008980:	2380      	movs	r3, #128	; 0x80
 8008982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008986:	e120      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4acc      	ldr	r2, [pc, #816]	; (8008cc0 <UART_SetConfig+0x698>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d176      	bne.n	8008a80 <UART_SetConfig+0x458>
 8008992:	4bcc      	ldr	r3, [pc, #816]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800899a:	2b28      	cmp	r3, #40	; 0x28
 800899c:	d86c      	bhi.n	8008a78 <UART_SetConfig+0x450>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0x37c>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a49 	.word	0x08008a49
 80089a8:	08008a79 	.word	0x08008a79
 80089ac:	08008a79 	.word	0x08008a79
 80089b0:	08008a79 	.word	0x08008a79
 80089b4:	08008a79 	.word	0x08008a79
 80089b8:	08008a79 	.word	0x08008a79
 80089bc:	08008a79 	.word	0x08008a79
 80089c0:	08008a79 	.word	0x08008a79
 80089c4:	08008a51 	.word	0x08008a51
 80089c8:	08008a79 	.word	0x08008a79
 80089cc:	08008a79 	.word	0x08008a79
 80089d0:	08008a79 	.word	0x08008a79
 80089d4:	08008a79 	.word	0x08008a79
 80089d8:	08008a79 	.word	0x08008a79
 80089dc:	08008a79 	.word	0x08008a79
 80089e0:	08008a79 	.word	0x08008a79
 80089e4:	08008a59 	.word	0x08008a59
 80089e8:	08008a79 	.word	0x08008a79
 80089ec:	08008a79 	.word	0x08008a79
 80089f0:	08008a79 	.word	0x08008a79
 80089f4:	08008a79 	.word	0x08008a79
 80089f8:	08008a79 	.word	0x08008a79
 80089fc:	08008a79 	.word	0x08008a79
 8008a00:	08008a79 	.word	0x08008a79
 8008a04:	08008a61 	.word	0x08008a61
 8008a08:	08008a79 	.word	0x08008a79
 8008a0c:	08008a79 	.word	0x08008a79
 8008a10:	08008a79 	.word	0x08008a79
 8008a14:	08008a79 	.word	0x08008a79
 8008a18:	08008a79 	.word	0x08008a79
 8008a1c:	08008a79 	.word	0x08008a79
 8008a20:	08008a79 	.word	0x08008a79
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a79 	.word	0x08008a79
 8008a2c:	08008a79 	.word	0x08008a79
 8008a30:	08008a79 	.word	0x08008a79
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a79 	.word	0x08008a79
 8008a3c:	08008a79 	.word	0x08008a79
 8008a40:	08008a79 	.word	0x08008a79
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e0bc      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a56:	e0b8      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5e:	e0b4      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	e0b0      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	e0ac      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a76:	e0a8      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7e:	e0a4      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a90      	ldr	r2, [pc, #576]	; (8008cc8 <UART_SetConfig+0x6a0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d130      	bne.n	8008aec <UART_SetConfig+0x4c4>
 8008a8a:	4b8e      	ldr	r3, [pc, #568]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d826      	bhi.n	8008ae4 <UART_SetConfig+0x4bc>
 8008a96:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x474>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ac5 	.word	0x08008ac5
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008add 	.word	0x08008add
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aba:	e086      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008abc:	2304      	movs	r3, #4
 8008abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac2:	e082      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e07e      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad2:	e07a      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ada:	e076      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008adc:	2340      	movs	r3, #64	; 0x40
 8008ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae2:	e072      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008ae4:	2380      	movs	r3, #128	; 0x80
 8008ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aea:	e06e      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a76      	ldr	r2, [pc, #472]	; (8008ccc <UART_SetConfig+0x6a4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d130      	bne.n	8008b58 <UART_SetConfig+0x530>
 8008af6:	4b73      	ldr	r3, [pc, #460]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d826      	bhi.n	8008b50 <UART_SetConfig+0x528>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x4e0>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b29 	.word	0x08008b29
 8008b10:	08008b31 	.word	0x08008b31
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b41 	.word	0x08008b41
 8008b1c:	08008b49 	.word	0x08008b49
 8008b20:	2300      	movs	r3, #0
 8008b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b26:	e050      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e04c      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b30:	2308      	movs	r3, #8
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e048      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3e:	e044      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b40:	2320      	movs	r3, #32
 8008b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b46:	e040      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b48:	2340      	movs	r3, #64	; 0x40
 8008b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4e:	e03c      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b50:	2380      	movs	r3, #128	; 0x80
 8008b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b56:	e038      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a5c      	ldr	r2, [pc, #368]	; (8008cd0 <UART_SetConfig+0x6a8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d130      	bne.n	8008bc4 <UART_SetConfig+0x59c>
 8008b62:	4b58      	ldr	r3, [pc, #352]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b05      	cmp	r3, #5
 8008b6c:	d826      	bhi.n	8008bbc <UART_SetConfig+0x594>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <UART_SetConfig+0x54c>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b8d 	.word	0x08008b8d
 8008b78:	08008b95 	.word	0x08008b95
 8008b7c:	08008b9d 	.word	0x08008b9d
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bad 	.word	0x08008bad
 8008b88:	08008bb5 	.word	0x08008bb5
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e01a      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b94:	2304      	movs	r3, #4
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e016      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e012      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e00e      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008bac:	2320      	movs	r3, #32
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e00a      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008bb4:	2340      	movs	r3, #64	; 0x40
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bba:	e006      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008bbc:	2380      	movs	r3, #128	; 0x80
 8008bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc2:	e002      	b.n	8008bca <UART_SetConfig+0x5a2>
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a40      	ldr	r2, [pc, #256]	; (8008cd0 <UART_SetConfig+0x6a8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	f040 80ef 	bne.w	8008db4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	dc46      	bgt.n	8008c6c <UART_SetConfig+0x644>
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	f2c0 8081 	blt.w	8008ce6 <UART_SetConfig+0x6be>
 8008be4:	3b02      	subs	r3, #2
 8008be6:	2b1e      	cmp	r3, #30
 8008be8:	d87d      	bhi.n	8008ce6 <UART_SetConfig+0x6be>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <UART_SetConfig+0x5c8>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c73 	.word	0x08008c73
 8008bf4:	08008ce7 	.word	0x08008ce7
 8008bf8:	08008c7b 	.word	0x08008c7b
 8008bfc:	08008ce7 	.word	0x08008ce7
 8008c00:	08008ce7 	.word	0x08008ce7
 8008c04:	08008ce7 	.word	0x08008ce7
 8008c08:	08008c8b 	.word	0x08008c8b
 8008c0c:	08008ce7 	.word	0x08008ce7
 8008c10:	08008ce7 	.word	0x08008ce7
 8008c14:	08008ce7 	.word	0x08008ce7
 8008c18:	08008ce7 	.word	0x08008ce7
 8008c1c:	08008ce7 	.word	0x08008ce7
 8008c20:	08008ce7 	.word	0x08008ce7
 8008c24:	08008ce7 	.word	0x08008ce7
 8008c28:	08008c9b 	.word	0x08008c9b
 8008c2c:	08008ce7 	.word	0x08008ce7
 8008c30:	08008ce7 	.word	0x08008ce7
 8008c34:	08008ce7 	.word	0x08008ce7
 8008c38:	08008ce7 	.word	0x08008ce7
 8008c3c:	08008ce7 	.word	0x08008ce7
 8008c40:	08008ce7 	.word	0x08008ce7
 8008c44:	08008ce7 	.word	0x08008ce7
 8008c48:	08008ce7 	.word	0x08008ce7
 8008c4c:	08008ce7 	.word	0x08008ce7
 8008c50:	08008ce7 	.word	0x08008ce7
 8008c54:	08008ce7 	.word	0x08008ce7
 8008c58:	08008ce7 	.word	0x08008ce7
 8008c5c:	08008ce7 	.word	0x08008ce7
 8008c60:	08008ce7 	.word	0x08008ce7
 8008c64:	08008ce7 	.word	0x08008ce7
 8008c68:	08008cd9 	.word	0x08008cd9
 8008c6c:	2b40      	cmp	r3, #64	; 0x40
 8008c6e:	d036      	beq.n	8008cde <UART_SetConfig+0x6b6>
 8008c70:	e039      	b.n	8008ce6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c72:	f7fe f94b 	bl	8006f0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008c76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c78:	e03b      	b.n	8008cf2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7a:	f107 0314 	add.w	r3, r7, #20
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe f95a 	bl	8006f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c88:	e033      	b.n	8008cf2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe faa6 	bl	80071e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c98:	e02b      	b.n	8008cf2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d009      	beq.n	8008cba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ca6:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	08db      	lsrs	r3, r3, #3
 8008cac:	f003 0303 	and.w	r3, r3, #3
 8008cb0:	4a08      	ldr	r2, [pc, #32]	; (8008cd4 <UART_SetConfig+0x6ac>)
 8008cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cb8:	e01b      	b.n	8008cf2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008cba:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <UART_SetConfig+0x6ac>)
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cbe:	e018      	b.n	8008cf2 <UART_SetConfig+0x6ca>
 8008cc0:	40011400 	.word	0x40011400
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	40007800 	.word	0x40007800
 8008ccc:	40007c00 	.word	0x40007c00
 8008cd0:	58000c00 	.word	0x58000c00
 8008cd4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cd8:	4bc4      	ldr	r3, [pc, #784]	; (8008fec <UART_SetConfig+0x9c4>)
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cdc:	e009      	b.n	8008cf2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ce4:	e005      	b.n	8008cf2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008cf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 81da 	beq.w	80090ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	4abc      	ldr	r2, [pc, #752]	; (8008ff0 <UART_SetConfig+0x9c8>)
 8008d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d0c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	4413      	add	r3, r2
 8008d18:	6a3a      	ldr	r2, [r7, #32]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d305      	bcc.n	8008d2a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d903      	bls.n	8008d32 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d30:	e1bd      	b.n	80090ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	4618      	mov	r0, r3
 8008d36:	f04f 0100 	mov.w	r1, #0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	4aac      	ldr	r2, [pc, #688]	; (8008ff0 <UART_SetConfig+0x9c8>)
 8008d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f04f 0300 	mov.w	r3, #0
 8008d4a:	f7f7 fac5 	bl	80002d8 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4610      	mov	r0, r2
 8008d54:	4619      	mov	r1, r3
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	020b      	lsls	r3, r1, #8
 8008d60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d64:	0202      	lsls	r2, r0, #8
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	6849      	ldr	r1, [r1, #4]
 8008d6a:	0849      	lsrs	r1, r1, #1
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	f04f 0100 	mov.w	r1, #0
 8008d72:	1814      	adds	r4, r2, r0
 8008d74:	eb43 0501 	adc.w	r5, r3, r1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f04f 0300 	mov.w	r3, #0
 8008d82:	4620      	mov	r0, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	f7f7 faa7 	bl	80002d8 <__aeabi_uldivmod>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4613      	mov	r3, r2
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d98:	d308      	bcc.n	8008dac <UART_SetConfig+0x784>
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da0:	d204      	bcs.n	8008dac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	e180      	b.n	80090ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008db2:	e17c      	b.n	80090ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbc:	f040 80bf 	bne.w	8008f3e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	dc49      	bgt.n	8008e5c <UART_SetConfig+0x834>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db7c      	blt.n	8008ec6 <UART_SetConfig+0x89e>
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d87a      	bhi.n	8008ec6 <UART_SetConfig+0x89e>
 8008dd0:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <UART_SetConfig+0x7b0>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008e63 	.word	0x08008e63
 8008ddc:	08008e6b 	.word	0x08008e6b
 8008de0:	08008ec7 	.word	0x08008ec7
 8008de4:	08008ec7 	.word	0x08008ec7
 8008de8:	08008e73 	.word	0x08008e73
 8008dec:	08008ec7 	.word	0x08008ec7
 8008df0:	08008ec7 	.word	0x08008ec7
 8008df4:	08008ec7 	.word	0x08008ec7
 8008df8:	08008e83 	.word	0x08008e83
 8008dfc:	08008ec7 	.word	0x08008ec7
 8008e00:	08008ec7 	.word	0x08008ec7
 8008e04:	08008ec7 	.word	0x08008ec7
 8008e08:	08008ec7 	.word	0x08008ec7
 8008e0c:	08008ec7 	.word	0x08008ec7
 8008e10:	08008ec7 	.word	0x08008ec7
 8008e14:	08008ec7 	.word	0x08008ec7
 8008e18:	08008e93 	.word	0x08008e93
 8008e1c:	08008ec7 	.word	0x08008ec7
 8008e20:	08008ec7 	.word	0x08008ec7
 8008e24:	08008ec7 	.word	0x08008ec7
 8008e28:	08008ec7 	.word	0x08008ec7
 8008e2c:	08008ec7 	.word	0x08008ec7
 8008e30:	08008ec7 	.word	0x08008ec7
 8008e34:	08008ec7 	.word	0x08008ec7
 8008e38:	08008ec7 	.word	0x08008ec7
 8008e3c:	08008ec7 	.word	0x08008ec7
 8008e40:	08008ec7 	.word	0x08008ec7
 8008e44:	08008ec7 	.word	0x08008ec7
 8008e48:	08008ec7 	.word	0x08008ec7
 8008e4c:	08008ec7 	.word	0x08008ec7
 8008e50:	08008ec7 	.word	0x08008ec7
 8008e54:	08008ec7 	.word	0x08008ec7
 8008e58:	08008eb9 	.word	0x08008eb9
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d02e      	beq.n	8008ebe <UART_SetConfig+0x896>
 8008e60:	e031      	b.n	8008ec6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e62:	f7fd f8e7 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 8008e66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e68:	e033      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e6a:	f7fd f8f9 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8008e6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e70:	e02f      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe f85e 	bl	8006f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e80:	e027      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe f9aa 	bl	80071e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e90:	e01f      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e92:	4b58      	ldr	r3, [pc, #352]	; (8008ff4 <UART_SetConfig+0x9cc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e9e:	4b55      	ldr	r3, [pc, #340]	; (8008ff4 <UART_SetConfig+0x9cc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	08db      	lsrs	r3, r3, #3
 8008ea4:	f003 0303 	and.w	r3, r3, #3
 8008ea8:	4a53      	ldr	r2, [pc, #332]	; (8008ff8 <UART_SetConfig+0x9d0>)
 8008eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eb0:	e00f      	b.n	8008ed2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008eb2:	4b51      	ldr	r3, [pc, #324]	; (8008ff8 <UART_SetConfig+0x9d0>)
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eb6:	e00c      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008eb8:	4b4c      	ldr	r3, [pc, #304]	; (8008fec <UART_SetConfig+0x9c4>)
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ebc:	e009      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ec4:	e005      	b.n	8008ed2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80ea 	beq.w	80090ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	4a44      	ldr	r2, [pc, #272]	; (8008ff0 <UART_SetConfig+0x9c8>)
 8008ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eec:	005a      	lsls	r2, r3, #1
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	085b      	lsrs	r3, r3, #1
 8008ef4:	441a      	add	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	2b0f      	cmp	r3, #15
 8008f06:	d916      	bls.n	8008f36 <UART_SetConfig+0x90e>
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0e:	d212      	bcs.n	8008f36 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f023 030f 	bic.w	r3, r3, #15
 8008f18:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f32:	60da      	str	r2, [r3, #12]
 8008f34:	e0bb      	b.n	80090ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f3c:	e0b7      	b.n	80090ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	dc4a      	bgt.n	8008fdc <UART_SetConfig+0x9b4>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f2c0 8086 	blt.w	8009058 <UART_SetConfig+0xa30>
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	f200 8083 	bhi.w	8009058 <UART_SetConfig+0xa30>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <UART_SetConfig+0x930>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008fe3 	.word	0x08008fe3
 8008f5c:	08008ffd 	.word	0x08008ffd
 8008f60:	08009059 	.word	0x08009059
 8008f64:	08009059 	.word	0x08009059
 8008f68:	08009005 	.word	0x08009005
 8008f6c:	08009059 	.word	0x08009059
 8008f70:	08009059 	.word	0x08009059
 8008f74:	08009059 	.word	0x08009059
 8008f78:	08009015 	.word	0x08009015
 8008f7c:	08009059 	.word	0x08009059
 8008f80:	08009059 	.word	0x08009059
 8008f84:	08009059 	.word	0x08009059
 8008f88:	08009059 	.word	0x08009059
 8008f8c:	08009059 	.word	0x08009059
 8008f90:	08009059 	.word	0x08009059
 8008f94:	08009059 	.word	0x08009059
 8008f98:	08009025 	.word	0x08009025
 8008f9c:	08009059 	.word	0x08009059
 8008fa0:	08009059 	.word	0x08009059
 8008fa4:	08009059 	.word	0x08009059
 8008fa8:	08009059 	.word	0x08009059
 8008fac:	08009059 	.word	0x08009059
 8008fb0:	08009059 	.word	0x08009059
 8008fb4:	08009059 	.word	0x08009059
 8008fb8:	08009059 	.word	0x08009059
 8008fbc:	08009059 	.word	0x08009059
 8008fc0:	08009059 	.word	0x08009059
 8008fc4:	08009059 	.word	0x08009059
 8008fc8:	08009059 	.word	0x08009059
 8008fcc:	08009059 	.word	0x08009059
 8008fd0:	08009059 	.word	0x08009059
 8008fd4:	08009059 	.word	0x08009059
 8008fd8:	0800904b 	.word	0x0800904b
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d037      	beq.n	8009050 <UART_SetConfig+0xa28>
 8008fe0:	e03a      	b.n	8009058 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe2:	f7fd f827 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 8008fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fe8:	e03c      	b.n	8009064 <UART_SetConfig+0xa3c>
 8008fea:	bf00      	nop
 8008fec:	003d0900 	.word	0x003d0900
 8008ff0:	0800988c 	.word	0x0800988c
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ffc:	f7fd f830 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8009000:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009002:	e02f      	b.n	8009064 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	4618      	mov	r0, r3
 800900a:	f7fd ff95 	bl	8006f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009012:	e027      	b.n	8009064 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009014:	f107 0308 	add.w	r3, r7, #8
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe f8e1 	bl	80071e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009022:	e01f      	b.n	8009064 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009024:	4b2c      	ldr	r3, [pc, #176]	; (80090d8 <UART_SetConfig+0xab0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d009      	beq.n	8009044 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009030:	4b29      	ldr	r3, [pc, #164]	; (80090d8 <UART_SetConfig+0xab0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	08db      	lsrs	r3, r3, #3
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	4a28      	ldr	r2, [pc, #160]	; (80090dc <UART_SetConfig+0xab4>)
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009042:	e00f      	b.n	8009064 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009044:	4b25      	ldr	r3, [pc, #148]	; (80090dc <UART_SetConfig+0xab4>)
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009048:	e00c      	b.n	8009064 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800904a:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <UART_SetConfig+0xab8>)
 800904c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800904e:	e009      	b.n	8009064 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009056:	e005      	b.n	8009064 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009062:	bf00      	nop
    }

    if (pclk != 0U)
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d021      	beq.n	80090ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <UART_SetConfig+0xabc>)
 8009070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009074:	461a      	mov	r2, r3
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	fbb3 f2f2 	udiv	r2, r3, r2
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	085b      	lsrs	r3, r3, #1
 8009082:	441a      	add	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	fbb2 f3f3 	udiv	r3, r2, r3
 800908c:	b29b      	uxth	r3, r3
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	2b0f      	cmp	r3, #15
 8009094:	d908      	bls.n	80090a8 <UART_SetConfig+0xa80>
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800909c:	d204      	bcs.n	80090a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a4:	60da      	str	r2, [r3, #12]
 80090a6:	e002      	b.n	80090ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3738      	adds	r7, #56	; 0x38
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bdb0      	pop	{r4, r5, r7, pc}
 80090d6:	bf00      	nop
 80090d8:	58024400 	.word	0x58024400
 80090dc:	03d09000 	.word	0x03d09000
 80090e0:	003d0900 	.word	0x003d0900
 80090e4:	0800988c 	.word	0x0800988c

080090e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00a      	beq.n	8009112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00a      	beq.n	8009156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01a      	beq.n	80091fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e6:	d10a      	bne.n	80091fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	605a      	str	r2, [r3, #4]
  }
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af02      	add	r7, sp, #8
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800923c:	f7f8 fc68 	bl	8001b10 <HAL_GetTick>
 8009240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b08      	cmp	r3, #8
 800924e:	d10e      	bne.n	800926e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f82f 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e025      	b.n	80092ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b04      	cmp	r3, #4
 800927a:	d10e      	bne.n	800929a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800927c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f819 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e00f      	b.n	80092ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	603b      	str	r3, [r7, #0]
 80092ce:	4613      	mov	r3, r2
 80092d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d2:	e062      	b.n	800939a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d05e      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092dc:	f7f8 fc18 	bl	8001b10 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d302      	bcc.n	80092f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d11d      	bne.n	800932e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009300:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0201 	bic.w	r2, r2, #1
 8009310:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2220      	movs	r2, #32
 8009316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e045      	b.n	80093ba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d02e      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800934a:	d126      	bne.n	800939a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009354:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009364:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e00f      	b.n	80093ba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69da      	ldr	r2, [r3, #28]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4013      	ands	r3, r2
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	bf0c      	ite	eq
 80093aa:	2301      	moveq	r3, #1
 80093ac:	2300      	movne	r3, #0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d08d      	beq.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80093d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	689a      	ldr	r2, [r3, #8]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80093e8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
	...

08009400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009416:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6899      	ldr	r1, [r3, #8]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <UART_EndRxTransfer+0x60>)
 8009424:	400b      	ands	r3, r1
 8009426:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0210 	bic.w	r2, r2, #16
 800943e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	effffffe 	.word	0xeffffffe

08009464 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947a:	d014      	beq.n	80094a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009492:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094a4:	e002      	b.n	80094ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7f7 fd18 	bl	8000edc <HAL_UART_TxCpltCallback>
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff f89a 	bl	80085fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f8:	2b80      	cmp	r3, #128	; 0x80
 80094fa:	d109      	bne.n	8009510 <UART_DMAError+0x40>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b21      	cmp	r3, #33	; 0x21
 8009500:	d106      	bne.n	8009510 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2200      	movs	r2, #0
 8009506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff ff59 	bl	80093c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d109      	bne.n	8009532 <UART_DMAError+0x62>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b22      	cmp	r3, #34	; 0x22
 8009522:	d106      	bne.n	8009532 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800952c:	6978      	ldr	r0, [r7, #20]
 800952e:	f7ff ff67 	bl	8009400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009538:	f043 0210 	orr.w	r2, r3, #16
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009542:	6978      	ldr	r0, [r7, #20]
 8009544:	f7f7 fcda 	bl	8000efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009548:	bf00      	nop
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7f7 fcc4 	bl	8000efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009592:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2220      	movs	r2, #32
 8009598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f7 fc9a 	bl	8000edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_UARTEx_EnableFifoMode+0x16>
 80095fe:	2302      	movs	r3, #2
 8009600:	e02b      	b.n	800965a <HAL_UARTEx_EnableFifoMode+0x6e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2224      	movs	r2, #36	; 0x24
 800960e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0201 	bic.w	r2, r2, #1
 8009628:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009630:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009638:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f88a 	bl	800975c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009672:	2b01      	cmp	r3, #1
 8009674:	d101      	bne.n	800967a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009676:	2302      	movs	r3, #2
 8009678:	e02d      	b.n	80096d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2224      	movs	r2, #36	; 0x24
 8009686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0201 	bic.w	r2, r2, #1
 80096a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f850 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e02d      	b.n	8009752 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2224      	movs	r2, #36	; 0x24
 8009702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0201 	bic.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f812 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009768:	2b00      	cmp	r3, #0
 800976a:	d108      	bne.n	800977e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800977c:	e031      	b.n	80097e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800977e:	2310      	movs	r3, #16
 8009780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009782:	2310      	movs	r3, #16
 8009784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	0e5b      	lsrs	r3, r3, #25
 800978e:	b2db      	uxtb	r3, r3
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	0f5b      	lsrs	r3, r3, #29
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	7b3a      	ldrb	r2, [r7, #12]
 80097aa:	4911      	ldr	r1, [pc, #68]	; (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ac:	5c8a      	ldrb	r2, [r1, r2]
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097b2:	7b3a      	ldrb	r2, [r7, #12]
 80097b4:	490f      	ldr	r1, [pc, #60]	; (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	7b7a      	ldrb	r2, [r7, #13]
 80097c8:	4909      	ldr	r1, [pc, #36]	; (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ca:	5c8a      	ldrb	r2, [r1, r2]
 80097cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097d0:	7b7a      	ldrb	r2, [r7, #13]
 80097d2:	4908      	ldr	r1, [pc, #32]	; (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	080098a4 	.word	0x080098a4
 80097f4:	080098ac 	.word	0x080098ac

080097f8 <__libc_init_array>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4d0d      	ldr	r5, [pc, #52]	; (8009830 <__libc_init_array+0x38>)
 80097fc:	4c0d      	ldr	r4, [pc, #52]	; (8009834 <__libc_init_array+0x3c>)
 80097fe:	1b64      	subs	r4, r4, r5
 8009800:	10a4      	asrs	r4, r4, #2
 8009802:	2600      	movs	r6, #0
 8009804:	42a6      	cmp	r6, r4
 8009806:	d109      	bne.n	800981c <__libc_init_array+0x24>
 8009808:	4d0b      	ldr	r5, [pc, #44]	; (8009838 <__libc_init_array+0x40>)
 800980a:	4c0c      	ldr	r4, [pc, #48]	; (800983c <__libc_init_array+0x44>)
 800980c:	f000 f820 	bl	8009850 <_init>
 8009810:	1b64      	subs	r4, r4, r5
 8009812:	10a4      	asrs	r4, r4, #2
 8009814:	2600      	movs	r6, #0
 8009816:	42a6      	cmp	r6, r4
 8009818:	d105      	bne.n	8009826 <__libc_init_array+0x2e>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009820:	4798      	blx	r3
 8009822:	3601      	adds	r6, #1
 8009824:	e7ee      	b.n	8009804 <__libc_init_array+0xc>
 8009826:	f855 3b04 	ldr.w	r3, [r5], #4
 800982a:	4798      	blx	r3
 800982c:	3601      	adds	r6, #1
 800982e:	e7f2      	b.n	8009816 <__libc_init_array+0x1e>
 8009830:	080098bc 	.word	0x080098bc
 8009834:	080098bc 	.word	0x080098bc
 8009838:	080098bc 	.word	0x080098bc
 800983c:	080098c0 	.word	0x080098c0

08009840 <memset>:
 8009840:	4402      	add	r2, r0
 8009842:	4603      	mov	r3, r0
 8009844:	4293      	cmp	r3, r2
 8009846:	d100      	bne.n	800984a <memset+0xa>
 8009848:	4770      	bx	lr
 800984a:	f803 1b01 	strb.w	r1, [r3], #1
 800984e:	e7f9      	b.n	8009844 <memset+0x4>

08009850 <_init>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr

0800985c <_fini>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr
