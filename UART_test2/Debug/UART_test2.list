
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cec  24000040  08009b18  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24001d2c  08009b18  00021d2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5de  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fb4  00000000  00000000  0003d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  000405e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  000413b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374ff  00000000  00000000  000420b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012f4f  00000000  00000000  000795af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f404  00000000  00000000  0008c4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001eb902  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038dc  00000000  00000000  001eb958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009a7c 	.word	0x08009a7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009a7c 	.word	0x08009a7c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
//	length of the recieve buffer array
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005da:	817b      	strh	r3, [r7, #10]
//	length of a half transfer of recieve buffer
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
//	length of transmit buffer
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
//	set the transmit buffer to a known value
	for (int i = 0; i < txCount; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e00f      	b.n	800060e <main+0x3e>
		aTxBuffer[i] = i % 16384;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4aaa      	ldr	r2, [pc, #680]	; (80008ac <main+0x2dc>)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i) {
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	69fa      	ldr	r2, [r7, #28]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4ba6      	ldr	r3, [pc, #664]	; (80008b0 <main+0x2e0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4ba0      	ldr	r3, [pc, #640]	; (80008b0 <main+0x2e0>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b9b      	ldr	r3, [pc, #620]	; (80008b0 <main+0x2e0>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a9a      	ldr	r2, [pc, #616]	; (80008b0 <main+0x2e0>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
	//  SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f001 fa92 	bl	8001b84 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f978 	bl	8000954 <SystemClock_Config>

//    initialize GPIO
	MX_GPIO_Init();
 8000664:	f000 fba0 	bl	8000da8 <MX_GPIO_Init>
//	initialize the compensation cell to improve slew rate
	HAL_EnableCompensationCell();
 8000668:	f001 fb5e 	bl	8001d28 <HAL_EnableCompensationCell>
//	initialize the DMA, must be done before other peripherals
	MX_DMA_Init();
 800066c:	f000 fb54 	bl	8000d18 <MX_DMA_Init>
//	initialize UART1, going to the ft232 interface
	MX_USART1_UART_Init();
 8000670:	f000 faa6 	bl	8000bc0 <MX_USART1_UART_Init>
//	initialize URT3, going to the STLINK interface
	MX_USART3_UART_Init();
 8000674:	f000 fafa 	bl	8000c6c <MX_USART3_UART_Init>

//	initialize SPI1 interface, going to the breadboard converter
	MX_SPI1_Init();
 8000678:	f000 f9f2 	bl	8000a60 <MX_SPI1_Init>
//	initialize the SPI2 interface, going to the pcb converter
    MX_SPI2_Init();
 800067c:	f000 fa48 	bl	8000b10 <MX_SPI2_Init>

//  stall until the user button is pressed
	while (UserButtonStatus == 0) {
 8000680:	e005      	b.n	800068e <main+0xbe>
		BSP_LED_Toggle(LED1);
 8000682:	2000      	movs	r0, #0
 8000684:	f001 f91a 	bl	80018bc <BSP_LED_Toggle>
		HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f001 fb0d 	bl	8001ca8 <HAL_Delay>
	while (UserButtonStatus == 0) {
 800068e:	4b89      	ldr	r3, [pc, #548]	; (80008b4 <main+0x2e4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f5      	beq.n	8000682 <main+0xb2>
	}
//	reset the user button status
	UserButtonStatus = 0;
 8000696:	4b87      	ldr	r3, [pc, #540]	; (80008b4 <main+0x2e4>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
//	reset LEDS
	BSP_LED_Off(LED1);
 800069c:	2000      	movs	r0, #0
 800069e:	f001 f8e3 	bl	8001868 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f8e0 	bl	8001868 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f001 f8dd 	bl	8001868 <BSP_LED_Off>

	/* Configure communication direction : 1Line */
	SPI_1LINE_RX(&hspi1);
 80006ae:	4b82      	ldr	r3, [pc, #520]	; (80008b8 <main+0x2e8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <main+0x2e8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006bc:	601a      	str	r2, [r3, #0]

//	configure the half transfer callback function to update the wTransferState value
	hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006be:	4b7e      	ldr	r3, [pc, #504]	; (80008b8 <main+0x2e8>)
 80006c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006c2:	4a7e      	ldr	r2, [pc, #504]	; (80008bc <main+0x2ec>)
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40

//	enable the transfer complete and half transfer interupts for SPI1
	SET_BIT(SPI1_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 80006c6:	4b7e      	ldr	r3, [pc, #504]	; (80008c0 <main+0x2f0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a7d      	ldr	r2, [pc, #500]	; (80008c0 <main+0x2f0>)
 80006cc:	f043 0318 	orr.w	r3, r3, #24
 80006d0:	6013      	str	r3, [r2, #0]
//	start the DMA transfer on SPI1, use HAL library to perform initial configurations
	if (HAL_DMA_Start(hspi1.hdmarx, (uint32_t) &hspi1.Instance->RXDR,
 80006d2:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <main+0x2e8>)
 80006d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80006d6:	4b78      	ldr	r3, [pc, #480]	; (80008b8 <main+0x2e8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3330      	adds	r3, #48	; 0x30
 80006dc:	4619      	mov	r1, r3
 80006de:	4a79      	ldr	r2, [pc, #484]	; (80008c4 <main+0x2f4>)
 80006e0:	897b      	ldrh	r3, [r7, #10]
 80006e2:	f001 ffcf 	bl	8002684 <HAL_DMA_Start>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00d      	beq.n	8000708 <main+0x138>
					(uint32_t) aRxBuffer, rxCount) != HAL_OK) {
//		if the DMA initalization was not OK, set the error bit
		SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80006ec:	4b72      	ldr	r3, [pc, #456]	; (80008b8 <main+0x2e8>)
 80006ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	4a70      	ldr	r2, [pc, #448]	; (80008b8 <main+0x2e8>)
 80006f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
//		reset SPI ready state
		hspi1.State = HAL_SPI_STATE_READY;
 80006fc:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <main+0x2e8>)
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
//		call our custom error handler
		Error_Handler();
 8000704:	f000 fc57 	bl	8000fb6 <Error_Handler>
	}

//	set the transfer size to 0 (unlimited)
	MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8000708:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <main+0x2e8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6859      	ldr	r1, [r3, #4]
 800070e:	4b6a      	ldr	r3, [pc, #424]	; (80008b8 <main+0x2e8>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <main+0x2f8>)
 8000714:	400b      	ands	r3, r1
 8000716:	6053      	str	r3, [r2, #4]

//	enable DMA requests on the SPI instance
	SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000718:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <main+0x2e8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <main+0x2e8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000726:	609a      	str	r2, [r3, #8]

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000728:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <main+0x2e8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	691a      	ldr	r2, [r3, #16]
 800072e:	4b62      	ldr	r3, [pc, #392]	; (80008b8 <main+0x2e8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000736:	611a      	str	r2, [r3, #16]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(&hspi1);
 8000738:	4b5f      	ldr	r3, [pc, #380]	; (80008b8 <main+0x2e8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <main+0x2e8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	601a      	str	r2, [r3, #0]

//	start the SPI transfers
	SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000748:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <main+0x2e8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <main+0x2e8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000756:	601a      	str	r2, [r3, #0]

//	wait for the first half of the transfer to complete
	while (wTransferState != TRANSFER_H_COMPLETE) {
 8000758:	e005      	b.n	8000766 <main+0x196>
//		toggle LED2 every 20 ms
		HAL_Delay(20);
 800075a:	2014      	movs	r0, #20
 800075c:	f001 faa4 	bl	8001ca8 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8000760:	2002      	movs	r0, #2
 8000762:	f001 f8ab 	bl	80018bc <BSP_LED_Toggle>
	while (wTransferState != TRANSFER_H_COMPLETE) {
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <main+0x2fc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d1f5      	bne.n	800075a <main+0x18a>
	}
//	reset transfer state
	wTransferState = TRANSFER_WAIT;
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <main+0x2fc>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
//	reset LEDs
	BSP_LED_Off(LED1);
 8000774:	2000      	movs	r0, #0
 8000776:	f001 f877 	bl	8001868 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800077a:	2001      	movs	r0, #1
 800077c:	f001 f874 	bl	8001868 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000780:	2002      	movs	r0, #2
 8000782:	f001 f871 	bl	8001868 <BSP_LED_Off>
//	transfer data from rxbuffer to tx buffer
//	j is the index for the rx buffer
	int j = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
	aTxBuffer[0] = aRxBuffer[0];
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <main+0x2f4>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <main+0x2dc>)
 8000792:	801a      	strh	r2, [r3, #0]
//	i is the index of the tx buffer
//	j increases by the oversampling ratio for each inciment in i
	for (int i = 1; i < txCount; ++i) {
 8000794:	2301      	movs	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00e      	b.n	80007b8 <main+0x1e8>
		j += OVERSAMPLING;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	3301      	adds	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
		aTxBuffer[i] = aRxBuffer[j];
 80007a0:	4a48      	ldr	r2, [pc, #288]	; (80008c4 <main+0x2f4>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	b299      	uxth	r1, r3
 80007aa:	4a40      	ldr	r2, [pc, #256]	; (80008ac <main+0x2dc>)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < txCount; ++i) {
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbec      	blt.n	800079a <main+0x1ca>
	}
//	Use the HAL driver to transmit the buffer over DMA
//	HAL will initialize many of the settings for us
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer))
 80007c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c4:	4939      	ldr	r1, [pc, #228]	; (80008ac <main+0x2dc>)
 80007c6:	4842      	ldr	r0, [pc, #264]	; (80008d0 <main+0x300>)
 80007c8:	f007 fcea 	bl	80081a0 <HAL_UART_Transmit_DMA>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x206>
			!= HAL_OK) {
//		if it fails, call our error handler
		Error_Handler();
 80007d2:	f000 fbf0 	bl	8000fb6 <Error_Handler>
	}
//	Suspend interupts that we no longer need, for the purpose of efficiency
//	suspend the systick
	HAL_SuspendTick();
 80007d6:	f001 fa8b 	bl	8001cf0 <HAL_SuspendTick>
//	suspend UART3 interupts
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 80007da:	2027      	movs	r0, #39	; 0x27
 80007dc:	f001 fbdb 	bl	8001f96 <HAL_NVIC_DisableIRQ>
//	suspend DMA interupts for the UART3 channel
	HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 80007e0:	200c      	movs	r0, #12
 80007e2:	f001 fbd8 	bl	8001f96 <HAL_NVIC_DisableIRQ>
//	suspend DMA interrupts for the SPI channel
	HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 80007e6:	2038      	movs	r0, #56	; 0x38
 80007e8:	f001 fbd5 	bl	8001f96 <HAL_NVIC_DisableIRQ>
//	reset LEDs
	BSP_LED_Off(LED1);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 f83b 	bl	8001868 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 f838 	bl	8001868 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f001 f835 	bl	8001868 <BSP_LED_Off>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		wait for the second half of the receive buffer to finish transferring
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
 80007fe:	bf00      	nop
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <main+0x304>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 0320 	and.w	r3, r3, #32
 8000808:	2b20      	cmp	r3, #32
 800080a:	d1f9      	bne.n	8000800 <main+0x230>
//		clear the transfer complete flag of the SPI channel
		DMA2->LIFCR = DMA_FLAG_TCIF0_4;
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <main+0x304>)
 800080e:	2220      	movs	r2, #32
 8000810:	609a      	str	r2, [r3, #8]
//		the rx buffer index starts at half way through the buffer and goes to the end
		j = rxOffset;
 8000812:	893b      	ldrh	r3, [r7, #8]
 8000814:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[j];
 8000816:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <main+0x2f4>)
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <main+0x2dc>)
 8000822:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e00e      	b.n	8000848 <main+0x278>
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//			j increases by the oversampling ratio for every increment in i
			j += OVERSAMPLING;
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3301      	adds	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 8000830:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <main+0x2f4>)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000838:	b299      	uxth	r1, r3
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <main+0x2dc>)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3301      	adds	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbec      	blt.n	800082a <main+0x25a>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 8000850:	bf00      	nop
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <main+0x308>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	2b40      	cmp	r3, #64	; 0x40
 800085c:	d1f9      	bne.n	8000852 <main+0x282>
//		reset the UART transfer complete flag
		USART3->ICR = UART_CLEAR_TCF;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <main+0x308>)
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	621a      	str	r2, [r3, #32]
//		reset the UART's DMA channel transfer complete and half transfer flags
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <main+0x30c>)
 8000866:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800086a:	609a      	str	r2, [r3, #8]
//		reenable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <main+0x310>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <main+0x310>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x308>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <main+0x308>)
 800087e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000882:	6093      	str	r3, [r2, #8]

//		wait for the first half of the receive buffer to be ready
		while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4) {}
 8000884:	bf00      	nop
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <main+0x304>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	2b10      	cmp	r3, #16
 8000890:	d1f9      	bne.n	8000886 <main+0x2b6>
//		reset the SPI DMA channel half transfer flag
		DMA2->LIFCR = DMA_FLAG_HTIF0_4;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <main+0x304>)
 8000894:	2210      	movs	r2, #16
 8000896:	609a      	str	r2, [r3, #8]
//		the starting index for the recieve buffer is 0
		j = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[0];
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <main+0x2f4>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b02      	ldr	r3, [pc, #8]	; (80008ac <main+0x2dc>)
 80008a4:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 80008a6:	2301      	movs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e02a      	b.n	8000902 <main+0x332>
 80008ac:	24000080 	.word	0x24000080
 80008b0:	e000ed00 	.word	0xe000ed00
 80008b4:	24000060 	.word	0x24000060
 80008b8:	24001b90 	.word	0x24001b90
 80008bc:	08000f5d 	.word	0x08000f5d
 80008c0:	40020410 	.word	0x40020410
 80008c4:	24000880 	.word	0x24000880
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	2400005c 	.word	0x2400005c
 80008d0:	24001908 	.word	0x24001908
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40004800 	.word	0x40004800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020028 	.word	0x40020028
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//            j increases by the oversampling ratio for each increment of i
			j += OVERSAMPLING;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	3301      	adds	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <main+0x370>)
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f2:	b299      	uxth	r1, r3
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <main+0x374>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbec      	blt.n	80008e4 <main+0x314>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) {}
 800090a:	bf00      	nop
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <main+0x378>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	2b40      	cmp	r3, #64	; 0x40
 8000916:	d1f9      	bne.n	800090c <main+0x33c>
//		clear the transfer complete flag of the UART
		USART3->ICR = UART_CLEAR_TCF;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <main+0x378>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	621a      	str	r2, [r3, #32]
//		clear the transfer complete and half transfer flags of the UART DMA channel
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <main+0x37c>)
 8000920:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000924:	609a      	str	r2, [r3, #8]
//		enable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <main+0x380>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <main+0x380>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <main+0x378>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <main+0x378>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6093      	str	r3, [r2, #8]
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
 800093e:	e75e      	b.n	80007fe <main+0x22e>
 8000940:	24000880 	.word	0x24000880
 8000944:	24000080 	.word	0x24000080
 8000948:	40004800 	.word	0x40004800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020028 	.word	0x40020028

08000954 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	; 0x70
 8000958:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	224c      	movs	r2, #76	; 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f009 f882 	bl	8009a6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f009 f87c 	bl	8009a6c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000974:	2002      	movs	r0, #2
 8000976:	f004 fcb5 	bl	80052e4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <SystemClock_Config+0x100>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <SystemClock_Config+0x100>)
 8000984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <SystemClock_Config+0x100>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <SystemClock_Config+0x104>)
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <SystemClock_Config+0x104>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <SystemClock_Config+0x104>)
 80009a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80009ac:	bf00      	nop
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <SystemClock_Config+0x100>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ba:	d1f8      	bne.n	80009ae <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <SystemClock_Config+0x108>)
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f023 0303 	bic.w	r3, r3, #3
 80009c4:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <SystemClock_Config+0x108>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80009cc:	2321      	movs	r3, #33	; 0x21
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009d6:	2301      	movs	r3, #1
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	2302      	movs	r3, #2
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 115;
 80009e6:	2373      	movs	r3, #115	; 0x73
 80009e8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fca6 	bl	8005358 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a12:	f000 fad0 	bl	8000fb6 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a16:	233f      	movs	r3, #63	; 0x3f
 8000a18:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a22:	2308      	movs	r3, #8
 8000a24:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 f89b 	bl	8005b78 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xf8>
		Error_Handler();
 8000a48:	f000 fab5 	bl	8000fb6 <Error_Handler>
	}

}
 8000a4c:	bf00      	nop
 8000a4e:	3770      	adds	r7, #112	; 0x70
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024800 	.word	0x58024800
 8000a58:	58000400 	.word	0x58000400
 8000a5c:	58024400 	.word	0x58024400

08000a60 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <MX_SPI1_Init+0xac>)
 8000a68:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a70:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a78:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a7c:	220d      	movs	r2, #13
 8000a7e:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a86:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a94:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.TxCRCInitializationPattern =
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_SPI1_Init+0xa8>)
 8000af4:	f006 ff2e 	bl	8007954 <HAL_SPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SPI1_Init+0xa2>
		Error_Handler();
 8000afe:	f000 fa5a 	bl	8000fb6 <Error_Handler>
	}

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24001b90 	.word	0x24001b90
 8000b0c:	40013000 	.word	0x40013000

08000b10 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi2.Instance = SPI1;
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b16:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <MX_SPI2_Init+0xac>)
 8000b18:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b20:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b28:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi2.Init.DataSize = SPI_DATASIZE_14BIT;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b2c:	220d      	movs	r2, #13
 8000b2e:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b36:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b44:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.TxCRCInitializationPattern =
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SPI2_Init+0xa8>)
 8000ba4:	f006 fed6 	bl	8007954 <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI2_Init+0xa2>
		Error_Handler();
 8000bae:	f000 fa02 	bl	8000fb6 <Error_Handler>
	}

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24001880 	.word	0x24001880
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bc6:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <MX_USART1_UART_Init+0xa4>)
 8000bc8:	601a      	str	r2, [r3, #0]
//	baud rate is peripheral clock divided by 8, check the ioc file
	huart1.Init.BaudRate = 11978688;
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <MX_USART1_UART_Init+0xa8>)
 8000bce:	605a      	str	r2, [r3, #4]
//	8 bits per word
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
//	1 stop bit
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
//	no parity check
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
//	UART in both transmit and receive
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000be4:	220c      	movs	r2, #12
 8000be6:	615a      	str	r2, [r3, #20]
//	no HW flow control
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
//	oversample by 8
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bf4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
//	divide the peripheral clock by 1
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
//	no advanced features
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
//	initialize peripheral with HAL library
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c08:	4815      	ldr	r0, [pc, #84]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000c0a:	f007 fa78 	bl	80080fe <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000c14:	f000 f9cf 	bl	8000fb6 <Error_Handler>
	}
//	initialize transfer fifo
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000c1c:	f008 fe37 	bl	800988e <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000c26:	f000 f9c6 	bl	8000fb6 <Error_Handler>
	}
//	initialize receive fifo
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000c2e:	f008 fe6c 	bl	800990a <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000c38:	f000 f9bd 	bl	8000fb6 <Error_Handler>
	}
//	enable fifo
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_USART1_UART_Init+0xa0>)
 8000c3e:	f008 fdeb 	bl	8009818 <HAL_UARTEx_EnableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000c48:	f000 f9b5 	bl	8000fb6 <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2025      	movs	r0, #37	; 0x25
 8000c52:	f001 f978 	bl	8001f46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c56:	2025      	movs	r0, #37	; 0x25
 8000c58:	f001 f98f 	bl	8001f7a <HAL_NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	24001b00 	.word	0x24001b00
 8000c64:	40011000 	.word	0x40011000
 8000c68:	00b6c7c0 	.word	0x00b6c7c0

08000c6c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <MX_USART3_UART_Init+0xa4>)
 8000c74:	601a      	str	r2, [r3, #0]
	//	baud rate is peripheral clock divided by 8, check the ioc file
		huart3.Init.BaudRate = 11978688;
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c78:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <MX_USART3_UART_Init+0xa8>)
 8000c7a:	605a      	str	r2, [r3, #4]
	//	8 bits per word
		huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
	//	1 stop bit
		huart3.Init.StopBits = UART_STOPBITS_1;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
	//	no parity check
		huart3.Init.Parity = UART_PARITY_NONE;
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
	//	UART in both transmit and receive
		huart3.Init.Mode = UART_MODE_TX_RX;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c90:	220c      	movs	r2, #12
 8000c92:	615a      	str	r2, [r3, #20]
	//	no HW flow control
		huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
	//	oversample by 8
		huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca0:	61da      	str	r2, [r3, #28]
		huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
	//	divide the peripheral clock by 1
		huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
	//	no advanced features
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
	//	initialize peripheral with HAL library
		if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000cb4:	4815      	ldr	r0, [pc, #84]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000cb6:	f007 fa22 	bl	80080fe <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x58>
			Error_Handler();
 8000cc0:	f000 f979 	bl	8000fb6 <Error_Handler>
		}
	//	initialize transfer fifo
		if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4811      	ldr	r0, [pc, #68]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000cc8:	f008 fde1 	bl	800988e <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x6a>
				!= HAL_OK) {
			Error_Handler();
 8000cd2:	f000 f970 	bl	8000fb6 <Error_Handler>
		}
	//	initialize receive fifo
		if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000cda:	f008 fe16 	bl	800990a <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x7c>
				!= HAL_OK) {
			Error_Handler();
 8000ce4:	f000 f967 	bl	8000fb6 <Error_Handler>
		}
	//	enable fifo
		if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK) {
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <MX_USART3_UART_Init+0xa0>)
 8000cea:	f008 fd95 	bl	8009818 <HAL_UARTEx_EnableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART3_UART_Init+0x8c>
			Error_Handler();
 8000cf4:	f000 f95f 	bl	8000fb6 <Error_Handler>
		}
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2027      	movs	r0, #39	; 0x27
 8000cfe:	f001 f922 	bl	8001f46 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d02:	2027      	movs	r0, #39	; 0x27
 8000d04:	f001 f939 	bl	8001f7a <HAL_NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24001908 	.word	0x24001908
 8000d10:	40004800 	.word	0x40004800
 8000d14:	00b6c7c0 	.word	0x00b6c7c0

08000d18 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_DMA_Init+0x8c>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <MX_DMA_Init+0x8c>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_DMA_Init+0x8c>)
 8000d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_DMA_Init+0x8c>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d42:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <MX_DMA_Init+0x8c>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_DMA_Init+0x8c>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200b      	movs	r0, #11
 8000d60:	f001 f8f1 	bl	8001f46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d64:	200b      	movs	r0, #11
 8000d66:	f001 f908 	bl	8001f7a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	200c      	movs	r0, #12
 8000d70:	f001 f8e9 	bl	8001f46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d74:	200c      	movs	r0, #12
 8000d76:	f001 f900 	bl	8001f7a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2038      	movs	r0, #56	; 0x38
 8000d80:	f001 f8e1 	bl	8001f46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d84:	2038      	movs	r0, #56	; 0x38
 8000d86:	f001 f8f8 	bl	8001f7a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2039      	movs	r0, #57	; 0x39
 8000d90:	f001 f8d9 	bl	8001f46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d94:	2039      	movs	r0, #57	; 0x39
 8000d96:	f001 f8f0 	bl	8001f7a <HAL_NVIC_EnableIRQ>


}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	58024400 	.word	0x58024400

08000da8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	4a55      	ldr	r2, [pc, #340]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ddc:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	4a4e      	ldr	r2, [pc, #312]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b48      	ldr	r3, [pc, #288]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0a:	4b44      	ldr	r3, [pc, #272]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	4a3f      	ldr	r2, [pc, #252]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e28:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_GPIO_Init+0x174>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e96:	4822      	ldr	r0, [pc, #136]	; (8000f20 <MX_GPIO_Init+0x178>)
 8000e98:	f004 f9d6 	bl	8005248 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4820      	ldr	r0, [pc, #128]	; (8000f24 <MX_GPIO_Init+0x17c>)
 8000ea2:	f004 f9d1 	bl	8005248 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481b      	ldr	r0, [pc, #108]	; (8000f28 <MX_GPIO_Init+0x180>)
 8000ebc:	f004 f814 	bl	8004ee8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000ec0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ec4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_GPIO_Init+0x178>)
 8000eda:	f004 f805 	bl	8004ee8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0x17c>)
 8000ef6:	f003 fff7 	bl	8004ee8 <HAL_GPIO_Init>

	BSP_LED_Init(LED1);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fc14 	bl	8001728 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 fc11 	bl	8001728 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f000 fc0e 	bl	8001728 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 fcfe 	bl	8001910 <BSP_PB_Init>
}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020400 	.word	0x58020400
 8000f24:	58021000 	.word	0x58021000
 8000f28:	58020800 	.word	0x58020800

08000f2c <HAL_GPIO_EXTI_Callback>:

// callback function for external GPIO interrupt
// toggles the value of UserButtonStatus
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_USER_PIN) {
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f3c:	d105      	bne.n	8000f4a <HAL_GPIO_EXTI_Callback+0x1e>
		UserButtonStatus ^= 1;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f48:	6013      	str	r3, [r2, #0]
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	24000060 	.word	0x24000060

08000f5c <tx_h_complete>:

// callback for SPI DMA half transfer complete
void tx_h_complete(DMA_HandleTypeDef *hdma) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_H_COMPLETE;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <tx_h_complete+0x1c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2400005c 	.word	0x2400005c

08000f7c <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_SPI_ErrorCallback+0x1c>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	601a      	str	r2, [r3, #0]
	Error_Handler();
 8000f8a:	f000 f814 	bl	8000fb6 <Error_Handler>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2400005c 	.word	0x2400005c

08000f9c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f000 fc35 	bl	8001814 <BSP_LED_On>
	Error_Handler();
 8000faa:	f000 f804 	bl	8000fb6 <Error_Handler>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fba:	b672      	cpsid	i
}
 8000fbc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		BSP_LED_Toggle(LED3);
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f000 fc7c 	bl	80018bc <BSP_LED_Toggle>
		HAL_Delay(100);
 8000fc4:	2064      	movs	r0, #100	; 0x64
 8000fc6:	f000 fe6f 	bl	8001ca8 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 8000fca:	e7f8      	b.n	8000fbe <Error_Handler+0x8>

08000fcc <HAL_MspInit>:
const unsigned short pll2_r = 2;

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x30>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58024400 	.word	0x58024400

08001000 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b0bc      	sub	sp, #240	; 0xf0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001008:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	22bc      	movs	r2, #188	; 0xbc
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f008 fd23 	bl	8009a6c <memset>
	if (hspi->Instance == SPI1) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4abd      	ldr	r2, [pc, #756]	; (8001320 <HAL_SPI_MspInit+0x320>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 8096 	bne.w	800115e <HAL_SPI_MspInit+0x15e>

//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	623b      	str	r3, [r7, #32]
//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	67fb      	str	r3, [r7, #124]	; 0x7c
//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800103e:	2304      	movs	r3, #4
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001042:	f240 1317 	movw	r3, #279	; 0x117
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001048:	2320      	movs	r3, #32
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001050:	2302      	movs	r3, #2
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001054:	2340      	movs	r3, #64	; 0x40
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001058:	2300      	movs	r3, #0
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f005 f913 	bl	8006290 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_SPI_MspInit+0x74>
			Error_Handler();
 8001070:	f7ff ffa1 	bl	8000fb6 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001074:	4bab      	ldr	r3, [pc, #684]	; (8001324 <HAL_SPI_MspInit+0x324>)
 8001076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800107a:	4aaa      	ldr	r2, [pc, #680]	; (8001324 <HAL_SPI_MspInit+0x324>)
 800107c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001080:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001084:	4ba7      	ldr	r3, [pc, #668]	; (8001324 <HAL_SPI_MspInit+0x324>)
 8001086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4ba4      	ldr	r3, [pc, #656]	; (8001324 <HAL_SPI_MspInit+0x324>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	4aa2      	ldr	r2, [pc, #648]	; (8001324 <HAL_SPI_MspInit+0x324>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a2:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	69bb      	ldr	r3, [r7, #24]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA15 (JTDI)     ------> SPI1_NSS
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 80010b0:	f248 0360 	movw	r3, #32864	; 0x8060
 80010b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ca:	2305      	movs	r3, #5
 80010cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d4:	4619      	mov	r1, r3
 80010d6:	4894      	ldr	r0, [pc, #592]	; (8001328 <HAL_SPI_MspInit+0x328>)
 80010d8:	f003 ff06 	bl	8004ee8 <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = SPI1_DMA_INSTANCE;
 80010dc:	4b93      	ldr	r3, [pc, #588]	; (800132c <HAL_SPI_MspInit+0x32c>)
 80010de:	4a94      	ldr	r2, [pc, #592]	; (8001330 <HAL_SPI_MspInit+0x330>)
 80010e0:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <HAL_SPI_MspInit+0x32c>)
 80010e4:	2225      	movs	r2, #37	; 0x25
 80010e6:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e8:	4b90      	ldr	r3, [pc, #576]	; (800132c <HAL_SPI_MspInit+0x32c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ee:	4b8f      	ldr	r3, [pc, #572]	; (800132c <HAL_SPI_MspInit+0x32c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	4b8d      	ldr	r3, [pc, #564]	; (800132c <HAL_SPI_MspInit+0x32c>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fa:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fc:	4b8b      	ldr	r3, [pc, #556]	; (800132c <HAL_SPI_MspInit+0x32c>)
 80010fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001102:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001104:	4b89      	ldr	r3, [pc, #548]	; (800132c <HAL_SPI_MspInit+0x32c>)
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800110c:	4b87      	ldr	r3, [pc, #540]	; (800132c <HAL_SPI_MspInit+0x32c>)
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b85      	ldr	r3, [pc, #532]	; (800132c <HAL_SPI_MspInit+0x32c>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	4b84      	ldr	r3, [pc, #528]	; (800132c <HAL_SPI_MspInit+0x32c>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001120:	4b82      	ldr	r3, [pc, #520]	; (800132c <HAL_SPI_MspInit+0x32c>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001126:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_SPI_MspInit+0x32c>)
 8001128:	2200      	movs	r2, #0
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800112c:	4b7f      	ldr	r3, [pc, #508]	; (800132c <HAL_SPI_MspInit+0x32c>)
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 8001132:	487e      	ldr	r0, [pc, #504]	; (800132c <HAL_SPI_MspInit+0x32c>)
 8001134:	f000 ff4a 	bl	8001fcc <HAL_DMA_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_SPI_MspInit+0x142>
			Error_Handler();
 800113e:	f7ff ff3a 	bl	8000fb6 <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi1_rx);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a79      	ldr	r2, [pc, #484]	; (800132c <HAL_SPI_MspInit+0x32c>)
 8001146:	67da      	str	r2, [r3, #124]	; 0x7c
 8001148:	4a78      	ldr	r2, [pc, #480]	; (800132c <HAL_SPI_MspInit+0x32c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2023      	movs	r0, #35	; 0x23
 8001154:	f000 fef7 	bl	8001f46 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001158:	2023      	movs	r0, #35	; 0x23
 800115a:	f000 ff0e 	bl	8001f7a <HAL_NVIC_EnableIRQ>
	}
	if (hspi->Instance == SPI2) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a74      	ldr	r2, [pc, #464]	; (8001334 <HAL_SPI_MspInit+0x334>)
 8001164:	4293      	cmp	r3, r2
 8001166:	f040 80f6 	bne.w	8001356 <HAL_SPI_MspInit+0x356>

		/** Initializes the peripherals clock
		 */
		//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	623b      	str	r3, [r7, #32]
		//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	67fb      	str	r3, [r7, #124]	; 0x7c
		//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001176:	2304      	movs	r3, #4
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800117a:	f240 1317 	movw	r3, #279	; 0x117
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001180:	2320      	movs	r3, #32
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001184:	2302      	movs	r3, #2
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001188:	2302      	movs	r3, #2
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
		//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
		//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f005 f877 	bl	8006290 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_SPI_MspInit+0x1ac>
			Error_Handler();
 80011a8:	f7ff ff05 	bl	8000fb6 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 80011ac:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b2:	4a5c      	ldr	r2, [pc, #368]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011bc:	4b59      	ldr	r3, [pc, #356]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b52      	ldr	r3, [pc, #328]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b4a      	ldr	r3, [pc, #296]	; (8001324 <HAL_SPI_MspInit+0x324>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	4b47      	ldr	r3, [pc, #284]	; (8001324 <HAL_SPI_MspInit+0x324>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_SPI_MspInit+0x324>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_SPI_MspInit+0x324>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
		 PC2_C     ------> SPI2_MISO
		 PC3_C     ------> SPI2_MOSI
		 PB12     ------> SPI2_NSS
		 PD3     ------> SPI2_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001224:	230c      	movs	r3, #12
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123c:	2305      	movs	r3, #5
 800123e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001246:	4619      	mov	r1, r3
 8001248:	483b      	ldr	r0, [pc, #236]	; (8001338 <HAL_SPI_MspInit+0x338>)
 800124a:	f003 fe4d 	bl	8004ee8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001268:	2305      	movs	r3, #5
 800126a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001272:	4619      	mov	r1, r3
 8001274:	4831      	ldr	r0, [pc, #196]	; (800133c <HAL_SPI_MspInit+0x33c>)
 8001276:	f003 fe37 	bl	8004ee8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800127a:	2308      	movs	r3, #8
 800127c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001292:	2305      	movs	r3, #5
 8001294:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800129c:	4619      	mov	r1, r3
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <HAL_SPI_MspInit+0x340>)
 80012a0:	f003 fe22 	bl	8004ee8 <HAL_GPIO_Init>

		/* SPI2 DMA Init */
		/* SPI2_RX Init */
		hdma_spi2_rx.Instance = SPI2_DMA_INSTANCE;
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_SPI_MspInit+0x348>)
 80012a8:	601a      	str	r2, [r3, #0]
		hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012ac:	2227      	movs	r2, #39	; 0x27
 80012ae:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c2:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ca:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d2:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK) {
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <HAL_SPI_MspInit+0x344>)
 80012fc:	f000 fe66 	bl	8001fcc <HAL_DMA_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_SPI_MspInit+0x30a>
			Error_Handler();
 8001306:	f7ff fe56 	bl	8000fb6 <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi2_rx);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_SPI_MspInit+0x344>)
 800130e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_SPI_MspInit+0x344>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2024      	movs	r0, #36	; 0x24
 800131c:	e016      	b.n	800134c <HAL_SPI_MspInit+0x34c>
 800131e:	bf00      	nop
 8001320:	40013000 	.word	0x40013000
 8001324:	58024400 	.word	0x58024400
 8001328:	58020000 	.word	0x58020000
 800132c:	24001c18 	.word	0x24001c18
 8001330:	40020410 	.word	0x40020410
 8001334:	40003800 	.word	0x40003800
 8001338:	58020800 	.word	0x58020800
 800133c:	58020400 	.word	0x58020400
 8001340:	58020c00 	.word	0x58020c00
 8001344:	24001998 	.word	0x24001998
 8001348:	40020428 	.word	0x40020428
 800134c:	f000 fdfb 	bl	8001f46 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001350:	2024      	movs	r0, #36	; 0x24
 8001352:	f000 fe12 	bl	8001f7a <HAL_NVIC_EnableIRQ>
	}

}
 8001356:	bf00      	nop
 8001358:	37f0      	adds	r7, #240	; 0xf0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ba      	sub	sp, #232	; 0xe8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001368:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	22bc      	movs	r2, #188	; 0xbc
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f008 fb73 	bl	8009a6c <memset>
	if (huart->Instance == USART1) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a95      	ldr	r2, [pc, #596]	; (80015e0 <HAL_UART_MspInit+0x280>)
 800138c:	4293      	cmp	r3, r2
 800138e:	f040 8099 	bne.w	80014c4 <HAL_UART_MspInit+0x164>
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
//		peripheral uses pll3q
		PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001396:	2310      	movs	r3, #16
 8001398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//		set m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800139c:	2304      	movs	r3, #4
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80013a0:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80013a4:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80013a6:	2309      	movs	r3, #9
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80013aa:	2308      	movs	r3, #8
 80013ac:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64fb      	str	r3, [r7, #76]	; 0x4c
//		input clock speed is 2.08 MHz
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	653b      	str	r3, [r7, #80]	; 0x50
//		use high frequency VCO mode
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	; 0x54
//		no fractional n
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	65bb      	str	r3, [r7, #88]	; 0x58
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 ff63 	bl	8006290 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_UART_MspInit+0x74>
			Error_Handler();
 80013d0:	f7ff fdf1 	bl	8000fb6 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80013d4:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <HAL_UART_MspInit+0x284>)
 80013d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013da:	4a82      	ldr	r2, [pc, #520]	; (80015e4 <HAL_UART_MspInit+0x284>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013e4:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_UART_MspInit+0x284>)
 80013e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_UART_MspInit+0x284>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	4a7a      	ldr	r2, [pc, #488]	; (80015e4 <HAL_UART_MspInit+0x284>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001402:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_UART_MspInit+0x284>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PB15     ------> USART1_RX
		 PB6     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800142a:	2304      	movs	r3, #4
 800142c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001434:	4619      	mov	r1, r3
 8001436:	486c      	ldr	r0, [pc, #432]	; (80015e8 <HAL_UART_MspInit+0x288>)
 8001438:	f003 fd56 	bl	8004ee8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001454:	2307      	movs	r3, #7
 8001456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800145e:	4619      	mov	r1, r3
 8001460:	4861      	ldr	r0, [pc, #388]	; (80015e8 <HAL_UART_MspInit+0x288>)
 8001462:	f003 fd41 	bl	8004ee8 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream0;
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_UART_MspInit+0x28c>)
 8001468:	4a61      	ldr	r2, [pc, #388]	; (80015f0 <HAL_UART_MspInit+0x290>)
 800146a:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_UART_MspInit+0x28c>)
 800146e:	222a      	movs	r2, #42	; 0x2a
 8001470:	605a      	str	r2, [r3, #4]
//		set memory to peripheral transfer
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001472:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <HAL_UART_MspInit+0x28c>)
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	609a      	str	r2, [r3, #8]
//		do not increment peripheral memory address
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_UART_MspInit+0x28c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
//		increment memory address
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_UART_MspInit+0x28c>)
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	611a      	str	r2, [r3, #16]
//		align data by bytes
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001486:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_UART_MspInit+0x28c>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
//		align data by half word
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148c:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_UART_MspInit+0x28c>)
 800148e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001492:	619a      	str	r2, [r3, #24]
//		non circular mode
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b55      	ldr	r3, [pc, #340]	; (80015ec <HAL_UART_MspInit+0x28c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_UART_MspInit+0x28c>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
//		do not use FIFO
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a0:	4b52      	ldr	r3, [pc, #328]	; (80015ec <HAL_UART_MspInit+0x28c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
//		configure DMA with HAL library
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80014a6:	4851      	ldr	r0, [pc, #324]	; (80015ec <HAL_UART_MspInit+0x28c>)
 80014a8:	f000 fd90 	bl	8001fcc <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0x156>
			Error_Handler();
 80014b2:	f7ff fd80 	bl	8000fb6 <Error_Handler>
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_UART_MspInit+0x28c>)
 80014ba:	679a      	str	r2, [r3, #120]	; 0x78
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_UART_MspInit+0x28c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	; 0x38
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);

	}

}
 80014c2:	e088      	b.n	80015d6 <HAL_UART_MspInit+0x276>
	} else if (huart->Instance == USART3) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a4a      	ldr	r2, [pc, #296]	; (80015f4 <HAL_UART_MspInit+0x294>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f040 8083 	bne.w	80015d6 <HAL_UART_MspInit+0x276>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.Usart234578ClockSelection =
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80014da:	2304      	movs	r3, #4
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80014de:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80014e4:	2309      	movs	r3, #9
 80014e6:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80014e8:	2308      	movs	r3, #8
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80014f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f4:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fec4 	bl	8006290 <HAL_RCCEx_PeriphCLKConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_UART_MspInit+0x1b2>
			Error_Handler();
 800150e:	f7ff fd52 	bl	8000fb6 <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_UART_MspInit+0x284>)
 8001514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001518:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <HAL_UART_MspInit+0x284>)
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_UART_MspInit+0x284>)
 8001524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_UART_MspInit+0x284>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <HAL_UART_MspInit+0x284>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_UART_MspInit+0x284>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 800154e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001568:	2307      	movs	r3, #7
 800156a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001572:	4619      	mov	r1, r3
 8001574:	4820      	ldr	r0, [pc, #128]	; (80015f8 <HAL_UART_MspInit+0x298>)
 8001576:	f003 fcb7 	bl	8004ee8 <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_UART_MspInit+0x29c>)
 800157c:	4a20      	ldr	r2, [pc, #128]	; (8001600 <HAL_UART_MspInit+0x2a0>)
 800157e:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_UART_MspInit+0x29c>)
 8001582:	222e      	movs	r2, #46	; 0x2e
 8001584:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_UART_MspInit+0x29c>)
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_UART_MspInit+0x29c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_UART_MspInit+0x29c>)
 8001594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001598:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_UART_MspInit+0x29c>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a6:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015bc:	f000 fd06 	bl	8001fcc <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x26a>
			Error_Handler();
 80015c6:	f7ff fcf6 	bl	8000fb6 <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015ce:	679a      	str	r2, [r3, #120]	; 0x78
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_UART_MspInit+0x29c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015d6:	bf00      	nop
 80015d8:	37e8      	adds	r7, #232	; 0xe8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40011000 	.word	0x40011000
 80015e4:	58024400 	.word	0x58024400
 80015e8:	58020400 	.word	0x58020400
 80015ec:	24001a88 	.word	0x24001a88
 80015f0:	40020010 	.word	0x40020010
 80015f4:	40004800 	.word	0x40004800
 80015f8:	58020c00 	.word	0x58020c00
 80015fc:	24001a10 	.word	0x24001a10
 8001600:	40020028 	.word	0x40020028

08001604 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001650:	f000 fb0a 	bl	8001c68 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
//	turn on the red LED
	BSP_LED_On(LED3);
 800165c:	2002      	movs	r0, #2
 800165e:	f000 f8d9 	bl	8001814 <BSP_LED_On>
//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA1_Stream0_IRQHandler+0x14>)
 8001664:	f002 f8fa 	bl	800385c <HAL_DMA_IRQHandler>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	24001a88 	.word	0x24001a88

08001670 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001674:	2002      	movs	r0, #2
 8001676:	f000 f8cd 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800167a:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA1_Stream1_IRQHandler+0x14>)
 800167c:	f002 f8ee 	bl	800385c <HAL_DMA_IRQHandler>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	24001a10 	.word	0x24001a10

08001688 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 800168c:	2002      	movs	r0, #2
 800168e:	f000 f8c1 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA2_Stream0_IRQHandler+0x14>)
 8001694:	f002 f8e2 	bl	800385c <HAL_DMA_IRQHandler>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24001c18 	.word	0x24001c18

080016a0 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f000 f8b5 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80016aa:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA2_Stream1_IRQHandler+0x14>)
 80016ac:	f002 f8d6 	bl	800385c <HAL_DMA_IRQHandler>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24001998 	.word	0x24001998

080016b8 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles external GPIO global interrupt for user button.
 */
void EXTI15_10_IRQHandler(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	//	call the HAL library interrupt handler
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 80016bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016c0:	f003 fdf5 	bl	80052ae <HAL_GPIO_EXTI_IRQHandler>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80016cc:	2002      	movs	r0, #2
 80016ce:	f000 f8a1 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart1);
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <USART1_IRQHandler+0x14>)
 80016d4:	f006 fde4 	bl	80082a0 <HAL_UART_IRQHandler>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	24001b00 	.word	0x24001b00

080016e0 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f000 f895 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart3);
 80016ea:	4802      	ldr	r0, [pc, #8]	; (80016f4 <USART3_IRQHandler+0x14>)
 80016ec:	f006 fdd8 	bl	80082a0 <HAL_UART_IRQHandler>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	24001908 	.word	0x24001908

080016f8 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f000 f889 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi1);
 8001702:	4802      	ldr	r0, [pc, #8]	; (800170c <SPI1_IRQHandler+0x14>)
 8001704:	f006 fa28 	bl	8007b58 <HAL_SPI_IRQHandler>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	24001b90 	.word	0x24001b90

08001710 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001714:	2002      	movs	r0, #2
 8001716:	f000 f87d 	bl	8001814 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi2);
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <SPI2_IRQHandler+0x14>)
 800171c:	f006 fa1c 	bl	8007b58 <HAL_SPI_IRQHandler>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24001880 	.word	0x24001880

08001728 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d009      	beq.n	8001750 <BSP_LED_Init+0x28>
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d006      	beq.n	8001750 <BSP_LED_Init+0x28>
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d003      	beq.n	8001750 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001748:	f06f 0301 	mvn.w	r3, #1
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174e:	e055      	b.n	80017fc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <BSP_LED_Init+0xe0>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <BSP_LED_Init+0xe0>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <BSP_LED_Init+0xe0>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	e021      	b.n	80017ba <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10f      	bne.n	800179c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <BSP_LED_Init+0xe0>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <BSP_LED_Init+0xe0>)
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <BSP_LED_Init+0xe0>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	e00e      	b.n	80017ba <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <BSP_LED_Init+0xe0>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a2:	4a19      	ldr	r2, [pc, #100]	; (8001808 <BSP_LED_Init+0xe0>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <BSP_LED_Init+0xe0>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4a13      	ldr	r2, [pc, #76]	; (800180c <BSP_LED_Init+0xe4>)
 80017be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <BSP_LED_Init+0xe8>)
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	f107 0218 	add.w	r2, r7, #24
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 fb82 	bl	8004ee8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <BSP_LED_Init+0xe8>)
 80017e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <BSP_LED_Init+0xe4>)
 80017f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f003 fd26 	bl	8005248 <HAL_GPIO_WritePin>
  }

  return ret;
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3730      	adds	r7, #48	; 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	58024400 	.word	0x58024400
 800180c:	08009a94 	.word	0x08009a94
 8001810:	24000000 	.word	0x24000000

08001814 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <BSP_LED_On+0x28>
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d006      	beq.n	800183c <BSP_LED_On+0x28>
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d003      	beq.n	800183c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e00b      	b.n	8001854 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <BSP_LED_On+0x4c>)
 8001840:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <BSP_LED_On+0x50>)
 8001848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	f003 fcfa 	bl	8005248 <HAL_GPIO_WritePin>
  }

  return ret;
 8001854:	68fb      	ldr	r3, [r7, #12]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24000000 	.word	0x24000000
 8001864:	08009a94 	.word	0x08009a94

08001868 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <BSP_LED_Off+0x28>
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d006      	beq.n	8001890 <BSP_LED_Off+0x28>
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001888:	f06f 0301 	mvn.w	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e00b      	b.n	80018a8 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <BSP_LED_Off+0x4c>)
 8001894:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <BSP_LED_Off+0x50>)
 800189c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f003 fcd0 	bl	8005248 <HAL_GPIO_WritePin>
  }

  return ret;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000000 	.word	0x24000000
 80018b8:	08009a94 	.word	0x08009a94

080018bc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <BSP_LED_Toggle+0x28>
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d006      	beq.n	80018e4 <BSP_LED_Toggle+0x28>
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d003      	beq.n	80018e4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018dc:	f06f 0301 	mvn.w	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e00b      	b.n	80018fc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <BSP_LED_Toggle+0x4c>)
 80018e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4907      	ldr	r1, [pc, #28]	; (800190c <BSP_LED_Toggle+0x50>)
 80018f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f003 fcbf 	bl	800527a <HAL_GPIO_TogglePin>
  }

  return ret;
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24000000 	.word	0x24000000
 800190c:	08009a94 	.word	0x08009a94

08001910 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <BSP_PB_Init+0xc8>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <BSP_PB_Init+0xc8>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <BSP_PB_Init+0xc8>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800193e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001942:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001944:	2302      	movs	r3, #2
 8001946:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <BSP_PB_Init+0xcc>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	f107 020c 	add.w	r2, r7, #12
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fabf 	bl	8004ee8 <HAL_GPIO_Init>
 800196a:	e030      	b.n	80019ce <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <BSP_PB_Init+0xd0>)
 800196e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <BSP_PB_Init+0xcc>)
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	f107 020c 	add.w	r2, r7, #12
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fab2 	bl	8004ee8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <BSP_PB_Init+0xd4>)
 800198a:	441a      	add	r2, r3
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4916      	ldr	r1, [pc, #88]	; (80019e8 <BSP_PB_Init+0xd8>)
 8001990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f003 fa91 	bl	8004ebe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <BSP_PB_Init+0xd4>)
 80019a2:	1898      	adds	r0, r3, r2
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <BSP_PB_Init+0xdc>)
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	461a      	mov	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f003 fa66 	bl	8004e80 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019b4:	2028      	movs	r0, #40	; 0x28
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <BSP_PB_Init+0xe0>)
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	f000 fac0 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80019c6:	2328      	movs	r3, #40	; 0x28
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fad6 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	58024400 	.word	0x58024400
 80019dc:	2400000c 	.word	0x2400000c
 80019e0:	11110000 	.word	0x11110000
 80019e4:	24001c90 	.word	0x24001c90
 80019e8:	08009a9c 	.word	0x08009a9c
 80019ec:	24000010 	.word	0x24000010
 80019f0:	24000014 	.word	0x24000014

080019f4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fff0 	bl	80019f4 <BSP_PB_Callback>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <SystemInit+0xec>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <SystemInit+0xec>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <SystemInit+0xf0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d807      	bhi.n	8001a48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a38:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <SystemInit+0xf0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <SystemInit+0xf0>)
 8001a42:	f043 0307 	orr.w	r3, r3, #7
 8001a46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <SystemInit+0xf4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <SystemInit+0xf4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <SystemInit+0xf4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <SystemInit+0xf4>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	492b      	ldr	r1, [pc, #172]	; (8001b0c <SystemInit+0xf4>)
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <SystemInit+0xf8>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <SystemInit+0xf0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <SystemInit+0xf0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 030f 	bic.w	r3, r3, #15
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <SystemInit+0xf0>)
 8001a7c:	f043 0307 	orr.w	r3, r3, #7
 8001a80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <SystemInit+0xf4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <SystemInit+0xf4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <SystemInit+0xf4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <SystemInit+0xf4>)
 8001a96:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <SystemInit+0xfc>)
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <SystemInit+0xf4>)
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <SystemInit+0x100>)
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <SystemInit+0xf4>)
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <SystemInit+0x104>)
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <SystemInit+0xf4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <SystemInit+0xf4>)
 8001aae:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <SystemInit+0x104>)
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <SystemInit+0xf4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <SystemInit+0xf4>)
 8001aba:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <SystemInit+0x104>)
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <SystemInit+0xf4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <SystemInit+0xf4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <SystemInit+0xf4>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <SystemInit+0xf4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <SystemInit+0x108>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <SystemInit+0x10c>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ae2:	d202      	bcs.n	8001aea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <SystemInit+0x110>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <SystemInit+0x114>)
 8001aec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001af0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SystemInit+0xec>)
 8001af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	52002000 	.word	0x52002000
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b14:	02020200 	.word	0x02020200
 8001b18:	01ff0000 	.word	0x01ff0000
 8001b1c:	01010280 	.word	0x01010280
 8001b20:	5c001000 	.word	0x5c001000
 8001b24:	ffff0000 	.word	0xffff0000
 8001b28:	51008108 	.word	0x51008108
 8001b2c:	52004000 	.word	0x52004000

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b34:	f7ff ff70 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	; (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f007 ff61 	bl	8009a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fd35 	bl	80005d0 <main>
  bx  lr
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b70:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001b74:	08009af0 	.word	0x08009af0
  ldr r2, =_sbss
 8001b78:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001b7c:	24001d2c 	.word	0x24001d2c

08001b80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC3_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f000 f9d0 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b90:	f004 f9a8 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_Init+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	4913      	ldr	r1, [pc, #76]	; (8001bf0 <HAL_Init+0x6c>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_Init+0x68>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_Init+0x6c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_Init+0x70>)
 8001bc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_Init+0x74>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f814 	bl	8001bfc <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e002      	b.n	8001be4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff f9f5 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	08009aa0 	.word	0x08009aa0
 8001bf4:	2400001c 	.word	0x2400001c
 8001bf8:	24000018 	.word	0x24000018

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_InitTick+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e021      	b.n	8001c54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_InitTick+0x64>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_InitTick+0x60>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f9c3 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 f97f 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x68>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	24000024 	.word	0x24000024
 8001c60:	24000018 	.word	0x24000018
 8001c64:	24000020 	.word	0x24000020

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	24000024 	.word	0x24000024
 8001c8c:	24001d28 	.word	0x24001d28

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	24001d28 	.word	0x24001d28

08001ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff ffee 	bl	8001c90 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d005      	beq.n	8001cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_Delay+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cce:	bf00      	nop
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8f7      	bhi.n	8001cd0 <HAL_Delay+0x28>
  {
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	24000024 	.word	0x24000024

08001cf0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_SuspendTick+0x1c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_SuspendTick+0x1c>)
 8001cfa:	f023 0302 	bic.w	r3, r3, #2
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetREVID+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0c1b      	lsrs	r3, r3, #16
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	5c001000 	.word	0x5c001000

08001d28 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_EnableCompensationCell+0x1c>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_EnableCompensationCell+0x1c>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	58000400 	.word	0x58000400

08001d48 <__NVIC_SetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	05fa0000 	.word	0x05fa0000

08001d90 <__NVIC_GetPriorityGrouping>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_DisableIRQ>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db12      	blt.n	8001e20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	490a      	ldr	r1, [pc, #40]	; (8001e2c <__NVIC_DisableIRQ+0x44>)
 8001e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	3320      	adds	r3, #32
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e14:	f3bf 8f4f 	dsb	sy
}
 8001e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e1a:	f3bf 8f6f 	isb	sy
}
 8001e1e:	bf00      	nop
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff05 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff1c 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff90 	bl	8001e84 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5f 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff0f 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff1f 	bl	8001de8 <__NVIC_DisableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff96 	bl	8001eec <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fe5c 	bl	8001c90 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e316      	b.n	8002612 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_DMA_Init+0x1b8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_DMA_Init+0x1bc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_DMA_Init+0x1c0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a62      	ldr	r2, [pc, #392]	; (8002190 <HAL_DMA_Init+0x1c4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_DMA_Init+0x1c8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5f      	ldr	r2, [pc, #380]	; (8002198 <HAL_DMA_Init+0x1cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a5d      	ldr	r2, [pc, #372]	; (800219c <HAL_DMA_Init+0x1d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_DMA_Init+0x1d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_DMA_Init+0x1d8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a59      	ldr	r2, [pc, #356]	; (80021a8 <HAL_DMA_Init+0x1dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_DMA_Init+0x1e0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_DMA_Init+0x1e4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a54      	ldr	r2, [pc, #336]	; (80021b4 <HAL_DMA_Init+0x1e8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a53      	ldr	r2, [pc, #332]	; (80021b8 <HAL_DMA_Init+0x1ec>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_DMA_Init+0x1f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_DMA_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Init+0xbc>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_DMA_Init+0xbe>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 813b 	beq.w	8002306 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a37      	ldr	r2, [pc, #220]	; (8002184 <HAL_DMA_Init+0x1b8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d04a      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a36      	ldr	r2, [pc, #216]	; (8002188 <HAL_DMA_Init+0x1bc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d045      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a34      	ldr	r2, [pc, #208]	; (800218c <HAL_DMA_Init+0x1c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d040      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a33      	ldr	r2, [pc, #204]	; (8002190 <HAL_DMA_Init+0x1c4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d03b      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a31      	ldr	r2, [pc, #196]	; (8002194 <HAL_DMA_Init+0x1c8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d036      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_DMA_Init+0x1cc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d031      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2e      	ldr	r2, [pc, #184]	; (800219c <HAL_DMA_Init+0x1d0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02c      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_DMA_Init+0x1d4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d027      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_DMA_Init+0x1d8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d022      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <HAL_DMA_Init+0x1dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01d      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a28      	ldr	r2, [pc, #160]	; (80021ac <HAL_DMA_Init+0x1e0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d018      	beq.n	8002140 <HAL_DMA_Init+0x174>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <HAL_DMA_Init+0x1e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <HAL_DMA_Init+0x1e8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00e      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <HAL_DMA_Init+0x1ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_DMA_Init+0x174>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <HAL_DMA_Init+0x1f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_DMA_Init+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <HAL_DMA_Init+0x186>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_DMA_Init+0x196>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002162:	e02f      	b.n	80021c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002164:	f7ff fd94 	bl	8001c90 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b05      	cmp	r3, #5
 8002170:	d928      	bls.n	80021c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e246      	b.n	8002612 <HAL_DMA_Init+0x646>
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1c8      	bne.n	8002164 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_DMA_Init+0x420>)
 80021de:	4013      	ands	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	4313      	orrs	r3, r2
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002228:	4b71      	ldr	r3, [pc, #452]	; (80023f0 <HAL_DMA_Init+0x424>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b71      	ldr	r3, [pc, #452]	; (80023f4 <HAL_DMA_Init+0x428>)
 800222e:	4013      	ands	r3, r2
 8002230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002234:	d328      	bcc.n	8002288 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b28      	cmp	r3, #40	; 0x28
 800223c:	d903      	bls.n	8002246 <HAL_DMA_Init+0x27a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b2e      	cmp	r3, #46	; 0x2e
 8002244:	d917      	bls.n	8002276 <HAL_DMA_Init+0x2aa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b3e      	cmp	r3, #62	; 0x3e
 800224c:	d903      	bls.n	8002256 <HAL_DMA_Init+0x28a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b42      	cmp	r3, #66	; 0x42
 8002254:	d90f      	bls.n	8002276 <HAL_DMA_Init+0x2aa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b46      	cmp	r3, #70	; 0x46
 800225c:	d903      	bls.n	8002266 <HAL_DMA_Init+0x29a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b48      	cmp	r3, #72	; 0x48
 8002264:	d907      	bls.n	8002276 <HAL_DMA_Init+0x2aa>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b4e      	cmp	r3, #78	; 0x4e
 800226c:	d905      	bls.n	800227a <HAL_DMA_Init+0x2ae>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b52      	cmp	r3, #82	; 0x52
 8002274:	d801      	bhi.n	800227a <HAL_DMA_Init+0x2ae>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_DMA_Init+0x2b0>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002286:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f023 0307 	bic.w	r3, r3, #7
 800229e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d117      	bne.n	80022e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f002 fc51 	bl	8004b6c <DMA_CheckFifoParam>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e197      	b.n	8002612 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f002 fb8c 	bl	8004a08 <DMA_CalcBaseAndBitshift>
 80022f0:	4603      	mov	r3, r0
 80022f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	409a      	lsls	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e0cd      	b.n	80024a2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <HAL_DMA_Init+0x42c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a39      	ldr	r2, [pc, #228]	; (80023fc <HAL_DMA_Init+0x430>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01d      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a38      	ldr	r2, [pc, #224]	; (8002400 <HAL_DMA_Init+0x434>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d018      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a36      	ldr	r2, [pc, #216]	; (8002404 <HAL_DMA_Init+0x438>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_DMA_Init+0x43c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a33      	ldr	r2, [pc, #204]	; (800240c <HAL_DMA_Init+0x440>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_DMA_Init+0x444>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_DMA_Init+0x38a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a30      	ldr	r2, [pc, #192]	; (8002414 <HAL_DMA_Init+0x448>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_DMA_Init+0x38e>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_DMA_Init+0x390>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8097 	beq.w	8002490 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <HAL_DMA_Init+0x42c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d021      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_DMA_Init+0x430>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01c      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_DMA_Init+0x434>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d017      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_DMA_Init+0x438>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d012      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_DMA_Init+0x43c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00d      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_DMA_Init+0x440>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d008      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_DMA_Init+0x444>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_Init+0x3e4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_DMA_Init+0x448>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_DMA_Init+0x44c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d020      	beq.n	800241c <HAL_DMA_Init+0x450>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b80      	cmp	r3, #128	; 0x80
 80023e0:	d102      	bne.n	80023e8 <HAL_DMA_Init+0x41c>
 80023e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e6:	e01a      	b.n	800241e <HAL_DMA_Init+0x452>
 80023e8:	2300      	movs	r3, #0
 80023ea:	e018      	b.n	800241e <HAL_DMA_Init+0x452>
 80023ec:	fe10803f 	.word	0xfe10803f
 80023f0:	5c001000 	.word	0x5c001000
 80023f4:	ffff0000 	.word	0xffff0000
 80023f8:	58025408 	.word	0x58025408
 80023fc:	5802541c 	.word	0x5802541c
 8002400:	58025430 	.word	0x58025430
 8002404:	58025444 	.word	0x58025444
 8002408:	58025458 	.word	0x58025458
 800240c:	5802546c 	.word	0x5802546c
 8002410:	58025480 	.word	0x58025480
 8002414:	58025494 	.word	0x58025494
 8002418:	fffe000f 	.word	0xfffe000f
 800241c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68d2      	ldr	r2, [r2, #12]
 8002422:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800242c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800243c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800244c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b6e      	ldr	r3, [pc, #440]	; (800261c <HAL_DMA_Init+0x650>)
 8002464:	4413      	add	r3, r2
 8002466:	4a6e      	ldr	r2, [pc, #440]	; (8002620 <HAL_DMA_Init+0x654>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	009a      	lsls	r2, r3, #2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f002 fac7 	bl	8004a08 <DMA_CalcBaseAndBitshift>
 800247a:	4603      	mov	r3, r0
 800247c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	e008      	b.n	80024a2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2240      	movs	r2, #64	; 0x40
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2203      	movs	r2, #3
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0b7      	b.n	8002612 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5f      	ldr	r2, [pc, #380]	; (8002624 <HAL_DMA_Init+0x658>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d072      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_DMA_Init+0x65c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d06d      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a5c      	ldr	r2, [pc, #368]	; (800262c <HAL_DMA_Init+0x660>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d068      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5a      	ldr	r2, [pc, #360]	; (8002630 <HAL_DMA_Init+0x664>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d063      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a59      	ldr	r2, [pc, #356]	; (8002634 <HAL_DMA_Init+0x668>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d05e      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a57      	ldr	r2, [pc, #348]	; (8002638 <HAL_DMA_Init+0x66c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d059      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a56      	ldr	r2, [pc, #344]	; (800263c <HAL_DMA_Init+0x670>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d054      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a54      	ldr	r2, [pc, #336]	; (8002640 <HAL_DMA_Init+0x674>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04f      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a53      	ldr	r2, [pc, #332]	; (8002644 <HAL_DMA_Init+0x678>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04a      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a51      	ldr	r2, [pc, #324]	; (8002648 <HAL_DMA_Init+0x67c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d045      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a50      	ldr	r2, [pc, #320]	; (800264c <HAL_DMA_Init+0x680>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d040      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a4e      	ldr	r2, [pc, #312]	; (8002650 <HAL_DMA_Init+0x684>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d03b      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a4d      	ldr	r2, [pc, #308]	; (8002654 <HAL_DMA_Init+0x688>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d036      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <HAL_DMA_Init+0x68c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4a      	ldr	r2, [pc, #296]	; (800265c <HAL_DMA_Init+0x690>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d02c      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <HAL_DMA_Init+0x694>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d027      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a47      	ldr	r2, [pc, #284]	; (8002664 <HAL_DMA_Init+0x698>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a45      	ldr	r2, [pc, #276]	; (8002668 <HAL_DMA_Init+0x69c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <HAL_DMA_Init+0x6a0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d018      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_DMA_Init+0x6a4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a41      	ldr	r2, [pc, #260]	; (8002674 <HAL_DMA_Init+0x6a8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3f      	ldr	r2, [pc, #252]	; (8002678 <HAL_DMA_Init+0x6ac>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d009      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3e      	ldr	r2, [pc, #248]	; (800267c <HAL_DMA_Init+0x6b0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Init+0x5c6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <HAL_DMA_Init+0x6b4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Init+0x5ca>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_DMA_Init+0x5cc>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d032      	beq.n	8002602 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f002 fb61 	bl	8004c64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b80      	cmp	r3, #128	; 0x80
 80025a8:	d102      	bne.n	80025b0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025c4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <HAL_DMA_Init+0x624>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d80c      	bhi.n	80025f0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f002 fbde 	bl	8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e008      	b.n	8002602 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	a7fdabf8 	.word	0xa7fdabf8
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	40020010 	.word	0x40020010
 8002628:	40020028 	.word	0x40020028
 800262c:	40020040 	.word	0x40020040
 8002630:	40020058 	.word	0x40020058
 8002634:	40020070 	.word	0x40020070
 8002638:	40020088 	.word	0x40020088
 800263c:	400200a0 	.word	0x400200a0
 8002640:	400200b8 	.word	0x400200b8
 8002644:	40020410 	.word	0x40020410
 8002648:	40020428 	.word	0x40020428
 800264c:	40020440 	.word	0x40020440
 8002650:	40020458 	.word	0x40020458
 8002654:	40020470 	.word	0x40020470
 8002658:	40020488 	.word	0x40020488
 800265c:	400204a0 	.word	0x400204a0
 8002660:	400204b8 	.word	0x400204b8
 8002664:	58025408 	.word	0x58025408
 8002668:	5802541c 	.word	0x5802541c
 800266c:	58025430 	.word	0x58025430
 8002670:	58025444 	.word	0x58025444
 8002674:	58025458 	.word	0x58025458
 8002678:	5802546c 	.word	0x5802546c
 800267c:	58025480 	.word	0x58025480
 8002680:	58025494 	.word	0x58025494

08002684 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0ec      	b.n	800287a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_DMA_Start+0x2a>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0e5      	b.n	800287a <HAL_DMA_Start+0x1f6>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 80d0 	bne.w	8002864 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6b      	ldr	r2, [pc, #428]	; (8002884 <HAL_DMA_Start+0x200>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d04a      	beq.n	8002772 <HAL_DMA_Start+0xee>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a69      	ldr	r2, [pc, #420]	; (8002888 <HAL_DMA_Start+0x204>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d045      	beq.n	8002772 <HAL_DMA_Start+0xee>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a68      	ldr	r2, [pc, #416]	; (800288c <HAL_DMA_Start+0x208>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d040      	beq.n	8002772 <HAL_DMA_Start+0xee>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_DMA_Start+0x20c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d03b      	beq.n	8002772 <HAL_DMA_Start+0xee>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_DMA_Start+0x210>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d036      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_DMA_Start+0x214>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d031      	beq.n	8002772 <HAL_DMA_Start+0xee>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a62      	ldr	r2, [pc, #392]	; (800289c <HAL_DMA_Start+0x218>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d02c      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a60      	ldr	r2, [pc, #384]	; (80028a0 <HAL_DMA_Start+0x21c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d027      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5f      	ldr	r2, [pc, #380]	; (80028a4 <HAL_DMA_Start+0x220>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d022      	beq.n	8002772 <HAL_DMA_Start+0xee>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5d      	ldr	r2, [pc, #372]	; (80028a8 <HAL_DMA_Start+0x224>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01d      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5c      	ldr	r2, [pc, #368]	; (80028ac <HAL_DMA_Start+0x228>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d018      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5a      	ldr	r2, [pc, #360]	; (80028b0 <HAL_DMA_Start+0x22c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_DMA_Start+0xee>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a59      	ldr	r2, [pc, #356]	; (80028b4 <HAL_DMA_Start+0x230>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_DMA_Start+0x234>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d009      	beq.n	8002772 <HAL_DMA_Start+0xee>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a56      	ldr	r2, [pc, #344]	; (80028bc <HAL_DMA_Start+0x238>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_DMA_Start+0xee>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a54      	ldr	r2, [pc, #336]	; (80028c0 <HAL_DMA_Start+0x23c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <HAL_DMA_Start+0x100>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e007      	b.n	8002794 <HAL_DMA_Start+0x110>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f001 ff88 	bl	80046b0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a37      	ldr	r2, [pc, #220]	; (8002884 <HAL_DMA_Start+0x200>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a36      	ldr	r2, [pc, #216]	; (8002888 <HAL_DMA_Start+0x204>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	; (800288c <HAL_DMA_Start+0x208>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a33      	ldr	r2, [pc, #204]	; (8002890 <HAL_DMA_Start+0x20c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a31      	ldr	r2, [pc, #196]	; (8002894 <HAL_DMA_Start+0x210>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a30      	ldr	r2, [pc, #192]	; (8002898 <HAL_DMA_Start+0x214>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2e      	ldr	r2, [pc, #184]	; (800289c <HAL_DMA_Start+0x218>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2d      	ldr	r2, [pc, #180]	; (80028a0 <HAL_DMA_Start+0x21c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2b      	ldr	r2, [pc, #172]	; (80028a4 <HAL_DMA_Start+0x220>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2a      	ldr	r2, [pc, #168]	; (80028a8 <HAL_DMA_Start+0x224>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a28      	ldr	r2, [pc, #160]	; (80028ac <HAL_DMA_Start+0x228>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <HAL_DMA_Start+0x22c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <HAL_DMA_Start+0x230>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <HAL_DMA_Start+0x234>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_DMA_Start+0x238>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Start+0x1bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <HAL_DMA_Start+0x23c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <HAL_DMA_Start+0x1ce>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e012      	b.n	8002878 <HAL_DMA_Start+0x1f4>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e009      	b.n	8002878 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002878:	7dfb      	ldrb	r3, [r7, #23]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40020010 	.word	0x40020010
 8002888:	40020028 	.word	0x40020028
 800288c:	40020040 	.word	0x40020040
 8002890:	40020058 	.word	0x40020058
 8002894:	40020070 	.word	0x40020070
 8002898:	40020088 	.word	0x40020088
 800289c:	400200a0 	.word	0x400200a0
 80028a0:	400200b8 	.word	0x400200b8
 80028a4:	40020410 	.word	0x40020410
 80028a8:	40020428 	.word	0x40020428
 80028ac:	40020440 	.word	0x40020440
 80028b0:	40020458 	.word	0x40020458
 80028b4:	40020470 	.word	0x40020470
 80028b8:	40020488 	.word	0x40020488
 80028bc:	400204a0 	.word	0x400204a0
 80028c0:	400204b8 	.word	0x400204b8

080028c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e226      	b.n	8002d2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Start_IT+0x2a>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e21f      	b.n	8002d2e <HAL_DMA_Start_IT+0x46a>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 820a 	bne.w	8002d18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a68      	ldr	r2, [pc, #416]	; (8002ab8 <HAL_DMA_Start_IT+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04a      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a66      	ldr	r2, [pc, #408]	; (8002abc <HAL_DMA_Start_IT+0x1f8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d045      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a65      	ldr	r2, [pc, #404]	; (8002ac0 <HAL_DMA_Start_IT+0x1fc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <HAL_DMA_Start_IT+0x200>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d03b      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a62      	ldr	r2, [pc, #392]	; (8002ac8 <HAL_DMA_Start_IT+0x204>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d036      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a60      	ldr	r2, [pc, #384]	; (8002acc <HAL_DMA_Start_IT+0x208>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5f      	ldr	r2, [pc, #380]	; (8002ad0 <HAL_DMA_Start_IT+0x20c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d02c      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <HAL_DMA_Start_IT+0x210>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5c      	ldr	r2, [pc, #368]	; (8002ad8 <HAL_DMA_Start_IT+0x214>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_DMA_Start_IT+0x218>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a59      	ldr	r2, [pc, #356]	; (8002ae0 <HAL_DMA_Start_IT+0x21c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_DMA_Start_IT+0x220>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a56      	ldr	r2, [pc, #344]	; (8002ae8 <HAL_DMA_Start_IT+0x224>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_DMA_Start_IT+0x228>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a53      	ldr	r2, [pc, #332]	; (8002af0 <HAL_DMA_Start_IT+0x22c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_DMA_Start_IT+0x230>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <HAL_DMA_Start_IT+0x100>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e007      	b.n	80029d4 <HAL_DMA_Start_IT+0x110>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f001 fe68 	bl	80046b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_DMA_Start_IT+0x1f4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d04a      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_DMA_Start_IT+0x1f8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d045      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_DMA_Start_IT+0x1fc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d040      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a30      	ldr	r2, [pc, #192]	; (8002ac4 <HAL_DMA_Start_IT+0x200>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d03b      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_DMA_Start_IT+0x204>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d036      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_DMA_Start_IT+0x208>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d031      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_DMA_Start_IT+0x20c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02c      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_DMA_Start_IT+0x210>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d027      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_DMA_Start_IT+0x214>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d022      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_DMA_Start_IT+0x218>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d01d      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DMA_Start_IT+0x21c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_DMA_Start_IT+0x220>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Start_IT+0x224>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_DMA_Start_IT+0x228>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_DMA_Start_IT+0x22c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_DMA_Start_IT+0x230>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Start_IT+0x1c0>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_DMA_Start_IT+0x1c2>
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d036      	beq.n	8002af8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 021e 	bic.w	r2, r3, #30
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0216 	orr.w	r2, r2, #22
 8002a9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03e      	beq.n	8002b24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0208 	orr.w	r2, r2, #8
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e035      	b.n	8002b24 <HAL_DMA_Start_IT+0x260>
 8002ab8:	40020010 	.word	0x40020010
 8002abc:	40020028 	.word	0x40020028
 8002ac0:	40020040 	.word	0x40020040
 8002ac4:	40020058 	.word	0x40020058
 8002ac8:	40020070 	.word	0x40020070
 8002acc:	40020088 	.word	0x40020088
 8002ad0:	400200a0 	.word	0x400200a0
 8002ad4:	400200b8 	.word	0x400200b8
 8002ad8:	40020410 	.word	0x40020410
 8002adc:	40020428 	.word	0x40020428
 8002ae0:	40020440 	.word	0x40020440
 8002ae4:	40020458 	.word	0x40020458
 8002ae8:	40020470 	.word	0x40020470
 8002aec:	40020488 	.word	0x40020488
 8002af0:	400204a0 	.word	0x400204a0
 8002af4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 020e 	bic.w	r2, r3, #14
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 020a 	orr.w	r2, r2, #10
 8002b0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0204 	orr.w	r2, r2, #4
 8002b22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a83      	ldr	r2, [pc, #524]	; (8002d38 <HAL_DMA_Start_IT+0x474>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d072      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a82      	ldr	r2, [pc, #520]	; (8002d3c <HAL_DMA_Start_IT+0x478>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d06d      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a80      	ldr	r2, [pc, #512]	; (8002d40 <HAL_DMA_Start_IT+0x47c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d068      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7f      	ldr	r2, [pc, #508]	; (8002d44 <HAL_DMA_Start_IT+0x480>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d063      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a7d      	ldr	r2, [pc, #500]	; (8002d48 <HAL_DMA_Start_IT+0x484>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d05e      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7c      	ldr	r2, [pc, #496]	; (8002d4c <HAL_DMA_Start_IT+0x488>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d059      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7a      	ldr	r2, [pc, #488]	; (8002d50 <HAL_DMA_Start_IT+0x48c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d054      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a79      	ldr	r2, [pc, #484]	; (8002d54 <HAL_DMA_Start_IT+0x490>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d04f      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a77      	ldr	r2, [pc, #476]	; (8002d58 <HAL_DMA_Start_IT+0x494>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d04a      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a76      	ldr	r2, [pc, #472]	; (8002d5c <HAL_DMA_Start_IT+0x498>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d045      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a74      	ldr	r2, [pc, #464]	; (8002d60 <HAL_DMA_Start_IT+0x49c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d040      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a73      	ldr	r2, [pc, #460]	; (8002d64 <HAL_DMA_Start_IT+0x4a0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d03b      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a71      	ldr	r2, [pc, #452]	; (8002d68 <HAL_DMA_Start_IT+0x4a4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d036      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a70      	ldr	r2, [pc, #448]	; (8002d6c <HAL_DMA_Start_IT+0x4a8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d031      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_DMA_Start_IT+0x4ac>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02c      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6d      	ldr	r2, [pc, #436]	; (8002d74 <HAL_DMA_Start_IT+0x4b0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d027      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6b      	ldr	r2, [pc, #428]	; (8002d78 <HAL_DMA_Start_IT+0x4b4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6a      	ldr	r2, [pc, #424]	; (8002d7c <HAL_DMA_Start_IT+0x4b8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01d      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	; (8002d80 <HAL_DMA_Start_IT+0x4bc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a67      	ldr	r2, [pc, #412]	; (8002d84 <HAL_DMA_Start_IT+0x4c0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a65      	ldr	r2, [pc, #404]	; (8002d88 <HAL_DMA_Start_IT+0x4c4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a64      	ldr	r2, [pc, #400]	; (8002d8c <HAL_DMA_Start_IT+0x4c8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a62      	ldr	r2, [pc, #392]	; (8002d90 <HAL_DMA_Start_IT+0x4cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a61      	ldr	r2, [pc, #388]	; (8002d94 <HAL_DMA_Start_IT+0x4d0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_DMA_Start_IT+0x354>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_Start_IT+0x356>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01a      	beq.n	8002c54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a37      	ldr	r2, [pc, #220]	; (8002d38 <HAL_DMA_Start_IT+0x474>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a36      	ldr	r2, [pc, #216]	; (8002d3c <HAL_DMA_Start_IT+0x478>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d045      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <HAL_DMA_Start_IT+0x47c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <HAL_DMA_Start_IT+0x480>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <HAL_DMA_Start_IT+0x484>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d036      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <HAL_DMA_Start_IT+0x488>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2e      	ldr	r2, [pc, #184]	; (8002d50 <HAL_DMA_Start_IT+0x48c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02c      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2d      	ldr	r2, [pc, #180]	; (8002d54 <HAL_DMA_Start_IT+0x490>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <HAL_DMA_Start_IT+0x494>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <HAL_DMA_Start_IT+0x498>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_DMA_Start_IT+0x49c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_DMA_Start_IT+0x4a0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <HAL_DMA_Start_IT+0x4a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <HAL_DMA_Start_IT+0x4a8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_DMA_Start_IT+0x4ac>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a21      	ldr	r2, [pc, #132]	; (8002d74 <HAL_DMA_Start_IT+0x4b0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <HAL_DMA_Start_IT+0x442>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e012      	b.n	8002d2c <HAL_DMA_Start_IT+0x468>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e009      	b.n	8002d2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020010 	.word	0x40020010
 8002d3c:	40020028 	.word	0x40020028
 8002d40:	40020040 	.word	0x40020040
 8002d44:	40020058 	.word	0x40020058
 8002d48:	40020070 	.word	0x40020070
 8002d4c:	40020088 	.word	0x40020088
 8002d50:	400200a0 	.word	0x400200a0
 8002d54:	400200b8 	.word	0x400200b8
 8002d58:	40020410 	.word	0x40020410
 8002d5c:	40020428 	.word	0x40020428
 8002d60:	40020440 	.word	0x40020440
 8002d64:	40020458 	.word	0x40020458
 8002d68:	40020470 	.word	0x40020470
 8002d6c:	40020488 	.word	0x40020488
 8002d70:	400204a0 	.word	0x400204a0
 8002d74:	400204b8 	.word	0x400204b8
 8002d78:	58025408 	.word	0x58025408
 8002d7c:	5802541c 	.word	0x5802541c
 8002d80:	58025430 	.word	0x58025430
 8002d84:	58025444 	.word	0x58025444
 8002d88:	58025458 	.word	0x58025458
 8002d8c:	5802546c 	.word	0x5802546c
 8002d90:	58025480 	.word	0x58025480
 8002d94:	58025494 	.word	0x58025494

08002d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7fe ff76 	bl	8001c90 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e2dc      	b.n	800336a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e2cd      	b.n	800336a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a76      	ldr	r2, [pc, #472]	; (8002fac <HAL_DMA_Abort+0x214>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d04a      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a74      	ldr	r2, [pc, #464]	; (8002fb0 <HAL_DMA_Abort+0x218>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d045      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	; (8002fb4 <HAL_DMA_Abort+0x21c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a71      	ldr	r2, [pc, #452]	; (8002fb8 <HAL_DMA_Abort+0x220>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d03b      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a70      	ldr	r2, [pc, #448]	; (8002fbc <HAL_DMA_Abort+0x224>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d036      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	; (8002fc0 <HAL_DMA_Abort+0x228>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d031      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6d      	ldr	r2, [pc, #436]	; (8002fc4 <HAL_DMA_Abort+0x22c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d02c      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6b      	ldr	r2, [pc, #428]	; (8002fc8 <HAL_DMA_Abort+0x230>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d027      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_DMA_Abort+0x234>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	; (8002fd0 <HAL_DMA_Abort+0x238>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <HAL_DMA_Abort+0x23c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_DMA_Abort+0x240>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a64      	ldr	r2, [pc, #400]	; (8002fdc <HAL_DMA_Abort+0x244>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a62      	ldr	r2, [pc, #392]	; (8002fe0 <HAL_DMA_Abort+0x248>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_DMA_Abort+0x24c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <HAL_DMA_Abort+0x250>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_DMA_Abort+0xda>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_DMA_Abort+0xdc>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 021e 	bic.w	r2, r2, #30
 8002e86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e00a      	b.n	8002eb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 020e 	bic.w	r2, r2, #14
 8002eae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <HAL_DMA_Abort+0x214>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d072      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3a      	ldr	r2, [pc, #232]	; (8002fb0 <HAL_DMA_Abort+0x218>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d06d      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_DMA_Abort+0x21c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d068      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a37      	ldr	r2, [pc, #220]	; (8002fb8 <HAL_DMA_Abort+0x220>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d063      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_DMA_Abort+0x224>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <HAL_DMA_Abort+0x228>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d059      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a33      	ldr	r2, [pc, #204]	; (8002fc4 <HAL_DMA_Abort+0x22c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d054      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a31      	ldr	r2, [pc, #196]	; (8002fc8 <HAL_DMA_Abort+0x230>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04f      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_DMA_Abort+0x234>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_DMA_Abort+0x238>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_DMA_Abort+0x23c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <HAL_DMA_Abort+0x240>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <HAL_DMA_Abort+0x244>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <HAL_DMA_Abort+0x248>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_DMA_Abort+0x24c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <HAL_DMA_Abort+0x250>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a24      	ldr	r2, [pc, #144]	; (8002fec <HAL_DMA_Abort+0x254>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_DMA_Abort+0x258>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_DMA_Abort+0x25c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_DMA_Abort+0x260>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_DMA_Abort+0x264>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_DMA_Abort+0x268>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_DMA_Abort+0x26c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_DMA_Abort+0x270>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d132      	bne.n	800300c <HAL_DMA_Abort+0x274>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e031      	b.n	800300e <HAL_DMA_Abort+0x276>
 8002faa:	bf00      	nop
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8
 8002fec:	58025408 	.word	0x58025408
 8002ff0:	5802541c 	.word	0x5802541c
 8002ff4:	58025430 	.word	0x58025430
 8002ff8:	58025444 	.word	0x58025444
 8002ffc:	58025458 	.word	0x58025458
 8003000:	5802546c 	.word	0x5802546c
 8003004:	58025480 	.word	0x58025480
 8003008:	58025494 	.word	0x58025494
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003020:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6d      	ldr	r2, [pc, #436]	; (80031dc <HAL_DMA_Abort+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04a      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6b      	ldr	r2, [pc, #428]	; (80031e0 <HAL_DMA_Abort+0x448>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6a      	ldr	r2, [pc, #424]	; (80031e4 <HAL_DMA_Abort+0x44c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a68      	ldr	r2, [pc, #416]	; (80031e8 <HAL_DMA_Abort+0x450>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d03b      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a67      	ldr	r2, [pc, #412]	; (80031ec <HAL_DMA_Abort+0x454>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d036      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_DMA_Abort+0x458>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a64      	ldr	r2, [pc, #400]	; (80031f4 <HAL_DMA_Abort+0x45c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d02c      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a62      	ldr	r2, [pc, #392]	; (80031f8 <HAL_DMA_Abort+0x460>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a61      	ldr	r2, [pc, #388]	; (80031fc <HAL_DMA_Abort+0x464>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5f      	ldr	r2, [pc, #380]	; (8003200 <HAL_DMA_Abort+0x468>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_DMA_Abort+0x46c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <HAL_DMA_Abort+0x470>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5b      	ldr	r2, [pc, #364]	; (800320c <HAL_DMA_Abort+0x474>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a59      	ldr	r2, [pc, #356]	; (8003210 <HAL_DMA_Abort+0x478>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_DMA_Abort+0x47c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a56      	ldr	r2, [pc, #344]	; (8003218 <HAL_DMA_Abort+0x480>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <HAL_DMA_Abort+0x33c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e007      	b.n	80030e4 <HAL_DMA_Abort+0x34c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030e4:	e013      	b.n	800310e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030e6:	f7fe fdd3 	bl	8001c90 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d90c      	bls.n	800310e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e12d      	b.n	800336a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <HAL_DMA_Abort+0x444>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d04a      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <HAL_DMA_Abort+0x448>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d045      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <HAL_DMA_Abort+0x44c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d040      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_DMA_Abort+0x450>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d03b      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_DMA_Abort+0x454>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d036      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_DMA_Abort+0x458>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d031      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_DMA_Abort+0x45c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d02c      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <HAL_DMA_Abort+0x460>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d027      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a23      	ldr	r2, [pc, #140]	; (80031fc <HAL_DMA_Abort+0x464>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a21      	ldr	r2, [pc, #132]	; (8003200 <HAL_DMA_Abort+0x468>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01d      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_DMA_Abort+0x46c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d018      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_DMA_Abort+0x470>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_DMA_Abort+0x474>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_DMA_Abort+0x478>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_DMA_Abort+0x47c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_DMA_Abort+0x480>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_DMA_Abort+0x426>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_DMA_Abort+0x428>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02b      	beq.n	800321c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	223f      	movs	r2, #63	; 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	e02a      	b.n	8003232 <HAL_DMA_Abort+0x49a>
 80031dc:	40020010 	.word	0x40020010
 80031e0:	40020028 	.word	0x40020028
 80031e4:	40020040 	.word	0x40020040
 80031e8:	40020058 	.word	0x40020058
 80031ec:	40020070 	.word	0x40020070
 80031f0:	40020088 	.word	0x40020088
 80031f4:	400200a0 	.word	0x400200a0
 80031f8:	400200b8 	.word	0x400200b8
 80031fc:	40020410 	.word	0x40020410
 8003200:	40020428 	.word	0x40020428
 8003204:	40020440 	.word	0x40020440
 8003208:	40020458 	.word	0x40020458
 800320c:	40020470 	.word	0x40020470
 8003210:	40020488 	.word	0x40020488
 8003214:	400204a0 	.word	0x400204a0
 8003218:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4f      	ldr	r2, [pc, #316]	; (8003374 <HAL_DMA_Abort+0x5dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d072      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4d      	ldr	r2, [pc, #308]	; (8003378 <HAL_DMA_Abort+0x5e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d06d      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4c      	ldr	r2, [pc, #304]	; (800337c <HAL_DMA_Abort+0x5e4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d068      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4a      	ldr	r2, [pc, #296]	; (8003380 <HAL_DMA_Abort+0x5e8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d063      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a49      	ldr	r2, [pc, #292]	; (8003384 <HAL_DMA_Abort+0x5ec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d05e      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_DMA_Abort+0x5f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d059      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a46      	ldr	r2, [pc, #280]	; (800338c <HAL_DMA_Abort+0x5f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d054      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a44      	ldr	r2, [pc, #272]	; (8003390 <HAL_DMA_Abort+0x5f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d04f      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a43      	ldr	r2, [pc, #268]	; (8003394 <HAL_DMA_Abort+0x5fc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04a      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a41      	ldr	r2, [pc, #260]	; (8003398 <HAL_DMA_Abort+0x600>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d045      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <HAL_DMA_Abort+0x604>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d040      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3e      	ldr	r2, [pc, #248]	; (80033a0 <HAL_DMA_Abort+0x608>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d03b      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <HAL_DMA_Abort+0x60c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d036      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <HAL_DMA_Abort+0x610>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <HAL_DMA_Abort+0x614>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02c      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <HAL_DMA_Abort+0x618>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d027      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a37      	ldr	r2, [pc, #220]	; (80033b4 <HAL_DMA_Abort+0x61c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a35      	ldr	r2, [pc, #212]	; (80033b8 <HAL_DMA_Abort+0x620>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_DMA_Abort+0x624>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_DMA_Abort+0x628>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_DMA_Abort+0x62c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_DMA_Abort+0x630>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_DMA_Abort+0x634>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <HAL_DMA_Abort+0x638>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Abort+0x58e>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_DMA_Abort+0x590>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d015      	beq.n	8003358 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003334:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003356:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494

080033d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e205      	b.n	80037f2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e1fa      	b.n	80037f2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a8c      	ldr	r2, [pc, #560]	; (8003634 <HAL_DMA_Abort_IT+0x260>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a8b      	ldr	r2, [pc, #556]	; (8003638 <HAL_DMA_Abort_IT+0x264>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a89      	ldr	r2, [pc, #548]	; (800363c <HAL_DMA_Abort_IT+0x268>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a88      	ldr	r2, [pc, #544]	; (8003640 <HAL_DMA_Abort_IT+0x26c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a86      	ldr	r2, [pc, #536]	; (8003644 <HAL_DMA_Abort_IT+0x270>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a85      	ldr	r2, [pc, #532]	; (8003648 <HAL_DMA_Abort_IT+0x274>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a83      	ldr	r2, [pc, #524]	; (800364c <HAL_DMA_Abort_IT+0x278>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a82      	ldr	r2, [pc, #520]	; (8003650 <HAL_DMA_Abort_IT+0x27c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a80      	ldr	r2, [pc, #512]	; (8003654 <HAL_DMA_Abort_IT+0x280>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7f      	ldr	r2, [pc, #508]	; (8003658 <HAL_DMA_Abort_IT+0x284>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a7d      	ldr	r2, [pc, #500]	; (800365c <HAL_DMA_Abort_IT+0x288>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7c      	ldr	r2, [pc, #496]	; (8003660 <HAL_DMA_Abort_IT+0x28c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7a      	ldr	r2, [pc, #488]	; (8003664 <HAL_DMA_Abort_IT+0x290>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a79      	ldr	r2, [pc, #484]	; (8003668 <HAL_DMA_Abort_IT+0x294>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a77      	ldr	r2, [pc, #476]	; (800366c <HAL_DMA_Abort_IT+0x298>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a76      	ldr	r2, [pc, #472]	; (8003670 <HAL_DMA_Abort_IT+0x29c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Abort_IT+0xcc>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_DMA_Abort_IT+0xce>
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d065      	beq.n	8003572 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a60      	ldr	r2, [pc, #384]	; (8003634 <HAL_DMA_Abort_IT+0x260>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5e      	ldr	r2, [pc, #376]	; (8003638 <HAL_DMA_Abort_IT+0x264>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_DMA_Abort_IT+0x268>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <HAL_DMA_Abort_IT+0x26c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5a      	ldr	r2, [pc, #360]	; (8003644 <HAL_DMA_Abort_IT+0x270>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_DMA_Abort_IT+0x274>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_DMA_Abort_IT+0x278>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a55      	ldr	r2, [pc, #340]	; (8003650 <HAL_DMA_Abort_IT+0x27c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a54      	ldr	r2, [pc, #336]	; (8003654 <HAL_DMA_Abort_IT+0x280>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_DMA_Abort_IT+0x284>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a51      	ldr	r2, [pc, #324]	; (800365c <HAL_DMA_Abort_IT+0x288>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4f      	ldr	r2, [pc, #316]	; (8003660 <HAL_DMA_Abort_IT+0x28c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <HAL_DMA_Abort_IT+0x290>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <HAL_DMA_Abort_IT+0x294>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4b      	ldr	r2, [pc, #300]	; (800366c <HAL_DMA_Abort_IT+0x298>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_Abort_IT+0x17a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a49      	ldr	r2, [pc, #292]	; (8003670 <HAL_DMA_Abort_IT+0x29c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d108      	bne.n	8003560 <HAL_DMA_Abort_IT+0x18c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e147      	b.n	80037f0 <HAL_DMA_Abort_IT+0x41c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e13e      	b.n	80037f0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 020e 	bic.w	r2, r2, #14
 8003580:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <HAL_DMA_Abort_IT+0x260>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d04a      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_DMA_Abort_IT+0x264>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d045      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a28      	ldr	r2, [pc, #160]	; (800363c <HAL_DMA_Abort_IT+0x268>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d040      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <HAL_DMA_Abort_IT+0x26c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d03b      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a25      	ldr	r2, [pc, #148]	; (8003644 <HAL_DMA_Abort_IT+0x270>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d036      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_DMA_Abort_IT+0x274>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d031      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_DMA_Abort_IT+0x278>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02c      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <HAL_DMA_Abort_IT+0x27c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d027      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_DMA_Abort_IT+0x280>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d022      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_DMA_Abort_IT+0x284>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01d      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_DMA_Abort_IT+0x288>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_DMA_Abort_IT+0x28c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_DMA_Abort_IT+0x290>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_DMA_Abort_IT+0x294>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	; (800366c <HAL_DMA_Abort_IT+0x298>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_DMA_Abort_IT+0x24e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_DMA_Abort_IT+0x29c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d128      	bne.n	8003674 <HAL_DMA_Abort_IT+0x2a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e027      	b.n	8003684 <HAL_DMA_Abort_IT+0x2b0>
 8003634:	40020010 	.word	0x40020010
 8003638:	40020028 	.word	0x40020028
 800363c:	40020040 	.word	0x40020040
 8003640:	40020058 	.word	0x40020058
 8003644:	40020070 	.word	0x40020070
 8003648:	40020088 	.word	0x40020088
 800364c:	400200a0 	.word	0x400200a0
 8003650:	400200b8 	.word	0x400200b8
 8003654:	40020410 	.word	0x40020410
 8003658:	40020428 	.word	0x40020428
 800365c:	40020440 	.word	0x40020440
 8003660:	40020458 	.word	0x40020458
 8003664:	40020470 	.word	0x40020470
 8003668:	40020488 	.word	0x40020488
 800366c:	400204a0 	.word	0x400204a0
 8003670:	400204b8 	.word	0x400204b8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5c      	ldr	r2, [pc, #368]	; (80037fc <HAL_DMA_Abort_IT+0x428>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d072      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5b      	ldr	r2, [pc, #364]	; (8003800 <HAL_DMA_Abort_IT+0x42c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d06d      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_DMA_Abort_IT+0x430>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d068      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a58      	ldr	r2, [pc, #352]	; (8003808 <HAL_DMA_Abort_IT+0x434>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d063      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a56      	ldr	r2, [pc, #344]	; (800380c <HAL_DMA_Abort_IT+0x438>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d05e      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a55      	ldr	r2, [pc, #340]	; (8003810 <HAL_DMA_Abort_IT+0x43c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d059      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a53      	ldr	r2, [pc, #332]	; (8003814 <HAL_DMA_Abort_IT+0x440>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d054      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_DMA_Abort_IT+0x444>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d04f      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a50      	ldr	r2, [pc, #320]	; (800381c <HAL_DMA_Abort_IT+0x448>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04a      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4f      	ldr	r2, [pc, #316]	; (8003820 <HAL_DMA_Abort_IT+0x44c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d045      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a4d      	ldr	r2, [pc, #308]	; (8003824 <HAL_DMA_Abort_IT+0x450>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d040      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4c      	ldr	r2, [pc, #304]	; (8003828 <HAL_DMA_Abort_IT+0x454>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_DMA_Abort_IT+0x458>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d036      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a49      	ldr	r2, [pc, #292]	; (8003830 <HAL_DMA_Abort_IT+0x45c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d031      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a47      	ldr	r2, [pc, #284]	; (8003834 <HAL_DMA_Abort_IT+0x460>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a46      	ldr	r2, [pc, #280]	; (8003838 <HAL_DMA_Abort_IT+0x464>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d027      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a44      	ldr	r2, [pc, #272]	; (800383c <HAL_DMA_Abort_IT+0x468>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a43      	ldr	r2, [pc, #268]	; (8003840 <HAL_DMA_Abort_IT+0x46c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_DMA_Abort_IT+0x470>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a40      	ldr	r2, [pc, #256]	; (8003848 <HAL_DMA_Abort_IT+0x474>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3e      	ldr	r2, [pc, #248]	; (800384c <HAL_DMA_Abort_IT+0x478>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3d      	ldr	r2, [pc, #244]	; (8003850 <HAL_DMA_Abort_IT+0x47c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3b      	ldr	r2, [pc, #236]	; (8003854 <HAL_DMA_Abort_IT+0x480>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_Abort_IT+0x3a0>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3a      	ldr	r2, [pc, #232]	; (8003858 <HAL_DMA_Abort_IT+0x484>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_DMA_Abort_IT+0x3a4>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_DMA_Abort_IT+0x3a6>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d028      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00c      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40020010 	.word	0x40020010
 8003800:	40020028 	.word	0x40020028
 8003804:	40020040 	.word	0x40020040
 8003808:	40020058 	.word	0x40020058
 800380c:	40020070 	.word	0x40020070
 8003810:	40020088 	.word	0x40020088
 8003814:	400200a0 	.word	0x400200a0
 8003818:	400200b8 	.word	0x400200b8
 800381c:	40020410 	.word	0x40020410
 8003820:	40020428 	.word	0x40020428
 8003824:	40020440 	.word	0x40020440
 8003828:	40020458 	.word	0x40020458
 800382c:	40020470 	.word	0x40020470
 8003830:	40020488 	.word	0x40020488
 8003834:	400204a0 	.word	0x400204a0
 8003838:	400204b8 	.word	0x400204b8
 800383c:	58025408 	.word	0x58025408
 8003840:	5802541c 	.word	0x5802541c
 8003844:	58025430 	.word	0x58025430
 8003848:	58025444 	.word	0x58025444
 800384c:	58025458 	.word	0x58025458
 8003850:	5802546c 	.word	0x5802546c
 8003854:	58025480 	.word	0x58025480
 8003858:	58025494 	.word	0x58025494

0800385c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003868:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_DMA_IRQHandler+0x1ac>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a67      	ldr	r2, [pc, #412]	; (8003a0c <HAL_DMA_IRQHandler+0x1b0>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5f      	ldr	r2, [pc, #380]	; (8003a10 <HAL_DMA_IRQHandler+0x1b4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04a      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5d      	ldr	r2, [pc, #372]	; (8003a14 <HAL_DMA_IRQHandler+0x1b8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d045      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <HAL_DMA_IRQHandler+0x1bc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d040      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5a      	ldr	r2, [pc, #360]	; (8003a1c <HAL_DMA_IRQHandler+0x1c0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d03b      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a59      	ldr	r2, [pc, #356]	; (8003a20 <HAL_DMA_IRQHandler+0x1c4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d036      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_DMA_IRQHandler+0x1c8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <HAL_DMA_IRQHandler+0x1cc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d02c      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a54      	ldr	r2, [pc, #336]	; (8003a2c <HAL_DMA_IRQHandler+0x1d0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d027      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a53      	ldr	r2, [pc, #332]	; (8003a30 <HAL_DMA_IRQHandler+0x1d4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_DMA_IRQHandler+0x1d8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a50      	ldr	r2, [pc, #320]	; (8003a38 <HAL_DMA_IRQHandler+0x1dc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a4e      	ldr	r2, [pc, #312]	; (8003a3c <HAL_DMA_IRQHandler+0x1e0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <HAL_DMA_IRQHandler+0x1e4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a4b      	ldr	r2, [pc, #300]	; (8003a44 <HAL_DMA_IRQHandler+0x1e8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a4a      	ldr	r2, [pc, #296]	; (8003a48 <HAL_DMA_IRQHandler+0x1ec>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_DMA_IRQHandler+0xd2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a48      	ldr	r2, [pc, #288]	; (8003a4c <HAL_DMA_IRQHandler+0x1f0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_DMA_IRQHandler+0xd6>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_DMA_IRQHandler+0xd8>
 8003932:	2300      	movs	r3, #0
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 842b 	beq.w	8004190 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2208      	movs	r2, #8
 8003944:	409a      	lsls	r2, r3
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80a2 	beq.w	8003a94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <HAL_DMA_IRQHandler+0x1b4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d04a      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <HAL_DMA_IRQHandler+0x1b8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d045      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2b      	ldr	r2, [pc, #172]	; (8003a18 <HAL_DMA_IRQHandler+0x1bc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d040      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_DMA_IRQHandler+0x1c0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d03b      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <HAL_DMA_IRQHandler+0x1c4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d036      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <HAL_DMA_IRQHandler+0x1c8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d031      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <HAL_DMA_IRQHandler+0x1cc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d02c      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <HAL_DMA_IRQHandler+0x1d0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d027      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <HAL_DMA_IRQHandler+0x1d4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d022      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <HAL_DMA_IRQHandler+0x1d8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d01d      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_DMA_IRQHandler+0x1dc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d018      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <HAL_DMA_IRQHandler+0x1e0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d013      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <HAL_DMA_IRQHandler+0x1e4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_DMA_IRQHandler+0x1e8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d009      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <HAL_DMA_IRQHandler+0x1ec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x194>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <HAL_DMA_IRQHandler+0x1f0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d12f      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x1f4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	e02e      	b.n	8003a64 <HAL_DMA_IRQHandler+0x208>
 8003a06:	bf00      	nop
 8003a08:	24000018 	.word	0x24000018
 8003a0c:	1b4e81b5 	.word	0x1b4e81b5
 8003a10:	40020010 	.word	0x40020010
 8003a14:	40020028 	.word	0x40020028
 8003a18:	40020040 	.word	0x40020040
 8003a1c:	40020058 	.word	0x40020058
 8003a20:	40020070 	.word	0x40020070
 8003a24:	40020088 	.word	0x40020088
 8003a28:	400200a0 	.word	0x400200a0
 8003a2c:	400200b8 	.word	0x400200b8
 8003a30:	40020410 	.word	0x40020410
 8003a34:	40020428 	.word	0x40020428
 8003a38:	40020440 	.word	0x40020440
 8003a3c:	40020458 	.word	0x40020458
 8003a40:	40020470 	.word	0x40020470
 8003a44:	40020488 	.word	0x40020488
 8003a48:	400204a0 	.word	0x400204a0
 8003a4c:	400204b8 	.word	0x400204b8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2208      	movs	r2, #8
 8003a82:	409a      	lsls	r2, r3
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d06e      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a69      	ldr	r2, [pc, #420]	; (8003c54 <HAL_DMA_IRQHandler+0x3f8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04a      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a67      	ldr	r2, [pc, #412]	; (8003c58 <HAL_DMA_IRQHandler+0x3fc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d045      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a66      	ldr	r2, [pc, #408]	; (8003c5c <HAL_DMA_IRQHandler+0x400>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d040      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a64      	ldr	r2, [pc, #400]	; (8003c60 <HAL_DMA_IRQHandler+0x404>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d03b      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a63      	ldr	r2, [pc, #396]	; (8003c64 <HAL_DMA_IRQHandler+0x408>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a61      	ldr	r2, [pc, #388]	; (8003c68 <HAL_DMA_IRQHandler+0x40c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a60      	ldr	r2, [pc, #384]	; (8003c6c <HAL_DMA_IRQHandler+0x410>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5e      	ldr	r2, [pc, #376]	; (8003c70 <HAL_DMA_IRQHandler+0x414>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_DMA_IRQHandler+0x418>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a5b      	ldr	r2, [pc, #364]	; (8003c78 <HAL_DMA_IRQHandler+0x41c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5a      	ldr	r2, [pc, #360]	; (8003c7c <HAL_DMA_IRQHandler+0x420>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_DMA_IRQHandler+0x424>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a57      	ldr	r2, [pc, #348]	; (8003c84 <HAL_DMA_IRQHandler+0x428>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a55      	ldr	r2, [pc, #340]	; (8003c88 <HAL_DMA_IRQHandler+0x42c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_DMA_IRQHandler+0x430>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2ee>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_DMA_IRQHandler+0x434>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10a      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x304>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e003      	b.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2204      	movs	r2, #4
 8003b92:	409a      	lsls	r2, r3
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 808f 	beq.w	8003cbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <HAL_DMA_IRQHandler+0x3f8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d04a      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <HAL_DMA_IRQHandler+0x3fc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d045      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_DMA_IRQHandler+0x400>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d040      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <HAL_DMA_IRQHandler+0x404>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d03b      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <HAL_DMA_IRQHandler+0x408>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d036      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <HAL_DMA_IRQHandler+0x40c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d031      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <HAL_DMA_IRQHandler+0x410>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d02c      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <HAL_DMA_IRQHandler+0x414>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d027      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a20      	ldr	r2, [pc, #128]	; (8003c74 <HAL_DMA_IRQHandler+0x418>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_DMA_IRQHandler+0x41c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01d      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <HAL_DMA_IRQHandler+0x420>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <HAL_DMA_IRQHandler+0x424>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_DMA_IRQHandler+0x428>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_DMA_IRQHandler+0x42c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <HAL_DMA_IRQHandler+0x430>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x3e2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <HAL_DMA_IRQHandler+0x434>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d12a      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x438>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e023      	b.n	8003c9c <HAL_DMA_IRQHandler+0x440>
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a6 	beq.w	8003e1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a85      	ldr	r2, [pc, #532]	; (8003eec <HAL_DMA_IRQHandler+0x690>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a83      	ldr	r2, [pc, #524]	; (8003ef0 <HAL_DMA_IRQHandler+0x694>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a82      	ldr	r2, [pc, #520]	; (8003ef4 <HAL_DMA_IRQHandler+0x698>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_DMA_IRQHandler+0x69c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7f      	ldr	r2, [pc, #508]	; (8003efc <HAL_DMA_IRQHandler+0x6a0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7d      	ldr	r2, [pc, #500]	; (8003f00 <HAL_DMA_IRQHandler+0x6a4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a7c      	ldr	r2, [pc, #496]	; (8003f04 <HAL_DMA_IRQHandler+0x6a8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <HAL_DMA_IRQHandler+0x6ac>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <HAL_DMA_IRQHandler+0x6b0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a77      	ldr	r2, [pc, #476]	; (8003f10 <HAL_DMA_IRQHandler+0x6b4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a76      	ldr	r2, [pc, #472]	; (8003f14 <HAL_DMA_IRQHandler+0x6b8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a74      	ldr	r2, [pc, #464]	; (8003f18 <HAL_DMA_IRQHandler+0x6bc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a73      	ldr	r2, [pc, #460]	; (8003f1c <HAL_DMA_IRQHandler+0x6c0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a71      	ldr	r2, [pc, #452]	; (8003f20 <HAL_DMA_IRQHandler+0x6c4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a70      	ldr	r2, [pc, #448]	; (8003f24 <HAL_DMA_IRQHandler+0x6c8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x516>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6e      	ldr	r2, [pc, #440]	; (8003f28 <HAL_DMA_IRQHandler+0x6cc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10a      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x52c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e009      	b.n	8003d9c <HAL_DMA_IRQHandler+0x540>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d03e      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2210      	movs	r2, #16
 8003daa:	409a      	lsls	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d018      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d024      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4798      	blx	r3
 8003ddc:	e01f      	b.n	8003e1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01b      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e016      	b.n	8003e1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0208 	bic.w	r2, r2, #8
 8003e0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2220      	movs	r2, #32
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8110 	beq.w	8004054 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <HAL_DMA_IRQHandler+0x690>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d04a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <HAL_DMA_IRQHandler+0x694>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d045      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a29      	ldr	r2, [pc, #164]	; (8003ef4 <HAL_DMA_IRQHandler+0x698>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d040      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a28      	ldr	r2, [pc, #160]	; (8003ef8 <HAL_DMA_IRQHandler+0x69c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d03b      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_DMA_IRQHandler+0x6a0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d036      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <HAL_DMA_IRQHandler+0x6a4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <HAL_DMA_IRQHandler+0x6a8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02c      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <HAL_DMA_IRQHandler+0x6ac>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d027      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_DMA_IRQHandler+0x6b0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_DMA_IRQHandler+0x6b4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01d      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_DMA_IRQHandler+0x6b8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <HAL_DMA_IRQHandler+0x6bc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_DMA_IRQHandler+0x6c0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_DMA_IRQHandler+0x6c4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_DMA_IRQHandler+0x6c8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x678>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_DMA_IRQHandler+0x6cc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d12b      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x6d0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e02a      	b.n	8003f40 <HAL_DMA_IRQHandler+0x6e4>
 8003eea:	bf00      	nop
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8087 	beq.w	8004054 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2220      	movs	r2, #32
 8003f50:	409a      	lsls	r2, r3
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d139      	bne.n	8003fd6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0216 	bic.w	r2, r2, #22
 8003f70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x736>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0208 	bic.w	r2, r2, #8
 8003fa0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	223f      	movs	r2, #63	; 0x3f
 8003fac:	409a      	lsls	r2, r3
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 834a 	beq.w	8004660 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
          }
          return;
 8003fd4:	e344      	b.n	8004660 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d018      	beq.n	8004016 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d108      	bne.n	8004004 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02c      	beq.n	8004054 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
 8004002:	e027      	b.n	8004054 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d023      	beq.n	8004054 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
 8004014:	e01e      	b.n	8004054 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10f      	bne.n	8004044 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0210 	bic.w	r2, r2, #16
 8004032:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8306 	beq.w	800466a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8088 	beq.w	800417c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2204      	movs	r2, #4
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_DMA_IRQHandler+0xa08>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04a      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a79      	ldr	r2, [pc, #484]	; (8004268 <HAL_DMA_IRQHandler+0xa0c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d045      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a77      	ldr	r2, [pc, #476]	; (800426c <HAL_DMA_IRQHandler+0xa10>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d040      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a76      	ldr	r2, [pc, #472]	; (8004270 <HAL_DMA_IRQHandler+0xa14>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d03b      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a74      	ldr	r2, [pc, #464]	; (8004274 <HAL_DMA_IRQHandler+0xa18>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d036      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a73      	ldr	r2, [pc, #460]	; (8004278 <HAL_DMA_IRQHandler+0xa1c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d031      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a71      	ldr	r2, [pc, #452]	; (800427c <HAL_DMA_IRQHandler+0xa20>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d02c      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_DMA_IRQHandler+0xa24>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d027      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6e      	ldr	r2, [pc, #440]	; (8004284 <HAL_DMA_IRQHandler+0xa28>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6d      	ldr	r2, [pc, #436]	; (8004288 <HAL_DMA_IRQHandler+0xa2c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d01d      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6b      	ldr	r2, [pc, #428]	; (800428c <HAL_DMA_IRQHandler+0xa30>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6a      	ldr	r2, [pc, #424]	; (8004290 <HAL_DMA_IRQHandler+0xa34>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a68      	ldr	r2, [pc, #416]	; (8004294 <HAL_DMA_IRQHandler+0xa38>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a67      	ldr	r2, [pc, #412]	; (8004298 <HAL_DMA_IRQHandler+0xa3c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a65      	ldr	r2, [pc, #404]	; (800429c <HAL_DMA_IRQHandler+0xa40>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_DMA_IRQHandler+0x8b8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a64      	ldr	r2, [pc, #400]	; (80042a0 <HAL_DMA_IRQHandler+0xa44>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_DMA_IRQHandler+0x8ca>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e007      	b.n	8004136 <HAL_DMA_IRQHandler+0x8da>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	429a      	cmp	r2, r3
 8004140:	d307      	bcc.n	8004152 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f2      	bne.n	8004136 <HAL_DMA_IRQHandler+0x8da>
 8004150:	e000      	b.n	8004154 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004152:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2203      	movs	r2, #3
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004172:	e003      	b.n	800417c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8272 	beq.w	800466a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
 800418e:	e26c      	b.n	800466a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a43      	ldr	r2, [pc, #268]	; (80042a4 <HAL_DMA_IRQHandler+0xa48>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d022      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a42      	ldr	r2, [pc, #264]	; (80042a8 <HAL_DMA_IRQHandler+0xa4c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01d      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a40      	ldr	r2, [pc, #256]	; (80042ac <HAL_DMA_IRQHandler+0xa50>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d018      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a3f      	ldr	r2, [pc, #252]	; (80042b0 <HAL_DMA_IRQHandler+0xa54>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a3d      	ldr	r2, [pc, #244]	; (80042b4 <HAL_DMA_IRQHandler+0xa58>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a3c      	ldr	r2, [pc, #240]	; (80042b8 <HAL_DMA_IRQHandler+0xa5c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a3a      	ldr	r2, [pc, #232]	; (80042bc <HAL_DMA_IRQHandler+0xa60>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x984>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a39      	ldr	r2, [pc, #228]	; (80042c0 <HAL_DMA_IRQHandler+0xa64>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x988>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_DMA_IRQHandler+0x98a>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 823f 	beq.w	800466a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2204      	movs	r2, #4
 80041fe:	409a      	lsls	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80cd 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xb48>
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80c7 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2204      	movs	r2, #4
 8004220:	409a      	lsls	r2, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d049      	beq.n	80042c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8210 	beq.w	8004664 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800424c:	e20a      	b.n	8004664 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8206 	beq.w	8004664 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004260:	e200      	b.n	8004664 <HAL_DMA_IRQHandler+0xe08>
 8004262:	bf00      	nop
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	58025444 	.word	0x58025444
 80042b4:	58025458 	.word	0x58025458
 80042b8:	5802546c 	.word	0x5802546c
 80042bc:	58025480 	.word	0x58025480
 80042c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d160      	bne.n	8004390 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a8c      	ldr	r2, [pc, #560]	; (8004504 <HAL_DMA_IRQHandler+0xca8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a8a      	ldr	r2, [pc, #552]	; (8004508 <HAL_DMA_IRQHandler+0xcac>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a89      	ldr	r2, [pc, #548]	; (800450c <HAL_DMA_IRQHandler+0xcb0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a87      	ldr	r2, [pc, #540]	; (8004510 <HAL_DMA_IRQHandler+0xcb4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a86      	ldr	r2, [pc, #536]	; (8004514 <HAL_DMA_IRQHandler+0xcb8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a84      	ldr	r2, [pc, #528]	; (8004518 <HAL_DMA_IRQHandler+0xcbc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a83      	ldr	r2, [pc, #524]	; (800451c <HAL_DMA_IRQHandler+0xcc0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a81      	ldr	r2, [pc, #516]	; (8004520 <HAL_DMA_IRQHandler+0xcc4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a80      	ldr	r2, [pc, #512]	; (8004524 <HAL_DMA_IRQHandler+0xcc8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a7e      	ldr	r2, [pc, #504]	; (8004528 <HAL_DMA_IRQHandler+0xccc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7d      	ldr	r2, [pc, #500]	; (800452c <HAL_DMA_IRQHandler+0xcd0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a7b      	ldr	r2, [pc, #492]	; (8004530 <HAL_DMA_IRQHandler+0xcd4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7a      	ldr	r2, [pc, #488]	; (8004534 <HAL_DMA_IRQHandler+0xcd8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a78      	ldr	r2, [pc, #480]	; (8004538 <HAL_DMA_IRQHandler+0xcdc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a77      	ldr	r2, [pc, #476]	; (800453c <HAL_DMA_IRQHandler+0xce0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_IRQHandler+0xb12>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a75      	ldr	r2, [pc, #468]	; (8004540 <HAL_DMA_IRQHandler+0xce4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d108      	bne.n	8004380 <HAL_DMA_IRQHandler+0xb24>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0208 	bic.w	r2, r2, #8
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e007      	b.n	8004390 <HAL_DMA_IRQHandler+0xb34>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0204 	bic.w	r2, r2, #4
 800438e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8165 	beq.w	8004664 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a2:	e15f      	b.n	8004664 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2202      	movs	r2, #2
 80043ae:	409a      	lsls	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80c5 	beq.w	8004544 <HAL_DMA_IRQHandler+0xce8>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80bf 	beq.w	8004544 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2202      	movs	r2, #2
 80043d0:	409a      	lsls	r2, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d018      	beq.n	8004412 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 813a 	beq.w	8004668 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043fc:	e134      	b.n	8004668 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8130 	beq.w	8004668 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004410:	e12a      	b.n	8004668 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d168      	bne.n	80044ee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a38      	ldr	r2, [pc, #224]	; (8004504 <HAL_DMA_IRQHandler+0xca8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04a      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a37      	ldr	r2, [pc, #220]	; (8004508 <HAL_DMA_IRQHandler+0xcac>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d045      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a35      	ldr	r2, [pc, #212]	; (800450c <HAL_DMA_IRQHandler+0xcb0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d040      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a34      	ldr	r2, [pc, #208]	; (8004510 <HAL_DMA_IRQHandler+0xcb4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d03b      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a32      	ldr	r2, [pc, #200]	; (8004514 <HAL_DMA_IRQHandler+0xcb8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d036      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a31      	ldr	r2, [pc, #196]	; (8004518 <HAL_DMA_IRQHandler+0xcbc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d031      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2f      	ldr	r2, [pc, #188]	; (800451c <HAL_DMA_IRQHandler+0xcc0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02c      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <HAL_DMA_IRQHandler+0xcc4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d027      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2c      	ldr	r2, [pc, #176]	; (8004524 <HAL_DMA_IRQHandler+0xcc8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <HAL_DMA_IRQHandler+0xccc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <HAL_DMA_IRQHandler+0xcd0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a28      	ldr	r2, [pc, #160]	; (8004530 <HAL_DMA_IRQHandler+0xcd4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a26      	ldr	r2, [pc, #152]	; (8004534 <HAL_DMA_IRQHandler+0xcd8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_DMA_IRQHandler+0xcdc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a23      	ldr	r2, [pc, #140]	; (800453c <HAL_DMA_IRQHandler+0xce0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_IRQHandler+0xc60>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a22      	ldr	r2, [pc, #136]	; (8004540 <HAL_DMA_IRQHandler+0xce4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <HAL_DMA_IRQHandler+0xc72>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0214 	bic.w	r2, r2, #20
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e007      	b.n	80044de <HAL_DMA_IRQHandler+0xc82>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 020a 	bic.w	r2, r2, #10
 80044dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80b8 	beq.w	8004668 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004500:	e0b2      	b.n	8004668 <HAL_DMA_IRQHandler+0xe0c>
 8004502:	bf00      	nop
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2208      	movs	r2, #8
 800454e:	409a      	lsls	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8088 	beq.w	800466a <HAL_DMA_IRQHandler+0xe0e>
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8082 	beq.w	800466a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a41      	ldr	r2, [pc, #260]	; (8004670 <HAL_DMA_IRQHandler+0xe14>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04a      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a3f      	ldr	r2, [pc, #252]	; (8004674 <HAL_DMA_IRQHandler+0xe18>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d045      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3e      	ldr	r2, [pc, #248]	; (8004678 <HAL_DMA_IRQHandler+0xe1c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3c      	ldr	r2, [pc, #240]	; (800467c <HAL_DMA_IRQHandler+0xe20>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d03b      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a3b      	ldr	r2, [pc, #236]	; (8004680 <HAL_DMA_IRQHandler+0xe24>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d036      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a39      	ldr	r2, [pc, #228]	; (8004684 <HAL_DMA_IRQHandler+0xe28>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d031      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a38      	ldr	r2, [pc, #224]	; (8004688 <HAL_DMA_IRQHandler+0xe2c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02c      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a36      	ldr	r2, [pc, #216]	; (800468c <HAL_DMA_IRQHandler+0xe30>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d027      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a35      	ldr	r2, [pc, #212]	; (8004690 <HAL_DMA_IRQHandler+0xe34>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a33      	ldr	r2, [pc, #204]	; (8004694 <HAL_DMA_IRQHandler+0xe38>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a32      	ldr	r2, [pc, #200]	; (8004698 <HAL_DMA_IRQHandler+0xe3c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a30      	ldr	r2, [pc, #192]	; (800469c <HAL_DMA_IRQHandler+0xe40>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <HAL_DMA_IRQHandler+0xe44>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <HAL_DMA_IRQHandler+0xe48>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2c      	ldr	r2, [pc, #176]	; (80046a8 <HAL_DMA_IRQHandler+0xe4c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_DMA_IRQHandler+0xdaa>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <HAL_DMA_IRQHandler+0xe50>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d108      	bne.n	8004618 <HAL_DMA_IRQHandler+0xdbc>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 021c 	bic.w	r2, r2, #28
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e007      	b.n	8004628 <HAL_DMA_IRQHandler+0xdcc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 020e 	bic.w	r2, r2, #14
 8004626:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2201      	movs	r2, #1
 8004632:	409a      	lsls	r2, r3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	4798      	blx	r3
 800465e:	e004      	b.n	800466a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004660:	bf00      	nop
 8004662:	e002      	b.n	800466a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004664:	bf00      	nop
 8004666:	e000      	b.n	800466a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004668:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40020010 	.word	0x40020010
 8004674:	40020028 	.word	0x40020028
 8004678:	40020040 	.word	0x40020040
 800467c:	40020058 	.word	0x40020058
 8004680:	40020070 	.word	0x40020070
 8004684:	40020088 	.word	0x40020088
 8004688:	400200a0 	.word	0x400200a0
 800468c:	400200b8 	.word	0x400200b8
 8004690:	40020410 	.word	0x40020410
 8004694:	40020428 	.word	0x40020428
 8004698:	40020440 	.word	0x40020440
 800469c:	40020458 	.word	0x40020458
 80046a0:	40020470 	.word	0x40020470
 80046a4:	40020488 	.word	0x40020488
 80046a8:	400204a0 	.word	0x400204a0
 80046ac:	400204b8 	.word	0x400204b8

080046b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a84      	ldr	r2, [pc, #528]	; (80048e0 <DMA_SetConfig+0x230>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d072      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a82      	ldr	r2, [pc, #520]	; (80048e4 <DMA_SetConfig+0x234>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d06d      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a81      	ldr	r2, [pc, #516]	; (80048e8 <DMA_SetConfig+0x238>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d068      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a7f      	ldr	r2, [pc, #508]	; (80048ec <DMA_SetConfig+0x23c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d063      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a7e      	ldr	r2, [pc, #504]	; (80048f0 <DMA_SetConfig+0x240>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d05e      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a7c      	ldr	r2, [pc, #496]	; (80048f4 <DMA_SetConfig+0x244>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d059      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7b      	ldr	r2, [pc, #492]	; (80048f8 <DMA_SetConfig+0x248>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d054      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a79      	ldr	r2, [pc, #484]	; (80048fc <DMA_SetConfig+0x24c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d04f      	beq.n	80047ba <DMA_SetConfig+0x10a>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a78      	ldr	r2, [pc, #480]	; (8004900 <DMA_SetConfig+0x250>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a76      	ldr	r2, [pc, #472]	; (8004904 <DMA_SetConfig+0x254>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <DMA_SetConfig+0x10a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a75      	ldr	r2, [pc, #468]	; (8004908 <DMA_SetConfig+0x258>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a73      	ldr	r2, [pc, #460]	; (800490c <DMA_SetConfig+0x25c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a72      	ldr	r2, [pc, #456]	; (8004910 <DMA_SetConfig+0x260>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <DMA_SetConfig+0x10a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a70      	ldr	r2, [pc, #448]	; (8004914 <DMA_SetConfig+0x264>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6f      	ldr	r2, [pc, #444]	; (8004918 <DMA_SetConfig+0x268>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6d      	ldr	r2, [pc, #436]	; (800491c <DMA_SetConfig+0x26c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <DMA_SetConfig+0x10a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6c      	ldr	r2, [pc, #432]	; (8004920 <DMA_SetConfig+0x270>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6a      	ldr	r2, [pc, #424]	; (8004924 <DMA_SetConfig+0x274>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <DMA_SetConfig+0x10a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a69      	ldr	r2, [pc, #420]	; (8004928 <DMA_SetConfig+0x278>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a67      	ldr	r2, [pc, #412]	; (800492c <DMA_SetConfig+0x27c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <DMA_SetConfig+0x10a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a66      	ldr	r2, [pc, #408]	; (8004930 <DMA_SetConfig+0x280>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <DMA_SetConfig+0x10a>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a64      	ldr	r2, [pc, #400]	; (8004934 <DMA_SetConfig+0x284>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a63      	ldr	r2, [pc, #396]	; (8004938 <DMA_SetConfig+0x288>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <DMA_SetConfig+0x10a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a61      	ldr	r2, [pc, #388]	; (800493c <DMA_SetConfig+0x28c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <DMA_SetConfig+0x10e>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <DMA_SetConfig+0x110>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00d      	beq.n	80047e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <DMA_SetConfig+0x230>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a3d      	ldr	r2, [pc, #244]	; (80048e4 <DMA_SetConfig+0x234>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <DMA_SetConfig+0x238>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <DMA_SetConfig+0x23c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a38      	ldr	r2, [pc, #224]	; (80048f0 <DMA_SetConfig+0x240>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a37      	ldr	r2, [pc, #220]	; (80048f4 <DMA_SetConfig+0x244>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a35      	ldr	r2, [pc, #212]	; (80048f8 <DMA_SetConfig+0x248>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a34      	ldr	r2, [pc, #208]	; (80048fc <DMA_SetConfig+0x24c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a32      	ldr	r2, [pc, #200]	; (8004900 <DMA_SetConfig+0x250>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a31      	ldr	r2, [pc, #196]	; (8004904 <DMA_SetConfig+0x254>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2f      	ldr	r2, [pc, #188]	; (8004908 <DMA_SetConfig+0x258>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2e      	ldr	r2, [pc, #184]	; (800490c <DMA_SetConfig+0x25c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <DMA_SetConfig+0x260>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <DMA_SetConfig+0x264>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <DMA_SetConfig+0x268>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <DMA_SetConfig+0x1d0>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a28      	ldr	r2, [pc, #160]	; (800491c <DMA_SetConfig+0x26c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <DMA_SetConfig+0x1d4>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <DMA_SetConfig+0x1d6>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d05a      	beq.n	8004940 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	223f      	movs	r2, #63	; 0x3f
 8004894:	409a      	lsls	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b40      	cmp	r3, #64	; 0x40
 80048b8:	d108      	bne.n	80048cc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ca:	e087      	b.n	80049dc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]
}
 80048dc:	e07e      	b.n	80049dc <DMA_SetConfig+0x32c>
 80048de:	bf00      	nop
 80048e0:	40020010 	.word	0x40020010
 80048e4:	40020028 	.word	0x40020028
 80048e8:	40020040 	.word	0x40020040
 80048ec:	40020058 	.word	0x40020058
 80048f0:	40020070 	.word	0x40020070
 80048f4:	40020088 	.word	0x40020088
 80048f8:	400200a0 	.word	0x400200a0
 80048fc:	400200b8 	.word	0x400200b8
 8004900:	40020410 	.word	0x40020410
 8004904:	40020428 	.word	0x40020428
 8004908:	40020440 	.word	0x40020440
 800490c:	40020458 	.word	0x40020458
 8004910:	40020470 	.word	0x40020470
 8004914:	40020488 	.word	0x40020488
 8004918:	400204a0 	.word	0x400204a0
 800491c:	400204b8 	.word	0x400204b8
 8004920:	58025408 	.word	0x58025408
 8004924:	5802541c 	.word	0x5802541c
 8004928:	58025430 	.word	0x58025430
 800492c:	58025444 	.word	0x58025444
 8004930:	58025458 	.word	0x58025458
 8004934:	5802546c 	.word	0x5802546c
 8004938:	58025480 	.word	0x58025480
 800493c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a28      	ldr	r2, [pc, #160]	; (80049e8 <DMA_SetConfig+0x338>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a27      	ldr	r2, [pc, #156]	; (80049ec <DMA_SetConfig+0x33c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d01d      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <DMA_SetConfig+0x340>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <DMA_SetConfig+0x344>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a22      	ldr	r2, [pc, #136]	; (80049f8 <DMA_SetConfig+0x348>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a21      	ldr	r2, [pc, #132]	; (80049fc <DMA_SetConfig+0x34c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <DMA_SetConfig+0x350>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <DMA_SetConfig+0x2e0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <DMA_SetConfig+0x354>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <DMA_SetConfig+0x2e4>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <DMA_SetConfig+0x2e6>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2201      	movs	r2, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d108      	bne.n	80049cc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	60da      	str	r2, [r3, #12]
}
 80049ca:	e007      	b.n	80049dc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	60da      	str	r2, [r3, #12]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	58025408 	.word	0x58025408
 80049ec:	5802541c 	.word	0x5802541c
 80049f0:	58025430 	.word	0x58025430
 80049f4:	58025444 	.word	0x58025444
 80049f8:	58025458 	.word	0x58025458
 80049fc:	5802546c 	.word	0x5802546c
 8004a00:	58025480 	.word	0x58025480
 8004a04:	58025494 	.word	0x58025494

08004a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a42      	ldr	r2, [pc, #264]	; (8004b20 <DMA_CalcBaseAndBitshift+0x118>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04a      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a41      	ldr	r2, [pc, #260]	; (8004b24 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d045      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3f      	ldr	r2, [pc, #252]	; (8004b28 <DMA_CalcBaseAndBitshift+0x120>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d040      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3e      	ldr	r2, [pc, #248]	; (8004b2c <DMA_CalcBaseAndBitshift+0x124>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3c      	ldr	r2, [pc, #240]	; (8004b30 <DMA_CalcBaseAndBitshift+0x128>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a3b      	ldr	r2, [pc, #236]	; (8004b34 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d031      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a39      	ldr	r2, [pc, #228]	; (8004b38 <DMA_CalcBaseAndBitshift+0x130>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02c      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a38      	ldr	r2, [pc, #224]	; (8004b3c <DMA_CalcBaseAndBitshift+0x134>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a36      	ldr	r2, [pc, #216]	; (8004b40 <DMA_CalcBaseAndBitshift+0x138>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <DMA_CalcBaseAndBitshift+0x140>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a32      	ldr	r2, [pc, #200]	; (8004b4c <DMA_CalcBaseAndBitshift+0x144>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <DMA_CalcBaseAndBitshift+0x148>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <DMA_CalcBaseAndBitshift+0x150>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2c      	ldr	r2, [pc, #176]	; (8004b5c <DMA_CalcBaseAndBitshift+0x154>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <DMA_CalcBaseAndBitshift+0xac>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <DMA_CalcBaseAndBitshift+0xae>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d024      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3b10      	subs	r3, #16
 8004ac2:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <DMA_CalcBaseAndBitshift+0x158>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ad4:	5cd3      	ldrb	r3, [r2, r3]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d908      	bls.n	8004af4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <DMA_CalcBaseAndBitshift+0x160>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	1d1a      	adds	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	659a      	str	r2, [r3, #88]	; 0x58
 8004af2:	e00d      	b.n	8004b10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <DMA_CalcBaseAndBitshift+0x160>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6593      	str	r3, [r2, #88]	; 0x58
 8004b02:	e005      	b.n	8004b10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40020010 	.word	0x40020010
 8004b24:	40020028 	.word	0x40020028
 8004b28:	40020040 	.word	0x40020040
 8004b2c:	40020058 	.word	0x40020058
 8004b30:	40020070 	.word	0x40020070
 8004b34:	40020088 	.word	0x40020088
 8004b38:	400200a0 	.word	0x400200a0
 8004b3c:	400200b8 	.word	0x400200b8
 8004b40:	40020410 	.word	0x40020410
 8004b44:	40020428 	.word	0x40020428
 8004b48:	40020440 	.word	0x40020440
 8004b4c:	40020458 	.word	0x40020458
 8004b50:	40020470 	.word	0x40020470
 8004b54:	40020488 	.word	0x40020488
 8004b58:	400204a0 	.word	0x400204a0
 8004b5c:	400204b8 	.word	0x400204b8
 8004b60:	aaaaaaab 	.word	0xaaaaaaab
 8004b64:	08009ab0 	.word	0x08009ab0
 8004b68:	fffffc00 	.word	0xfffffc00

08004b6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d120      	bne.n	8004bc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d858      	bhi.n	8004c3a <DMA_CheckFifoParam+0xce>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <DMA_CheckFifoParam+0x24>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bb3 	.word	0x08004bb3
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004c3b 	.word	0x08004c3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d048      	beq.n	8004c3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bb0:	e045      	b.n	8004c3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bba:	d142      	bne.n	8004c42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bc0:	e03f      	b.n	8004c42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d123      	bne.n	8004c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d838      	bhi.n	8004c46 <DMA_CheckFifoParam+0xda>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <DMA_CheckFifoParam+0x70>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bf3 	.word	0x08004bf3
 8004be4:	08004bed 	.word	0x08004bed
 8004be8:	08004c05 	.word	0x08004c05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf0:	e030      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d025      	beq.n	8004c4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c02:	e022      	b.n	8004c4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c0c:	d11f      	bne.n	8004c4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c12:	e01c      	b.n	8004c4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d902      	bls.n	8004c22 <DMA_CheckFifoParam+0xb6>
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d003      	beq.n	8004c28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c20:	e018      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
        break;
 8004c26:	e015      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00e      	beq.n	8004c52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
    break;
 8004c38:	e00b      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e00a      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3e:	bf00      	nop
 8004c40:	e008      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        break;
 8004c42:	bf00      	nop
 8004c44:	e006      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        break;
 8004c46:	bf00      	nop
 8004c48:	e004      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <DMA_CheckFifoParam+0xe8>
    break;
 8004c52:	bf00      	nop
    }
  }

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop

08004c64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a36      	ldr	r2, [pc, #216]	; (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a35      	ldr	r2, [pc, #212]	; (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a33      	ldr	r2, [pc, #204]	; (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a32      	ldr	r2, [pc, #200]	; (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a30      	ldr	r2, [pc, #192]	; (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2d      	ldr	r2, [pc, #180]	; (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01a      	beq.n	8004d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	3b08      	subs	r3, #8
 8004cd4:	4a28      	ldr	r2, [pc, #160]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004cf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d00:	e024      	b.n	8004d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	3b10      	subs	r3, #16
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d806      	bhi.n	8004d2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d902      	bls.n	8004d2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3308      	adds	r3, #8
 8004d28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
 8004d78:	cccccccd 	.word	0xcccccccd
 8004d7c:	16009600 	.word	0x16009600
 8004d80:	58025880 	.word	0x58025880
 8004d84:	aaaaaaab 	.word	0xaaaaaaab
 8004d88:	400204b8 	.word	0x400204b8
 8004d8c:	4002040f 	.word	0x4002040f
 8004d90:	10008200 	.word	0x10008200
 8004d94:	40020880 	.word	0x40020880

08004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d04a      	beq.n	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d847      	bhi.n	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01d      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a22      	ldr	r2, [pc, #136]	; (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e20:	671a      	str	r2, [r3, #112]	; 0x70
 8004e22:	e009      	b.n	8004e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	58025408 	.word	0x58025408
 8004e54:	5802541c 	.word	0x5802541c
 8004e58:	58025430 	.word	0x58025430
 8004e5c:	58025444 	.word	0x58025444
 8004e60:	58025458 	.word	0x58025458
 8004e64:	5802546c 	.word	0x5802546c
 8004e68:	58025480 	.word	0x58025480
 8004e6c:	58025494 	.word	0x58025494
 8004e70:	1600963f 	.word	0x1600963f
 8004e74:	58025940 	.word	0x58025940
 8004e78:	1000823f 	.word	0x1000823f
 8004e7c:	40020940 	.word	0x40020940

08004e80 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e00a      	b.n	8004eb2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004e9c:	7afb      	ldrb	r3, [r7, #11]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
      break;
 8004ea8:	e002      	b.n	8004eb0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
      break;
 8004eae:	bf00      	nop
  }

  return status;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e003      	b.n	8004eda <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	; 0x24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ef6:	4b89      	ldr	r3, [pc, #548]	; (800511c <HAL_GPIO_Init+0x234>)
 8004ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004efa:	e194      	b.n	8005226 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8186 	beq.w	8005220 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d00b      	beq.n	8004f34 <HAL_GPIO_Init+0x4c>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d007      	beq.n	8004f34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f28:	2b11      	cmp	r3, #17
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b12      	cmp	r3, #18
 8004f32:	d130      	bne.n	8004f96 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	2203      	movs	r2, #3
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0201 	and.w	r2, r3, #1
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4013      	ands	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0xee>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b12      	cmp	r3, #18
 8004fd4:	d123      	bne.n	800501e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	08da      	lsrs	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3208      	adds	r2, #8
 8004fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	220f      	movs	r2, #15
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	08da      	lsrs	r2, r3, #3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3208      	adds	r2, #8
 8005018:	69b9      	ldr	r1, [r7, #24]
 800501a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	2203      	movs	r2, #3
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 0203 	and.w	r2, r3, #3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80e0 	beq.w	8005220 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005060:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_GPIO_Init+0x238>)
 8005062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005066:	4a2e      	ldr	r2, [pc, #184]	; (8005120 <HAL_GPIO_Init+0x238>)
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005070:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_GPIO_Init+0x238>)
 8005072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800507e:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_GPIO_Init+0x23c>)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a20      	ldr	r2, [pc, #128]	; (8005128 <HAL_GPIO_Init+0x240>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d052      	beq.n	8005150 <HAL_GPIO_Init+0x268>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_GPIO_Init+0x244>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d031      	beq.n	8005116 <HAL_GPIO_Init+0x22e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_GPIO_Init+0x248>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02b      	beq.n	8005112 <HAL_GPIO_Init+0x22a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <HAL_GPIO_Init+0x24c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d025      	beq.n	800510e <HAL_GPIO_Init+0x226>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <HAL_GPIO_Init+0x250>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <HAL_GPIO_Init+0x222>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_GPIO_Init+0x254>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d019      	beq.n	8005106 <HAL_GPIO_Init+0x21e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1a      	ldr	r2, [pc, #104]	; (8005140 <HAL_GPIO_Init+0x258>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_GPIO_Init+0x21a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_GPIO_Init+0x25c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00d      	beq.n	80050fe <HAL_GPIO_Init+0x216>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a18      	ldr	r2, [pc, #96]	; (8005148 <HAL_GPIO_Init+0x260>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <HAL_GPIO_Init+0x212>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <HAL_GPIO_Init+0x264>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_GPIO_Init+0x20e>
 80050f2:	2309      	movs	r3, #9
 80050f4:	e02d      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 80050f6:	230a      	movs	r3, #10
 80050f8:	e02b      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 80050fa:	2308      	movs	r3, #8
 80050fc:	e029      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 80050fe:	2307      	movs	r3, #7
 8005100:	e027      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 8005102:	2306      	movs	r3, #6
 8005104:	e025      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 8005106:	2305      	movs	r3, #5
 8005108:	e023      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 800510a:	2304      	movs	r3, #4
 800510c:	e021      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 800510e:	2303      	movs	r3, #3
 8005110:	e01f      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 8005112:	2302      	movs	r3, #2
 8005114:	e01d      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 8005116:	2301      	movs	r3, #1
 8005118:	e01b      	b.n	8005152 <HAL_GPIO_Init+0x26a>
 800511a:	bf00      	nop
 800511c:	58000080 	.word	0x58000080
 8005120:	58024400 	.word	0x58024400
 8005124:	58000400 	.word	0x58000400
 8005128:	58020000 	.word	0x58020000
 800512c:	58020400 	.word	0x58020400
 8005130:	58020800 	.word	0x58020800
 8005134:	58020c00 	.word	0x58020c00
 8005138:	58021000 	.word	0x58021000
 800513c:	58021400 	.word	0x58021400
 8005140:	58021800 	.word	0x58021800
 8005144:	58021c00 	.word	0x58021c00
 8005148:	58022000 	.word	0x58022000
 800514c:	58022400 	.word	0x58022400
 8005150:	2300      	movs	r3, #0
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	f002 0203 	and.w	r2, r2, #3
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	4093      	lsls	r3, r2
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005162:	4938      	ldr	r1, [pc, #224]	; (8005244 <HAL_GPIO_Init+0x35c>)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	3302      	adds	r3, #2
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	43db      	mvns	r3, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4013      	ands	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f ae63 	bne.w	8004efc <HAL_GPIO_Init+0x14>
  }
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	3724      	adds	r7, #36	; 0x24
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	58000400 	.word	0x58000400

08005248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]
 8005254:	4613      	mov	r3, r2
 8005256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005258:	787b      	ldrb	r3, [r7, #1]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800525e:	887a      	ldrh	r2, [r7, #2]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005264:	e003      	b.n	800526e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	041a      	lsls	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	619a      	str	r2, [r3, #24]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800528c:	887a      	ldrh	r2, [r7, #2]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4013      	ands	r3, r2
 8005292:	041a      	lsls	r2, r3, #16
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43d9      	mvns	r1, r3
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	400b      	ands	r3, r1
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb fe29 	bl	8000f2c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052ec:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_PWREx_ConfigSupply+0x70>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d00a      	beq.n	800530e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <HAL_PWREx_ConfigSupply+0x70>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	429a      	cmp	r2, r3
 8005304:	d001      	beq.n	800530a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e01f      	b.n	800534a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e01d      	b.n	800534a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_PWREx_ConfigSupply+0x70>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f023 0207 	bic.w	r2, r3, #7
 8005316:	490f      	ldr	r1, [pc, #60]	; (8005354 <HAL_PWREx_ConfigSupply+0x70>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800531e:	f7fc fcb7 	bl	8001c90 <HAL_GetTick>
 8005322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005324:	e009      	b.n	800533a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005326:	f7fc fcb3 	bl	8001c90 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005334:	d901      	bls.n	800533a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e007      	b.n	800534a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <HAL_PWREx_ConfigSupply+0x70>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	d1ee      	bne.n	8005326 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	58024800 	.word	0x58024800

08005358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08c      	sub	sp, #48	; 0x30
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e3ff      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8087 	beq.w	8005486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005378:	4b99      	ldr	r3, [pc, #612]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005382:	4b97      	ldr	r3, [pc, #604]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b10      	cmp	r3, #16
 800538c:	d007      	beq.n	800539e <HAL_RCC_OscConfig+0x46>
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2b18      	cmp	r3, #24
 8005392:	d110      	bne.n	80053b6 <HAL_RCC_OscConfig+0x5e>
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d10b      	bne.n	80053b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539e:	4b90      	ldr	r3, [pc, #576]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06c      	beq.n	8005484 <HAL_RCC_OscConfig+0x12c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d168      	bne.n	8005484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e3d9      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x76>
 80053c0:	4b87      	ldr	r3, [pc, #540]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a86      	ldr	r2, [pc, #536]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e02e      	b.n	800542c <HAL_RCC_OscConfig+0xd4>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x98>
 80053d6:	4b82      	ldr	r3, [pc, #520]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a81      	ldr	r2, [pc, #516]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b7f      	ldr	r3, [pc, #508]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7e      	ldr	r2, [pc, #504]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e01d      	b.n	800542c <HAL_RCC_OscConfig+0xd4>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0xbc>
 80053fa:	4b79      	ldr	r3, [pc, #484]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a78      	ldr	r2, [pc, #480]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b76      	ldr	r3, [pc, #472]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a75      	ldr	r2, [pc, #468]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e00b      	b.n	800542c <HAL_RCC_OscConfig+0xd4>
 8005414:	4b72      	ldr	r3, [pc, #456]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a71      	ldr	r2, [pc, #452]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b6f      	ldr	r3, [pc, #444]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a6e      	ldr	r2, [pc, #440]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc fc2c 	bl	8001c90 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543c:	f7fc fc28 	bl	8001c90 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e38d      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800544e:	4b64      	ldr	r3, [pc, #400]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0xe4>
 800545a:	e014      	b.n	8005486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fc fc18 	bl	8001c90 <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005464:	f7fc fc14 	bl	8001c90 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e379      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005476:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x10c>
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80ae 	beq.w	80055f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005494:	4b52      	ldr	r3, [pc, #328]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800549e:	4b50      	ldr	r3, [pc, #320]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_RCC_OscConfig+0x162>
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	2b18      	cmp	r3, #24
 80054ae:	d13a      	bne.n	8005526 <HAL_RCC_OscConfig+0x1ce>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d135      	bne.n	8005526 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ba:	4b49      	ldr	r3, [pc, #292]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x17a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e34b      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	f7fc fc1d 	bl	8001d10 <HAL_GetREVID>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80054dc:	4293      	cmp	r3, r2
 80054de:	d817      	bhi.n	8005510 <HAL_RCC_OscConfig+0x1b8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d108      	bne.n	80054fa <HAL_RCC_OscConfig+0x1a2>
 80054e8:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054f0:	4a3b      	ldr	r2, [pc, #236]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80054f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f8:	e07a      	b.n	80055f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fa:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	4935      	ldr	r1, [pc, #212]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800550e:	e06f      	b.n	80055f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	4930      	ldr	r1, [pc, #192]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005524:	e064      	b.n	80055f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d045      	beq.n	80055ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800552e:	4b2c      	ldr	r3, [pc, #176]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 0219 	bic.w	r2, r3, #25
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	4929      	ldr	r1, [pc, #164]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800553c:	4313      	orrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc fba6 	bl	8001c90 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005548:	f7fc fba2 	bl	8001c90 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e307      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800555a:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005566:	f7fc fbd3 	bl	8001d10 <HAL_GetREVID>
 800556a:	4603      	mov	r3, r0
 800556c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005570:	4293      	cmp	r3, r2
 8005572:	d817      	bhi.n	80055a4 <HAL_RCC_OscConfig+0x24c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d108      	bne.n	800558e <HAL_RCC_OscConfig+0x236>
 800557c:	4b18      	ldr	r3, [pc, #96]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005584:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558a:	6053      	str	r3, [r2, #4]
 800558c:	e030      	b.n	80055f0 <HAL_RCC_OscConfig+0x298>
 800558e:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	031b      	lsls	r3, r3, #12
 800559c:	4910      	ldr	r1, [pc, #64]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	604b      	str	r3, [r1, #4]
 80055a2:	e025      	b.n	80055f0 <HAL_RCC_OscConfig+0x298>
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	061b      	lsls	r3, r3, #24
 80055b2:	490b      	ldr	r1, [pc, #44]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]
 80055b8:	e01a      	b.n	80055f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <HAL_RCC_OscConfig+0x288>)
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fc fb63 	bl	8001c90 <HAL_GetTick>
 80055ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055cc:	e00a      	b.n	80055e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ce:	f7fc fb5f 	bl	8001c90 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d903      	bls.n	80055e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e2c4      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
 80055e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055e4:	4ba4      	ldr	r3, [pc, #656]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ee      	bne.n	80055ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80a9 	beq.w	8005750 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fe:	4b9e      	ldr	r3, [pc, #632]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005606:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005608:	4b9b      	ldr	r3, [pc, #620]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d007      	beq.n	8005624 <HAL_RCC_OscConfig+0x2cc>
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b18      	cmp	r3, #24
 8005618:	d13a      	bne.n	8005690 <HAL_RCC_OscConfig+0x338>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d135      	bne.n	8005690 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005624:	4b94      	ldr	r3, [pc, #592]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_OscConfig+0x2e4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	2b80      	cmp	r3, #128	; 0x80
 8005636:	d001      	beq.n	800563c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e296      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800563c:	f7fc fb68 	bl	8001d10 <HAL_GetREVID>
 8005640:	4603      	mov	r3, r0
 8005642:	f241 0203 	movw	r2, #4099	; 0x1003
 8005646:	4293      	cmp	r3, r2
 8005648:	d817      	bhi.n	800567a <HAL_RCC_OscConfig+0x322>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	2b20      	cmp	r3, #32
 8005650:	d108      	bne.n	8005664 <HAL_RCC_OscConfig+0x30c>
 8005652:	4b89      	ldr	r3, [pc, #548]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800565a:	4a87      	ldr	r2, [pc, #540]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800565c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005660:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005662:	e075      	b.n	8005750 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005664:	4b84      	ldr	r3, [pc, #528]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	069b      	lsls	r3, r3, #26
 8005672:	4981      	ldr	r1, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005678:	e06a      	b.n	8005750 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800567a:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	061b      	lsls	r3, r3, #24
 8005688:	497b      	ldr	r1, [pc, #492]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800568a:	4313      	orrs	r3, r2
 800568c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800568e:	e05f      	b.n	8005750 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d042      	beq.n	800571e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005698:	4b77      	ldr	r3, [pc, #476]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a76      	ldr	r2, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fc faf4 	bl	8001c90 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056ac:	f7fc faf0 	bl	8001c90 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e255      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056be:	4b6e      	ldr	r3, [pc, #440]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056ca:	f7fc fb21 	bl	8001d10 <HAL_GetREVID>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d817      	bhi.n	8005708 <HAL_RCC_OscConfig+0x3b0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d108      	bne.n	80056f2 <HAL_RCC_OscConfig+0x39a>
 80056e0:	4b65      	ldr	r3, [pc, #404]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056e8:	4a63      	ldr	r2, [pc, #396]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80056ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	6053      	str	r3, [r2, #4]
 80056f0:	e02e      	b.n	8005750 <HAL_RCC_OscConfig+0x3f8>
 80056f2:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	069b      	lsls	r3, r3, #26
 8005700:	495d      	ldr	r1, [pc, #372]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005702:	4313      	orrs	r3, r2
 8005704:	604b      	str	r3, [r1, #4]
 8005706:	e023      	b.n	8005750 <HAL_RCC_OscConfig+0x3f8>
 8005708:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	4958      	ldr	r1, [pc, #352]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005718:	4313      	orrs	r3, r2
 800571a:	60cb      	str	r3, [r1, #12]
 800571c:	e018      	b.n	8005750 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800571e:	4b56      	ldr	r3, [pc, #344]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a55      	ldr	r2, [pc, #340]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fc fab1 	bl	8001c90 <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005732:	f7fc faad 	bl	8001c90 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e212      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005744:	4b4c      	ldr	r3, [pc, #304]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d036      	beq.n	80057ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d019      	beq.n	8005798 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005764:	4b44      	ldr	r3, [pc, #272]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005768:	4a43      	ldr	r2, [pc, #268]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fc fa8e 	bl	8001c90 <HAL_GetTick>
 8005774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005778:	f7fc fa8a 	bl	8001c90 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e1ef      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800578a:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800578c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x420>
 8005796:	e018      	b.n	80057ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005798:	4b37      	ldr	r3, [pc, #220]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800579a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579c:	4a36      	ldr	r2, [pc, #216]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fc fa74 	bl	8001c90 <HAL_GetTick>
 80057a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ac:	f7fc fa70 	bl	8001c90 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e1d5      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80057c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d036      	beq.n	8005844 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d019      	beq.n	8005812 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a25      	ldr	r2, [pc, #148]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 80057e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ea:	f7fc fa51 	bl	8001c90 <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057f2:	f7fc fa4d 	bl	8001c90 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e1b2      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005804:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x49a>
 8005810:	e018      	b.n	8005844 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005812:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 8005818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800581e:	f7fc fa37 	bl	8001c90 <HAL_GetTick>
 8005822:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005826:	f7fc fa33 	bl	8001c90 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e198      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <HAL_RCC_OscConfig+0x520>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8085 	beq.w	800595c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_RCC_OscConfig+0x524>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <HAL_RCC_OscConfig+0x524>)
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800585e:	f7fc fa17 	bl	8001c90 <HAL_GetTick>
 8005862:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005864:	e00c      	b.n	8005880 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005866:	f7fc fa13 	bl	8001c90 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b64      	cmp	r3, #100	; 0x64
 8005872:	d905      	bls.n	8005880 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e178      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
 8005878:	58024400 	.word	0x58024400
 800587c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005880:	4b96      	ldr	r3, [pc, #600]	; (8005adc <HAL_RCC_OscConfig+0x784>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ec      	beq.n	8005866 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d106      	bne.n	80058a2 <HAL_RCC_OscConfig+0x54a>
 8005894:	4b92      	ldr	r3, [pc, #584]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4a91      	ldr	r2, [pc, #580]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6713      	str	r3, [r2, #112]	; 0x70
 80058a0:	e02d      	b.n	80058fe <HAL_RCC_OscConfig+0x5a6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x56c>
 80058aa:	4b8d      	ldr	r3, [pc, #564]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	4a8c      	ldr	r2, [pc, #560]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	6713      	str	r3, [r2, #112]	; 0x70
 80058b6:	4b8a      	ldr	r3, [pc, #552]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a89      	ldr	r2, [pc, #548]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
 80058c2:	e01c      	b.n	80058fe <HAL_RCC_OscConfig+0x5a6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d10c      	bne.n	80058e6 <HAL_RCC_OscConfig+0x58e>
 80058cc:	4b84      	ldr	r3, [pc, #528]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	4a83      	ldr	r2, [pc, #524]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058d2:	f043 0304 	orr.w	r3, r3, #4
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70
 80058d8:	4b81      	ldr	r3, [pc, #516]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	4a80      	ldr	r2, [pc, #512]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6713      	str	r3, [r2, #112]	; 0x70
 80058e4:	e00b      	b.n	80058fe <HAL_RCC_OscConfig+0x5a6>
 80058e6:	4b7e      	ldr	r3, [pc, #504]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a7d      	ldr	r2, [pc, #500]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	4b7b      	ldr	r3, [pc, #492]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	4a7a      	ldr	r2, [pc, #488]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d015      	beq.n	8005932 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005906:	f7fc f9c3 	bl	8001c90 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800590c:	e00a      	b.n	8005924 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590e:	f7fc f9bf 	bl	8001c90 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f241 3288 	movw	r2, #5000	; 0x1388
 800591c:	4293      	cmp	r3, r2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e122      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005924:	4b6e      	ldr	r3, [pc, #440]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ee      	beq.n	800590e <HAL_RCC_OscConfig+0x5b6>
 8005930:	e014      	b.n	800595c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7fc f9ad 	bl	8001c90 <HAL_GetTick>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005938:	e00a      	b.n	8005950 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fc f9a9 	bl	8001c90 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e10c      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005950:	4b63      	ldr	r3, [pc, #396]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ee      	bne.n	800593a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8101 	beq.w	8005b68 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005966:	4b5e      	ldr	r3, [pc, #376]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800596e:	2b18      	cmp	r3, #24
 8005970:	f000 80bc 	beq.w	8005aec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b02      	cmp	r3, #2
 800597a:	f040 8095 	bne.w	8005aa8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597e:	4b58      	ldr	r3, [pc, #352]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a57      	ldr	r2, [pc, #348]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc f981 	bl	8001c90 <HAL_GetTick>
 800598e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005992:	f7fc f97d 	bl	8001c90 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e0e2      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059a4:	4b4e      	ldr	r3, [pc, #312]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b0:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80059b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b4:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <HAL_RCC_OscConfig+0x78c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059c0:	0112      	lsls	r2, r2, #4
 80059c2:	430a      	orrs	r2, r1
 80059c4:	4946      	ldr	r1, [pc, #280]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	628b      	str	r3, [r1, #40]	; 0x28
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	3b01      	subs	r3, #1
 80059da:	025b      	lsls	r3, r3, #9
 80059dc:	b29b      	uxth	r3, r3
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	3b01      	subs	r3, #1
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	3b01      	subs	r3, #1
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059fa:	4939      	ldr	r1, [pc, #228]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a00:	4b37      	ldr	r3, [pc, #220]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a36      	ldr	r2, [pc, #216]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a0c:	4b34      	ldr	r3, [pc, #208]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a10:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <HAL_RCC_OscConfig+0x790>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a18:	00d2      	lsls	r2, r2, #3
 8005a1a:	4931      	ldr	r1, [pc, #196]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a20:	4b2f      	ldr	r3, [pc, #188]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	f023 020c 	bic.w	r2, r3, #12
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	492c      	ldr	r1, [pc, #176]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a32:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	f023 0202 	bic.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	4928      	ldr	r1, [pc, #160]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a44:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a50:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a22      	ldr	r2, [pc, #136]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a5c:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a68:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fc f906 	bl	8001c90 <HAL_GetTick>
 8005a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a88:	f7fc f902 	bl	8001c90 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e067      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0x730>
 8005aa6:	e05f      	b.n	8005b68 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fc f8ec 	bl	8001c90 <HAL_GetTick>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fc f8e8 	bl	8001c90 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e04d      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <HAL_RCC_OscConfig+0x788>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0x764>
 8005ada:	e045      	b.n	8005b68 <HAL_RCC_OscConfig+0x810>
 8005adc:	58024800 	.word	0x58024800
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	fffffc0c 	.word	0xfffffc0c
 8005ae8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005aec:	4b21      	ldr	r3, [pc, #132]	; (8005b74 <HAL_RCC_OscConfig+0x81c>)
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_RCC_OscConfig+0x81c>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d031      	beq.n	8005b64 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f003 0203 	and.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d12a      	bne.n	8005b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d122      	bne.n	8005b64 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d11a      	bne.n	8005b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d111      	bne.n	8005b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	0c1b      	lsrs	r3, r3, #16
 8005b44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d108      	bne.n	8005b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	0e1b      	lsrs	r3, r3, #24
 8005b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3730      	adds	r7, #48	; 0x30
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400

08005b78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e19c      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b8c:	4b8a      	ldr	r3, [pc, #552]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d910      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9a:	4b87      	ldr	r3, [pc, #540]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 020f 	bic.w	r2, r3, #15
 8005ba2:	4985      	ldr	r1, [pc, #532]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b83      	ldr	r3, [pc, #524]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e184      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d010      	beq.n	8005bea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	4b7b      	ldr	r3, [pc, #492]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d908      	bls.n	8005bea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bd8:	4b78      	ldr	r3, [pc, #480]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	4975      	ldr	r1, [pc, #468]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d010      	beq.n	8005c18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	4b70      	ldr	r3, [pc, #448]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d908      	bls.n	8005c18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c06:	4b6d      	ldr	r3, [pc, #436]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	496a      	ldr	r1, [pc, #424]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d908      	bls.n	8005c46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c34:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	495e      	ldr	r1, [pc, #376]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d908      	bls.n	8005c74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c62:	4b56      	ldr	r3, [pc, #344]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4953      	ldr	r1, [pc, #332]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d010      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d908      	bls.n	8005ca2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c90:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f023 020f 	bic.w	r2, r3, #15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4947      	ldr	r1, [pc, #284]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d055      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cae:	4b43      	ldr	r3, [pc, #268]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	4940      	ldr	r1, [pc, #256]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cc8:	4b3c      	ldr	r3, [pc, #240]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d121      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0f6      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d115      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0ea      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cf8:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0de      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d08:	4b2c      	ldr	r3, [pc, #176]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0d6      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d18:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f023 0207 	bic.w	r2, r3, #7
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4925      	ldr	r1, [pc, #148]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fb ffb1 	bl	8001c90 <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d30:	e00a      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d32:	f7fb ffad 	bl	8001c90 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e0be      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d48:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d1eb      	bne.n	8005d32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d010      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d208      	bcs.n	8005d88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d76:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f023 020f 	bic.w	r2, r3, #15
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	490e      	ldr	r1, [pc, #56]	; (8005dbc <HAL_RCC_ClockConfig+0x244>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d214      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 020f 	bic.w	r2, r3, #15
 8005d9e:	4906      	ldr	r1, [pc, #24]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <HAL_RCC_ClockConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e086      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x34e>
 8005db8:	52002000 	.word	0x52002000
 8005dbc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d010      	beq.n	8005dee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d208      	bcs.n	8005dee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ddc:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	4939      	ldr	r1, [pc, #228]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d208      	bcs.n	8005e1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	492e      	ldr	r1, [pc, #184]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d010      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d208      	bcs.n	8005e4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4922      	ldr	r1, [pc, #136]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d010      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d208      	bcs.n	8005e78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e66:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4917      	ldr	r1, [pc, #92]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e78:	f000 f834 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	4912      	ldr	r1, [pc, #72]	; (8005ed4 <HAL_RCC_ClockConfig+0x35c>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
 8005e94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HAL_RCC_ClockConfig+0x358>)
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <HAL_RCC_ClockConfig+0x35c>)
 8005ea0:	5cd3      	ldrb	r3, [r2, r3]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eac:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <HAL_RCC_ClockConfig+0x360>)
 8005eae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <HAL_RCC_ClockConfig+0x364>)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005eb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <HAL_RCC_ClockConfig+0x368>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb fe9e 	bl	8001bfc <HAL_InitTick>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	08009aa0 	.word	0x08009aa0
 8005ed8:	2400001c 	.word	0x2400001c
 8005edc:	24000018 	.word	0x24000018
 8005ee0:	24000020 	.word	0x24000020

08005ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eea:	4bb3      	ldr	r3, [pc, #716]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef2:	2b18      	cmp	r3, #24
 8005ef4:	f200 8155 	bhi.w	80061a2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	080061a3 	.word	0x080061a3
 8005f08:	080061a3 	.word	0x080061a3
 8005f0c:	080061a3 	.word	0x080061a3
 8005f10:	080061a3 	.word	0x080061a3
 8005f14:	080061a3 	.word	0x080061a3
 8005f18:	080061a3 	.word	0x080061a3
 8005f1c:	080061a3 	.word	0x080061a3
 8005f20:	08005f8b 	.word	0x08005f8b
 8005f24:	080061a3 	.word	0x080061a3
 8005f28:	080061a3 	.word	0x080061a3
 8005f2c:	080061a3 	.word	0x080061a3
 8005f30:	080061a3 	.word	0x080061a3
 8005f34:	080061a3 	.word	0x080061a3
 8005f38:	080061a3 	.word	0x080061a3
 8005f3c:	080061a3 	.word	0x080061a3
 8005f40:	08005f91 	.word	0x08005f91
 8005f44:	080061a3 	.word	0x080061a3
 8005f48:	080061a3 	.word	0x080061a3
 8005f4c:	080061a3 	.word	0x080061a3
 8005f50:	080061a3 	.word	0x080061a3
 8005f54:	080061a3 	.word	0x080061a3
 8005f58:	080061a3 	.word	0x080061a3
 8005f5c:	080061a3 	.word	0x080061a3
 8005f60:	08005f97 	.word	0x08005f97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f64:	4b94      	ldr	r3, [pc, #592]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f70:	4b91      	ldr	r3, [pc, #580]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	08db      	lsrs	r3, r3, #3
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	4a90      	ldr	r2, [pc, #576]	; (80061bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f82:	e111      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f84:	4b8d      	ldr	r3, [pc, #564]	; (80061bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f86:	61bb      	str	r3, [r7, #24]
    break;
 8005f88:	e10e      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f8a:	4b8d      	ldr	r3, [pc, #564]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f8c:	61bb      	str	r3, [r7, #24]
    break;
 8005f8e:	e10b      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f90:	4b8c      	ldr	r3, [pc, #560]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f92:	61bb      	str	r3, [r7, #24]
    break;
 8005f94:	e108      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f96:	4b88      	ldr	r3, [pc, #544]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fa0:	4b85      	ldr	r3, [pc, #532]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005faa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fac:	4b82      	ldr	r3, [pc, #520]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fb6:	4b80      	ldr	r3, [pc, #512]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	08db      	lsrs	r3, r3, #3
 8005fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80e1 	beq.w	800619c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	f000 8083 	beq.w	80060e8 <HAL_RCC_GetSysClockFreq+0x204>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f200 80a1 	bhi.w	800612c <HAL_RCC_GetSysClockFreq+0x248>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d056      	beq.n	80060a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ff6:	e099      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ff8:	4b6f      	ldr	r3, [pc, #444]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d02d      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006004:	4b6c      	ldr	r3, [pc, #432]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	08db      	lsrs	r3, r3, #3
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	4a6b      	ldr	r2, [pc, #428]	; (80061bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b62      	ldr	r3, [pc, #392]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006042:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800605e:	e087      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800606e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006072:	4b51      	ldr	r3, [pc, #324]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	ed97 6a02 	vldr	s12, [r7, #8]
 8006086:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800608a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a2:	e065      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e6:	e043      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80061d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a02 	vldr	s12, [r7, #8]
 800610e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612a:	e021      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eddf 6a26 	vldr	s13, [pc, #152]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800613a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613e:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006152:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800616e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	0a5b      	lsrs	r3, r3, #9
 8006176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617a:	3301      	adds	r3, #1
 800617c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006188:	edd7 6a07 	vldr	s13, [r7, #28]
 800618c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006194:	ee17 3a90 	vmov	r3, s15
 8006198:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800619a:	e005      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
    break;
 80061a0:	e002      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061a4:	61bb      	str	r3, [r7, #24]
    break;
 80061a6:	bf00      	nop
  }

  return sysclockfreq;
 80061a8:	69bb      	ldr	r3, [r7, #24]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3724      	adds	r7, #36	; 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400
 80061bc:	03d09000 	.word	0x03d09000
 80061c0:	003d0900 	.word	0x003d0900
 80061c4:	007f2815 	.word	0x007f2815
 80061c8:	46000000 	.word	0x46000000
 80061cc:	4c742400 	.word	0x4c742400
 80061d0:	4a742400 	.word	0x4a742400
 80061d4:	4afe502a 	.word	0x4afe502a

080061d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061de:	f7ff fe81 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 80061e2:	4602      	mov	r2, r0
 80061e4:	4b10      	ldr	r3, [pc, #64]	; (8006228 <HAL_RCC_GetHCLKFreq+0x50>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	490f      	ldr	r1, [pc, #60]	; (800622c <HAL_RCC_GetHCLKFreq+0x54>)
 80061f0:	5ccb      	ldrb	r3, [r1, r3]
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	fa22 f303 	lsr.w	r3, r2, r3
 80061fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <HAL_RCC_GetHCLKFreq+0x50>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	4a09      	ldr	r2, [pc, #36]	; (800622c <HAL_RCC_GetHCLKFreq+0x54>)
 8006206:	5cd3      	ldrb	r3, [r2, r3]
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	fa22 f303 	lsr.w	r3, r2, r3
 8006212:	4a07      	ldr	r2, [pc, #28]	; (8006230 <HAL_RCC_GetHCLKFreq+0x58>)
 8006214:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006216:	4a07      	ldr	r2, [pc, #28]	; (8006234 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <HAL_RCC_GetHCLKFreq+0x58>)
 800621e:	681b      	ldr	r3, [r3, #0]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	58024400 	.word	0x58024400
 800622c:	08009aa0 	.word	0x08009aa0
 8006230:	2400001c 	.word	0x2400001c
 8006234:	24000018 	.word	0x24000018

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800623c:	f7ff ffcc 	bl	80061d8 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	091b      	lsrs	r3, r3, #4
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4904      	ldr	r1, [pc, #16]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	58024400 	.word	0x58024400
 8006260:	08009aa0 	.word	0x08009aa0

08006264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006268:	f7ff ffb6 	bl	80061d8 <HAL_RCC_GetHCLKFreq>
 800626c:	4602      	mov	r2, r0
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	4904      	ldr	r1, [pc, #16]	; (800628c <HAL_RCC_GetPCLK2Freq+0x28>)
 800627a:	5ccb      	ldrb	r3, [r1, r3]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	58024400 	.word	0x58024400
 800628c:	08009aa0 	.word	0x08009aa0

08006290 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800629c:	2300      	movs	r3, #0
 800629e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d03f      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062b4:	d02a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ba:	d824      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062c0:	d018      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062c6:	d81e      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	d007      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80062d2:	e018      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d4:	4bab      	ldr	r3, [pc, #684]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4aaa      	ldr	r2, [pc, #680]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062e0:	e015      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2102      	movs	r1, #2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 f9cf 	bl	800768c <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062f2:	e00c      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3324      	adds	r3, #36	; 0x24
 80062f8:	2102      	movs	r1, #2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fa78 	bl	80077f0 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	e000      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800630c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006314:	4b9b      	ldr	r3, [pc, #620]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006320:	4998      	ldr	r1, [pc, #608]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006322:	4313      	orrs	r3, r2
 8006324:	650b      	str	r3, [r1, #80]	; 0x50
 8006326:	e001      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d03d      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	2b04      	cmp	r3, #4
 800633e:	d826      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800635d 	.word	0x0800635d
 800634c:	0800636b 	.word	0x0800636b
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006395 	.word	0x08006395
 8006358:	08006395 	.word	0x08006395
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635c:	4b89      	ldr	r3, [pc, #548]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	4a88      	ldr	r2, [pc, #544]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006368:	e015      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f001 f98b 	bl	800768c <RCCEx_PLL2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800637a:	e00c      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3324      	adds	r3, #36	; 0x24
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 fa34 	bl	80077f0 <RCCEx_PLL3_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
      break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800639c:	4b79      	ldr	r3, [pc, #484]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	f023 0207 	bic.w	r2, r3, #7
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	4976      	ldr	r1, [pc, #472]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	650b      	str	r3, [r1, #80]	; 0x50
 80063ae:	e001      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d042      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c8:	d02b      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80063ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ce:	d825      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063d0:	2bc0      	cmp	r3, #192	; 0xc0
 80063d2:	d028      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063d4:	2bc0      	cmp	r3, #192	; 0xc0
 80063d6:	d821      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063d8:	2b80      	cmp	r3, #128	; 0x80
 80063da:	d016      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d81d      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d007      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80063e8:	e018      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ea:	4b66      	ldr	r3, [pc, #408]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a65      	ldr	r2, [pc, #404]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063f6:	e017      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 f944 	bl	800768c <RCCEx_PLL2_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006408:	e00e      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3324      	adds	r3, #36	; 0x24
 800640e:	2100      	movs	r1, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f001 f9ed 	bl	80077f0 <RCCEx_PLL3_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800641a:	e005      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
      break;
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800642e:	4b55      	ldr	r3, [pc, #340]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006432:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643a:	4952      	ldr	r1, [pc, #328]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643c:	4313      	orrs	r3, r2
 800643e:	650b      	str	r3, [r1, #80]	; 0x50
 8006440:	e001      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644e:	2b00      	cmp	r3, #0
 8006450:	d049      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800645c:	d030      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800645e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006462:	d82a      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006464:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006468:	d02c      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800646a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800646e:	d824      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006474:	d018      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647a:	d81e      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006480:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006484:	d007      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006486:	e018      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006488:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006494:	e017      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f8f5 	bl	800768c <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064a6:	e00e      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f99e 	bl	80077f0 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064b8:	e005      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
      break;
 80064be:	e002      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064c0:	bf00      	nop
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064cc:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064da:	492a      	ldr	r1, [pc, #168]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	658b      	str	r3, [r1, #88]	; 0x58
 80064e0:	e001      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d04c      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064fc:	d030      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80064fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006502:	d82a      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006504:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006508:	d02c      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800650a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800650e:	d824      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006514:	d018      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651a:	d81e      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006524:	d007      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006526:	e018      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4a15      	ldr	r2, [pc, #84]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800652e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006534:	e017      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	2100      	movs	r1, #0
 800653c:	4618      	mov	r0, r3
 800653e:	f001 f8a5 	bl	800768c <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006546:	e00e      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	2100      	movs	r1, #0
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f94e 	bl	80077f0 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006558:	e005      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800657a:	4902      	ldr	r1, [pc, #8]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800657c:	4313      	orrs	r3, r2
 800657e:	658b      	str	r3, [r1, #88]	; 0x58
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d032      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	d01c      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d817      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d00c      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d813      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d016      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d10f      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b4:	4baf      	ldr	r3, [pc, #700]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4aae      	ldr	r2, [pc, #696]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065c0:	e00e      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 f85f 	bl	800768c <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065d2:	e005      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	e002      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80065de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065e6:	4ba3      	ldr	r3, [pc, #652]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f2:	49a0      	ldr	r1, [pc, #640]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065f8:	e001      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d047      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006612:	d030      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006618:	d82a      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800661a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800661e:	d02c      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006620:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006624:	d824      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662a:	d018      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d81e      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663a:	d007      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800663c:	e018      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663e:	4b8d      	ldr	r3, [pc, #564]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006642:	4a8c      	ldr	r2, [pc, #560]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006648:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800664a:	e017      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	2100      	movs	r1, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f81a 	bl	800768c <RCCEx_PLL2_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800665c:	e00e      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3324      	adds	r3, #36	; 0x24
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f8c3 	bl	80077f0 <RCCEx_PLL3_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800666e:	e005      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	75fb      	strb	r3, [r7, #23]
      break;
 8006674:	e002      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006676:	bf00      	nop
 8006678:	e000      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800667a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006682:	4b7c      	ldr	r3, [pc, #496]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006686:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	4979      	ldr	r1, [pc, #484]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	650b      	str	r3, [r1, #80]	; 0x50
 8006694:	e001      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d049      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ae:	d02e      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80066b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b4:	d828      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066ba:	d02a      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80066bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c0:	d822      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066c6:	d026      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80066c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066cc:	d81c      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d2:	d010      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80066d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d8:	d816      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01d      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d111      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ffce 	bl	800768c <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066f4:	e012      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3324      	adds	r3, #36	; 0x24
 80066fa:	2101      	movs	r1, #1
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 f877 	bl	80077f0 <RCCEx_PLL3_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006706:	e009      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
      break;
 800670c:	e006      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800670e:	bf00      	nop
 8006710:	e004      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800671a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006722:	4b54      	ldr	r3, [pc, #336]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006726:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672e:	4951      	ldr	r1, [pc, #324]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006730:	4313      	orrs	r3, r2
 8006732:	650b      	str	r3, [r1, #80]	; 0x50
 8006734:	e001      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d04b      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800674c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006750:	d02e      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006756:	d828      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675c:	d02a      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d822      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006764:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006768:	d026      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800676a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800676e:	d81c      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006774:	d010      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677a:	d816      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01d      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006784:	d111      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f000 ff7d 	bl	800768c <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006796:	e012      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3324      	adds	r3, #36	; 0x24
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 f826 	bl	80077f0 <RCCEx_PLL3_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067a8:	e009      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]
      break;
 80067ae:	e006      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067b0:	bf00      	nop
 80067b2:	e004      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067b4:	bf00      	nop
 80067b6:	e002      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067c4:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067d2:	4928      	ldr	r1, [pc, #160]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	658b      	str	r3, [r1, #88]	; 0x58
 80067d8:	e001      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d02f      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f2:	d00e      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80067f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f8:	d814      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d015      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80067fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006802:	d10f      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800680a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006810:	e00c      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3304      	adds	r3, #4
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f000 ff37 	bl	800768c <RCCEx_PLL2_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800682a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006836:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	490d      	ldr	r1, [pc, #52]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006840:	4313      	orrs	r3, r2
 8006842:	650b      	str	r3, [r1, #80]	; 0x50
 8006844:	e001      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d033      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	2b03      	cmp	r3, #3
 800685c:	d81c      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	0800689f 	.word	0x0800689f
 8006868:	08006879 	.word	0x08006879
 800686c:	08006887 	.word	0x08006887
 8006870:	0800689f 	.word	0x0800689f
 8006874:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006878:	4bb8      	ldr	r3, [pc, #736]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	4ab7      	ldr	r2, [pc, #732]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006884:	e00c      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3304      	adds	r3, #4
 800688a:	2102      	movs	r1, #2
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fefd 	bl	800768c <RCCEx_PLL2_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006896:	e003      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
      break;
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800689e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068a6:	4bad      	ldr	r3, [pc, #692]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	f023 0203 	bic.w	r2, r3, #3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	49aa      	ldr	r1, [pc, #680]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068b8:	e001      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8086 	beq.w	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068cc:	4ba4      	ldr	r3, [pc, #656]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4aa3      	ldr	r2, [pc, #652]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80068d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068d8:	f7fb f9da 	bl	8001c90 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068de:	e009      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e0:	f7fb f9d6 	bl	8001c90 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d902      	bls.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	75fb      	strb	r3, [r7, #23]
        break;
 80068f2:	e005      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f4:	4b9a      	ldr	r3, [pc, #616]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0ef      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d166      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006906:	4b95      	ldr	r3, [pc, #596]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006910:	4053      	eors	r3, r2
 8006912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006916:	2b00      	cmp	r3, #0
 8006918:	d013      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800691a:	4b90      	ldr	r3, [pc, #576]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006922:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006924:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	4a8c      	ldr	r2, [pc, #560]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800692a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006930:	4b8a      	ldr	r3, [pc, #552]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4a89      	ldr	r2, [pc, #548]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800693c:	4a87      	ldr	r2, [pc, #540]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694c:	d115      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fb f99f 	bl	8001c90 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006954:	e00b      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006956:	f7fb f99b 	bl	8001c90 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f241 3288 	movw	r2, #5000	; 0x1388
 8006964:	4293      	cmp	r3, r2
 8006966:	d902      	bls.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	75fb      	strb	r3, [r7, #23]
            break;
 800696c:	e005      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800696e:	4b7b      	ldr	r3, [pc, #492]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0ed      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d126      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800698e:	d10d      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006990:	4b72      	ldr	r3, [pc, #456]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800699e:	0919      	lsrs	r1, r3, #4
 80069a0:	4b70      	ldr	r3, [pc, #448]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80069a2:	400b      	ands	r3, r1
 80069a4:	496d      	ldr	r1, [pc, #436]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	610b      	str	r3, [r1, #16]
 80069aa:	e005      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069ac:	4b6b      	ldr	r3, [pc, #428]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	4a6a      	ldr	r2, [pc, #424]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069b6:	6113      	str	r3, [r2, #16]
 80069b8:	4b68      	ldr	r3, [pc, #416]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c6:	4965      	ldr	r1, [pc, #404]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	670b      	str	r3, [r1, #112]	; 0x70
 80069cc:	e004      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	75bb      	strb	r3, [r7, #22]
 80069d2:	e001      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d07e      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e8:	2b28      	cmp	r3, #40	; 0x28
 80069ea:	d867      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006ac3 	.word	0x08006ac3
 80069f8:	08006abd 	.word	0x08006abd
 80069fc:	08006abd 	.word	0x08006abd
 8006a00:	08006abd 	.word	0x08006abd
 8006a04:	08006abd 	.word	0x08006abd
 8006a08:	08006abd 	.word	0x08006abd
 8006a0c:	08006abd 	.word	0x08006abd
 8006a10:	08006abd 	.word	0x08006abd
 8006a14:	08006a99 	.word	0x08006a99
 8006a18:	08006abd 	.word	0x08006abd
 8006a1c:	08006abd 	.word	0x08006abd
 8006a20:	08006abd 	.word	0x08006abd
 8006a24:	08006abd 	.word	0x08006abd
 8006a28:	08006abd 	.word	0x08006abd
 8006a2c:	08006abd 	.word	0x08006abd
 8006a30:	08006abd 	.word	0x08006abd
 8006a34:	08006aab 	.word	0x08006aab
 8006a38:	08006abd 	.word	0x08006abd
 8006a3c:	08006abd 	.word	0x08006abd
 8006a40:	08006abd 	.word	0x08006abd
 8006a44:	08006abd 	.word	0x08006abd
 8006a48:	08006abd 	.word	0x08006abd
 8006a4c:	08006abd 	.word	0x08006abd
 8006a50:	08006abd 	.word	0x08006abd
 8006a54:	08006ac3 	.word	0x08006ac3
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	08006abd 	.word	0x08006abd
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006ac3 	.word	0x08006ac3
 8006a78:	08006abd 	.word	0x08006abd
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006abd 	.word	0x08006abd
 8006a90:	08006abd 	.word	0x08006abd
 8006a94:	08006ac3 	.word	0x08006ac3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fdf4 	bl	800768c <RCCEx_PLL2_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aa8:	e00c      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3324      	adds	r3, #36	; 0x24
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fe9d 	bl	80077f0 <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aba:	e003      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac0:	e000      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad6:	4921      	ldr	r1, [pc, #132]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	654b      	str	r3, [r1, #84]	; 0x54
 8006adc:	e001      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d03e      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d820      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006af6:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b3f 	.word	0x08006b3f
 8006b00:	08006b15 	.word	0x08006b15
 8006b04:	08006b27 	.word	0x08006b27
 8006b08:	08006b3f 	.word	0x08006b3f
 8006b0c:	08006b3f 	.word	0x08006b3f
 8006b10:	08006b3f 	.word	0x08006b3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fdb6 	bl	800768c <RCCEx_PLL2_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b24:	e00c      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3324      	adds	r3, #36	; 0x24
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fe5f 	bl	80077f0 <RCCEx_PLL3_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b36:	e003      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d110      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4a:	f023 0207 	bic.w	r2, r3, #7
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b52:	4902      	ldr	r1, [pc, #8]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	654b      	str	r3, [r1, #84]	; 0x54
 8006b58:	e008      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006b5a:	bf00      	nop
 8006b5c:	58024400 	.word	0x58024400
 8006b60:	58024800 	.word	0x58024800
 8006b64:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d039      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	d820      	bhi.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006bcb 	.word	0x08006bcb
 8006b8c:	08006ba1 	.word	0x08006ba1
 8006b90:	08006bb3 	.word	0x08006bb3
 8006b94:	08006bcb 	.word	0x08006bcb
 8006b98:	08006bcb 	.word	0x08006bcb
 8006b9c:	08006bcb 	.word	0x08006bcb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fd70 	bl	800768c <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bb0:	e00c      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3324      	adds	r3, #36	; 0x24
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fe19 	bl	80077f0 <RCCEx_PLL3_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bc2:	e003      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc8:	e000      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bd2:	4bb7      	ldr	r3, [pc, #732]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd6:	f023 0207 	bic.w	r2, r3, #7
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be0:	49b3      	ldr	r1, [pc, #716]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	658b      	str	r3, [r1, #88]	; 0x58
 8006be6:	e001      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d04b      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c02:	d02e      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c08:	d828      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d02a      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c14:	d822      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c1a:	d026      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c20:	d81c      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c26:	d010      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2c:	d816      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01d      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c36:	d111      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fd24 	bl	800768c <RCCEx_PLL2_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c48:	e012      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fdcd 	bl	80077f0 <RCCEx_PLL3_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c5a:	e009      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c60:	e006      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c62:	bf00      	nop
 8006c64:	e004      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c66:	bf00      	nop
 8006c68:	e002      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e000      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c76:	4b8e      	ldr	r3, [pc, #568]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c84:	498a      	ldr	r1, [pc, #552]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	654b      	str	r3, [r1, #84]	; 0x54
 8006c8a:	e001      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d04b      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ca6:	d02e      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006ca8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cac:	d828      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb2:	d02a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d822      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cbe:	d026      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc4:	d81c      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cca:	d010      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	d816      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01d      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cda:	d111      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fcd2 	bl	800768c <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cec:	e012      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fd7b 	bl	80077f0 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e009      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
      break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d1a:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d28:	4961      	ldr	r1, [pc, #388]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d2e:	e001      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d04b      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d4a:	d02e      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006d4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d50:	d828      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	d02a      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5c:	d822      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d62:	d026      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d68:	d81c      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d74:	d816      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01d      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7e:	d111      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3304      	adds	r3, #4
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fc80 	bl	800768c <RCCEx_PLL2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d90:	e012      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3324      	adds	r3, #36	; 0x24
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fd29 	bl	80077f0 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006da2:	e009      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
      break;
 8006da8:	e006      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006daa:	bf00      	nop
 8006dac:	e004      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dbe:	4b3c      	ldr	r3, [pc, #240]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dcc:	4938      	ldr	r1, [pc, #224]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006dd2:	e001      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01a      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	d10a      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	2102      	movs	r1, #2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fcfa 	bl	80077f0 <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e06:	4b2a      	ldr	r3, [pc, #168]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e14:	4926      	ldr	r1, [pc, #152]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d01a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e30:	d10a      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3324      	adds	r3, #36	; 0x24
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fcd9 	bl	80077f0 <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e48:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e56:	4916      	ldr	r1, [pc, #88]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d036      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e72:	d01f      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e78:	d817      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e82:	d009      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006e84:	e011      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fbfd 	bl	800768c <RCCEx_PLL2_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e96:	e00e      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3324      	adds	r3, #36	; 0x24
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fca6 	bl	80077f0 <RCCEx_PLL3_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ea8:	e005      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
      break;
 8006eae:	e002      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006eb0:	58024400 	.word	0x58024400
      break;
 8006eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ebc:	4b93      	ldr	r3, [pc, #588]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eca:	4990      	ldr	r1, [pc, #576]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	658b      	str	r3, [r1, #88]	; 0x58
 8006ed0:	e001      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d033      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eec:	d01c      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef2:	d816      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006efe:	d007      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006f00:	e00f      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f02:	4b82      	ldr	r3, [pc, #520]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	4a81      	ldr	r2, [pc, #516]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f0e:	e00c      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	2101      	movs	r1, #1
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fc6a 	bl	80077f0 <RCCEx_PLL3_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
      break;
 8006f26:	e000      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f30:	4b76      	ldr	r3, [pc, #472]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3e:	4973      	ldr	r1, [pc, #460]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	654b      	str	r3, [r1, #84]	; 0x54
 8006f44:	e001      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d029      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f62:	d007      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006f64:	e00f      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f66:	4b69      	ldr	r3, [pc, #420]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a68      	ldr	r2, [pc, #416]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f72:	e00b      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	2102      	movs	r1, #2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fb86 	bl	800768c <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f84:	e002      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f92:	4b5e      	ldr	r3, [pc, #376]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	495b      	ldr	r1, [pc, #364]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fa4:	e001      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3324      	adds	r3, #36	; 0x24
 8006fba:	2102      	movs	r1, #2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fc17 	bl	80077f0 <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d030      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe0:	d017      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe6:	d811      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d013      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff2:	d80b      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d010      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d106      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffe:	4b43      	ldr	r3, [pc, #268]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	4a42      	ldr	r2, [pc, #264]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800700a:	e007      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
      break;
 8007010:	e004      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007012:	bf00      	nop
 8007014:	e002      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800701a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007022:	4b3a      	ldr	r3, [pc, #232]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702e:	4937      	ldr	r1, [pc, #220]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	654b      	str	r3, [r1, #84]	; 0x54
 8007034:	e001      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007046:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	492e      	ldr	r1, [pc, #184]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007054:	4313      	orrs	r3, r2
 8007056:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d009      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007064:	4b29      	ldr	r3, [pc, #164]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007072:	4926      	ldr	r1, [pc, #152]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007074:	4313      	orrs	r3, r2
 8007076:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007084:	4b21      	ldr	r3, [pc, #132]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007088:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007090:	491e      	ldr	r1, [pc, #120]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00d      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070a2:	4b1a      	ldr	r3, [pc, #104]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	4a19      	ldr	r2, [pc, #100]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ac:	6113      	str	r3, [r2, #16]
 80070ae:	4b17      	ldr	r3, [pc, #92]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070b8:	4914      	ldr	r1, [pc, #80]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da08      	bge.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070c6:	4b11      	ldr	r3, [pc, #68]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d2:	490e      	ldr	r1, [pc, #56]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	4906      	ldr	r1, [pc, #24]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80070f8:	7dbb      	ldrb	r3, [r7, #22]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	e000      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	58024400 	.word	0x58024400

08007110 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007114:	f7ff f860 	bl	80061d8 <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4904      	ldr	r1, [pc, #16]	; (8007138 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}
 8007134:	58024400 	.word	0x58024400
 8007138:	08009aa0 	.word	0x08009aa0

0800713c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800713c:	b480      	push	{r7}
 800713e:	b089      	sub	sp, #36	; 0x24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007144:	4ba1      	ldr	r3, [pc, #644]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800714e:	4b9f      	ldr	r3, [pc, #636]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	0b1b      	lsrs	r3, r3, #12
 8007154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007158:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800715a:	4b9c      	ldr	r3, [pc, #624]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	091b      	lsrs	r3, r3, #4
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007166:	4b99      	ldr	r3, [pc, #612]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	08db      	lsrs	r3, r3, #3
 800716c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8111 	beq.w	80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b02      	cmp	r3, #2
 800718e:	f000 8083 	beq.w	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f200 80a1 	bhi.w	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d056      	beq.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071a6:	e099      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a8:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d02d      	beq.n	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071b4:	4b85      	ldr	r3, [pc, #532]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	4a84      	ldr	r2, [pc, #528]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
 80071c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b7b      	ldr	r3, [pc, #492]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800720e:	e087      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007252:	e065      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007296:	e043      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b48      	ldr	r3, [pc, #288]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072da:	e021      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b37      	ldr	r3, [pc, #220]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800731e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007320:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	0a5b      	lsrs	r3, r3, #9
 8007326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800733a:	edd7 6a07 	vldr	s13, [r7, #28]
 800733e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007346:	ee17 2a90 	vmov	r2, s15
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800734e:	4b1f      	ldr	r3, [pc, #124]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	0c1b      	lsrs	r3, r3, #16
 8007354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007368:	edd7 6a07 	vldr	s13, [r7, #28]
 800736c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007374:	ee17 2a90 	vmov	r2, s15
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	0e1b      	lsrs	r3, r3, #24
 8007382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007396:	edd7 6a07 	vldr	s13, [r7, #28]
 800739a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a2:	ee17 2a90 	vmov	r2, s15
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073aa:	e008      	b.n	80073be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
}
 80073be:	bf00      	nop
 80073c0:	3724      	adds	r7, #36	; 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	46000000 	.word	0x46000000
 80073d8:	4c742400 	.word	0x4c742400
 80073dc:	4a742400 	.word	0x4a742400
 80073e0:	4afe502a 	.word	0x4afe502a

080073e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ec:	4ba1      	ldr	r3, [pc, #644]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073f6:	4b9f      	ldr	r3, [pc, #636]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	0d1b      	lsrs	r3, r3, #20
 80073fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007400:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007402:	4b9c      	ldr	r3, [pc, #624]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800740e:	4b99      	ldr	r3, [pc, #612]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8111 	beq.w	8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f000 8083 	beq.w	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f200 80a1 	bhi.w	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d056      	beq.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800744e:	e099      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007450:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02d      	beq.n	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800745c:	4b85      	ldr	r3, [pc, #532]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	4a84      	ldr	r2, [pc, #528]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b7b      	ldr	r3, [pc, #492]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074b6:	e087      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b6a      	ldr	r3, [pc, #424]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fa:	e065      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753e:	e043      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b48      	ldr	r3, [pc, #288]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007582:	e021      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075f6:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	0c1b      	lsrs	r3, r3, #16
 80075fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007610:	edd7 6a07 	vldr	s13, [r7, #28]
 8007614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761c:	ee17 2a90 	vmov	r2, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	ee17 2a90 	vmov	r2, s15
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	bf00      	nop
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	46000000 	.word	0x46000000
 8007680:	4c742400 	.word	0x4c742400
 8007684:	4a742400 	.word	0x4a742400
 8007688:	4afe502a 	.word	0x4afe502a

0800768c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800769a:	4b53      	ldr	r3, [pc, #332]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d101      	bne.n	80076aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e099      	b.n	80077de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076aa:	4b4f      	ldr	r3, [pc, #316]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4e      	ldr	r2, [pc, #312]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b6:	f7fa faeb 	bl	8001c90 <HAL_GetTick>
 80076ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076bc:	e008      	b.n	80076d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076be:	f7fa fae7 	bl	8001c90 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e086      	b.n	80077de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076dc:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	031b      	lsls	r3, r3, #12
 80076ea:	493f      	ldr	r1, [pc, #252]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	628b      	str	r3, [r1, #40]	; 0x28
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	025b      	lsls	r3, r3, #9
 8007702:	b29b      	uxth	r3, r3
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	3b01      	subs	r3, #1
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	3b01      	subs	r3, #1
 800771a:	061b      	lsls	r3, r3, #24
 800771c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007720:	4931      	ldr	r1, [pc, #196]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007726:	4b30      	ldr	r3, [pc, #192]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	492d      	ldr	r1, [pc, #180]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007734:	4313      	orrs	r3, r2
 8007736:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007738:	4b2b      	ldr	r3, [pc, #172]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	f023 0220 	bic.w	r2, r3, #32
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	4928      	ldr	r1, [pc, #160]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007746:	4313      	orrs	r3, r2
 8007748:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800774a:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	4a26      	ldr	r2, [pc, #152]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007750:	f023 0310 	bic.w	r3, r3, #16
 8007754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <RCCEx_PLL2_Config+0x160>)
 800775c:	4013      	ands	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	69d2      	ldr	r2, [r2, #28]
 8007762:	00d2      	lsls	r2, r2, #3
 8007764:	4920      	ldr	r1, [pc, #128]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800776a:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007770:	f043 0310 	orr.w	r3, r3, #16
 8007774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007788:	e00f      	b.n	80077aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d106      	bne.n	800779e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007790:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800779c:	e005      	b.n	80077aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	4a11      	ldr	r2, [pc, #68]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a0e      	ldr	r2, [pc, #56]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80077b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077b6:	f7fa fa6b 	bl	8001c90 <HAL_GetTick>
 80077ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077bc:	e008      	b.n	80077d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077be:	f7fa fa67 	bl	8001c90 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d901      	bls.n	80077d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e006      	b.n	80077de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <RCCEx_PLL2_Config+0x15c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0f0      	beq.n	80077be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	58024400 	.word	0x58024400
 80077ec:	ffff0007 	.word	0xffff0007

080077f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077fe:	4b53      	ldr	r3, [pc, #332]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b03      	cmp	r3, #3
 8007808:	d101      	bne.n	800780e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e099      	b.n	8007942 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800780e:	4b4f      	ldr	r3, [pc, #316]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a4e      	ldr	r2, [pc, #312]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781a:	f7fa fa39 	bl	8001c90 <HAL_GetTick>
 800781e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007820:	e008      	b.n	8007834 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007822:	f7fa fa35 	bl	8001c90 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e086      	b.n	8007942 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007834:	4b45      	ldr	r3, [pc, #276]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f0      	bne.n	8007822 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007840:	4b42      	ldr	r3, [pc, #264]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	051b      	lsls	r3, r3, #20
 800784e:	493f      	ldr	r1, [pc, #252]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007850:	4313      	orrs	r3, r2
 8007852:	628b      	str	r3, [r1, #40]	; 0x28
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	3b01      	subs	r3, #1
 800785a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	3b01      	subs	r3, #1
 8007864:	025b      	lsls	r3, r3, #9
 8007866:	b29b      	uxth	r3, r3
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	3b01      	subs	r3, #1
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	3b01      	subs	r3, #1
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007884:	4931      	ldr	r1, [pc, #196]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800788a:	4b30      	ldr	r3, [pc, #192]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	492d      	ldr	r1, [pc, #180]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007898:	4313      	orrs	r3, r2
 800789a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800789c:	4b2b      	ldr	r3, [pc, #172]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	4928      	ldr	r1, [pc, #160]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078ae:	4b27      	ldr	r3, [pc, #156]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	4a26      	ldr	r2, [pc, #152]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <RCCEx_PLL3_Config+0x160>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	69d2      	ldr	r2, [r2, #28]
 80078c6:	00d2      	lsls	r2, r2, #3
 80078c8:	4920      	ldr	r1, [pc, #128]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078ce:	4b1f      	ldr	r3, [pc, #124]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4a1e      	ldr	r2, [pc, #120]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	4a19      	ldr	r2, [pc, #100]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078ec:	e00f      	b.n	800790e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d106      	bne.n	8007902 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078f4:	4b15      	ldr	r3, [pc, #84]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	4a14      	ldr	r2, [pc, #80]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 80078fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007900:	e005      	b.n	800790e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	4a11      	ldr	r2, [pc, #68]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800790c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a0e      	ldr	r2, [pc, #56]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791a:	f7fa f9b9 	bl	8001c90 <HAL_GetTick>
 800791e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007920:	e008      	b.n	8007934 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007922:	f7fa f9b5 	bl	8001c90 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d901      	bls.n	8007934 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e006      	b.n	8007942 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <RCCEx_PLL3_Config+0x15c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0f0      	beq.n	8007922 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400
 8007950:	ffff0007 	.word	0xffff0007

08007954 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e0eb      	b.n	8007b42 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a75      	ldr	r2, [pc, #468]	; (8007b4c <HAL_SPI_Init+0x1f8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00f      	beq.n	800799a <HAL_SPI_Init+0x46>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a74      	ldr	r2, [pc, #464]	; (8007b50 <HAL_SPI_Init+0x1fc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00a      	beq.n	800799a <HAL_SPI_Init+0x46>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a72      	ldr	r2, [pc, #456]	; (8007b54 <HAL_SPI_Init+0x200>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d005      	beq.n	800799a <HAL_SPI_Init+0x46>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d901      	bls.n	800799a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e0d3      	b.n	8007b42 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb94 	bl	80080c8 <SPI_GetPacketSize>
 80079a0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a69      	ldr	r2, [pc, #420]	; (8007b4c <HAL_SPI_Init+0x1f8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00c      	beq.n	80079c6 <HAL_SPI_Init+0x72>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a67      	ldr	r2, [pc, #412]	; (8007b50 <HAL_SPI_Init+0x1fc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <HAL_SPI_Init+0x72>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a66      	ldr	r2, [pc, #408]	; (8007b54 <HAL_SPI_Init+0x200>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_Init+0x72>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d811      	bhi.n	80079ea <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ca:	4a60      	ldr	r2, [pc, #384]	; (8007b4c <HAL_SPI_Init+0x1f8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d009      	beq.n	80079e4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a5e      	ldr	r2, [pc, #376]	; (8007b50 <HAL_SPI_Init+0x1fc>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <HAL_SPI_Init+0x90>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a5d      	ldr	r2, [pc, #372]	; (8007b54 <HAL_SPI_Init+0x200>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d104      	bne.n	80079ee <HAL_SPI_Init+0x9a>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b10      	cmp	r3, #16
 80079e8:	d901      	bls.n	80079ee <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e0a9      	b.n	8007b42 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7f9 fafc 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a28:	d119      	bne.n	8007a5e <HAL_SPI_Init+0x10a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a32:	d103      	bne.n	8007a3c <HAL_SPI_Init+0xe8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d008      	beq.n	8007a4e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10c      	bne.n	8007a5e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a4c:	d107      	bne.n	8007a5e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69da      	ldr	r2, [r3, #28]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	431a      	orrs	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	ea42 0103 	orr.w	r1, r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abe:	ea42 0103 	orr.w	r1, r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d113      	bne.n	8007afe <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007afc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0201 	bic.w	r2, r2, #1
 8007b0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40013000 	.word	0x40013000
 8007b50:	40003800 	.word	0x40003800
 8007b54:	40003c00 	.word	0x40003c00

08007b58 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4013      	ands	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b8a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3330      	adds	r3, #48	; 0x30
 8007b92:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d113      	bne.n	8007bc6 <HAL_SPI_IRQHandler+0x6e>
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10e      	bne.n	8007bc6 <HAL_SPI_IRQHandler+0x6e>
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
    handled = 1UL;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10f      	bne.n	8007bf0 <HAL_SPI_IRQHandler+0x98>
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <HAL_SPI_IRQHandler+0x98>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
    handled = 1UL;
 8007bec:	2301      	movs	r3, #1
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10f      	bne.n	8007c1a <HAL_SPI_IRQHandler+0xc2>
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_SPI_IRQHandler+0xc2>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d105      	bne.n	8007c1a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    handled = 1UL;
 8007c16:	2301      	movs	r3, #1
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 816f 	bne.w	8007f00 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80a0 	beq.w	8007d6e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	699a      	ldr	r2, [r3, #24]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0208 	orr.w	r2, r2, #8
 8007c3c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0210 	orr.w	r2, r2, #16
 8007c4c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699a      	ldr	r2, [r3, #24]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c5c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0208 	bic.w	r2, r2, #8
 8007c6c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_SPI_IRQHandler+0x140>
 8007c78:	7cfb      	ldrb	r3, [r7, #19]
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d004      	beq.n	8007c88 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <HAL_SPI_IRQHandler+0x140>
 8007c88:	7cfb      	ldrb	r3, [r7, #19]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d059      	beq.n	8007d42 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d154      	bne.n	8007d42 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d13d      	bne.n	8007d22 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007ca6:	e036      	b.n	8007d16 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b0f      	cmp	r3, #15
 8007cae:	d90b      	bls.n	8007cc8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cba:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cc0:	1d1a      	adds	r2, r3, #4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	665a      	str	r2, [r3, #100]	; 0x64
 8007cc6:	e01d      	b.n	8007d04 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	d90b      	bls.n	8007ce8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	8812      	ldrh	r2, [r2, #0]
 8007cd8:	b292      	uxth	r2, r2
 8007cda:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce0:	1c9a      	adds	r2, r3, #2
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	665a      	str	r2, [r3, #100]	; 0x64
 8007ce6:	e00d      	b.n	8007d04 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf4:	7812      	ldrb	r2, [r2, #0]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1c2      	bne.n	8007ca8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f930 	bl	8007f88 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7f9 f91e 	bl	8000f7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007d40:	e0e3      	b.n	8007f0a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007d42:	7cfb      	ldrb	r3, [r7, #19]
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	d103      	bne.n	8007d50 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f8f9 	bl	8007f40 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007d4e:	e0d9      	b.n	8007f04 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007d50:	7cfb      	ldrb	r3, [r7, #19]
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d103      	bne.n	8007d5e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f8e8 	bl	8007f2c <HAL_SPI_RxCpltCallback>
    return;
 8007d5c:	e0d2      	b.n	8007f04 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007d5e:	7cfb      	ldrb	r3, [r7, #19]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	f040 80cf 	bne.w	8007f04 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f8d6 	bl	8007f18 <HAL_SPI_TxCpltCallback>
    return;
 8007d6c:	e0ca      	b.n	8007f04 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00d      	beq.n	8007d94 <HAL_SPI_IRQHandler+0x23c>
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699a      	ldr	r2, [r3, #24]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d90:	619a      	str	r2, [r3, #24]

    return;
 8007d92:	e0ba      	b.n	8007f0a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 80b5 	beq.w	8007f0a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00f      	beq.n	8007dca <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db0:	f043 0204 	orr.w	r2, r3, #4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dc8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00f      	beq.n	8007df4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dda:	f043 0201 	orr.w	r2, r3, #1
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00f      	beq.n	8007e1e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e04:	f043 0208 	orr.w	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00f      	beq.n	8007e48 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0220 	orr.w	r2, r2, #32
 8007e46:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d05a      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0201 	bic.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6919      	ldr	r1, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b28      	ldr	r3, [pc, #160]	; (8007f10 <HAL_SPI_IRQHandler+0x3b8>)
 8007e6e:	400b      	ands	r3, r1
 8007e70:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e7c:	d138      	bne.n	8007ef0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e8c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d013      	beq.n	8007ebe <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9a:	4a1e      	ldr	r2, [pc, #120]	; (8007f14 <HAL_SPI_IRQHandler+0x3bc>)
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb fa96 	bl	80033d4 <HAL_DMA_Abort_IT>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d020      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eca:	4a12      	ldr	r2, [pc, #72]	; (8007f14 <HAL_SPI_IRQHandler+0x3bc>)
 8007ecc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fb fa7e 	bl	80033d4 <HAL_DMA_Abort_IT>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d014      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007eee:	e00b      	b.n	8007f08 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7f9 f83f 	bl	8000f7c <HAL_SPI_ErrorCallback>
    return;
 8007efe:	e003      	b.n	8007f08 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007f00:	bf00      	nop
 8007f02:	e002      	b.n	8007f0a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007f08:	bf00      	nop
  }
}
 8007f0a:	3728      	adds	r7, #40	; 0x28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	fffffc94 	.word	0xfffffc94
 8007f14:	08007f55 	.word	0x08007f55

08007f18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7f8 fffe 	bl	8000f7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0210 	orr.w	r2, r2, #16
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6919      	ldr	r1, [r3, #16]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b3c      	ldr	r3, [pc, #240]	; (80080c4 <SPI_CloseTransfer+0x13c>)
 8007fd4:	400b      	ands	r3, r1
 8007fd6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007fe6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d014      	beq.n	800801e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699a      	ldr	r2, [r3, #24]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0220 	orr.w	r2, r2, #32
 800801c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b03      	cmp	r3, #3
 8008028:	d014      	beq.n	8008054 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00f      	beq.n	8008054 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803a:	f043 0204 	orr.w	r2, r3, #4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008052:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	f043 0201 	orr.w	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80080b8:	bf00      	nop
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	fffffc90 	.word	0xfffffc90

080080c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	3301      	adds	r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	3301      	adds	r3, #1
 80080e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	3307      	adds	r3, #7
 80080e6:	08db      	lsrs	r3, r3, #3
 80080e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e042      	b.n	8008196 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7f9 f91c 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2224      	movs	r2, #36	; 0x24
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0201 	bic.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fb87 	bl	8008854 <UART_SetConfig>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e022      	b.n	8008196 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f8db 	bl	8009314 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800816c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800817c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f962 	bl	8009458 <UART_CheckIdleState>
 8008194:	4603      	mov	r3, r0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d168      	bne.n	800828a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <HAL_UART_Transmit_DMA+0x24>
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e061      	b.n	800828c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_UART_Transmit_DMA+0x36>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e05a      	b.n	800828c <HAL_UART_Transmit_DMA+0xec>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	88fa      	ldrh	r2, [r7, #6]
 80081f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2221      	movs	r2, #33	; 0x21
 8008200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02c      	beq.n	8008266 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <HAL_UART_Transmit_DMA+0xf4>)
 8008212:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008218:	4a1f      	ldr	r2, [pc, #124]	; (8008298 <HAL_UART_Transmit_DMA+0xf8>)
 800821a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008220:	4a1e      	ldr	r2, [pc, #120]	; (800829c <HAL_UART_Transmit_DMA+0xfc>)
 8008222:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008228:	2200      	movs	r2, #0
 800822a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008234:	4619      	mov	r1, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3328      	adds	r3, #40	; 0x28
 800823c:	461a      	mov	r2, r3
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	f7fa fb40 	bl	80028c4 <HAL_DMA_Start_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2210      	movs	r2, #16
 800824e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e012      	b.n	800828c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008284:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800828a:	2302      	movs	r3, #2
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	08009691 	.word	0x08009691
 8008298:	080096e1 	.word	0x080096e1
 800829c:	080096fd 	.word	0x080096fd

080082a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80082c6:	4013      	ands	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d118      	bne.n	8008302 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d013      	beq.n	8008302 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8282 	beq.w	80087fc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
      }
      return;
 8008300:	e27c      	b.n	80087fc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80ef 	beq.w	80084e8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	4b73      	ldr	r3, [pc, #460]	; (80084dc <HAL_UART_IRQHandler+0x23c>)
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	4b72      	ldr	r3, [pc, #456]	; (80084e0 <HAL_UART_IRQHandler+0x240>)
 8008318:	4013      	ands	r3, r2
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80e4 	beq.w	80084e8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <HAL_UART_IRQHandler+0xac>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2201      	movs	r2, #1
 800833a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008342:	f043 0201 	orr.w	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d010      	beq.n	8008378 <HAL_UART_IRQHandler+0xd8>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2202      	movs	r2, #2
 8008366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800836e:	f043 0204 	orr.w	r2, r3, #4
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <HAL_UART_IRQHandler+0x104>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2204      	movs	r2, #4
 8008392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800839a:	f043 0202 	orr.w	r2, r3, #2
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d015      	beq.n	80083da <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4b48      	ldr	r3, [pc, #288]	; (80084dc <HAL_UART_IRQHandler+0x23c>)
 80083bc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2208      	movs	r2, #8
 80083c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d0:	f043 0208 	orr.w	r2, r3, #8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d011      	beq.n	8008408 <HAL_UART_IRQHandler+0x168>
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083fe:	f043 0220 	orr.w	r2, r3, #32
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 81f6 	beq.w	8008800 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d011      	beq.n	8008442 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008448:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d004      	beq.n	8008462 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800845e:	2b00      	cmp	r3, #0
 8008460:	d031      	beq.n	80084c6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 f8e2 	bl	800962c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d123      	bne.n	80084be <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008484:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d013      	beq.n	80084b6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008492:	4a14      	ldr	r2, [pc, #80]	; (80084e4 <HAL_UART_IRQHandler+0x244>)
 8008494:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	4618      	mov	r0, r3
 800849c:	f7fa ff9a 	bl	80033d4 <HAL_DMA_Abort_IT>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d017      	beq.n	80084d6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b4:	e00f      	b.n	80084d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f8 fd70 	bl	8000f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084bc:	e00b      	b.n	80084d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7f8 fd6c 	bl	8000f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	e007      	b.n	80084d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7f8 fd68 	bl	8000f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80084d4:	e194      	b.n	8008800 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d6:	bf00      	nop
    return;
 80084d8:	e192      	b.n	8008800 <HAL_UART_IRQHandler+0x560>
 80084da:	bf00      	nop
 80084dc:	10000001 	.word	0x10000001
 80084e0:	04000120 	.word	0x04000120
 80084e4:	0800977d 	.word	0x0800977d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	f040 810f 	bne.w	8008710 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8109 	beq.w	8008710 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8103 	beq.w	8008710 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2210      	movs	r2, #16
 8008510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b40      	cmp	r3, #64	; 0x40
 800851e:	f040 80bb 	bne.w	8008698 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a96      	ldr	r2, [pc, #600]	; (8008784 <HAL_UART_IRQHandler+0x4e4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d059      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a94      	ldr	r2, [pc, #592]	; (8008788 <HAL_UART_IRQHandler+0x4e8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d053      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a92      	ldr	r2, [pc, #584]	; (800878c <HAL_UART_IRQHandler+0x4ec>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d04d      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a90      	ldr	r2, [pc, #576]	; (8008790 <HAL_UART_IRQHandler+0x4f0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d047      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a8e      	ldr	r2, [pc, #568]	; (8008794 <HAL_UART_IRQHandler+0x4f4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d041      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a8c      	ldr	r2, [pc, #560]	; (8008798 <HAL_UART_IRQHandler+0x4f8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d03b      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a8a      	ldr	r2, [pc, #552]	; (800879c <HAL_UART_IRQHandler+0x4fc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d035      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a88      	ldr	r2, [pc, #544]	; (80087a0 <HAL_UART_IRQHandler+0x500>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d02f      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a86      	ldr	r2, [pc, #536]	; (80087a4 <HAL_UART_IRQHandler+0x504>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d029      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a84      	ldr	r2, [pc, #528]	; (80087a8 <HAL_UART_IRQHandler+0x508>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d023      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a82      	ldr	r2, [pc, #520]	; (80087ac <HAL_UART_IRQHandler+0x50c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d01d      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a80      	ldr	r2, [pc, #512]	; (80087b0 <HAL_UART_IRQHandler+0x510>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d017      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a7e      	ldr	r2, [pc, #504]	; (80087b4 <HAL_UART_IRQHandler+0x514>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d011      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a7c      	ldr	r2, [pc, #496]	; (80087b8 <HAL_UART_IRQHandler+0x518>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00b      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a7a      	ldr	r2, [pc, #488]	; (80087bc <HAL_UART_IRQHandler+0x51c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d005      	beq.n	80085e2 <HAL_UART_IRQHandler+0x342>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a78      	ldr	r2, [pc, #480]	; (80087c0 <HAL_UART_IRQHandler+0x520>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d105      	bne.n	80085ee <HAL_UART_IRQHandler+0x34e>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	e004      	b.n	80085f8 <HAL_UART_IRQHandler+0x358>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80085fa:	893b      	ldrh	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8101 	beq.w	8008804 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008608:	893a      	ldrh	r2, [r7, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	f080 80fa 	bcs.w	8008804 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	893a      	ldrh	r2, [r7, #8]
 8008614:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008622:	d02b      	beq.n	800867c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008632:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008652:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0210 	bic.w	r2, r2, #16
 8008670:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008676:	4618      	mov	r0, r3
 8008678:	f7fa fb8e 	bl	8002d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008688:	b29b      	uxth	r3, r3
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	b29b      	uxth	r3, r3
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8d3 	bl	800883c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008696:	e0b5      	b.n	8008804 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80a8 	beq.w	8008808 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80086b8:	897b      	ldrh	r3, [r7, #10]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 80a4 	beq.w	8008808 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6899      	ldr	r1, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b3a      	ldr	r3, [pc, #232]	; (80087c4 <HAL_UART_IRQHandler+0x524>)
 80086dc:	400b      	ands	r3, r1
 80086de:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2220      	movs	r2, #32
 80086e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0210 	bic.w	r2, r2, #16
 8008702:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008704:	897b      	ldrh	r3, [r7, #10]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f897 	bl	800883c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800870e:	e07b      	b.n	8008808 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <HAL_UART_IRQHandler+0x496>
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800872c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f854 	bl	80097dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008734:	e06b      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873c:	2b00      	cmp	r3, #0
 800873e:	d012      	beq.n	8008766 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008758:	2b00      	cmp	r3, #0
 800875a:	d057      	beq.n	800880c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
    }
    return;
 8008764:	e052      	b.n	800880c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d02b      	beq.n	80087c8 <HAL_UART_IRQHandler+0x528>
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d026      	beq.n	80087c8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 f814 	bl	80097a8 <UART_EndTransmit_IT>
    return;
 8008780:	e045      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
 8008782:	bf00      	nop
 8008784:	40020010 	.word	0x40020010
 8008788:	40020028 	.word	0x40020028
 800878c:	40020040 	.word	0x40020040
 8008790:	40020058 	.word	0x40020058
 8008794:	40020070 	.word	0x40020070
 8008798:	40020088 	.word	0x40020088
 800879c:	400200a0 	.word	0x400200a0
 80087a0:	400200b8 	.word	0x400200b8
 80087a4:	40020410 	.word	0x40020410
 80087a8:	40020428 	.word	0x40020428
 80087ac:	40020440 	.word	0x40020440
 80087b0:	40020458 	.word	0x40020458
 80087b4:	40020470 	.word	0x40020470
 80087b8:	40020488 	.word	0x40020488
 80087bc:	400204a0 	.word	0x400204a0
 80087c0:	400204b8 	.word	0x400204b8
 80087c4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_UART_IRQHandler+0x544>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f811 	bl	8009804 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087e2:	e014      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00f      	beq.n	800880e <HAL_UART_IRQHandler+0x56e>
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da0c      	bge.n	800880e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fffb 	bl	80097f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087fa:	e008      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
      return;
 80087fc:	bf00      	nop
 80087fe:	e006      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
    return;
 8008800:	bf00      	nop
 8008802:	e004      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
      return;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
      return;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <HAL_UART_IRQHandler+0x56e>
    return;
 800880c:	bf00      	nop
  }
}
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008854:	b5b0      	push	{r4, r5, r7, lr}
 8008856:	b08e      	sub	sp, #56	; 0x38
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	4313      	orrs	r3, r2
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4bbf      	ldr	r3, [pc, #764]	; (8008b80 <UART_SetConfig+0x32c>)
 8008882:	4013      	ands	r3, r2
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800888a:	430b      	orrs	r3, r1
 800888c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4ab5      	ldr	r2, [pc, #724]	; (8008b84 <UART_SetConfig+0x330>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d004      	beq.n	80088be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ba:	4313      	orrs	r3, r2
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	4bb0      	ldr	r3, [pc, #704]	; (8008b88 <UART_SetConfig+0x334>)
 80088c6:	4013      	ands	r3, r2
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088ce:	430b      	orrs	r3, r1
 80088d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	f023 010f 	bic.w	r1, r3, #15
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4aa7      	ldr	r2, [pc, #668]	; (8008b8c <UART_SetConfig+0x338>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d176      	bne.n	80089e0 <UART_SetConfig+0x18c>
 80088f2:	4ba7      	ldr	r3, [pc, #668]	; (8008b90 <UART_SetConfig+0x33c>)
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088fa:	2b28      	cmp	r3, #40	; 0x28
 80088fc:	d86c      	bhi.n	80089d8 <UART_SetConfig+0x184>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0xb0>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	080089a9 	.word	0x080089a9
 8008908:	080089d9 	.word	0x080089d9
 800890c:	080089d9 	.word	0x080089d9
 8008910:	080089d9 	.word	0x080089d9
 8008914:	080089d9 	.word	0x080089d9
 8008918:	080089d9 	.word	0x080089d9
 800891c:	080089d9 	.word	0x080089d9
 8008920:	080089d9 	.word	0x080089d9
 8008924:	080089b1 	.word	0x080089b1
 8008928:	080089d9 	.word	0x080089d9
 800892c:	080089d9 	.word	0x080089d9
 8008930:	080089d9 	.word	0x080089d9
 8008934:	080089d9 	.word	0x080089d9
 8008938:	080089d9 	.word	0x080089d9
 800893c:	080089d9 	.word	0x080089d9
 8008940:	080089d9 	.word	0x080089d9
 8008944:	080089b9 	.word	0x080089b9
 8008948:	080089d9 	.word	0x080089d9
 800894c:	080089d9 	.word	0x080089d9
 8008950:	080089d9 	.word	0x080089d9
 8008954:	080089d9 	.word	0x080089d9
 8008958:	080089d9 	.word	0x080089d9
 800895c:	080089d9 	.word	0x080089d9
 8008960:	080089d9 	.word	0x080089d9
 8008964:	080089c1 	.word	0x080089c1
 8008968:	080089d9 	.word	0x080089d9
 800896c:	080089d9 	.word	0x080089d9
 8008970:	080089d9 	.word	0x080089d9
 8008974:	080089d9 	.word	0x080089d9
 8008978:	080089d9 	.word	0x080089d9
 800897c:	080089d9 	.word	0x080089d9
 8008980:	080089d9 	.word	0x080089d9
 8008984:	080089c9 	.word	0x080089c9
 8008988:	080089d9 	.word	0x080089d9
 800898c:	080089d9 	.word	0x080089d9
 8008990:	080089d9 	.word	0x080089d9
 8008994:	080089d9 	.word	0x080089d9
 8008998:	080089d9 	.word	0x080089d9
 800899c:	080089d9 	.word	0x080089d9
 80089a0:	080089d9 	.word	0x080089d9
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ae:	e222      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b6:	e21e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089be:	e21a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c6:	e216      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089c8:	2320      	movs	r3, #32
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ce:	e212      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089d0:	2340      	movs	r3, #64	; 0x40
 80089d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d6:	e20e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e20a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a6b      	ldr	r2, [pc, #428]	; (8008b94 <UART_SetConfig+0x340>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d130      	bne.n	8008a4c <UART_SetConfig+0x1f8>
 80089ea:	4b69      	ldr	r3, [pc, #420]	; (8008b90 <UART_SetConfig+0x33c>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d826      	bhi.n	8008a44 <UART_SetConfig+0x1f0>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x1a8>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a1d 	.word	0x08008a1d
 8008a04:	08008a25 	.word	0x08008a25
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a35 	.word	0x08008a35
 8008a10:	08008a3d 	.word	0x08008a3d
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e1ec      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e1e8      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a24:	2308      	movs	r3, #8
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e1e4      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e1e0      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a34:	2320      	movs	r3, #32
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e1dc      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a42:	e1d8      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e1d4      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a51      	ldr	r2, [pc, #324]	; (8008b98 <UART_SetConfig+0x344>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d130      	bne.n	8008ab8 <UART_SetConfig+0x264>
 8008a56:	4b4e      	ldr	r3, [pc, #312]	; (8008b90 <UART_SetConfig+0x33c>)
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b05      	cmp	r3, #5
 8008a60:	d826      	bhi.n	8008ab0 <UART_SetConfig+0x25c>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <UART_SetConfig+0x214>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a81 	.word	0x08008a81
 8008a6c:	08008a89 	.word	0x08008a89
 8008a70:	08008a91 	.word	0x08008a91
 8008a74:	08008a99 	.word	0x08008a99
 8008a78:	08008aa1 	.word	0x08008aa1
 8008a7c:	08008aa9 	.word	0x08008aa9
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a86:	e1b6      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a8e:	e1b2      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a90:	2308      	movs	r3, #8
 8008a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a96:	e1ae      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9e:	e1aa      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa6:	e1a6      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aae:	e1a2      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e19e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a37      	ldr	r2, [pc, #220]	; (8008b9c <UART_SetConfig+0x348>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d130      	bne.n	8008b24 <UART_SetConfig+0x2d0>
 8008ac2:	4b33      	ldr	r3, [pc, #204]	; (8008b90 <UART_SetConfig+0x33c>)
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d826      	bhi.n	8008b1c <UART_SetConfig+0x2c8>
 8008ace:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <UART_SetConfig+0x280>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008aed 	.word	0x08008aed
 8008ad8:	08008af5 	.word	0x08008af5
 8008adc:	08008afd 	.word	0x08008afd
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b15 	.word	0x08008b15
 8008aec:	2300      	movs	r3, #0
 8008aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af2:	e180      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008af4:	2304      	movs	r3, #4
 8008af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008afa:	e17c      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008afc:	2308      	movs	r3, #8
 8008afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b02:	e178      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b04:	2310      	movs	r3, #16
 8008b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0a:	e174      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b0c:	2320      	movs	r3, #32
 8008b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b12:	e170      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b14:	2340      	movs	r3, #64	; 0x40
 8008b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1a:	e16c      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b1c:	2380      	movs	r3, #128	; 0x80
 8008b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b22:	e168      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	; (8008ba0 <UART_SetConfig+0x34c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d142      	bne.n	8008bb4 <UART_SetConfig+0x360>
 8008b2e:	4b18      	ldr	r3, [pc, #96]	; (8008b90 <UART_SetConfig+0x33c>)
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	2b05      	cmp	r3, #5
 8008b38:	d838      	bhi.n	8008bac <UART_SetConfig+0x358>
 8008b3a:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <UART_SetConfig+0x2ec>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b61 	.word	0x08008b61
 8008b48:	08008b69 	.word	0x08008b69
 8008b4c:	08008b71 	.word	0x08008b71
 8008b50:	08008b79 	.word	0x08008b79
 8008b54:	08008ba5 	.word	0x08008ba5
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5e:	e14a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b60:	2304      	movs	r3, #4
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e146      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b68:	2308      	movs	r3, #8
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e142      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b70:	2310      	movs	r3, #16
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	e13e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7e:	e13a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008b80:	cfff69f3 	.word	0xcfff69f3
 8008b84:	58000c00 	.word	0x58000c00
 8008b88:	11fff4ff 	.word	0x11fff4ff
 8008b8c:	40011000 	.word	0x40011000
 8008b90:	58024400 	.word	0x58024400
 8008b94:	40004400 	.word	0x40004400
 8008b98:	40004800 	.word	0x40004800
 8008b9c:	40004c00 	.word	0x40004c00
 8008ba0:	40005000 	.word	0x40005000
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e124      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e120      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4acc      	ldr	r2, [pc, #816]	; (8008eec <UART_SetConfig+0x698>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d176      	bne.n	8008cac <UART_SetConfig+0x458>
 8008bbe:	4bcc      	ldr	r3, [pc, #816]	; (8008ef0 <UART_SetConfig+0x69c>)
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bc6:	2b28      	cmp	r3, #40	; 0x28
 8008bc8:	d86c      	bhi.n	8008ca4 <UART_SetConfig+0x450>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x37c>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008c75 	.word	0x08008c75
 8008bd4:	08008ca5 	.word	0x08008ca5
 8008bd8:	08008ca5 	.word	0x08008ca5
 8008bdc:	08008ca5 	.word	0x08008ca5
 8008be0:	08008ca5 	.word	0x08008ca5
 8008be4:	08008ca5 	.word	0x08008ca5
 8008be8:	08008ca5 	.word	0x08008ca5
 8008bec:	08008ca5 	.word	0x08008ca5
 8008bf0:	08008c7d 	.word	0x08008c7d
 8008bf4:	08008ca5 	.word	0x08008ca5
 8008bf8:	08008ca5 	.word	0x08008ca5
 8008bfc:	08008ca5 	.word	0x08008ca5
 8008c00:	08008ca5 	.word	0x08008ca5
 8008c04:	08008ca5 	.word	0x08008ca5
 8008c08:	08008ca5 	.word	0x08008ca5
 8008c0c:	08008ca5 	.word	0x08008ca5
 8008c10:	08008c85 	.word	0x08008c85
 8008c14:	08008ca5 	.word	0x08008ca5
 8008c18:	08008ca5 	.word	0x08008ca5
 8008c1c:	08008ca5 	.word	0x08008ca5
 8008c20:	08008ca5 	.word	0x08008ca5
 8008c24:	08008ca5 	.word	0x08008ca5
 8008c28:	08008ca5 	.word	0x08008ca5
 8008c2c:	08008ca5 	.word	0x08008ca5
 8008c30:	08008c8d 	.word	0x08008c8d
 8008c34:	08008ca5 	.word	0x08008ca5
 8008c38:	08008ca5 	.word	0x08008ca5
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008ca5 	.word	0x08008ca5
 8008c44:	08008ca5 	.word	0x08008ca5
 8008c48:	08008ca5 	.word	0x08008ca5
 8008c4c:	08008ca5 	.word	0x08008ca5
 8008c50:	08008c95 	.word	0x08008c95
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	08008ca5 	.word	0x08008ca5
 8008c5c:	08008ca5 	.word	0x08008ca5
 8008c60:	08008ca5 	.word	0x08008ca5
 8008c64:	08008ca5 	.word	0x08008ca5
 8008c68:	08008ca5 	.word	0x08008ca5
 8008c6c:	08008ca5 	.word	0x08008ca5
 8008c70:	08008c9d 	.word	0x08008c9d
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7a:	e0bc      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e0b8      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008c84:	2308      	movs	r3, #8
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e0b4      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c92:	e0b0      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008c94:	2320      	movs	r3, #32
 8008c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9a:	e0ac      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca2:	e0a8      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008caa:	e0a4      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a90      	ldr	r2, [pc, #576]	; (8008ef4 <UART_SetConfig+0x6a0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d130      	bne.n	8008d18 <UART_SetConfig+0x4c4>
 8008cb6:	4b8e      	ldr	r3, [pc, #568]	; (8008ef0 <UART_SetConfig+0x69c>)
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d826      	bhi.n	8008d10 <UART_SetConfig+0x4bc>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x474>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008ce1 	.word	0x08008ce1
 8008ccc:	08008ce9 	.word	0x08008ce9
 8008cd0:	08008cf1 	.word	0x08008cf1
 8008cd4:	08008cf9 	.word	0x08008cf9
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce6:	e086      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	e082      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e07e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfe:	e07a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d00:	2320      	movs	r3, #32
 8008d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d06:	e076      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d08:	2340      	movs	r3, #64	; 0x40
 8008d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0e:	e072      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d16:	e06e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a76      	ldr	r2, [pc, #472]	; (8008ef8 <UART_SetConfig+0x6a4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d130      	bne.n	8008d84 <UART_SetConfig+0x530>
 8008d22:	4b73      	ldr	r3, [pc, #460]	; (8008ef0 <UART_SetConfig+0x69c>)
 8008d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d826      	bhi.n	8008d7c <UART_SetConfig+0x528>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0x4e0>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d4d 	.word	0x08008d4d
 8008d38:	08008d55 	.word	0x08008d55
 8008d3c:	08008d5d 	.word	0x08008d5d
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d52:	e050      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d54:	2304      	movs	r3, #4
 8008d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5a:	e04c      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d62:	e048      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d64:	2310      	movs	r3, #16
 8008d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6a:	e044      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d72:	e040      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7a:	e03c      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d82:	e038      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a5c      	ldr	r2, [pc, #368]	; (8008efc <UART_SetConfig+0x6a8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d130      	bne.n	8008df0 <UART_SetConfig+0x59c>
 8008d8e:	4b58      	ldr	r3, [pc, #352]	; (8008ef0 <UART_SetConfig+0x69c>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d826      	bhi.n	8008de8 <UART_SetConfig+0x594>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <UART_SetConfig+0x54c>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008dc1 	.word	0x08008dc1
 8008da8:	08008dc9 	.word	0x08008dc9
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008dd9 	.word	0x08008dd9
 8008db4:	08008de1 	.word	0x08008de1
 8008db8:	2302      	movs	r3, #2
 8008dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dbe:	e01a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008dc0:	2304      	movs	r3, #4
 8008dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dc6:	e016      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008dc8:	2308      	movs	r3, #8
 8008dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dce:	e012      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008dd0:	2310      	movs	r3, #16
 8008dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd6:	e00e      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dde:	e00a      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008de0:	2340      	movs	r3, #64	; 0x40
 8008de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de6:	e006      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008de8:	2380      	movs	r3, #128	; 0x80
 8008dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dee:	e002      	b.n	8008df6 <UART_SetConfig+0x5a2>
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a40      	ldr	r2, [pc, #256]	; (8008efc <UART_SetConfig+0x6a8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	f040 80ef 	bne.w	8008fe0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	dc46      	bgt.n	8008e98 <UART_SetConfig+0x644>
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	f2c0 8081 	blt.w	8008f12 <UART_SetConfig+0x6be>
 8008e10:	3b02      	subs	r3, #2
 8008e12:	2b1e      	cmp	r3, #30
 8008e14:	d87d      	bhi.n	8008f12 <UART_SetConfig+0x6be>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <UART_SetConfig+0x5c8>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e9f 	.word	0x08008e9f
 8008e20:	08008f13 	.word	0x08008f13
 8008e24:	08008ea7 	.word	0x08008ea7
 8008e28:	08008f13 	.word	0x08008f13
 8008e2c:	08008f13 	.word	0x08008f13
 8008e30:	08008f13 	.word	0x08008f13
 8008e34:	08008eb7 	.word	0x08008eb7
 8008e38:	08008f13 	.word	0x08008f13
 8008e3c:	08008f13 	.word	0x08008f13
 8008e40:	08008f13 	.word	0x08008f13
 8008e44:	08008f13 	.word	0x08008f13
 8008e48:	08008f13 	.word	0x08008f13
 8008e4c:	08008f13 	.word	0x08008f13
 8008e50:	08008f13 	.word	0x08008f13
 8008e54:	08008ec7 	.word	0x08008ec7
 8008e58:	08008f13 	.word	0x08008f13
 8008e5c:	08008f13 	.word	0x08008f13
 8008e60:	08008f13 	.word	0x08008f13
 8008e64:	08008f13 	.word	0x08008f13
 8008e68:	08008f13 	.word	0x08008f13
 8008e6c:	08008f13 	.word	0x08008f13
 8008e70:	08008f13 	.word	0x08008f13
 8008e74:	08008f13 	.word	0x08008f13
 8008e78:	08008f13 	.word	0x08008f13
 8008e7c:	08008f13 	.word	0x08008f13
 8008e80:	08008f13 	.word	0x08008f13
 8008e84:	08008f13 	.word	0x08008f13
 8008e88:	08008f13 	.word	0x08008f13
 8008e8c:	08008f13 	.word	0x08008f13
 8008e90:	08008f13 	.word	0x08008f13
 8008e94:	08008f05 	.word	0x08008f05
 8008e98:	2b40      	cmp	r3, #64	; 0x40
 8008e9a:	d036      	beq.n	8008f0a <UART_SetConfig+0x6b6>
 8008e9c:	e039      	b.n	8008f12 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e9e:	f7fe f937 	bl	8007110 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008ea4:	e03b      	b.n	8008f1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea6:	f107 0314 	add.w	r3, r7, #20
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe f946 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eb4:	e033      	b.n	8008f1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eb6:	f107 0308 	add.w	r3, r7, #8
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fa92 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ec4:	e02b      	b.n	8008f1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <UART_SetConfig+0x69c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d009      	beq.n	8008ee6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ed2:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <UART_SetConfig+0x69c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	4a08      	ldr	r2, [pc, #32]	; (8008f00 <UART_SetConfig+0x6ac>)
 8008ede:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ee4:	e01b      	b.n	8008f1e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008ee6:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <UART_SetConfig+0x6ac>)
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eea:	e018      	b.n	8008f1e <UART_SetConfig+0x6ca>
 8008eec:	40011400 	.word	0x40011400
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	40007800 	.word	0x40007800
 8008ef8:	40007c00 	.word	0x40007c00
 8008efc:	58000c00 	.word	0x58000c00
 8008f00:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f04:	4bc4      	ldr	r3, [pc, #784]	; (8009218 <UART_SetConfig+0x9c4>)
 8008f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f08:	e009      	b.n	8008f1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f10:	e005      	b.n	8008f1e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 81da 	beq.w	80092da <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	4abc      	ldr	r2, [pc, #752]	; (800921c <UART_SetConfig+0x9c8>)
 8008f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f30:	461a      	mov	r2, r3
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f38:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	4413      	add	r3, r2
 8008f44:	6a3a      	ldr	r2, [r7, #32]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d305      	bcc.n	8008f56 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f50:	6a3a      	ldr	r2, [r7, #32]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d903      	bls.n	8008f5e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f5c:	e1bd      	b.n	80092da <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	4618      	mov	r0, r3
 8008f62:	f04f 0100 	mov.w	r1, #0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	4aac      	ldr	r2, [pc, #688]	; (800921c <UART_SetConfig+0x9c8>)
 8008f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	f7f7 f9af 	bl	80002d8 <__aeabi_uldivmod>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4610      	mov	r0, r2
 8008f80:	4619      	mov	r1, r3
 8008f82:	f04f 0200 	mov.w	r2, #0
 8008f86:	f04f 0300 	mov.w	r3, #0
 8008f8a:	020b      	lsls	r3, r1, #8
 8008f8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f90:	0202      	lsls	r2, r0, #8
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	6849      	ldr	r1, [r1, #4]
 8008f96:	0849      	lsrs	r1, r1, #1
 8008f98:	4608      	mov	r0, r1
 8008f9a:	f04f 0100 	mov.w	r1, #0
 8008f9e:	1814      	adds	r4, r2, r0
 8008fa0:	eb43 0501 	adc.w	r5, r3, r1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f04f 0300 	mov.w	r3, #0
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 f991 	bl	80002d8 <__aeabi_uldivmod>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4613      	mov	r3, r2
 8008fbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fc4:	d308      	bcc.n	8008fd8 <UART_SetConfig+0x784>
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fcc:	d204      	bcs.n	8008fd8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd4:	60da      	str	r2, [r3, #12]
 8008fd6:	e180      	b.n	80092da <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008fde:	e17c      	b.n	80092da <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe8:	f040 80bf 	bne.w	800916a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008fec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	dc49      	bgt.n	8009088 <UART_SetConfig+0x834>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db7c      	blt.n	80090f2 <UART_SetConfig+0x89e>
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d87a      	bhi.n	80090f2 <UART_SetConfig+0x89e>
 8008ffc:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <UART_SetConfig+0x7b0>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	0800908f 	.word	0x0800908f
 8009008:	08009097 	.word	0x08009097
 800900c:	080090f3 	.word	0x080090f3
 8009010:	080090f3 	.word	0x080090f3
 8009014:	0800909f 	.word	0x0800909f
 8009018:	080090f3 	.word	0x080090f3
 800901c:	080090f3 	.word	0x080090f3
 8009020:	080090f3 	.word	0x080090f3
 8009024:	080090af 	.word	0x080090af
 8009028:	080090f3 	.word	0x080090f3
 800902c:	080090f3 	.word	0x080090f3
 8009030:	080090f3 	.word	0x080090f3
 8009034:	080090f3 	.word	0x080090f3
 8009038:	080090f3 	.word	0x080090f3
 800903c:	080090f3 	.word	0x080090f3
 8009040:	080090f3 	.word	0x080090f3
 8009044:	080090bf 	.word	0x080090bf
 8009048:	080090f3 	.word	0x080090f3
 800904c:	080090f3 	.word	0x080090f3
 8009050:	080090f3 	.word	0x080090f3
 8009054:	080090f3 	.word	0x080090f3
 8009058:	080090f3 	.word	0x080090f3
 800905c:	080090f3 	.word	0x080090f3
 8009060:	080090f3 	.word	0x080090f3
 8009064:	080090f3 	.word	0x080090f3
 8009068:	080090f3 	.word	0x080090f3
 800906c:	080090f3 	.word	0x080090f3
 8009070:	080090f3 	.word	0x080090f3
 8009074:	080090f3 	.word	0x080090f3
 8009078:	080090f3 	.word	0x080090f3
 800907c:	080090f3 	.word	0x080090f3
 8009080:	080090f3 	.word	0x080090f3
 8009084:	080090e5 	.word	0x080090e5
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	d02e      	beq.n	80090ea <UART_SetConfig+0x896>
 800908c:	e031      	b.n	80090f2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800908e:	f7fd f8d3 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8009092:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009094:	e033      	b.n	80090fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009096:	f7fd f8e5 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 800909a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800909c:	e02f      	b.n	80090fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800909e:	f107 0314 	add.w	r3, r7, #20
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe f84a 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ac:	e027      	b.n	80090fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe f996 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090bc:	e01f      	b.n	80090fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090be:	4b58      	ldr	r3, [pc, #352]	; (8009220 <UART_SetConfig+0x9cc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090ca:	4b55      	ldr	r3, [pc, #340]	; (8009220 <UART_SetConfig+0x9cc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	08db      	lsrs	r3, r3, #3
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	4a53      	ldr	r2, [pc, #332]	; (8009224 <UART_SetConfig+0x9d0>)
 80090d6:	fa22 f303 	lsr.w	r3, r2, r3
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090dc:	e00f      	b.n	80090fe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80090de:	4b51      	ldr	r3, [pc, #324]	; (8009224 <UART_SetConfig+0x9d0>)
 80090e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090e2:	e00c      	b.n	80090fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090e4:	4b4c      	ldr	r3, [pc, #304]	; (8009218 <UART_SetConfig+0x9c4>)
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090e8:	e009      	b.n	80090fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090f0:	e005      	b.n	80090fe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80090fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80ea 	beq.w	80092da <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	4a44      	ldr	r2, [pc, #272]	; (800921c <UART_SetConfig+0x9c8>)
 800910c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009110:	461a      	mov	r2, r3
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	fbb3 f3f2 	udiv	r3, r3, r2
 8009118:	005a      	lsls	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	085b      	lsrs	r3, r3, #1
 8009120:	441a      	add	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	b29b      	uxth	r3, r3
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	2b0f      	cmp	r3, #15
 8009132:	d916      	bls.n	8009162 <UART_SetConfig+0x90e>
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913a:	d212      	bcs.n	8009162 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	b29b      	uxth	r3, r3
 8009140:	f023 030f 	bic.w	r3, r3, #15
 8009144:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	b29b      	uxth	r3, r3
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	b29a      	uxth	r2, r3
 8009152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009154:	4313      	orrs	r3, r2
 8009156:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800915e:	60da      	str	r2, [r3, #12]
 8009160:	e0bb      	b.n	80092da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009168:	e0b7      	b.n	80092da <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800916a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800916e:	2b20      	cmp	r3, #32
 8009170:	dc4a      	bgt.n	8009208 <UART_SetConfig+0x9b4>
 8009172:	2b00      	cmp	r3, #0
 8009174:	f2c0 8086 	blt.w	8009284 <UART_SetConfig+0xa30>
 8009178:	2b20      	cmp	r3, #32
 800917a:	f200 8083 	bhi.w	8009284 <UART_SetConfig+0xa30>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <UART_SetConfig+0x930>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	0800920f 	.word	0x0800920f
 8009188:	08009229 	.word	0x08009229
 800918c:	08009285 	.word	0x08009285
 8009190:	08009285 	.word	0x08009285
 8009194:	08009231 	.word	0x08009231
 8009198:	08009285 	.word	0x08009285
 800919c:	08009285 	.word	0x08009285
 80091a0:	08009285 	.word	0x08009285
 80091a4:	08009241 	.word	0x08009241
 80091a8:	08009285 	.word	0x08009285
 80091ac:	08009285 	.word	0x08009285
 80091b0:	08009285 	.word	0x08009285
 80091b4:	08009285 	.word	0x08009285
 80091b8:	08009285 	.word	0x08009285
 80091bc:	08009285 	.word	0x08009285
 80091c0:	08009285 	.word	0x08009285
 80091c4:	08009251 	.word	0x08009251
 80091c8:	08009285 	.word	0x08009285
 80091cc:	08009285 	.word	0x08009285
 80091d0:	08009285 	.word	0x08009285
 80091d4:	08009285 	.word	0x08009285
 80091d8:	08009285 	.word	0x08009285
 80091dc:	08009285 	.word	0x08009285
 80091e0:	08009285 	.word	0x08009285
 80091e4:	08009285 	.word	0x08009285
 80091e8:	08009285 	.word	0x08009285
 80091ec:	08009285 	.word	0x08009285
 80091f0:	08009285 	.word	0x08009285
 80091f4:	08009285 	.word	0x08009285
 80091f8:	08009285 	.word	0x08009285
 80091fc:	08009285 	.word	0x08009285
 8009200:	08009285 	.word	0x08009285
 8009204:	08009277 	.word	0x08009277
 8009208:	2b40      	cmp	r3, #64	; 0x40
 800920a:	d037      	beq.n	800927c <UART_SetConfig+0xa28>
 800920c:	e03a      	b.n	8009284 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800920e:	f7fd f813 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8009212:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009214:	e03c      	b.n	8009290 <UART_SetConfig+0xa3c>
 8009216:	bf00      	nop
 8009218:	003d0900 	.word	0x003d0900
 800921c:	08009ab8 	.word	0x08009ab8
 8009220:	58024400 	.word	0x58024400
 8009224:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009228:	f7fd f81c 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 800922c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800922e:	e02f      	b.n	8009290 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009230:	f107 0314 	add.w	r3, r7, #20
 8009234:	4618      	mov	r0, r3
 8009236:	f7fd ff81 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800923e:	e027      	b.n	8009290 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009240:	f107 0308 	add.w	r3, r7, #8
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe f8cd 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800924e:	e01f      	b.n	8009290 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009250:	4b2c      	ldr	r3, [pc, #176]	; (8009304 <UART_SetConfig+0xab0>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d009      	beq.n	8009270 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800925c:	4b29      	ldr	r3, [pc, #164]	; (8009304 <UART_SetConfig+0xab0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	4a28      	ldr	r2, [pc, #160]	; (8009308 <UART_SetConfig+0xab4>)
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800926e:	e00f      	b.n	8009290 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009270:	4b25      	ldr	r3, [pc, #148]	; (8009308 <UART_SetConfig+0xab4>)
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009274:	e00c      	b.n	8009290 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009276:	4b25      	ldr	r3, [pc, #148]	; (800930c <UART_SetConfig+0xab8>)
 8009278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800927a:	e009      	b.n	8009290 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800927c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009282:	e005      	b.n	8009290 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009284:	2300      	movs	r3, #0
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800928e:	bf00      	nop
    }

    if (pclk != 0U)
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d021      	beq.n	80092da <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	4a1d      	ldr	r2, [pc, #116]	; (8009310 <UART_SetConfig+0xabc>)
 800929c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092a0:	461a      	mov	r2, r3
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	085b      	lsrs	r3, r3, #1
 80092ae:	441a      	add	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	2b0f      	cmp	r3, #15
 80092c0:	d908      	bls.n	80092d4 <UART_SetConfig+0xa80>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c8:	d204      	bcs.n	80092d4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	e002      	b.n	80092da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80092f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3738      	adds	r7, #56	; 0x38
 80092fe:	46bd      	mov	sp, r7
 8009300:	bdb0      	pop	{r4, r5, r7, pc}
 8009302:	bf00      	nop
 8009304:	58024400 	.word	0x58024400
 8009308:	03d09000 	.word	0x03d09000
 800930c:	003d0900 	.word	0x003d0900
 8009310:	08009ab8 	.word	0x08009ab8

08009314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f003 0308 	and.w	r3, r3, #8
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	f003 0310 	and.w	r3, r3, #16
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d01a      	beq.n	800942a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009412:	d10a      	bne.n	800942a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	605a      	str	r2, [r3, #4]
  }
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af02      	add	r7, sp, #8
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009468:	f7f8 fc12 	bl	8001c90 <HAL_GetTick>
 800946c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b08      	cmp	r3, #8
 800947a:	d10e      	bne.n	800949a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800947c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f82f 	bl	80094ee <UART_WaitOnFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e025      	b.n	80094e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d10e      	bne.n	80094c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f819 	bl	80094ee <UART_WaitOnFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e00f      	b.n	80094e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	603b      	str	r3, [r7, #0]
 80094fa:	4613      	mov	r3, r2
 80094fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fe:	e062      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009506:	d05e      	beq.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009508:	f7f8 fbc2 	bl	8001c90 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	429a      	cmp	r2, r3
 8009516:	d302      	bcc.n	800951e <UART_WaitOnFlagUntilTimeout+0x30>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d11d      	bne.n	800955a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800952c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0201 	bic.w	r2, r2, #1
 800953c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2220      	movs	r2, #32
 8009542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2220      	movs	r2, #32
 800954a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e045      	b.n	80095e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d02e      	beq.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009576:	d126      	bne.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009580:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009590:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0201 	bic.w	r2, r2, #1
 80095a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e00f      	b.n	80095e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4013      	ands	r3, r2
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	bf0c      	ite	eq
 80095d6:	2301      	moveq	r3, #1
 80095d8:	2300      	movne	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d08d      	beq.n	8009500 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009604:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009614:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800961e:	bf00      	nop
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
	...

0800962c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009642:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6899      	ldr	r1, [r3, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <UART_EndRxTransfer+0x60>)
 8009650:	400b      	ands	r3, r1
 8009652:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0210 	bic.w	r2, r2, #16
 800966a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	effffffe 	.word	0xeffffffe

08009690 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a6:	d014      	beq.n	80096d2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096be:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ce:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096d0:	e002      	b.n	80096d8 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f7ff f89e 	bl	8008814 <HAL_UART_TxCpltCallback>
}
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7ff f89a 	bl	8008828 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009710:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009718:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d109      	bne.n	800973c <UART_DMAError+0x40>
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b21      	cmp	r3, #33	; 0x21
 800972c:	d106      	bne.n	800973c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2200      	movs	r2, #0
 8009732:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009736:	6978      	ldr	r0, [r7, #20]
 8009738:	f7ff ff59 	bl	80095ee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009746:	2b40      	cmp	r3, #64	; 0x40
 8009748:	d109      	bne.n	800975e <UART_DMAError+0x62>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b22      	cmp	r3, #34	; 0x22
 800974e:	d106      	bne.n	800975e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2200      	movs	r2, #0
 8009754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009758:	6978      	ldr	r0, [r7, #20]
 800975a:	f7ff ff67 	bl	800962c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009764:	f043 0210 	orr.w	r2, r3, #16
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7f7 fc14 	bl	8000f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009774:	bf00      	nop
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7f7 fbfe 	bl	8000f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097be:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff f820 	bl	8008814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d4:	bf00      	nop
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_UARTEx_EnableFifoMode+0x16>
 800982a:	2302      	movs	r3, #2
 800982c:	e02b      	b.n	8009886 <HAL_UARTEx_EnableFifoMode+0x6e>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2224      	movs	r2, #36	; 0x24
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800985c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009864:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f88a 	bl	8009988 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e02d      	b.n	8009902 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2224      	movs	r2, #36	; 0x24
 80098b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f850 	bl	8009988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800991a:	2b01      	cmp	r3, #1
 800991c:	d101      	bne.n	8009922 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800991e:	2302      	movs	r3, #2
 8009920:	e02d      	b.n	800997e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2224      	movs	r2, #36	; 0x24
 800992e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0201 	bic.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f812 	bl	8009988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009994:	2b00      	cmp	r3, #0
 8009996:	d108      	bne.n	80099aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099a8:	e031      	b.n	8009a0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099aa:	2310      	movs	r3, #16
 80099ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099ae:	2310      	movs	r3, #16
 80099b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	0e5b      	lsrs	r3, r3, #25
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	f003 0307 	and.w	r3, r3, #7
 80099c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	0f5b      	lsrs	r3, r3, #29
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	7b3a      	ldrb	r2, [r7, #12]
 80099d6:	4911      	ldr	r1, [pc, #68]	; (8009a1c <UARTEx_SetNbDataToProcess+0x94>)
 80099d8:	5c8a      	ldrb	r2, [r1, r2]
 80099da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099de:	7b3a      	ldrb	r2, [r7, #12]
 80099e0:	490f      	ldr	r1, [pc, #60]	; (8009a20 <UARTEx_SetNbDataToProcess+0x98>)
 80099e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	7b7a      	ldrb	r2, [r7, #13]
 80099f4:	4909      	ldr	r1, [pc, #36]	; (8009a1c <UARTEx_SetNbDataToProcess+0x94>)
 80099f6:	5c8a      	ldrb	r2, [r1, r2]
 80099f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099fc:	7b7a      	ldrb	r2, [r7, #13]
 80099fe:	4908      	ldr	r1, [pc, #32]	; (8009a20 <UARTEx_SetNbDataToProcess+0x98>)
 8009a00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a02:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a0e:	bf00      	nop
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	08009ad0 	.word	0x08009ad0
 8009a20:	08009ad8 	.word	0x08009ad8

08009a24 <__libc_init_array>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	4d0d      	ldr	r5, [pc, #52]	; (8009a5c <__libc_init_array+0x38>)
 8009a28:	4c0d      	ldr	r4, [pc, #52]	; (8009a60 <__libc_init_array+0x3c>)
 8009a2a:	1b64      	subs	r4, r4, r5
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	2600      	movs	r6, #0
 8009a30:	42a6      	cmp	r6, r4
 8009a32:	d109      	bne.n	8009a48 <__libc_init_array+0x24>
 8009a34:	4d0b      	ldr	r5, [pc, #44]	; (8009a64 <__libc_init_array+0x40>)
 8009a36:	4c0c      	ldr	r4, [pc, #48]	; (8009a68 <__libc_init_array+0x44>)
 8009a38:	f000 f820 	bl	8009a7c <_init>
 8009a3c:	1b64      	subs	r4, r4, r5
 8009a3e:	10a4      	asrs	r4, r4, #2
 8009a40:	2600      	movs	r6, #0
 8009a42:	42a6      	cmp	r6, r4
 8009a44:	d105      	bne.n	8009a52 <__libc_init_array+0x2e>
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4c:	4798      	blx	r3
 8009a4e:	3601      	adds	r6, #1
 8009a50:	e7ee      	b.n	8009a30 <__libc_init_array+0xc>
 8009a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a56:	4798      	blx	r3
 8009a58:	3601      	adds	r6, #1
 8009a5a:	e7f2      	b.n	8009a42 <__libc_init_array+0x1e>
 8009a5c:	08009ae8 	.word	0x08009ae8
 8009a60:	08009ae8 	.word	0x08009ae8
 8009a64:	08009ae8 	.word	0x08009ae8
 8009a68:	08009aec 	.word	0x08009aec

08009a6c <memset>:
 8009a6c:	4402      	add	r2, r0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d100      	bne.n	8009a76 <memset+0xa>
 8009a74:	4770      	bx	lr
 8009a76:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7a:	e7f9      	b.n	8009a70 <memset+0x4>

08009a7c <_init>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	bf00      	nop
 8009a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a82:	bc08      	pop	{r3}
 8009a84:	469e      	mov	lr, r3
 8009a86:	4770      	bx	lr

08009a88 <_fini>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	bf00      	nop
 8009a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8e:	bc08      	pop	{r3}
 8009a90:	469e      	mov	lr, r3
 8009a92:	4770      	bx	lr
