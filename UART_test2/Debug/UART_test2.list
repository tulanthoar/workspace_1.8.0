
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009870  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cec  24000040  08009b8c  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24001d2c  08009b8c  00021d2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5df  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fc5  00000000  00000000  0003d635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  000413d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374ff  00000000  00000000  000420c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012f60  00000000  00000000  000795c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f404  00000000  00000000  0008c527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001eb92b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038dc  00000000  00000000  001eb980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009af0 	.word	0x08009af0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009af0 	.word	0x08009af0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
//	length of the recieve buffer array
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005da:	817b      	strh	r3, [r7, #10]
//	length of a half transfer of recieve buffer
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
//	length of transmit buffer
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
//	set the transmit buffer to a known value
	for (int i = 0; i < txCount; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e00f      	b.n	800060e <main+0x3e>
		aTxBuffer[i] = i % 16384;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4aa5      	ldr	r2, [pc, #660]	; (8000898 <main+0x2c8>)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i) {
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	69fa      	ldr	r2, [r7, #28]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4ba1      	ldr	r3, [pc, #644]	; (800089c <main+0x2cc>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b9b      	ldr	r3, [pc, #620]	; (800089c <main+0x2cc>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b96      	ldr	r3, [pc, #600]	; (800089c <main+0x2cc>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a95      	ldr	r2, [pc, #596]	; (800089c <main+0x2cc>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
	//  SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f001 facc 	bl	8001bf8 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f9b2 	bl	80009c8 <SystemClock_Config>

//    initialize GPIO
	MX_GPIO_Init();
 8000664:	f000 fbda 	bl	8000e1c <MX_GPIO_Init>
//	initialize the compensation cell to improve slew rate
	HAL_EnableCompensationCell();
 8000668:	f001 fb98 	bl	8001d9c <HAL_EnableCompensationCell>
//	initialize the DMA, must be done before other peripherals
	MX_DMA_Init();
 800066c:	f000 fb8e 	bl	8000d8c <MX_DMA_Init>
//	initialize UART1, going to the ft232 interface
	MX_USART1_UART_Init();
 8000670:	f000 fae0 	bl	8000c34 <MX_USART1_UART_Init>
//	initialize URT3, going to the STLINK interface
	MX_USART3_UART_Init();
 8000674:	f000 fb34 	bl	8000ce0 <MX_USART3_UART_Init>

//	initialize SPI1 interface, going to the breadboard converter
	MX_SPI1_Init();
 8000678:	f000 fa2c 	bl	8000ad4 <MX_SPI1_Init>
//	initialize the SPI2 interface, going to the pcb converter
    MX_SPI2_Init();
 800067c:	f000 fa82 	bl	8000b84 <MX_SPI2_Init>

//  stall until the user button is pressed
	while (UserButtonStatus == 0) {
 8000680:	e005      	b.n	800068e <main+0xbe>
		BSP_LED_Toggle(LED1);
 8000682:	2000      	movs	r0, #0
 8000684:	f001 f954 	bl	8001930 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f001 fb47 	bl	8001d1c <HAL_Delay>
	while (UserButtonStatus == 0) {
 800068e:	4b84      	ldr	r3, [pc, #528]	; (80008a0 <main+0x2d0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f5      	beq.n	8000682 <main+0xb2>
	}
//	reset the user button status
	UserButtonStatus = 0;
 8000696:	4b82      	ldr	r3, [pc, #520]	; (80008a0 <main+0x2d0>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
//	reset LEDS
	BSP_LED_Off(LED1);
 800069c:	2000      	movs	r0, #0
 800069e:	f001 f91d 	bl	80018dc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f91a 	bl	80018dc <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f001 f917 	bl	80018dc <BSP_LED_Off>

	/* Configure communication direction : 1Line */
	SPI_1LINE_RX(&hspi1);
 80006ae:	4b7d      	ldr	r3, [pc, #500]	; (80008a4 <main+0x2d4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b7b      	ldr	r3, [pc, #492]	; (80008a4 <main+0x2d4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006bc:	601a      	str	r2, [r3, #0]
	SPI_1LINE_RX(&hspi2);
 80006be:	4b7a      	ldr	r3, [pc, #488]	; (80008a8 <main+0x2d8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b78      	ldr	r3, [pc, #480]	; (80008a8 <main+0x2d8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006cc:	601a      	str	r2, [r3, #0]

//	configure the half transfer callback function to update the wTransferState value
	hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006ce:	4b75      	ldr	r3, [pc, #468]	; (80008a4 <main+0x2d4>)
 80006d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006d2:	4a76      	ldr	r2, [pc, #472]	; (80008ac <main+0x2dc>)
 80006d4:	641a      	str	r2, [r3, #64]	; 0x40
	hspi2.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006d6:	4b74      	ldr	r3, [pc, #464]	; (80008a8 <main+0x2d8>)
 80006d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006da:	4a74      	ldr	r2, [pc, #464]	; (80008ac <main+0x2dc>)
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40

//	enable the transfer complete and half transfer interupts for SPI1
	SET_BIT(SPI1_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 80006de:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <main+0x2e0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a73      	ldr	r2, [pc, #460]	; (80008b0 <main+0x2e0>)
 80006e4:	f043 0318 	orr.w	r3, r3, #24
 80006e8:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI2_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 80006ea:	4b72      	ldr	r3, [pc, #456]	; (80008b4 <main+0x2e4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a71      	ldr	r2, [pc, #452]	; (80008b4 <main+0x2e4>)
 80006f0:	f043 0318 	orr.w	r3, r3, #24
 80006f4:	6013      	str	r3, [r2, #0]
//		call our custom error handler
		Error_Handler();
	}
#else
	//	start the DMA transfer on SPI2, use HAL library to perform initial configurations
		if (HAL_DMA_Start(hspi2.hdmarx, (uint32_t) &hspi2.Instance->RXDR,
 80006f6:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <main+0x2d8>)
 80006f8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80006fa:	4b6b      	ldr	r3, [pc, #428]	; (80008a8 <main+0x2d8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3330      	adds	r3, #48	; 0x30
 8000700:	4619      	mov	r1, r3
 8000702:	4a6d      	ldr	r2, [pc, #436]	; (80008b8 <main+0x2e8>)
 8000704:	897b      	ldrh	r3, [r7, #10]
 8000706:	f001 fff7 	bl	80026f8 <HAL_DMA_Start>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00d      	beq.n	800072c <main+0x15c>
						(uint32_t) aRxBuffer, rxCount) != HAL_OK) {
	//		if the DMA initalization was not OK, set the error bit
			SET_BIT(hspi2.ErrorCode, HAL_SPI_ERROR_DMA);
 8000710:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <main+0x2d8>)
 8000712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	4a63      	ldr	r2, [pc, #396]	; (80008a8 <main+0x2d8>)
 800071c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	//		reset SPI ready state
			hspi2.State = HAL_SPI_STATE_READY;
 8000720:	4b61      	ldr	r3, [pc, #388]	; (80008a8 <main+0x2d8>)
 8000722:	2201      	movs	r2, #1
 8000724:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	//		call our custom error handler
			Error_Handler();
 8000728:	f000 fc7f 	bl	800102a <Error_Handler>
		}
#endif

//	set the transfer size to 0 (unlimited)
	MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800072c:	4b5d      	ldr	r3, [pc, #372]	; (80008a4 <main+0x2d4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	4b5c      	ldr	r3, [pc, #368]	; (80008a4 <main+0x2d4>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b61      	ldr	r3, [pc, #388]	; (80008bc <main+0x2ec>)
 8000738:	400b      	ands	r3, r1
 800073a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(hspi2.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800073c:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <main+0x2d8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6859      	ldr	r1, [r3, #4]
 8000742:	4b59      	ldr	r3, [pc, #356]	; (80008a8 <main+0x2d8>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b5d      	ldr	r3, [pc, #372]	; (80008bc <main+0x2ec>)
 8000748:	400b      	ands	r3, r1
 800074a:	6053      	str	r3, [r2, #4]

//	enable DMA requests on the SPI instance
	SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800074c:	4b55      	ldr	r3, [pc, #340]	; (80008a4 <main+0x2d4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	4b54      	ldr	r3, [pc, #336]	; (80008a4 <main+0x2d4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800075a:	609a      	str	r2, [r3, #8]
	SET_BIT(hspi2.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800075c:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <main+0x2d8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	4b51      	ldr	r3, [pc, #324]	; (80008a8 <main+0x2d8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800076a:	609a      	str	r2, [r3, #8]

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800076c:	4b4d      	ldr	r3, [pc, #308]	; (80008a4 <main+0x2d4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	691a      	ldr	r2, [r3, #16]
 8000772:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <main+0x2d4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800077a:	611a      	str	r2, [r3, #16]
	__HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800077c:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <main+0x2d8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	691a      	ldr	r2, [r3, #16]
 8000782:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <main+0x2d8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800078a:	611a      	str	r2, [r3, #16]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(&hspi1);
 800078c:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <main+0x2d4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <main+0x2d4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0201 	orr.w	r2, r2, #1
 800079a:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2);
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <main+0x2d8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <main+0x2d8>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f042 0201 	orr.w	r2, r2, #1
 80007aa:	601a      	str	r2, [r3, #0]

//	start the SPI transfers
#ifdef USE_BREADBOARD
	SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
#else
	SET_BIT(hspi2.Instance->CR1, SPI_CR1_CSTART);
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <main+0x2d8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <main+0x2d8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007ba:	601a      	str	r2, [r3, #0]
#endif

//	wait for the first half of the transfer to complete
	while (wTransferState != TRANSFER_H_COMPLETE) {
 80007bc:	e005      	b.n	80007ca <main+0x1fa>
//		toggle LED2 every 20 ms
		HAL_Delay(20);
 80007be:	2014      	movs	r0, #20
 80007c0:	f001 faac 	bl	8001d1c <HAL_Delay>
		BSP_LED_Toggle(LED3);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f001 f8b3 	bl	8001930 <BSP_LED_Toggle>
	while (wTransferState != TRANSFER_H_COMPLETE) {
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <main+0x2f0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d1f5      	bne.n	80007be <main+0x1ee>
	}
//	reset transfer state
	wTransferState = TRANSFER_WAIT;
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <main+0x2f0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
//	reset LEDs
	BSP_LED_Off(LED1);
 80007d8:	2000      	movs	r0, #0
 80007da:	f001 f87f 	bl	80018dc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80007de:	2001      	movs	r0, #1
 80007e0:	f001 f87c 	bl	80018dc <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f001 f879 	bl	80018dc <BSP_LED_Off>
//	transfer data from rxbuffer to tx buffer
//	j is the index for the rx buffer
	int j = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
	aTxBuffer[0] = aRxBuffer[0];
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <main+0x2e8>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <main+0x2c8>)
 80007f6:	801a      	strh	r2, [r3, #0]
//	i is the index of the tx buffer
//	j increases by the oversampling ratio for each inciment in i
	for (int i = 1; i < txCount; ++i) {
 80007f8:	2301      	movs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00e      	b.n	800081c <main+0x24c>
		j += OVERSAMPLING;
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	3301      	adds	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
		aTxBuffer[i] = aRxBuffer[j];
 8000804:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <main+0x2e8>)
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080c:	b299      	uxth	r1, r3
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <main+0x2c8>)
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < txCount; ++i) {
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbec      	blt.n	80007fe <main+0x22e>
	}
//	Use the HAL driver to transmit the buffer over DMA
//	HAL will initialize many of the settings for us
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer))
 8000824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000828:	491b      	ldr	r1, [pc, #108]	; (8000898 <main+0x2c8>)
 800082a:	4826      	ldr	r0, [pc, #152]	; (80008c4 <main+0x2f4>)
 800082c:	f007 fcf2 	bl	8008214 <HAL_UART_Transmit_DMA>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <main+0x26a>
			!= HAL_OK) {
//		if it fails, call our error handler
		Error_Handler();
 8000836:	f000 fbf8 	bl	800102a <Error_Handler>
	}
//	Suspend interupts that we no longer need, for the purpose of efficiency
//	suspend the systick
	HAL_SuspendTick();
 800083a:	f001 fa93 	bl	8001d64 <HAL_SuspendTick>
//	suspend UART3 interupts
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 800083e:	2027      	movs	r0, #39	; 0x27
 8000840:	f001 fbe3 	bl	800200a <HAL_NVIC_DisableIRQ>
//	suspend DMA interupts for the UART3 channel
	HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 8000844:	200c      	movs	r0, #12
 8000846:	f001 fbe0 	bl	800200a <HAL_NVIC_DisableIRQ>
//	suspend DMA interrupts for the SPI channel
	HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 800084a:	2038      	movs	r0, #56	; 0x38
 800084c:	f001 fbdd 	bl	800200a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SPI2_DMA_IRQN);
 8000850:	2039      	movs	r0, #57	; 0x39
 8000852:	f001 fbda 	bl	800200a <HAL_NVIC_DisableIRQ>
//	reset LEDs
	BSP_LED_Off(LED1);
 8000856:	2000      	movs	r0, #0
 8000858:	f001 f840 	bl	80018dc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800085c:	2001      	movs	r0, #1
 800085e:	f001 f83d 	bl	80018dc <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000862:	2002      	movs	r0, #2
 8000864:	f001 f83a 	bl	80018dc <BSP_LED_Off>
	while (1) {
//		wait for the second half of the receive buffer to finish transferring
#ifdef USE_BREADBOARD
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
#else
		while ((DMA2->LISR & DMA_FLAG_TCIF1_5) != DMA_FLAG_TCIF1_5) { }
 8000868:	bf00      	nop
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <main+0x2f8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000876:	d1f8      	bne.n	800086a <main+0x29a>
#endif
//		clear the transfer complete flag of the SPI channel
		DMA2->LIFCR = DMA_FLAG_TCIF0_4 | DMA_FLAG_TCIF1_5;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <main+0x2f8>)
 800087a:	f44f 6202 	mov.w	r2, #2080	; 0x820
 800087e:	609a      	str	r2, [r3, #8]
//		the rx buffer index starts at half way through the buffer and goes to the end
		j = rxOffset;
 8000880:	893b      	ldrh	r3, [r7, #8]
 8000882:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[j];
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <main+0x2e8>)
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088c:	b29a      	uxth	r2, r3
 800088e:	4b02      	ldr	r3, [pc, #8]	; (8000898 <main+0x2c8>)
 8000890:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	e028      	b.n	80008ea <main+0x31a>
 8000898:	24000080 	.word	0x24000080
 800089c:	e000ed00 	.word	0xe000ed00
 80008a0:	24000060 	.word	0x24000060
 80008a4:	24001b90 	.word	0x24001b90
 80008a8:	24001880 	.word	0x24001880
 80008ac:	08000fd1 	.word	0x08000fd1
 80008b0:	40020410 	.word	0x40020410
 80008b4:	40020428 	.word	0x40020428
 80008b8:	24000880 	.word	0x24000880
 80008bc:	ffff0000 	.word	0xffff0000
 80008c0:	2400005c 	.word	0x2400005c
 80008c4:	24001908 	.word	0x24001908
 80008c8:	40020400 	.word	0x40020400
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//			j increases by the oversampling ratio for every increment in i
			j += OVERSAMPLING;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3301      	adds	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 80008d2:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <main+0x3e0>)
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008da:	b299      	uxth	r1, r3
 80008dc:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <main+0x3e4>)
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	3301      	adds	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbec      	blt.n	80008cc <main+0x2fc>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 80008f2:	bf00      	nop
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <main+0x3e8>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	d1f9      	bne.n	80008f4 <main+0x324>
//		reset the UART transfer complete flag
		USART3->ICR = UART_CLEAR_TCF;
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <main+0x3e8>)
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	621a      	str	r2, [r3, #32]
//		reset the UART's DMA channel transfer complete and half transfer flags
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <main+0x3ec>)
 8000908:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800090c:	609a      	str	r2, [r3, #8]
//		reenable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <main+0x3f0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a2b      	ldr	r2, [pc, #172]	; (80009c0 <main+0x3f0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <main+0x3e8>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <main+0x3e8>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6093      	str	r3, [r2, #8]

//		wait for the first half of the receive buffer to be ready
#ifdef USE_BREADBOARD
		while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4) {}
#else
		while ((DMA2->LISR & DMA_FLAG_HTIF1_5) != DMA_FLAG_HTIF1_5) {}
 8000926:	bf00      	nop
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <main+0x3f4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000934:	d1f8      	bne.n	8000928 <main+0x358>
#endif
//		reset the SPI DMA channel half transfer flag
		DMA2->LIFCR = DMA_FLAG_HTIF0_4 | DMA_FLAG_HTIF1_5;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <main+0x3f4>)
 8000938:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800093c:	609a      	str	r2, [r3, #8]
//		the starting index for the recieve buffer is 0
		j = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[0];
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <main+0x3e0>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <main+0x3e4>)
 800094a:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 800094c:	2301      	movs	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e00e      	b.n	8000970 <main+0x3a0>
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//            j increases by the oversampling ratio for each increment of i
			j += OVERSAMPLING;
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	3301      	adds	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 8000958:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <main+0x3e0>)
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000960:	b299      	uxth	r1, r3
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <main+0x3e4>)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbec      	blt.n	8000952 <main+0x382>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) {}
 8000978:	bf00      	nop
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main+0x3e8>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000982:	2b40      	cmp	r3, #64	; 0x40
 8000984:	d1f9      	bne.n	800097a <main+0x3aa>
//		clear the transfer complete flag of the UART
		USART3->ICR = UART_CLEAR_TCF;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <main+0x3e8>)
 8000988:	2240      	movs	r2, #64	; 0x40
 800098a:	621a      	str	r2, [r3, #32]
//		clear the transfer complete and half transfer flags of the UART DMA channel
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <main+0x3ec>)
 800098e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000992:	609a      	str	r2, [r3, #8]
//		enable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <main+0x3f0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <main+0x3f0>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <main+0x3e8>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <main+0x3e8>)
 80009a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009aa:	6093      	str	r3, [r2, #8]
		while ((DMA2->LISR & DMA_FLAG_TCIF1_5) != DMA_FLAG_TCIF1_5) { }
 80009ac:	e75c      	b.n	8000868 <main+0x298>
 80009ae:	bf00      	nop
 80009b0:	24000880 	.word	0x24000880
 80009b4:	24000080 	.word	0x24000080
 80009b8:	40004800 	.word	0x40004800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020028 	.word	0x40020028
 80009c4:	40020400 	.word	0x40020400

080009c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09c      	sub	sp, #112	; 0x70
 80009cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	224c      	movs	r2, #76	; 0x4c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f009 f882 	bl	8009ae0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2220      	movs	r2, #32
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f009 f87c 	bl	8009ae0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f004 fcb5 	bl	8005358 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <SystemClock_Config+0x100>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a34      	ldr	r2, [pc, #208]	; (8000ac8 <SystemClock_Config+0x100>)
 80009f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <SystemClock_Config+0x100>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <SystemClock_Config+0x104>)
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <SystemClock_Config+0x104>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <SystemClock_Config+0x104>)
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000a20:	bf00      	nop
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <SystemClock_Config+0x100>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2e:	d1f8      	bne.n	8000a22 <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0x108>)
 8000a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a34:	f023 0303 	bic.w	r3, r3, #3
 8000a38:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <SystemClock_Config+0x108>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000a40:	2321      	movs	r3, #33	; 0x21
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 115;
 8000a5a:	2373      	movs	r3, #115	; 0x73
 8000a5c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fca6 	bl	80053cc <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xc2>
		Error_Handler();
 8000a86:	f000 fad0 	bl	800102a <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a8a:	233f      	movs	r3, #63	; 0x3f
 8000a8c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a96:	2308      	movs	r3, #8
 8000a98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a9e:	2340      	movs	r3, #64	; 0x40
 8000aa0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 f89b 	bl	8005bec <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xf8>
		Error_Handler();
 8000abc:	f000 fab5 	bl	800102a <Error_Handler>
	}

}
 8000ac0:	bf00      	nop
 8000ac2:	3770      	adds	r7, #112	; 0x70
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	58024800 	.word	0x58024800
 8000acc:	58000400 	.word	0x58000400
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <MX_SPI1_Init+0xac>)
 8000adc:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000ae0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ae4:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000ae8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000aec:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000af0:	220d      	movs	r2, #13
 8000af2:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000afa:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b08:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.TxCRCInitializationPattern =
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b50:	2220      	movs	r2, #32
 8000b52:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_SPI1_Init+0xa8>)
 8000b68:	f006 ff2e 	bl	80079c8 <HAL_SPI_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SPI1_Init+0xa2>
		Error_Handler();
 8000b72:	f000 fa5a 	bl	800102a <Error_Handler>
	}

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24001b90 	.word	0x24001b90
 8000b80:	40013000 	.word	0x40013000

08000b84 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi2.Instance = SPI2;
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000b8a:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <MX_SPI2_Init+0xac>)
 8000b8c:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000b90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b94:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000b98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b9c:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi2.Init.DataSize = SPI_DATASIZE_14BIT;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000ba0:	220d      	movs	r2, #13
 8000ba2:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000baa:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bb8:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.TxCRCInitializationPattern =
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000c00:	2220      	movs	r2, #32
 8000c02:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_SPI2_Init+0xa8>)
 8000c18:	f006 fed6 	bl	80079c8 <HAL_SPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_SPI2_Init+0xa2>
		Error_Handler();
 8000c22:	f000 fa02 	bl	800102a <Error_Handler>
	}

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	24001880 	.word	0x24001880
 8000c30:	40003800 	.word	0x40003800

08000c34 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c3a:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <MX_USART1_UART_Init+0xa4>)
 8000c3c:	601a      	str	r2, [r3, #0]
//	baud rate is peripheral clock divided by 8, check the ioc file
	huart1.Init.BaudRate = 11978688;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c40:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <MX_USART1_UART_Init+0xa8>)
 8000c42:	605a      	str	r2, [r3, #4]
//	8 bits per word
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
//	1 stop bit
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
//	no parity check
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
//	UART in both transmit and receive
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c58:	220c      	movs	r2, #12
 8000c5a:	615a      	str	r2, [r3, #20]
//	no HW flow control
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
//	oversample by 8
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c68:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
//	divide the peripheral clock by 1
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
//	no advanced features
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
//	initialize peripheral with HAL library
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c7e:	f007 fa78 	bl	8008172 <HAL_UART_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000c88:	f000 f9cf 	bl	800102a <Error_Handler>
	}
//	initialize transfer fifo
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000c90:	f008 fe37 	bl	8009902 <HAL_UARTEx_SetTxFifoThreshold>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000c9a:	f000 f9c6 	bl	800102a <Error_Handler>
	}
//	initialize receive fifo
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000ca2:	f008 fe6c 	bl	800997e <HAL_UARTEx_SetRxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000cac:	f000 f9bd 	bl	800102a <Error_Handler>
	}
//	enable fifo
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MX_USART1_UART_Init+0xa0>)
 8000cb2:	f008 fdeb 	bl	800988c <HAL_UARTEx_EnableFifoMode>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000cbc:	f000 f9b5 	bl	800102a <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2025      	movs	r0, #37	; 0x25
 8000cc6:	f001 f978 	bl	8001fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cca:	2025      	movs	r0, #37	; 0x25
 8000ccc:	f001 f98f 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	24001b00 	.word	0x24001b00
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	00b6c7c0 	.word	0x00b6c7c0

08000ce0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000ce6:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <MX_USART3_UART_Init+0xa4>)
 8000ce8:	601a      	str	r2, [r3, #0]
	//	baud rate is peripheral clock divided by 8, check the ioc file
		huart3.Init.BaudRate = 11978688;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000cec:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <MX_USART3_UART_Init+0xa8>)
 8000cee:	605a      	str	r2, [r3, #4]
	//	8 bits per word
		huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
	//	1 stop bit
		huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
	//	no parity check
		huart3.Init.Parity = UART_PARITY_NONE;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
	//	UART in both transmit and receive
		huart3.Init.Mode = UART_MODE_TX_RX;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d04:	220c      	movs	r2, #12
 8000d06:	615a      	str	r2, [r3, #20]
	//	no HW flow control
		huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
	//	oversample by 8
		huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d14:	61da      	str	r2, [r3, #28]
		huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
	//	divide the peripheral clock by 1
		huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
	//	no advanced features
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
	//	initialize peripheral with HAL library
		if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000d28:	4815      	ldr	r0, [pc, #84]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d2a:	f007 fa22 	bl	8008172 <HAL_UART_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x58>
			Error_Handler();
 8000d34:	f000 f979 	bl	800102a <Error_Handler>
		}
	//	initialize transfer fifo
		if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d3c:	f008 fde1 	bl	8009902 <HAL_UARTEx_SetTxFifoThreshold>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART3_UART_Init+0x6a>
				!= HAL_OK) {
			Error_Handler();
 8000d46:	f000 f970 	bl	800102a <Error_Handler>
		}
	//	initialize receive fifo
		if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d4e:	f008 fe16 	bl	800997e <HAL_UARTEx_SetRxFifoThreshold>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART3_UART_Init+0x7c>
				!= HAL_OK) {
			Error_Handler();
 8000d58:	f000 f967 	bl	800102a <Error_Handler>
		}
	//	enable fifo
		if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK) {
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <MX_USART3_UART_Init+0xa0>)
 8000d5e:	f008 fd95 	bl	800988c <HAL_UARTEx_EnableFifoMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART3_UART_Init+0x8c>
			Error_Handler();
 8000d68:	f000 f95f 	bl	800102a <Error_Handler>
		}
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2027      	movs	r0, #39	; 0x27
 8000d72:	f001 f922 	bl	8001fba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d76:	2027      	movs	r0, #39	; 0x27
 8000d78:	f001 f939 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24001908 	.word	0x24001908
 8000d84:	40004800 	.word	0x40004800
 8000d88:	00b6c7c0 	.word	0x00b6c7c0

08000d8c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_DMA_Init+0x8c>)
 8000d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <MX_DMA_Init+0x8c>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_DMA_Init+0x8c>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_DMA_Init+0x8c>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <MX_DMA_Init+0x8c>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_DMA_Init+0x8c>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f001 f8f1 	bl	8001fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dd8:	200b      	movs	r0, #11
 8000dda:	f001 f908 	bl	8001fee <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2100      	movs	r1, #0
 8000de2:	200c      	movs	r0, #12
 8000de4:	f001 f8e9 	bl	8001fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000de8:	200c      	movs	r0, #12
 8000dea:	f001 f900 	bl	8001fee <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2100      	movs	r1, #0
 8000df2:	2038      	movs	r0, #56	; 0x38
 8000df4:	f001 f8e1 	bl	8001fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000df8:	2038      	movs	r0, #56	; 0x38
 8000dfa:	f001 f8f8 	bl	8001fee <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2100      	movs	r1, #0
 8000e02:	2039      	movs	r0, #57	; 0x39
 8000e04:	f001 f8d9 	bl	8001fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e08:	2039      	movs	r0, #57	; 0x39
 8000e0a:	f001 f8f0 	bl	8001fee <HAL_NVIC_EnableIRQ>


}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	58024400 	.word	0x58024400

08000e1c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a55      	ldr	r2, [pc, #340]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a46      	ldr	r2, [pc, #280]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a3f      	ldr	r2, [pc, #252]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_GPIO_Init+0x174>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f0a:	4822      	ldr	r0, [pc, #136]	; (8000f94 <MX_GPIO_Init+0x178>)
 8000f0c:	f004 f9d6 	bl	80052bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <MX_GPIO_Init+0x17c>)
 8000f16:	f004 f9d1 	bl	80052bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481b      	ldr	r0, [pc, #108]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000f30:	f004 f814 	bl	8004f5c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000f34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_GPIO_Init+0x178>)
 8000f4e:	f004 f805 	bl	8004f5c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_GPIO_Init+0x17c>)
 8000f6a:	f003 fff7 	bl	8004f5c <HAL_GPIO_Init>

	BSP_LED_Init(LED1);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 fc14 	bl	800179c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f000 fc11 	bl	800179c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f000 fc0e 	bl	800179c <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f80:	2101      	movs	r1, #1
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 fcfe 	bl	8001984 <BSP_PB_Init>
}
 8000f88:	bf00      	nop
 8000f8a:	3730      	adds	r7, #48	; 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021000 	.word	0x58021000
 8000f9c:	58020800 	.word	0x58020800

08000fa0 <HAL_GPIO_EXTI_Callback>:

// callback function for external GPIO interrupt
// toggles the value of UserButtonStatus
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_USER_PIN) {
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb0:	d105      	bne.n	8000fbe <HAL_GPIO_EXTI_Callback+0x1e>
		UserButtonStatus ^= 1;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000fbc:	6013      	str	r3, [r2, #0]
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000060 	.word	0x24000060

08000fd0 <tx_h_complete>:

// callback for SPI DMA half transfer complete
void tx_h_complete(DMA_HandleTypeDef *hdma) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_H_COMPLETE;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <tx_h_complete+0x1c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2400005c 	.word	0x2400005c

08000ff0 <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_SPI_ErrorCallback+0x1c>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
	Error_Handler();
 8000ffe:	f000 f814 	bl	800102a <Error_Handler>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2400005c 	.word	0x2400005c

08001010 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8001018:	2002      	movs	r0, #2
 800101a:	f000 fc35 	bl	8001888 <BSP_LED_On>
	Error_Handler();
 800101e:	f000 f804 	bl	800102a <Error_Handler>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800102e:	b672      	cpsid	i
}
 8001030:	bf00      	nop
//	disable interrupts
	__disable_irq();
//	toggle the red LED forever
	while (1) {
		BSP_LED_Toggle(LED3);
 8001032:	2002      	movs	r0, #2
 8001034:	f000 fc7c 	bl	8001930 <BSP_LED_Toggle>
		HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f000 fe6f 	bl	8001d1c <HAL_Delay>
		BSP_LED_Toggle(LED3);
 800103e:	e7f8      	b.n	8001032 <Error_Handler+0x8>

08001040 <HAL_MspInit>:
const unsigned short pll2_r = 2;

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_MspInit+0x30>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x30>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x30>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b0bc      	sub	sp, #240	; 0xf0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800107c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	22bc      	movs	r2, #188	; 0xbc
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f008 fd23 	bl	8009ae0 <memset>
	if (hspi->Instance == SPI1) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4abd      	ldr	r2, [pc, #756]	; (8001394 <HAL_SPI_MspInit+0x320>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	f040 8096 	bne.w	80011d2 <HAL_SPI_MspInit+0x15e>

//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	623b      	str	r3, [r7, #32]
//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	67fb      	str	r3, [r7, #124]	; 0x7c
//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80010b2:	2304      	movs	r3, #4
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80010b6:	f240 1317 	movw	r3, #279	; 0x117
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80010bc:	2320      	movs	r3, #32
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80010c0:	2302      	movs	r3, #2
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80010c4:	2302      	movs	r3, #2
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010c8:	2340      	movs	r3, #64	; 0x40
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 f913 	bl	8006304 <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_SPI_MspInit+0x74>
			Error_Handler();
 80010e4:	f7ff ffa1 	bl	800102a <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 80010e8:	4bab      	ldr	r3, [pc, #684]	; (8001398 <HAL_SPI_MspInit+0x324>)
 80010ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010ee:	4aaa      	ldr	r2, [pc, #680]	; (8001398 <HAL_SPI_MspInit+0x324>)
 80010f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010f8:	4ba7      	ldr	r3, [pc, #668]	; (8001398 <HAL_SPI_MspInit+0x324>)
 80010fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4ba4      	ldr	r3, [pc, #656]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	4aa2      	ldr	r2, [pc, #648]	; (8001398 <HAL_SPI_MspInit+0x324>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001116:	4ba0      	ldr	r3, [pc, #640]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	69bb      	ldr	r3, [r7, #24]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA15 (JTDI)     ------> SPI1_NSS
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 8001124:	f248 0360 	movw	r3, #32864	; 0x8060
 8001128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800113e:	2305      	movs	r3, #5
 8001140:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001148:	4619      	mov	r1, r3
 800114a:	4894      	ldr	r0, [pc, #592]	; (800139c <HAL_SPI_MspInit+0x328>)
 800114c:	f003 ff06 	bl	8004f5c <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = SPI1_DMA_INSTANCE;
 8001150:	4b93      	ldr	r3, [pc, #588]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001152:	4a94      	ldr	r2, [pc, #592]	; (80013a4 <HAL_SPI_MspInit+0x330>)
 8001154:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001156:	4b92      	ldr	r3, [pc, #584]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001158:	2225      	movs	r2, #37	; 0x25
 800115a:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115c:	4b90      	ldr	r3, [pc, #576]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b8d      	ldr	r3, [pc, #564]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 800116a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116e:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001170:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001176:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001178:	4b89      	ldr	r3, [pc, #548]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 800117a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117e:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001180:	4b87      	ldr	r3, [pc, #540]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001186:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001188:	4b85      	ldr	r3, [pc, #532]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118e:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001194:	4b82      	ldr	r3, [pc, #520]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800119a:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011a0:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 80011a6:	487e      	ldr	r0, [pc, #504]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 80011a8:	f000 ff4a 	bl	8002040 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_SPI_MspInit+0x142>
			Error_Handler();
 80011b2:	f7ff ff3a 	bl	800102a <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi1_rx);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a79      	ldr	r2, [pc, #484]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 80011ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80011bc:	4a78      	ldr	r2, [pc, #480]	; (80013a0 <HAL_SPI_MspInit+0x32c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2023      	movs	r0, #35	; 0x23
 80011c8:	f000 fef7 	bl	8001fba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011cc:	2023      	movs	r0, #35	; 0x23
 80011ce:	f000 ff0e 	bl	8001fee <HAL_NVIC_EnableIRQ>
	}
	if (hspi->Instance == SPI2) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a74      	ldr	r2, [pc, #464]	; (80013a8 <HAL_SPI_MspInit+0x334>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	f040 80f6 	bne.w	80013ca <HAL_SPI_MspInit+0x356>

		/** Initializes the peripherals clock
		 */
		//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	623b      	str	r3, [r7, #32]
		//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	67fb      	str	r3, [r7, #124]	; 0x7c
		//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80011ea:	2304      	movs	r3, #4
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80011ee:	f240 1317 	movw	r3, #279	; 0x117
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80011f4:	2320      	movs	r3, #32
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80011f8:	2302      	movs	r3, #2
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80011fc:	2302      	movs	r3, #2
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
		//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
		//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f005 f877 	bl	8006304 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_SPI_MspInit+0x1ac>
			Error_Handler();
 800121c:	f7ff ff05 	bl	800102a <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001220:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	4a5c      	ldr	r2, [pc, #368]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <HAL_SPI_MspInit+0x324>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_SPI_MspInit+0x324>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_SPI_MspInit+0x324>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a45      	ldr	r2, [pc, #276]	; (8001398 <HAL_SPI_MspInit+0x324>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_SPI_MspInit+0x324>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
		 PC2_C     ------> SPI2_MISO
		 PC3_C     ------> SPI2_MOSI
		 PB12     ------> SPI2_NSS
		 PD3     ------> SPI2_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001298:	230c      	movs	r3, #12
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b0:	2305      	movs	r3, #5
 80012b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ba:	4619      	mov	r1, r3
 80012bc:	483b      	ldr	r0, [pc, #236]	; (80013ac <HAL_SPI_MspInit+0x338>)
 80012be:	f003 fe4d 	bl	8004f5c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012dc:	2305      	movs	r3, #5
 80012de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e6:	4619      	mov	r1, r3
 80012e8:	4831      	ldr	r0, [pc, #196]	; (80013b0 <HAL_SPI_MspInit+0x33c>)
 80012ea:	f003 fe37 	bl	8004f5c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ee:	2308      	movs	r3, #8
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001306:	2305      	movs	r3, #5
 8001308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001310:	4619      	mov	r1, r3
 8001312:	4828      	ldr	r0, [pc, #160]	; (80013b4 <HAL_SPI_MspInit+0x340>)
 8001314:	f003 fe22 	bl	8004f5c <HAL_GPIO_Init>

		/* SPI2 DMA Init */
		/* SPI2_RX Init */
		hdma_spi2_rx.Instance = SPI2_DMA_INSTANCE;
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_SPI_MspInit+0x348>)
 800131c:	601a      	str	r2, [r3, #0]
		hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001320:	2227      	movs	r2, #39	; 0x27
 8001322:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001336:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 800133a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133e:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001346:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 800134a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134e:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK) {
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001370:	f000 fe66 	bl	8002040 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_SPI_MspInit+0x30a>
			Error_Handler();
 800137a:	f7ff fe56 	bl	800102a <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi2_rx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001382:	67da      	str	r2, [r3, #124]	; 0x7c
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_SPI_MspInit+0x344>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2024      	movs	r0, #36	; 0x24
 8001390:	e016      	b.n	80013c0 <HAL_SPI_MspInit+0x34c>
 8001392:	bf00      	nop
 8001394:	40013000 	.word	0x40013000
 8001398:	58024400 	.word	0x58024400
 800139c:	58020000 	.word	0x58020000
 80013a0:	24001c18 	.word	0x24001c18
 80013a4:	40020410 	.word	0x40020410
 80013a8:	40003800 	.word	0x40003800
 80013ac:	58020800 	.word	0x58020800
 80013b0:	58020400 	.word	0x58020400
 80013b4:	58020c00 	.word	0x58020c00
 80013b8:	24001998 	.word	0x24001998
 80013bc:	40020428 	.word	0x40020428
 80013c0:	f000 fdfb 	bl	8001fba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013c4:	2024      	movs	r0, #36	; 0x24
 80013c6:	f000 fe12 	bl	8001fee <HAL_NVIC_EnableIRQ>
	}

}
 80013ca:	bf00      	nop
 80013cc:	37f0      	adds	r7, #240	; 0xf0
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ba      	sub	sp, #232	; 0xe8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	22bc      	movs	r2, #188	; 0xbc
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f008 fb73 	bl	8009ae0 <memset>
	if (huart->Instance == USART1) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a95      	ldr	r2, [pc, #596]	; (8001654 <HAL_UART_MspInit+0x280>)
 8001400:	4293      	cmp	r3, r2
 8001402:	f040 8099 	bne.w	8001538 <HAL_UART_MspInit+0x164>
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
//		peripheral uses pll3q
		PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800140a:	2310      	movs	r3, #16
 800140c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//		set m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001410:	2304      	movs	r3, #4
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001414:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001418:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 800141a:	2309      	movs	r3, #9
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 800141e:	2308      	movs	r3, #8
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001422:	2302      	movs	r3, #2
 8001424:	64fb      	str	r3, [r7, #76]	; 0x4c
//		input clock speed is 2.08 MHz
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142a:	653b      	str	r3, [r7, #80]	; 0x50
//		use high frequency VCO mode
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800142c:	2300      	movs	r3, #0
 800142e:	657b      	str	r3, [r7, #84]	; 0x54
//		no fractional n
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	65bb      	str	r3, [r7, #88]	; 0x58
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4618      	mov	r0, r3
 800143a:	f004 ff63 	bl	8006304 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_UART_MspInit+0x74>
			Error_Handler();
 8001444:	f7ff fdf1 	bl	800102a <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001448:	4b83      	ldr	r3, [pc, #524]	; (8001658 <HAL_UART_MspInit+0x284>)
 800144a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800144e:	4a82      	ldr	r2, [pc, #520]	; (8001658 <HAL_UART_MspInit+0x284>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001458:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <HAL_UART_MspInit+0x284>)
 800145a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <HAL_UART_MspInit+0x284>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_UART_MspInit+0x284>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b78      	ldr	r3, [pc, #480]	; (8001658 <HAL_UART_MspInit+0x284>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PB15     ------> USART1_RX
		 PB6     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800149e:	2304      	movs	r3, #4
 80014a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a8:	4619      	mov	r1, r3
 80014aa:	486c      	ldr	r0, [pc, #432]	; (800165c <HAL_UART_MspInit+0x288>)
 80014ac:	f003 fd56 	bl	8004f5c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c8:	2307      	movs	r3, #7
 80014ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4861      	ldr	r0, [pc, #388]	; (800165c <HAL_UART_MspInit+0x288>)
 80014d6:	f003 fd41 	bl	8004f5c <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream0;
 80014da:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80014dc:	4a61      	ldr	r2, [pc, #388]	; (8001664 <HAL_UART_MspInit+0x290>)
 80014de:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80014e0:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80014e2:	222a      	movs	r2, #42	; 0x2a
 80014e4:	605a      	str	r2, [r3, #4]
//		set memory to peripheral transfer
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e6:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	609a      	str	r2, [r3, #8]
//		do not increment peripheral memory address
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
//		increment memory address
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80014f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f8:	611a      	str	r2, [r3, #16]
//		align data by bytes
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fa:	4b59      	ldr	r3, [pc, #356]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
//		align data by half word
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001500:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_UART_MspInit+0x28c>)
 8001502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001506:	619a      	str	r2, [r3, #24]
//		non circular mode
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001508:	4b55      	ldr	r3, [pc, #340]	; (8001660 <HAL_UART_MspInit+0x28c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <HAL_UART_MspInit+0x28c>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
//		do not use FIFO
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001514:	4b52      	ldr	r3, [pc, #328]	; (8001660 <HAL_UART_MspInit+0x28c>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
//		configure DMA with HAL library
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 800151a:	4851      	ldr	r0, [pc, #324]	; (8001660 <HAL_UART_MspInit+0x28c>)
 800151c:	f000 fd90 	bl	8002040 <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_UART_MspInit+0x156>
			Error_Handler();
 8001526:	f7ff fd80 	bl	800102a <Error_Handler>
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_UART_MspInit+0x28c>)
 800152e:	679a      	str	r2, [r3, #120]	; 0x78
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_UART_MspInit+0x28c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6393      	str	r3, [r2, #56]	; 0x38
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);

	}

}
 8001536:	e088      	b.n	800164a <HAL_UART_MspInit+0x276>
	} else if (huart->Instance == USART3) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_UART_MspInit+0x294>)
 800153e:	4293      	cmp	r3, r2
 8001540:	f040 8083 	bne.w	800164a <HAL_UART_MspInit+0x276>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.Usart234578ClockSelection =
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800154e:	2304      	movs	r3, #4
 8001550:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001552:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001558:	2309      	movs	r3, #9
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 800155c:	2308      	movs	r3, #8
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001560:	2302      	movs	r3, #2
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001568:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800156a:	2300      	movs	r3, #0
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fec4 	bl	8006304 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0x1b2>
			Error_Handler();
 8001582:	f7ff fd52 	bl	800102a <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_UART_MspInit+0x284>)
 8001588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800158c:	4a32      	ldr	r2, [pc, #200]	; (8001658 <HAL_UART_MspInit+0x284>)
 800158e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001592:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_UART_MspInit+0x284>)
 8001598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800159c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <HAL_UART_MspInit+0x284>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <HAL_UART_MspInit+0x284>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_UART_MspInit+0x284>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4820      	ldr	r0, [pc, #128]	; (800166c <HAL_UART_MspInit+0x298>)
 80015ea:	f003 fcb7 	bl	8004f5c <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_UART_MspInit+0x29c>)
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <HAL_UART_MspInit+0x2a0>)
 80015f2:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_UART_MspInit+0x29c>)
 80015f6:	222e      	movs	r2, #46	; 0x2e
 80015f8:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_UART_MspInit+0x29c>)
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_UART_MspInit+0x29c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_MspInit+0x29c>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 800162e:	4810      	ldr	r0, [pc, #64]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001630:	f000 fd06 	bl	8002040 <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x26a>
			Error_Handler();
 800163a:	f7ff fcf6 	bl	800102a <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001642:	679a      	str	r2, [r3, #120]	; 0x78
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_UART_MspInit+0x29c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
}
 800164a:	bf00      	nop
 800164c:	37e8      	adds	r7, #232	; 0xe8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40011000 	.word	0x40011000
 8001658:	58024400 	.word	0x58024400
 800165c:	58020400 	.word	0x58020400
 8001660:	24001a88 	.word	0x24001a88
 8001664:	40020010 	.word	0x40020010
 8001668:	40004800 	.word	0x40004800
 800166c:	58020c00 	.word	0x58020c00
 8001670:	24001a10 	.word	0x24001a10
 8001674:	40020028 	.word	0x40020028

08001678 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80016c4:	f000 fb0a 	bl	8001cdc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
//	turn on the red LED
	BSP_LED_On(LED3);
 80016d0:	2002      	movs	r0, #2
 80016d2:	f000 f8d9 	bl	8001888 <BSP_LED_On>
//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016d6:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Stream0_IRQHandler+0x14>)
 80016d8:	f002 f8fa 	bl	80038d0 <HAL_DMA_IRQHandler>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	24001a88 	.word	0x24001a88

080016e4 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f000 f8cd 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016ee:	4802      	ldr	r0, [pc, #8]	; (80016f8 <DMA1_Stream1_IRQHandler+0x14>)
 80016f0:	f002 f8ee 	bl	80038d0 <HAL_DMA_IRQHandler>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	24001a10 	.word	0x24001a10

080016fc <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001700:	2002      	movs	r0, #2
 8001702:	f000 f8c1 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001706:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA2_Stream0_IRQHandler+0x14>)
 8001708:	f002 f8e2 	bl	80038d0 <HAL_DMA_IRQHandler>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	24001c18 	.word	0x24001c18

08001714 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001718:	2002      	movs	r0, #2
 800171a:	f000 f8b5 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800171e:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA2_Stream1_IRQHandler+0x14>)
 8001720:	f002 f8d6 	bl	80038d0 <HAL_DMA_IRQHandler>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	24001998 	.word	0x24001998

0800172c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles external GPIO global interrupt for user button.
 */
void EXTI15_10_IRQHandler(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

	//	call the HAL library interrupt handler
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001730:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001734:	f003 fdf5 	bl	8005322 <HAL_GPIO_EXTI_IRQHandler>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001740:	2002      	movs	r0, #2
 8001742:	f000 f8a1 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart1);
 8001746:	4802      	ldr	r0, [pc, #8]	; (8001750 <USART1_IRQHandler+0x14>)
 8001748:	f006 fde4 	bl	8008314 <HAL_UART_IRQHandler>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24001b00 	.word	0x24001b00

08001754 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001758:	2002      	movs	r0, #2
 800175a:	f000 f895 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart3);
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <USART3_IRQHandler+0x14>)
 8001760:	f006 fdd8 	bl	8008314 <HAL_UART_IRQHandler>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	24001908 	.word	0x24001908

0800176c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001770:	2002      	movs	r0, #2
 8001772:	f000 f889 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi1);
 8001776:	4802      	ldr	r0, [pc, #8]	; (8001780 <SPI1_IRQHandler+0x14>)
 8001778:	f006 fa28 	bl	8007bcc <HAL_SPI_IRQHandler>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	24001b90 	.word	0x24001b90

08001784 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001788:	2002      	movs	r0, #2
 800178a:	f000 f87d 	bl	8001888 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi2);
 800178e:	4802      	ldr	r0, [pc, #8]	; (8001798 <SPI2_IRQHandler+0x14>)
 8001790:	f006 fa1c 	bl	8007bcc <HAL_SPI_IRQHandler>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24001880 	.word	0x24001880

0800179c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <BSP_LED_Init+0x28>
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d006      	beq.n	80017c4 <BSP_LED_Init+0x28>
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d003      	beq.n	80017c4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017bc:	f06f 0301 	mvn.w	r3, #1
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c2:	e055      	b.n	8001870 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <BSP_LED_Init+0xe0>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a2a      	ldr	r2, [pc, #168]	; (800187c <BSP_LED_Init+0xe0>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <BSP_LED_Init+0xe0>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	e021      	b.n	800182e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10f      	bne.n	8001810 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <BSP_LED_Init+0xe0>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <BSP_LED_Init+0xe0>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <BSP_LED_Init+0xe0>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	e00e      	b.n	800182e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <BSP_LED_Init+0xe0>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <BSP_LED_Init+0xe0>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <BSP_LED_Init+0xe0>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <BSP_LED_Init+0xe4>)
 8001832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001836:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <BSP_LED_Init+0xe8>)
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	f107 0218 	add.w	r2, r7, #24
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fb82 	bl	8004f5c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <BSP_LED_Init+0xe8>)
 800185c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <BSP_LED_Init+0xe4>)
 8001864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	f003 fd26 	bl	80052bc <HAL_GPIO_WritePin>
  }

  return ret;
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001872:	4618      	mov	r0, r3
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	58024400 	.word	0x58024400
 8001880:	08009b08 	.word	0x08009b08
 8001884:	24000000 	.word	0x24000000

08001888 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <BSP_LED_On+0x28>
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d006      	beq.n	80018b0 <BSP_LED_On+0x28>
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d003      	beq.n	80018b0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018a8:	f06f 0301 	mvn.w	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e00b      	b.n	80018c8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <BSP_LED_On+0x4c>)
 80018b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <BSP_LED_On+0x50>)
 80018bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4619      	mov	r1, r3
 80018c4:	f003 fcfa 	bl	80052bc <HAL_GPIO_WritePin>
  }

  return ret;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	24000000 	.word	0x24000000
 80018d8:	08009b08 	.word	0x08009b08

080018dc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <BSP_LED_Off+0x28>
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d006      	beq.n	8001904 <BSP_LED_Off+0x28>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018fc:	f06f 0301 	mvn.w	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e00b      	b.n	800191c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <BSP_LED_Off+0x4c>)
 8001908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <BSP_LED_Off+0x50>)
 8001910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	f003 fcd0 	bl	80052bc <HAL_GPIO_WritePin>
  }

  return ret;
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	24000000 	.word	0x24000000
 800192c:	08009b08 	.word	0x08009b08

08001930 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <BSP_LED_Toggle+0x28>
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d006      	beq.n	8001958 <BSP_LED_Toggle+0x28>
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001950:	f06f 0301 	mvn.w	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e00b      	b.n	8001970 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <BSP_LED_Toggle+0x4c>)
 800195c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4907      	ldr	r1, [pc, #28]	; (8001980 <BSP_LED_Toggle+0x50>)
 8001964:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f003 fcbf 	bl	80052ee <HAL_GPIO_TogglePin>
  }

  return ret;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	24000000 	.word	0x24000000
 8001980:	08009b08 	.word	0x08009b08

08001984 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	4613      	mov	r3, r2
 8001992:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <BSP_PB_Init+0xc8>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <BSP_PB_Init+0xc8>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <BSP_PB_Init+0xc8>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80019b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80019b8:	2302      	movs	r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80019bc:	2302      	movs	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <BSP_PB_Init+0xcc>)
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fabf 	bl	8004f5c <HAL_GPIO_Init>
 80019de:	e030      	b.n	8001a42 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <BSP_PB_Init+0xd0>)
 80019e2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <BSP_PB_Init+0xcc>)
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	f107 020c 	add.w	r2, r7, #12
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fab2 	bl	8004f5c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <BSP_PB_Init+0xd4>)
 80019fe:	441a      	add	r2, r3
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4916      	ldr	r1, [pc, #88]	; (8001a5c <BSP_PB_Init+0xd8>)
 8001a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f003 fa91 	bl	8004f32 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <BSP_PB_Init+0xd4>)
 8001a16:	1898      	adds	r0, r3, r2
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <BSP_PB_Init+0xdc>)
 8001a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f003 fa66 	bl	8004ef4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a28:	2028      	movs	r0, #40	; 0x28
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <BSP_PB_Init+0xe0>)
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	f000 fac0 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a3a:	2328      	movs	r3, #40	; 0x28
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fad6 	bl	8001fee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	2400000c 	.word	0x2400000c
 8001a54:	11110000 	.word	0x11110000
 8001a58:	24001c90 	.word	0x24001c90
 8001a5c:	08009b10 	.word	0x08009b10
 8001a60:	24000010 	.word	0x24000010
 8001a64:	24000014 	.word	0x24000014

08001a68 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fff0 	bl	8001a68 <BSP_PB_Callback>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <SystemInit+0xec>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <SystemInit+0xec>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <SystemInit+0xf0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	2b06      	cmp	r3, #6
 8001aaa:	d807      	bhi.n	8001abc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <SystemInit+0xf0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 030f 	bic.w	r3, r3, #15
 8001ab4:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <SystemInit+0xf0>)
 8001ab6:	f043 0307 	orr.w	r3, r3, #7
 8001aba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <SystemInit+0xf4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <SystemInit+0xf4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <SystemInit+0xf4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <SystemInit+0xf4>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	492b      	ldr	r1, [pc, #172]	; (8001b80 <SystemInit+0xf4>)
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <SystemInit+0xf8>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <SystemInit+0xf0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <SystemInit+0xf0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 030f 	bic.w	r3, r3, #15
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <SystemInit+0xf0>)
 8001af0:	f043 0307 	orr.w	r3, r3, #7
 8001af4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <SystemInit+0xf4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <SystemInit+0xf4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <SystemInit+0xf4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <SystemInit+0xf4>)
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <SystemInit+0xfc>)
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <SystemInit+0xf4>)
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <SystemInit+0x100>)
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <SystemInit+0xf4>)
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <SystemInit+0x104>)
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <SystemInit+0xf4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <SystemInit+0xf4>)
 8001b22:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <SystemInit+0x104>)
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <SystemInit+0xf4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <SystemInit+0xf4>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <SystemInit+0x104>)
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <SystemInit+0xf4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <SystemInit+0xf4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <SystemInit+0xf4>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <SystemInit+0xf4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SystemInit+0x108>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <SystemInit+0x10c>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b56:	d202      	bcs.n	8001b5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <SystemInit+0x110>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <SystemInit+0x114>)
 8001b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b64:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SystemInit+0xec>)
 8001b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	52002000 	.word	0x52002000
 8001b80:	58024400 	.word	0x58024400
 8001b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b88:	02020200 	.word	0x02020200
 8001b8c:	01ff0000 	.word	0x01ff0000
 8001b90:	01010280 	.word	0x01010280
 8001b94:	5c001000 	.word	0x5c001000
 8001b98:	ffff0000 	.word	0xffff0000
 8001b9c:	51008108 	.word	0x51008108
 8001ba0:	52004000 	.word	0x52004000

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba8:	f7ff ff70 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f007 ff61 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7fe fcfb 	bl	80005d0 <main>
  bx  lr
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001be0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001be4:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001be8:	08009b64 	.word	0x08009b64
  ldr r2, =_sbss
 8001bec:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001bf0:	24001d2c 	.word	0x24001d2c

08001bf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC3_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfe:	2003      	movs	r0, #3
 8001c00:	f000 f9d0 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c04:	f004 f9a8 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_Init+0x68>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	4913      	ldr	r1, [pc, #76]	; (8001c64 <HAL_Init+0x6c>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_Init+0x68>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_Init+0x6c>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_Init+0x70>)
 8001c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_Init+0x74>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f814 	bl	8001c70 <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e002      	b.n	8001c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c52:	f7ff f9f5 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024400 	.word	0x58024400
 8001c64:	08009b14 	.word	0x08009b14
 8001c68:	2400001c 	.word	0x2400001c
 8001c6c:	24000018 	.word	0x24000018

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_InitTick+0x60>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e021      	b.n	8001cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_InitTick+0x64>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_InitTick+0x60>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f9c3 	bl	8002026 <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f000 f97f 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x68>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	24000024 	.word	0x24000024
 8001cd4:	24000018 	.word	0x24000018
 8001cd8:	24000020 	.word	0x24000020

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	24000024 	.word	0x24000024
 8001d00:	24001d28 	.word	0x24001d28

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	24001d28 	.word	0x24001d28

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	24000024 	.word	0x24000024

08001d64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_SuspendTick+0x1c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_SuspendTick+0x1c>)
 8001d6e:	f023 0302 	bic.w	r3, r3, #2
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetREVID+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	5c001000 	.word	0x5c001000

08001d9c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_EnableCompensationCell+0x1c>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_EnableCompensationCell+0x1c>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	58000400 	.word	0x58000400

08001dbc <__NVIC_SetPriorityGrouping>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <__NVIC_SetPriorityGrouping+0x40>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x40>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	05fa0000 	.word	0x05fa0000

08001e04 <__NVIC_GetPriorityGrouping>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	; (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_DisableIRQ>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db12      	blt.n	8001e94 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <__NVIC_DisableIRQ+0x44>)
 8001e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	3320      	adds	r3, #32
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e88:	f3bf 8f4f 	dsb	sy
}
 8001e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e8e:	f3bf 8f6f 	isb	sy
}
 8001e92:	bf00      	nop
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff05 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff1c 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff90 	bl	8001ef8 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5f 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff0f 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff1f 	bl	8001e5c <__NVIC_DisableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff96 	bl	8001f60 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fe5c 	bl	8001d04 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e316      	b.n	8002686 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_DMA_Init+0x1b8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d04a      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_DMA_Init+0x1bc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d045      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_DMA_Init+0x1c0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d040      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a62      	ldr	r2, [pc, #392]	; (8002204 <HAL_DMA_Init+0x1c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d03b      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_DMA_Init+0x1c8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d036      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5f      	ldr	r2, [pc, #380]	; (800220c <HAL_DMA_Init+0x1cc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d031      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <HAL_DMA_Init+0x1d0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02c      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_DMA_Init+0x1d4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d027      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_DMA_Init+0x1d8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d022      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a59      	ldr	r2, [pc, #356]	; (800221c <HAL_DMA_Init+0x1dc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d01d      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <HAL_DMA_Init+0x1e0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d018      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a56      	ldr	r2, [pc, #344]	; (8002224 <HAL_DMA_Init+0x1e4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_DMA_Init+0x1e8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00e      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a53      	ldr	r2, [pc, #332]	; (800222c <HAL_DMA_Init+0x1ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_DMA_Init+0x1f0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d004      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_DMA_Init+0x1f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Init+0xbc>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_DMA_Init+0xbe>
 80020fc:	2300      	movs	r3, #0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 813b 	beq.w	800237a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a37      	ldr	r2, [pc, #220]	; (80021f8 <HAL_DMA_Init+0x1b8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d04a      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_DMA_Init+0x1bc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d045      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a34      	ldr	r2, [pc, #208]	; (8002200 <HAL_DMA_Init+0x1c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d040      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_DMA_Init+0x1c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d03b      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_DMA_Init+0x1c8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d036      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a30      	ldr	r2, [pc, #192]	; (800220c <HAL_DMA_Init+0x1cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <HAL_DMA_Init+0x1d0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02c      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2d      	ldr	r2, [pc, #180]	; (8002214 <HAL_DMA_Init+0x1d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d027      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <HAL_DMA_Init+0x1d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_DMA_Init+0x1dc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01d      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a28      	ldr	r2, [pc, #160]	; (8002220 <HAL_DMA_Init+0x1e0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d018      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_DMA_Init+0x1e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_DMA_Init+0x1e8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00e      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_DMA_Init+0x1ec>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_DMA_Init+0x1f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <HAL_DMA_Init+0x1f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d108      	bne.n	80021c6 <HAL_DMA_Init+0x186>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <HAL_DMA_Init+0x196>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021d6:	e02f      	b.n	8002238 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d8:	f7ff fd94 	bl	8001d04 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d928      	bls.n	8002238 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2203      	movs	r2, #3
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e246      	b.n	8002686 <HAL_DMA_Init+0x646>
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1c8      	bne.n	80021d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4b83      	ldr	r3, [pc, #524]	; (8002460 <HAL_DMA_Init+0x420>)
 8002252:	4013      	ands	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800225e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002276:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2b04      	cmp	r3, #4
 800228a:	d107      	bne.n	800229c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	4313      	orrs	r3, r2
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800229c:	4b71      	ldr	r3, [pc, #452]	; (8002464 <HAL_DMA_Init+0x424>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_DMA_Init+0x428>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a8:	d328      	bcc.n	80022fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b28      	cmp	r3, #40	; 0x28
 80022b0:	d903      	bls.n	80022ba <HAL_DMA_Init+0x27a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b2e      	cmp	r3, #46	; 0x2e
 80022b8:	d917      	bls.n	80022ea <HAL_DMA_Init+0x2aa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b3e      	cmp	r3, #62	; 0x3e
 80022c0:	d903      	bls.n	80022ca <HAL_DMA_Init+0x28a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b42      	cmp	r3, #66	; 0x42
 80022c8:	d90f      	bls.n	80022ea <HAL_DMA_Init+0x2aa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b46      	cmp	r3, #70	; 0x46
 80022d0:	d903      	bls.n	80022da <HAL_DMA_Init+0x29a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b48      	cmp	r3, #72	; 0x48
 80022d8:	d907      	bls.n	80022ea <HAL_DMA_Init+0x2aa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b4e      	cmp	r3, #78	; 0x4e
 80022e0:	d905      	bls.n	80022ee <HAL_DMA_Init+0x2ae>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b52      	cmp	r3, #82	; 0x52
 80022e8:	d801      	bhi.n	80022ee <HAL_DMA_Init+0x2ae>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_DMA_Init+0x2b0>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0307 	bic.w	r3, r3, #7
 8002312:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b04      	cmp	r3, #4
 8002324:	d117      	bne.n	8002356 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f002 fc51 	bl	8004be0 <DMA_CheckFifoParam>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e197      	b.n	8002686 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f002 fb8c 	bl	8004a7c <DMA_CalcBaseAndBitshift>
 8002364:	4603      	mov	r3, r0
 8002366:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	223f      	movs	r2, #63	; 0x3f
 8002372:	409a      	lsls	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e0cd      	b.n	8002516 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3b      	ldr	r2, [pc, #236]	; (800246c <HAL_DMA_Init+0x42c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d022      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a39      	ldr	r2, [pc, #228]	; (8002470 <HAL_DMA_Init+0x430>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01d      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a38      	ldr	r2, [pc, #224]	; (8002474 <HAL_DMA_Init+0x434>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d018      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a36      	ldr	r2, [pc, #216]	; (8002478 <HAL_DMA_Init+0x438>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a35      	ldr	r2, [pc, #212]	; (800247c <HAL_DMA_Init+0x43c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00e      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a33      	ldr	r2, [pc, #204]	; (8002480 <HAL_DMA_Init+0x440>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <HAL_DMA_Init+0x444>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a30      	ldr	r2, [pc, #192]	; (8002488 <HAL_DMA_Init+0x448>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Init+0x38e>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_DMA_Init+0x390>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8097 	beq.w	8002504 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_DMA_Init+0x42c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d021      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <HAL_DMA_Init+0x430>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01c      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_DMA_Init+0x434>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d017      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_DMA_Init+0x438>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_DMA_Init+0x43c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_DMA_Init+0x440>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d008      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_DMA_Init+0x444>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_DMA_Init+0x448>)
 8002422:	4293      	cmp	r3, r2
 8002424:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_DMA_Init+0x44c>)
 8002442:	4013      	ands	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d020      	beq.n	8002490 <HAL_DMA_Init+0x450>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d102      	bne.n	800245c <HAL_DMA_Init+0x41c>
 8002456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800245a:	e01a      	b.n	8002492 <HAL_DMA_Init+0x452>
 800245c:	2300      	movs	r3, #0
 800245e:	e018      	b.n	8002492 <HAL_DMA_Init+0x452>
 8002460:	fe10803f 	.word	0xfe10803f
 8002464:	5c001000 	.word	0x5c001000
 8002468:	ffff0000 	.word	0xffff0000
 800246c:	58025408 	.word	0x58025408
 8002470:	5802541c 	.word	0x5802541c
 8002474:	58025430 	.word	0x58025430
 8002478:	58025444 	.word	0x58025444
 800247c:	58025458 	.word	0x58025458
 8002480:	5802546c 	.word	0x5802546c
 8002484:	58025480 	.word	0x58025480
 8002488:	58025494 	.word	0x58025494
 800248c:	fffe000f 	.word	0xfffe000f
 8002490:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <HAL_DMA_Init+0x650>)
 80024d8:	4413      	add	r3, r2
 80024da:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_DMA_Init+0x654>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f002 fac7 	bl	8004a7c <DMA_CalcBaseAndBitshift>
 80024ee:	4603      	mov	r3, r0
 80024f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e008      	b.n	8002516 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0b7      	b.n	8002686 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5f      	ldr	r2, [pc, #380]	; (8002698 <HAL_DMA_Init+0x658>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d072      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_DMA_Init+0x65c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d06d      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_DMA_Init+0x660>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d068      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5a      	ldr	r2, [pc, #360]	; (80026a4 <HAL_DMA_Init+0x664>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d063      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <HAL_DMA_Init+0x668>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_DMA_Init+0x66c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d059      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_DMA_Init+0x670>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d054      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_DMA_Init+0x674>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04f      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a53      	ldr	r2, [pc, #332]	; (80026b8 <HAL_DMA_Init+0x678>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_DMA_Init+0x67c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_DMA_Init+0x680>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4e      	ldr	r2, [pc, #312]	; (80026c4 <HAL_DMA_Init+0x684>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4d      	ldr	r2, [pc, #308]	; (80026c8 <HAL_DMA_Init+0x688>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <HAL_DMA_Init+0x68c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <HAL_DMA_Init+0x690>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a48      	ldr	r2, [pc, #288]	; (80026d4 <HAL_DMA_Init+0x694>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a47      	ldr	r2, [pc, #284]	; (80026d8 <HAL_DMA_Init+0x698>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a45      	ldr	r2, [pc, #276]	; (80026dc <HAL_DMA_Init+0x69c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <HAL_DMA_Init+0x6a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_DMA_Init+0x6a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_DMA_Init+0x6a8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <HAL_DMA_Init+0x6ac>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3e      	ldr	r2, [pc, #248]	; (80026f0 <HAL_DMA_Init+0x6b0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3c      	ldr	r2, [pc, #240]	; (80026f4 <HAL_DMA_Init+0x6b4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_DMA_Init+0x5ca>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_DMA_Init+0x5cc>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d032      	beq.n	8002676 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f002 fb61 	bl	8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d102      	bne.n	8002624 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002638:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_DMA_Init+0x624>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d80c      	bhi.n	8002664 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f002 fbde 	bl	8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e008      	b.n	8002676 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	a7fdabf8 	.word	0xa7fdabf8
 8002694:	cccccccd 	.word	0xcccccccd
 8002698:	40020010 	.word	0x40020010
 800269c:	40020028 	.word	0x40020028
 80026a0:	40020040 	.word	0x40020040
 80026a4:	40020058 	.word	0x40020058
 80026a8:	40020070 	.word	0x40020070
 80026ac:	40020088 	.word	0x40020088
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	400200b8 	.word	0x400200b8
 80026b8:	40020410 	.word	0x40020410
 80026bc:	40020428 	.word	0x40020428
 80026c0:	40020440 	.word	0x40020440
 80026c4:	40020458 	.word	0x40020458
 80026c8:	40020470 	.word	0x40020470
 80026cc:	40020488 	.word	0x40020488
 80026d0:	400204a0 	.word	0x400204a0
 80026d4:	400204b8 	.word	0x400204b8
 80026d8:	58025408 	.word	0x58025408
 80026dc:	5802541c 	.word	0x5802541c
 80026e0:	58025430 	.word	0x58025430
 80026e4:	58025444 	.word	0x58025444
 80026e8:	58025458 	.word	0x58025458
 80026ec:	5802546c 	.word	0x5802546c
 80026f0:	58025480 	.word	0x58025480
 80026f4:	58025494 	.word	0x58025494

080026f8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0ec      	b.n	80028ee <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_DMA_Start+0x2a>
 800271e:	2302      	movs	r3, #2
 8002720:	e0e5      	b.n	80028ee <HAL_DMA_Start+0x1f6>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	f040 80d0 	bne.w	80028d8 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_DMA_Start+0x200>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a69      	ldr	r2, [pc, #420]	; (80028fc <HAL_DMA_Start+0x204>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a68      	ldr	r2, [pc, #416]	; (8002900 <HAL_DMA_Start+0x208>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a66      	ldr	r2, [pc, #408]	; (8002904 <HAL_DMA_Start+0x20c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_DMA_Start+0x210>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a63      	ldr	r2, [pc, #396]	; (800290c <HAL_DMA_Start+0x214>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a62      	ldr	r2, [pc, #392]	; (8002910 <HAL_DMA_Start+0x218>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a60      	ldr	r2, [pc, #384]	; (8002914 <HAL_DMA_Start+0x21c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5f      	ldr	r2, [pc, #380]	; (8002918 <HAL_DMA_Start+0x220>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5d      	ldr	r2, [pc, #372]	; (800291c <HAL_DMA_Start+0x224>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5c      	ldr	r2, [pc, #368]	; (8002920 <HAL_DMA_Start+0x228>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <HAL_DMA_Start+0x22c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a59      	ldr	r2, [pc, #356]	; (8002928 <HAL_DMA_Start+0x230>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a57      	ldr	r2, [pc, #348]	; (800292c <HAL_DMA_Start+0x234>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a56      	ldr	r2, [pc, #344]	; (8002930 <HAL_DMA_Start+0x238>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Start+0xee>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a54      	ldr	r2, [pc, #336]	; (8002934 <HAL_DMA_Start+0x23c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <HAL_DMA_Start+0x100>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <HAL_DMA_Start+0x110>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f001 ff88 	bl	8004724 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <HAL_DMA_Start+0x200>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a36      	ldr	r2, [pc, #216]	; (80028fc <HAL_DMA_Start+0x204>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a34      	ldr	r2, [pc, #208]	; (8002900 <HAL_DMA_Start+0x208>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a33      	ldr	r2, [pc, #204]	; (8002904 <HAL_DMA_Start+0x20c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_DMA_Start+0x210>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_DMA_Start+0x214>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <HAL_DMA_Start+0x218>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <HAL_DMA_Start+0x21c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <HAL_DMA_Start+0x220>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2a      	ldr	r2, [pc, #168]	; (800291c <HAL_DMA_Start+0x224>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a28      	ldr	r2, [pc, #160]	; (8002920 <HAL_DMA_Start+0x228>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_DMA_Start+0x22c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a25      	ldr	r2, [pc, #148]	; (8002928 <HAL_DMA_Start+0x230>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a24      	ldr	r2, [pc, #144]	; (800292c <HAL_DMA_Start+0x234>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_DMA_Start+0x238>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Start+0x1bc>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a21      	ldr	r2, [pc, #132]	; (8002934 <HAL_DMA_Start+0x23c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <HAL_DMA_Start+0x1ce>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e012      	b.n	80028ec <HAL_DMA_Start+0x1f4>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e009      	b.n	80028ec <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40020010 	.word	0x40020010
 80028fc:	40020028 	.word	0x40020028
 8002900:	40020040 	.word	0x40020040
 8002904:	40020058 	.word	0x40020058
 8002908:	40020070 	.word	0x40020070
 800290c:	40020088 	.word	0x40020088
 8002910:	400200a0 	.word	0x400200a0
 8002914:	400200b8 	.word	0x400200b8
 8002918:	40020410 	.word	0x40020410
 800291c:	40020428 	.word	0x40020428
 8002920:	40020440 	.word	0x40020440
 8002924:	40020458 	.word	0x40020458
 8002928:	40020470 	.word	0x40020470
 800292c:	40020488 	.word	0x40020488
 8002930:	400204a0 	.word	0x400204a0
 8002934:	400204b8 	.word	0x400204b8

08002938 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e226      	b.n	8002da2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Start_IT+0x2a>
 800295e:	2302      	movs	r3, #2
 8002960:	e21f      	b.n	8002da2 <HAL_DMA_Start_IT+0x46a>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 820a 	bne.w	8002d8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a68      	ldr	r2, [pc, #416]	; (8002b2c <HAL_DMA_Start_IT+0x1f4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d04a      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a66      	ldr	r2, [pc, #408]	; (8002b30 <HAL_DMA_Start_IT+0x1f8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d045      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a65      	ldr	r2, [pc, #404]	; (8002b34 <HAL_DMA_Start_IT+0x1fc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_DMA_Start_IT+0x200>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d03b      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a62      	ldr	r2, [pc, #392]	; (8002b3c <HAL_DMA_Start_IT+0x204>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d036      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_DMA_Start_IT+0x208>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d031      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5f      	ldr	r2, [pc, #380]	; (8002b44 <HAL_DMA_Start_IT+0x20c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d02c      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <HAL_DMA_Start_IT+0x210>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d027      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5c      	ldr	r2, [pc, #368]	; (8002b4c <HAL_DMA_Start_IT+0x214>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <HAL_DMA_Start_IT+0x218>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <HAL_DMA_Start_IT+0x21c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_DMA_Start_IT+0x220>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_DMA_Start_IT+0x224>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <HAL_DMA_Start_IT+0x228>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a53      	ldr	r2, [pc, #332]	; (8002b64 <HAL_DMA_Start_IT+0x22c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_DMA_Start_IT+0xee>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a51      	ldr	r2, [pc, #324]	; (8002b68 <HAL_DMA_Start_IT+0x230>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <HAL_DMA_Start_IT+0x100>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e007      	b.n	8002a48 <HAL_DMA_Start_IT+0x110>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f001 fe68 	bl	8004724 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_DMA_Start_IT+0x1f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d04a      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <HAL_DMA_Start_IT+0x1f8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d045      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_DMA_Start_IT+0x1fc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d040      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_DMA_Start_IT+0x200>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	; (8002b3c <HAL_DMA_Start_IT+0x204>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_DMA_Start_IT+0x208>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <HAL_DMA_Start_IT+0x20c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_DMA_Start_IT+0x210>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d027      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <HAL_DMA_Start_IT+0x214>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_DMA_Start_IT+0x218>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01d      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <HAL_DMA_Start_IT+0x21c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_DMA_Start_IT+0x220>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <HAL_DMA_Start_IT+0x224>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <HAL_DMA_Start_IT+0x228>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <HAL_DMA_Start_IT+0x22c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_Start_IT+0x1bc>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_DMA_Start_IT+0x230>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Start_IT+0x1c0>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_DMA_Start_IT+0x1c2>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d036      	beq.n	8002b6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 021e 	bic.w	r2, r3, #30
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0216 	orr.w	r2, r2, #22
 8002b10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d03e      	beq.n	8002b98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0208 	orr.w	r2, r2, #8
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e035      	b.n	8002b98 <HAL_DMA_Start_IT+0x260>
 8002b2c:	40020010 	.word	0x40020010
 8002b30:	40020028 	.word	0x40020028
 8002b34:	40020040 	.word	0x40020040
 8002b38:	40020058 	.word	0x40020058
 8002b3c:	40020070 	.word	0x40020070
 8002b40:	40020088 	.word	0x40020088
 8002b44:	400200a0 	.word	0x400200a0
 8002b48:	400200b8 	.word	0x400200b8
 8002b4c:	40020410 	.word	0x40020410
 8002b50:	40020428 	.word	0x40020428
 8002b54:	40020440 	.word	0x40020440
 8002b58:	40020458 	.word	0x40020458
 8002b5c:	40020470 	.word	0x40020470
 8002b60:	40020488 	.word	0x40020488
 8002b64:	400204a0 	.word	0x400204a0
 8002b68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 020e 	bic.w	r2, r3, #14
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 020a 	orr.w	r2, r2, #10
 8002b7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0204 	orr.w	r2, r2, #4
 8002b96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a83      	ldr	r2, [pc, #524]	; (8002dac <HAL_DMA_Start_IT+0x474>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d072      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a82      	ldr	r2, [pc, #520]	; (8002db0 <HAL_DMA_Start_IT+0x478>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d06d      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a80      	ldr	r2, [pc, #512]	; (8002db4 <HAL_DMA_Start_IT+0x47c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d068      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7f      	ldr	r2, [pc, #508]	; (8002db8 <HAL_DMA_Start_IT+0x480>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d063      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a7d      	ldr	r2, [pc, #500]	; (8002dbc <HAL_DMA_Start_IT+0x484>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d05e      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7c      	ldr	r2, [pc, #496]	; (8002dc0 <HAL_DMA_Start_IT+0x488>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d059      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7a      	ldr	r2, [pc, #488]	; (8002dc4 <HAL_DMA_Start_IT+0x48c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d054      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a79      	ldr	r2, [pc, #484]	; (8002dc8 <HAL_DMA_Start_IT+0x490>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d04f      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a77      	ldr	r2, [pc, #476]	; (8002dcc <HAL_DMA_Start_IT+0x494>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a76      	ldr	r2, [pc, #472]	; (8002dd0 <HAL_DMA_Start_IT+0x498>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a74      	ldr	r2, [pc, #464]	; (8002dd4 <HAL_DMA_Start_IT+0x49c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a73      	ldr	r2, [pc, #460]	; (8002dd8 <HAL_DMA_Start_IT+0x4a0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a71      	ldr	r2, [pc, #452]	; (8002ddc <HAL_DMA_Start_IT+0x4a4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_DMA_Start_IT+0x4a8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <HAL_DMA_Start_IT+0x4ac>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <HAL_DMA_Start_IT+0x4b0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <HAL_DMA_Start_IT+0x4b4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_DMA_Start_IT+0x4b8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <HAL_DMA_Start_IT+0x4bc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_DMA_Start_IT+0x4c0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_DMA_Start_IT+0x4c4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a64      	ldr	r2, [pc, #400]	; (8002e00 <HAL_DMA_Start_IT+0x4c8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a62      	ldr	r2, [pc, #392]	; (8002e04 <HAL_DMA_Start_IT+0x4cc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Start_IT+0x350>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HAL_DMA_Start_IT+0x4d0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Start_IT+0x354>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_DMA_Start_IT+0x356>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_DMA_Start_IT+0x474>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d04a      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <HAL_DMA_Start_IT+0x478>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d045      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <HAL_DMA_Start_IT+0x47c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d040      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_DMA_Start_IT+0x480>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d03b      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_DMA_Start_IT+0x484>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d036      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <HAL_DMA_Start_IT+0x488>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d031      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <HAL_DMA_Start_IT+0x48c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02c      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2d      	ldr	r2, [pc, #180]	; (8002dc8 <HAL_DMA_Start_IT+0x490>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d027      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <HAL_DMA_Start_IT+0x494>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d022      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_DMA_Start_IT+0x498>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01d      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_DMA_Start_IT+0x49c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_DMA_Start_IT+0x4a0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <HAL_DMA_Start_IT+0x4a4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_DMA_Start_IT+0x4a8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_DMA_Start_IT+0x4ac>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_DMA_Start_IT+0x430>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <HAL_DMA_Start_IT+0x4b0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d108      	bne.n	8002d7a <HAL_DMA_Start_IT+0x442>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e012      	b.n	8002da0 <HAL_DMA_Start_IT+0x468>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e009      	b.n	8002da0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40020010 	.word	0x40020010
 8002db0:	40020028 	.word	0x40020028
 8002db4:	40020040 	.word	0x40020040
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	40020070 	.word	0x40020070
 8002dc0:	40020088 	.word	0x40020088
 8002dc4:	400200a0 	.word	0x400200a0
 8002dc8:	400200b8 	.word	0x400200b8
 8002dcc:	40020410 	.word	0x40020410
 8002dd0:	40020428 	.word	0x40020428
 8002dd4:	40020440 	.word	0x40020440
 8002dd8:	40020458 	.word	0x40020458
 8002ddc:	40020470 	.word	0x40020470
 8002de0:	40020488 	.word	0x40020488
 8002de4:	400204a0 	.word	0x400204a0
 8002de8:	400204b8 	.word	0x400204b8
 8002dec:	58025408 	.word	0x58025408
 8002df0:	5802541c 	.word	0x5802541c
 8002df4:	58025430 	.word	0x58025430
 8002df8:	58025444 	.word	0x58025444
 8002dfc:	58025458 	.word	0x58025458
 8002e00:	5802546c 	.word	0x5802546c
 8002e04:	58025480 	.word	0x58025480
 8002e08:	58025494 	.word	0x58025494

08002e0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7fe ff76 	bl	8001d04 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e2dc      	b.n	80033de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d008      	beq.n	8002e42 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e2cd      	b.n	80033de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a76      	ldr	r2, [pc, #472]	; (8003020 <HAL_DMA_Abort+0x214>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d04a      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_DMA_Abort+0x218>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d045      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	; (8003028 <HAL_DMA_Abort+0x21c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d040      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a71      	ldr	r2, [pc, #452]	; (800302c <HAL_DMA_Abort+0x220>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d03b      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a70      	ldr	r2, [pc, #448]	; (8003030 <HAL_DMA_Abort+0x224>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d036      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <HAL_DMA_Abort+0x228>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d031      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_DMA_Abort+0x22c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d02c      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	; (800303c <HAL_DMA_Abort+0x230>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d027      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_DMA_Abort+0x234>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d022      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_DMA_Abort+0x238>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a67      	ldr	r2, [pc, #412]	; (8003048 <HAL_DMA_Abort+0x23c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_DMA_Abort+0x240>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_DMA_Abort+0x244>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a62      	ldr	r2, [pc, #392]	; (8003054 <HAL_DMA_Abort+0x248>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	; (8003058 <HAL_DMA_Abort+0x24c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_DMA_Abort+0xd6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a5f      	ldr	r2, [pc, #380]	; (800305c <HAL_DMA_Abort+0x250>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_DMA_Abort+0xda>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_DMA_Abort+0xdc>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 021e 	bic.w	r2, r2, #30
 8002efa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e00a      	b.n	8002f2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 020e 	bic.w	r2, r2, #14
 8002f22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <HAL_DMA_Abort+0x214>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d072      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a3a      	ldr	r2, [pc, #232]	; (8003024 <HAL_DMA_Abort+0x218>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d06d      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a39      	ldr	r2, [pc, #228]	; (8003028 <HAL_DMA_Abort+0x21c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d068      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a37      	ldr	r2, [pc, #220]	; (800302c <HAL_DMA_Abort+0x220>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d063      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a36      	ldr	r2, [pc, #216]	; (8003030 <HAL_DMA_Abort+0x224>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d05e      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a34      	ldr	r2, [pc, #208]	; (8003034 <HAL_DMA_Abort+0x228>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d059      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a33      	ldr	r2, [pc, #204]	; (8003038 <HAL_DMA_Abort+0x22c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d054      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a31      	ldr	r2, [pc, #196]	; (800303c <HAL_DMA_Abort+0x230>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04f      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <HAL_DMA_Abort+0x234>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d04a      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <HAL_DMA_Abort+0x238>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d045      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <HAL_DMA_Abort+0x23c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_DMA_Abort+0x240>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d03b      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_DMA_Abort+0x244>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d036      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <HAL_DMA_Abort+0x248>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_DMA_Abort+0x24c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_DMA_Abort+0x250>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a24      	ldr	r2, [pc, #144]	; (8003060 <HAL_DMA_Abort+0x254>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_DMA_Abort+0x258>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_DMA_Abort+0x25c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_DMA_Abort+0x260>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_DMA_Abort+0x264>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_DMA_Abort+0x268>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_DMA_Abort+0x26c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_DMA_Abort+0x20e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_DMA_Abort+0x270>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d132      	bne.n	8003080 <HAL_DMA_Abort+0x274>
 800301a:	2301      	movs	r3, #1
 800301c:	e031      	b.n	8003082 <HAL_DMA_Abort+0x276>
 800301e:	bf00      	nop
 8003020:	40020010 	.word	0x40020010
 8003024:	40020028 	.word	0x40020028
 8003028:	40020040 	.word	0x40020040
 800302c:	40020058 	.word	0x40020058
 8003030:	40020070 	.word	0x40020070
 8003034:	40020088 	.word	0x40020088
 8003038:	400200a0 	.word	0x400200a0
 800303c:	400200b8 	.word	0x400200b8
 8003040:	40020410 	.word	0x40020410
 8003044:	40020428 	.word	0x40020428
 8003048:	40020440 	.word	0x40020440
 800304c:	40020458 	.word	0x40020458
 8003050:	40020470 	.word	0x40020470
 8003054:	40020488 	.word	0x40020488
 8003058:	400204a0 	.word	0x400204a0
 800305c:	400204b8 	.word	0x400204b8
 8003060:	58025408 	.word	0x58025408
 8003064:	5802541c 	.word	0x5802541c
 8003068:	58025430 	.word	0x58025430
 800306c:	58025444 	.word	0x58025444
 8003070:	58025458 	.word	0x58025458
 8003074:	5802546c 	.word	0x5802546c
 8003078:	58025480 	.word	0x58025480
 800307c:	58025494 	.word	0x58025494
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003094:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <HAL_DMA_Abort+0x444>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d04a      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a6b      	ldr	r2, [pc, #428]	; (8003254 <HAL_DMA_Abort+0x448>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d045      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6a      	ldr	r2, [pc, #424]	; (8003258 <HAL_DMA_Abort+0x44c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d040      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a68      	ldr	r2, [pc, #416]	; (800325c <HAL_DMA_Abort+0x450>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d03b      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a67      	ldr	r2, [pc, #412]	; (8003260 <HAL_DMA_Abort+0x454>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d036      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a65      	ldr	r2, [pc, #404]	; (8003264 <HAL_DMA_Abort+0x458>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a64      	ldr	r2, [pc, #400]	; (8003268 <HAL_DMA_Abort+0x45c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d02c      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a62      	ldr	r2, [pc, #392]	; (800326c <HAL_DMA_Abort+0x460>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d027      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a61      	ldr	r2, [pc, #388]	; (8003270 <HAL_DMA_Abort+0x464>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d022      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5f      	ldr	r2, [pc, #380]	; (8003274 <HAL_DMA_Abort+0x468>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <HAL_DMA_Abort+0x46c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d018      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_DMA_Abort+0x470>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5b      	ldr	r2, [pc, #364]	; (8003280 <HAL_DMA_Abort+0x474>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a59      	ldr	r2, [pc, #356]	; (8003284 <HAL_DMA_Abort+0x478>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a58      	ldr	r2, [pc, #352]	; (8003288 <HAL_DMA_Abort+0x47c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_DMA_Abort+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a56      	ldr	r2, [pc, #344]	; (800328c <HAL_DMA_Abort+0x480>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d108      	bne.n	8003148 <HAL_DMA_Abort+0x33c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e007      	b.n	8003158 <HAL_DMA_Abort+0x34c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003158:	e013      	b.n	8003182 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315a:	f7fe fdd3 	bl	8001d04 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b05      	cmp	r3, #5
 8003166:	d90c      	bls.n	8003182 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2203      	movs	r2, #3
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e12d      	b.n	80033de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <HAL_DMA_Abort+0x444>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d04a      	beq.n	800322e <HAL_DMA_Abort+0x422>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_DMA_Abort+0x448>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d045      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <HAL_DMA_Abort+0x44c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d040      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_DMA_Abort+0x450>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d03b      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_DMA_Abort+0x454>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d036      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_DMA_Abort+0x458>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a26      	ldr	r2, [pc, #152]	; (8003268 <HAL_DMA_Abort+0x45c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d02c      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <HAL_DMA_Abort+0x460>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d027      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a23      	ldr	r2, [pc, #140]	; (8003270 <HAL_DMA_Abort+0x464>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_DMA_Abort+0x468>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <HAL_DMA_Abort+0x46c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d018      	beq.n	800322e <HAL_DMA_Abort+0x422>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_DMA_Abort+0x470>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_DMA_Abort+0x422>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_DMA_Abort+0x474>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_DMA_Abort+0x422>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_DMA_Abort+0x478>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_DMA_Abort+0x422>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <HAL_DMA_Abort+0x47c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_DMA_Abort+0x422>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_DMA_Abort+0x480>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_DMA_Abort+0x426>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_DMA_Abort+0x428>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02b      	beq.n	8003290 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	223f      	movs	r2, #63	; 0x3f
 8003248:	409a      	lsls	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	e02a      	b.n	80032a6 <HAL_DMA_Abort+0x49a>
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	2201      	movs	r2, #1
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a4f      	ldr	r2, [pc, #316]	; (80033e8 <HAL_DMA_Abort+0x5dc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d072      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a4d      	ldr	r2, [pc, #308]	; (80033ec <HAL_DMA_Abort+0x5e0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d06d      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4c      	ldr	r2, [pc, #304]	; (80033f0 <HAL_DMA_Abort+0x5e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d068      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_DMA_Abort+0x5e8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d063      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a49      	ldr	r2, [pc, #292]	; (80033f8 <HAL_DMA_Abort+0x5ec>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d05e      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a47      	ldr	r2, [pc, #284]	; (80033fc <HAL_DMA_Abort+0x5f0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d059      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a46      	ldr	r2, [pc, #280]	; (8003400 <HAL_DMA_Abort+0x5f4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d054      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a44      	ldr	r2, [pc, #272]	; (8003404 <HAL_DMA_Abort+0x5f8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d04f      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a43      	ldr	r2, [pc, #268]	; (8003408 <HAL_DMA_Abort+0x5fc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d04a      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a41      	ldr	r2, [pc, #260]	; (800340c <HAL_DMA_Abort+0x600>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d045      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a40      	ldr	r2, [pc, #256]	; (8003410 <HAL_DMA_Abort+0x604>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d040      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3e      	ldr	r2, [pc, #248]	; (8003414 <HAL_DMA_Abort+0x608>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d03b      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a3d      	ldr	r2, [pc, #244]	; (8003418 <HAL_DMA_Abort+0x60c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d036      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_DMA_Abort+0x610>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d031      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <HAL_DMA_Abort+0x614>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d02c      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a38      	ldr	r2, [pc, #224]	; (8003424 <HAL_DMA_Abort+0x618>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d027      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a37      	ldr	r2, [pc, #220]	; (8003428 <HAL_DMA_Abort+0x61c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d022      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a35      	ldr	r2, [pc, #212]	; (800342c <HAL_DMA_Abort+0x620>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01d      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a34      	ldr	r2, [pc, #208]	; (8003430 <HAL_DMA_Abort+0x624>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a32      	ldr	r2, [pc, #200]	; (8003434 <HAL_DMA_Abort+0x628>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a31      	ldr	r2, [pc, #196]	; (8003438 <HAL_DMA_Abort+0x62c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2f      	ldr	r2, [pc, #188]	; (800343c <HAL_DMA_Abort+0x630>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_DMA_Abort+0x634>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_DMA_Abort+0x58a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <HAL_DMA_Abort+0x638>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_DMA_Abort+0x58e>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_DMA_Abort+0x590>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40020010 	.word	0x40020010
 80033ec:	40020028 	.word	0x40020028
 80033f0:	40020040 	.word	0x40020040
 80033f4:	40020058 	.word	0x40020058
 80033f8:	40020070 	.word	0x40020070
 80033fc:	40020088 	.word	0x40020088
 8003400:	400200a0 	.word	0x400200a0
 8003404:	400200b8 	.word	0x400200b8
 8003408:	40020410 	.word	0x40020410
 800340c:	40020428 	.word	0x40020428
 8003410:	40020440 	.word	0x40020440
 8003414:	40020458 	.word	0x40020458
 8003418:	40020470 	.word	0x40020470
 800341c:	40020488 	.word	0x40020488
 8003420:	400204a0 	.word	0x400204a0
 8003424:	400204b8 	.word	0x400204b8
 8003428:	58025408 	.word	0x58025408
 800342c:	5802541c 	.word	0x5802541c
 8003430:	58025430 	.word	0x58025430
 8003434:	58025444 	.word	0x58025444
 8003438:	58025458 	.word	0x58025458
 800343c:	5802546c 	.word	0x5802546c
 8003440:	58025480 	.word	0x58025480
 8003444:	58025494 	.word	0x58025494

08003448 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e205      	b.n	8003866 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d004      	beq.n	8003470 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e1fa      	b.n	8003866 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a8c      	ldr	r2, [pc, #560]	; (80036a8 <HAL_DMA_Abort_IT+0x260>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d04a      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a8b      	ldr	r2, [pc, #556]	; (80036ac <HAL_DMA_Abort_IT+0x264>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d045      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a89      	ldr	r2, [pc, #548]	; (80036b0 <HAL_DMA_Abort_IT+0x268>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d040      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a88      	ldr	r2, [pc, #544]	; (80036b4 <HAL_DMA_Abort_IT+0x26c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d03b      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a86      	ldr	r2, [pc, #536]	; (80036b8 <HAL_DMA_Abort_IT+0x270>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d036      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a85      	ldr	r2, [pc, #532]	; (80036bc <HAL_DMA_Abort_IT+0x274>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d031      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a83      	ldr	r2, [pc, #524]	; (80036c0 <HAL_DMA_Abort_IT+0x278>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d02c      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a82      	ldr	r2, [pc, #520]	; (80036c4 <HAL_DMA_Abort_IT+0x27c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d027      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a80      	ldr	r2, [pc, #512]	; (80036c8 <HAL_DMA_Abort_IT+0x280>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d022      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7f      	ldr	r2, [pc, #508]	; (80036cc <HAL_DMA_Abort_IT+0x284>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d01d      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a7d      	ldr	r2, [pc, #500]	; (80036d0 <HAL_DMA_Abort_IT+0x288>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d018      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7c      	ldr	r2, [pc, #496]	; (80036d4 <HAL_DMA_Abort_IT+0x28c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7a      	ldr	r2, [pc, #488]	; (80036d8 <HAL_DMA_Abort_IT+0x290>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00e      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a79      	ldr	r2, [pc, #484]	; (80036dc <HAL_DMA_Abort_IT+0x294>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_DMA_Abort_IT+0x298>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a76      	ldr	r2, [pc, #472]	; (80036e4 <HAL_DMA_Abort_IT+0x29c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_DMA_Abort_IT+0xcc>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_DMA_Abort_IT+0xce>
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d065      	beq.n	80035e6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a60      	ldr	r2, [pc, #384]	; (80036a8 <HAL_DMA_Abort_IT+0x260>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d04a      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5e      	ldr	r2, [pc, #376]	; (80036ac <HAL_DMA_Abort_IT+0x264>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d045      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <HAL_DMA_Abort_IT+0x268>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d040      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5b      	ldr	r2, [pc, #364]	; (80036b4 <HAL_DMA_Abort_IT+0x26c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d03b      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5a      	ldr	r2, [pc, #360]	; (80036b8 <HAL_DMA_Abort_IT+0x270>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d036      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_DMA_Abort_IT+0x274>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d031      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a57      	ldr	r2, [pc, #348]	; (80036c0 <HAL_DMA_Abort_IT+0x278>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d02c      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a55      	ldr	r2, [pc, #340]	; (80036c4 <HAL_DMA_Abort_IT+0x27c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d027      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_DMA_Abort_IT+0x280>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_DMA_Abort_IT+0x284>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01d      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a51      	ldr	r2, [pc, #324]	; (80036d0 <HAL_DMA_Abort_IT+0x288>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4f      	ldr	r2, [pc, #316]	; (80036d4 <HAL_DMA_Abort_IT+0x28c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a4e      	ldr	r2, [pc, #312]	; (80036d8 <HAL_DMA_Abort_IT+0x290>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	; (80036dc <HAL_DMA_Abort_IT+0x294>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_DMA_Abort_IT+0x298>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x17a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a49      	ldr	r2, [pc, #292]	; (80036e4 <HAL_DMA_Abort_IT+0x29c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <HAL_DMA_Abort_IT+0x18c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e147      	b.n	8003864 <HAL_DMA_Abort_IT+0x41c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e13e      	b.n	8003864 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 020e 	bic.w	r2, r2, #14
 80035f4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <HAL_DMA_Abort_IT+0x260>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d04a      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <HAL_DMA_Abort_IT+0x264>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d045      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_DMA_Abort_IT+0x268>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d040      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <HAL_DMA_Abort_IT+0x26c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d03b      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <HAL_DMA_Abort_IT+0x270>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d036      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_DMA_Abort_IT+0x274>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d031      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_DMA_Abort_IT+0x278>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d02c      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <HAL_DMA_Abort_IT+0x27c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d027      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_DMA_Abort_IT+0x280>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <HAL_DMA_Abort_IT+0x284>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_DMA_Abort_IT+0x288>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_DMA_Abort_IT+0x28c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_DMA_Abort_IT+0x290>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_DMA_Abort_IT+0x294>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <HAL_DMA_Abort_IT+0x298>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_DMA_Abort_IT+0x24e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_DMA_Abort_IT+0x29c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d128      	bne.n	80036e8 <HAL_DMA_Abort_IT+0x2a0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e027      	b.n	80036f8 <HAL_DMA_Abort_IT+0x2b0>
 80036a8:	40020010 	.word	0x40020010
 80036ac:	40020028 	.word	0x40020028
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020058 	.word	0x40020058
 80036b8:	40020070 	.word	0x40020070
 80036bc:	40020088 	.word	0x40020088
 80036c0:	400200a0 	.word	0x400200a0
 80036c4:	400200b8 	.word	0x400200b8
 80036c8:	40020410 	.word	0x40020410
 80036cc:	40020428 	.word	0x40020428
 80036d0:	40020440 	.word	0x40020440
 80036d4:	40020458 	.word	0x40020458
 80036d8:	40020470 	.word	0x40020470
 80036dc:	40020488 	.word	0x40020488
 80036e0:	400204a0 	.word	0x400204a0
 80036e4:	400204b8 	.word	0x400204b8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5c      	ldr	r2, [pc, #368]	; (8003870 <HAL_DMA_Abort_IT+0x428>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d072      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_DMA_Abort_IT+0x42c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d06d      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a59      	ldr	r2, [pc, #356]	; (8003878 <HAL_DMA_Abort_IT+0x430>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d068      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a58      	ldr	r2, [pc, #352]	; (800387c <HAL_DMA_Abort_IT+0x434>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d063      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a56      	ldr	r2, [pc, #344]	; (8003880 <HAL_DMA_Abort_IT+0x438>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d05e      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a55      	ldr	r2, [pc, #340]	; (8003884 <HAL_DMA_Abort_IT+0x43c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d059      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a53      	ldr	r2, [pc, #332]	; (8003888 <HAL_DMA_Abort_IT+0x440>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d054      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_DMA_Abort_IT+0x444>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d04f      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a50      	ldr	r2, [pc, #320]	; (8003890 <HAL_DMA_Abort_IT+0x448>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4f      	ldr	r2, [pc, #316]	; (8003894 <HAL_DMA_Abort_IT+0x44c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4d      	ldr	r2, [pc, #308]	; (8003898 <HAL_DMA_Abort_IT+0x450>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4c      	ldr	r2, [pc, #304]	; (800389c <HAL_DMA_Abort_IT+0x454>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <HAL_DMA_Abort_IT+0x458>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a49      	ldr	r2, [pc, #292]	; (80038a4 <HAL_DMA_Abort_IT+0x45c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a47      	ldr	r2, [pc, #284]	; (80038a8 <HAL_DMA_Abort_IT+0x460>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a46      	ldr	r2, [pc, #280]	; (80038ac <HAL_DMA_Abort_IT+0x464>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a44      	ldr	r2, [pc, #272]	; (80038b0 <HAL_DMA_Abort_IT+0x468>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a43      	ldr	r2, [pc, #268]	; (80038b4 <HAL_DMA_Abort_IT+0x46c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a41      	ldr	r2, [pc, #260]	; (80038b8 <HAL_DMA_Abort_IT+0x470>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a40      	ldr	r2, [pc, #256]	; (80038bc <HAL_DMA_Abort_IT+0x474>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <HAL_DMA_Abort_IT+0x478>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a3d      	ldr	r2, [pc, #244]	; (80038c4 <HAL_DMA_Abort_IT+0x47c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3b      	ldr	r2, [pc, #236]	; (80038c8 <HAL_DMA_Abort_IT+0x480>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x3a0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3a      	ldr	r2, [pc, #232]	; (80038cc <HAL_DMA_Abort_IT+0x484>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_DMA_Abort_IT+0x3a4>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_DMA_Abort_IT+0x3a6>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d028      	beq.n	8003844 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2201      	movs	r2, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003820:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003842:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	58025408 	.word	0x58025408
 80038b4:	5802541c 	.word	0x5802541c
 80038b8:	58025430 	.word	0x58025430
 80038bc:	58025444 	.word	0x58025444
 80038c0:	58025458 	.word	0x58025458
 80038c4:	5802546c 	.word	0x5802546c
 80038c8:	58025480 	.word	0x58025480
 80038cc:	58025494 	.word	0x58025494

080038d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038dc:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <HAL_DMA_IRQHandler+0x1ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	; (8003a80 <HAL_DMA_IRQHandler+0x1b0>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_DMA_IRQHandler+0x1b4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <HAL_DMA_IRQHandler+0x1b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <HAL_DMA_IRQHandler+0x1bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5a      	ldr	r2, [pc, #360]	; (8003a90 <HAL_DMA_IRQHandler+0x1c0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a59      	ldr	r2, [pc, #356]	; (8003a94 <HAL_DMA_IRQHandler+0x1c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_DMA_IRQHandler+0x1c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a56      	ldr	r2, [pc, #344]	; (8003a9c <HAL_DMA_IRQHandler+0x1cc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_DMA_IRQHandler+0x1d0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a53      	ldr	r2, [pc, #332]	; (8003aa4 <HAL_DMA_IRQHandler+0x1d4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a51      	ldr	r2, [pc, #324]	; (8003aa8 <HAL_DMA_IRQHandler+0x1d8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a50      	ldr	r2, [pc, #320]	; (8003aac <HAL_DMA_IRQHandler+0x1dc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4e      	ldr	r2, [pc, #312]	; (8003ab0 <HAL_DMA_IRQHandler+0x1e0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_DMA_IRQHandler+0x1e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4b      	ldr	r2, [pc, #300]	; (8003ab8 <HAL_DMA_IRQHandler+0x1e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <HAL_DMA_IRQHandler+0x1ec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a48      	ldr	r2, [pc, #288]	; (8003ac0 <HAL_DMA_IRQHandler+0x1f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_IRQHandler+0xd6>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 842b 	beq.w	8004204 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2208      	movs	r2, #8
 80039b8:	409a      	lsls	r2, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a2 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_DMA_IRQHandler+0x1b4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_DMA_IRQHandler+0x1b8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <HAL_DMA_IRQHandler+0x1bc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_DMA_IRQHandler+0x1c0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_DMA_IRQHandler+0x1c4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_DMA_IRQHandler+0x1c8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <HAL_DMA_IRQHandler+0x1cc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_DMA_IRQHandler+0x1dc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_DMA_IRQHandler+0x1ec>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d12f      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x1f4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e02e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x208>
 8003a7a:	bf00      	nop
 8003a7c:	24000018 	.word	0x24000018
 8003a80:	1b4e81b5 	.word	0x1b4e81b5
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2208      	movs	r2, #8
 8003af6:	409a      	lsls	r2, r3
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d06e      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a69      	ldr	r2, [pc, #420]	; (8003cc8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04a      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a67      	ldr	r2, [pc, #412]	; (8003ccc <HAL_DMA_IRQHandler+0x3fc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d045      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a66      	ldr	r2, [pc, #408]	; (8003cd0 <HAL_DMA_IRQHandler+0x400>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d040      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a64      	ldr	r2, [pc, #400]	; (8003cd4 <HAL_DMA_IRQHandler+0x404>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d03b      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_DMA_IRQHandler+0x408>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d036      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <HAL_DMA_IRQHandler+0x40c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d031      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <HAL_DMA_IRQHandler+0x410>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d02c      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5e      	ldr	r2, [pc, #376]	; (8003ce4 <HAL_DMA_IRQHandler+0x414>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d027      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5d      	ldr	r2, [pc, #372]	; (8003ce8 <HAL_DMA_IRQHandler+0x418>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5b      	ldr	r2, [pc, #364]	; (8003cec <HAL_DMA_IRQHandler+0x41c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5a      	ldr	r2, [pc, #360]	; (8003cf0 <HAL_DMA_IRQHandler+0x420>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <HAL_DMA_IRQHandler+0x424>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_DMA_IRQHandler+0x428>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a55      	ldr	r2, [pc, #340]	; (8003cfc <HAL_DMA_IRQHandler+0x42c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a54      	ldr	r2, [pc, #336]	; (8003d00 <HAL_DMA_IRQHandler+0x430>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_DMA_IRQHandler+0x434>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x304>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e003      	b.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2201      	movs	r2, #1
 8003bea:	409a      	lsls	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f043 0202 	orr.w	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2204      	movs	r2, #4
 8003c06:	409a      	lsls	r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 808f 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d04a      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_DMA_IRQHandler+0x3fc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d045      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_DMA_IRQHandler+0x400>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d040      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_DMA_IRQHandler+0x404>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d03b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_DMA_IRQHandler+0x408>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d036      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_DMA_IRQHandler+0x40c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d031      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_DMA_IRQHandler+0x410>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d02c      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <HAL_DMA_IRQHandler+0x414>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d027      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <HAL_DMA_IRQHandler+0x418>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_DMA_IRQHandler+0x41c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_DMA_IRQHandler+0x420>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_DMA_IRQHandler+0x424>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_DMA_IRQHandler+0x428>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_DMA_IRQHandler+0x42c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_DMA_IRQHandler+0x430>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_DMA_IRQHandler+0x434>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12a      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x438>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e023      	b.n	8003d10 <HAL_DMA_IRQHandler+0x440>
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f043 0204 	orr.w	r2, r3, #4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a6 	beq.w	8003e92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a85      	ldr	r2, [pc, #532]	; (8003f60 <HAL_DMA_IRQHandler+0x690>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_DMA_IRQHandler+0x694>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a82      	ldr	r2, [pc, #520]	; (8003f68 <HAL_DMA_IRQHandler+0x698>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a80      	ldr	r2, [pc, #512]	; (8003f6c <HAL_DMA_IRQHandler+0x69c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <HAL_DMA_IRQHandler+0x6a0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_DMA_IRQHandler+0x6a4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7c      	ldr	r2, [pc, #496]	; (8003f78 <HAL_DMA_IRQHandler+0x6a8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_DMA_IRQHandler+0x6ac>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a79      	ldr	r2, [pc, #484]	; (8003f80 <HAL_DMA_IRQHandler+0x6b0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a77      	ldr	r2, [pc, #476]	; (8003f84 <HAL_DMA_IRQHandler+0x6b4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_DMA_IRQHandler+0x6b8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a74      	ldr	r2, [pc, #464]	; (8003f8c <HAL_DMA_IRQHandler+0x6bc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	; (8003f90 <HAL_DMA_IRQHandler+0x6c0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a71      	ldr	r2, [pc, #452]	; (8003f94 <HAL_DMA_IRQHandler+0x6c4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	; (8003f98 <HAL_DMA_IRQHandler+0x6c8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_DMA_IRQHandler+0x6cc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x52c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e009      	b.n	8003e10 <HAL_DMA_IRQHandler+0x540>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d108      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d024      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	e01f      	b.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e016      	b.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8110 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <HAL_DMA_IRQHandler+0x690>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04a      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HAL_DMA_IRQHandler+0x694>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d045      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <HAL_DMA_IRQHandler+0x698>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d040      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <HAL_DMA_IRQHandler+0x69c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d03b      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_DMA_IRQHandler+0x6a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d036      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <HAL_DMA_IRQHandler+0x6a4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d031      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_DMA_IRQHandler+0x6a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02c      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_DMA_IRQHandler+0x6ac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d027      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_DMA_IRQHandler+0x6b0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d022      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_DMA_IRQHandler+0x6b4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d01d      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_DMA_IRQHandler+0x6b8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_DMA_IRQHandler+0x6bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_DMA_IRQHandler+0x6c0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_DMA_IRQHandler+0x6c4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_DMA_IRQHandler+0x6c8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <HAL_DMA_IRQHandler+0x6cc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d12b      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x6d0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	e02a      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x6e4>
 8003f5e:	bf00      	nop
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8087 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d139      	bne.n	800404a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0216 	bic.w	r2, r2, #22
 8003fe4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_DMA_IRQHandler+0x736>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0208 	bic.w	r2, r2, #8
 8004014:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	223f      	movs	r2, #63	; 0x3f
 8004020:	409a      	lsls	r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 834a 	beq.w	80046d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
          }
          return;
 8004048:	e344      	b.n	80046d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e027      	b.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e01e      	b.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0210 	bic.w	r2, r2, #16
 80040a6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8306 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8088 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7a      	ldr	r2, [pc, #488]	; (80042d8 <HAL_DMA_IRQHandler+0xa08>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d04a      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a79      	ldr	r2, [pc, #484]	; (80042dc <HAL_DMA_IRQHandler+0xa0c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d045      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a77      	ldr	r2, [pc, #476]	; (80042e0 <HAL_DMA_IRQHandler+0xa10>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d040      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <HAL_DMA_IRQHandler+0xa14>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d03b      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <HAL_DMA_IRQHandler+0xa18>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d036      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a73      	ldr	r2, [pc, #460]	; (80042ec <HAL_DMA_IRQHandler+0xa1c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d031      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a71      	ldr	r2, [pc, #452]	; (80042f0 <HAL_DMA_IRQHandler+0xa20>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02c      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a70      	ldr	r2, [pc, #448]	; (80042f4 <HAL_DMA_IRQHandler+0xa24>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d027      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6e      	ldr	r2, [pc, #440]	; (80042f8 <HAL_DMA_IRQHandler+0xa28>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d022      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6d      	ldr	r2, [pc, #436]	; (80042fc <HAL_DMA_IRQHandler+0xa2c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d01d      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	; (8004300 <HAL_DMA_IRQHandler+0xa30>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d018      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6a      	ldr	r2, [pc, #424]	; (8004304 <HAL_DMA_IRQHandler+0xa34>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a68      	ldr	r2, [pc, #416]	; (8004308 <HAL_DMA_IRQHandler+0xa38>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a67      	ldr	r2, [pc, #412]	; (800430c <HAL_DMA_IRQHandler+0xa3c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_DMA_IRQHandler+0xa40>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a64      	ldr	r2, [pc, #400]	; (8004314 <HAL_DMA_IRQHandler+0xa44>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <HAL_DMA_IRQHandler+0x8ca>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e007      	b.n	80041aa <HAL_DMA_IRQHandler+0x8da>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d307      	bcc.n	80041c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f2      	bne.n	80041aa <HAL_DMA_IRQHandler+0x8da>
 80041c4:	e000      	b.n	80041c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041c6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041e6:	e003      	b.n	80041f0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8272 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
 8004202:	e26c      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a43      	ldr	r2, [pc, #268]	; (8004318 <HAL_DMA_IRQHandler+0xa48>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_DMA_IRQHandler+0xa4c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a40      	ldr	r2, [pc, #256]	; (8004320 <HAL_DMA_IRQHandler+0xa50>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3f      	ldr	r2, [pc, #252]	; (8004324 <HAL_DMA_IRQHandler+0xa54>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3d      	ldr	r2, [pc, #244]	; (8004328 <HAL_DMA_IRQHandler+0xa58>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3c      	ldr	r2, [pc, #240]	; (800432c <HAL_DMA_IRQHandler+0xa5c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <HAL_DMA_IRQHandler+0xa60>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a39      	ldr	r2, [pc, #228]	; (8004334 <HAL_DMA_IRQHandler+0xa64>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_DMA_IRQHandler+0x988>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_DMA_IRQHandler+0x98a>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 823f 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2204      	movs	r2, #4
 8004272:	409a      	lsls	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80cd 	beq.w	8004418 <HAL_DMA_IRQHandler+0xb48>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80c7 	beq.w	8004418 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2204      	movs	r2, #4
 8004294:	409a      	lsls	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d049      	beq.n	8004338 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8210 	beq.w	80046d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042c0:	e20a      	b.n	80046d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8206 	beq.w	80046d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d4:	e200      	b.n	80046d8 <HAL_DMA_IRQHandler+0xe08>
 80042d6:	bf00      	nop
 80042d8:	40020010 	.word	0x40020010
 80042dc:	40020028 	.word	0x40020028
 80042e0:	40020040 	.word	0x40020040
 80042e4:	40020058 	.word	0x40020058
 80042e8:	40020070 	.word	0x40020070
 80042ec:	40020088 	.word	0x40020088
 80042f0:	400200a0 	.word	0x400200a0
 80042f4:	400200b8 	.word	0x400200b8
 80042f8:	40020410 	.word	0x40020410
 80042fc:	40020428 	.word	0x40020428
 8004300:	40020440 	.word	0x40020440
 8004304:	40020458 	.word	0x40020458
 8004308:	40020470 	.word	0x40020470
 800430c:	40020488 	.word	0x40020488
 8004310:	400204a0 	.word	0x400204a0
 8004314:	400204b8 	.word	0x400204b8
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025430 	.word	0x58025430
 8004324:	58025444 	.word	0x58025444
 8004328:	58025458 	.word	0x58025458
 800432c:	5802546c 	.word	0x5802546c
 8004330:	58025480 	.word	0x58025480
 8004334:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d160      	bne.n	8004404 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a8c      	ldr	r2, [pc, #560]	; (8004578 <HAL_DMA_IRQHandler+0xca8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04a      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a8a      	ldr	r2, [pc, #552]	; (800457c <HAL_DMA_IRQHandler+0xcac>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d045      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a89      	ldr	r2, [pc, #548]	; (8004580 <HAL_DMA_IRQHandler+0xcb0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d040      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_DMA_IRQHandler+0xcb4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a86      	ldr	r2, [pc, #536]	; (8004588 <HAL_DMA_IRQHandler+0xcb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d036      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a84      	ldr	r2, [pc, #528]	; (800458c <HAL_DMA_IRQHandler+0xcbc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d031      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a83      	ldr	r2, [pc, #524]	; (8004590 <HAL_DMA_IRQHandler+0xcc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d02c      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a81      	ldr	r2, [pc, #516]	; (8004594 <HAL_DMA_IRQHandler+0xcc4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d027      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a80      	ldr	r2, [pc, #512]	; (8004598 <HAL_DMA_IRQHandler+0xcc8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a7e      	ldr	r2, [pc, #504]	; (800459c <HAL_DMA_IRQHandler+0xccc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a7d      	ldr	r2, [pc, #500]	; (80045a0 <HAL_DMA_IRQHandler+0xcd0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a7b      	ldr	r2, [pc, #492]	; (80045a4 <HAL_DMA_IRQHandler+0xcd4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a7a      	ldr	r2, [pc, #488]	; (80045a8 <HAL_DMA_IRQHandler+0xcd8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a78      	ldr	r2, [pc, #480]	; (80045ac <HAL_DMA_IRQHandler+0xcdc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a77      	ldr	r2, [pc, #476]	; (80045b0 <HAL_DMA_IRQHandler+0xce0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_DMA_IRQHandler+0xce4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d108      	bne.n	80043f4 <HAL_DMA_IRQHandler+0xb24>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0208 	bic.w	r2, r2, #8
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e007      	b.n	8004404 <HAL_DMA_IRQHandler+0xb34>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8165 	beq.w	80046d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004416:	e15f      	b.n	80046d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2202      	movs	r2, #2
 8004422:	409a      	lsls	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80c5 	beq.w	80045b8 <HAL_DMA_IRQHandler+0xce8>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80bf 	beq.w	80045b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2202      	movs	r2, #2
 8004444:	409a      	lsls	r2, r3
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 813a 	beq.w	80046dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004470:	e134      	b.n	80046dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8130 	beq.w	80046dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004484:	e12a      	b.n	80046dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d168      	bne.n	8004562 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a38      	ldr	r2, [pc, #224]	; (8004578 <HAL_DMA_IRQHandler+0xca8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d04a      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a37      	ldr	r2, [pc, #220]	; (800457c <HAL_DMA_IRQHandler+0xcac>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d045      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	; (8004580 <HAL_DMA_IRQHandler+0xcb0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d040      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a34      	ldr	r2, [pc, #208]	; (8004584 <HAL_DMA_IRQHandler+0xcb4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d03b      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a32      	ldr	r2, [pc, #200]	; (8004588 <HAL_DMA_IRQHandler+0xcb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d036      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a31      	ldr	r2, [pc, #196]	; (800458c <HAL_DMA_IRQHandler+0xcbc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d031      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <HAL_DMA_IRQHandler+0xcc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02c      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2e      	ldr	r2, [pc, #184]	; (8004594 <HAL_DMA_IRQHandler+0xcc4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d027      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <HAL_DMA_IRQHandler+0xcc8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d022      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	; (800459c <HAL_DMA_IRQHandler+0xccc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d01d      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <HAL_DMA_IRQHandler+0xcd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_DMA_IRQHandler+0xcd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d013      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <HAL_DMA_IRQHandler+0xcd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a25      	ldr	r2, [pc, #148]	; (80045ac <HAL_DMA_IRQHandler+0xcdc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <HAL_DMA_IRQHandler+0xce0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_DMA_IRQHandler+0xc60>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <HAL_DMA_IRQHandler+0xce4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d108      	bne.n	8004542 <HAL_DMA_IRQHandler+0xc72>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0214 	bic.w	r2, r2, #20
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e007      	b.n	8004552 <HAL_DMA_IRQHandler+0xc82>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 020a 	bic.w	r2, r2, #10
 8004550:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80b8 	beq.w	80046dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004574:	e0b2      	b.n	80046dc <HAL_DMA_IRQHandler+0xe0c>
 8004576:	bf00      	nop
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2208      	movs	r2, #8
 80045c2:	409a      	lsls	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8088 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8082 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a41      	ldr	r2, [pc, #260]	; (80046e4 <HAL_DMA_IRQHandler+0xe14>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04a      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <HAL_DMA_IRQHandler+0xe18>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d045      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3e      	ldr	r2, [pc, #248]	; (80046ec <HAL_DMA_IRQHandler+0xe1c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d040      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <HAL_DMA_IRQHandler+0xe20>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d03b      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <HAL_DMA_IRQHandler+0xe24>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d036      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a39      	ldr	r2, [pc, #228]	; (80046f8 <HAL_DMA_IRQHandler+0xe28>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a38      	ldr	r2, [pc, #224]	; (80046fc <HAL_DMA_IRQHandler+0xe2c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d02c      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a36      	ldr	r2, [pc, #216]	; (8004700 <HAL_DMA_IRQHandler+0xe30>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a35      	ldr	r2, [pc, #212]	; (8004704 <HAL_DMA_IRQHandler+0xe34>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a33      	ldr	r2, [pc, #204]	; (8004708 <HAL_DMA_IRQHandler+0xe38>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01d      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a32      	ldr	r2, [pc, #200]	; (800470c <HAL_DMA_IRQHandler+0xe3c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a30      	ldr	r2, [pc, #192]	; (8004710 <HAL_DMA_IRQHandler+0xe40>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <HAL_DMA_IRQHandler+0xe44>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2d      	ldr	r2, [pc, #180]	; (8004718 <HAL_DMA_IRQHandler+0xe48>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <HAL_DMA_IRQHandler+0xe4c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <HAL_DMA_IRQHandler+0xe50>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d108      	bne.n	800468c <HAL_DMA_IRQHandler+0xdbc>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 021c 	bic.w	r2, r2, #28
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e007      	b.n	800469c <HAL_DMA_IRQHandler+0xdcc>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020e 	bic.w	r2, r2, #14
 800469a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2201      	movs	r2, #1
 80046a6:	409a      	lsls	r2, r3
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
 80046d2:	e004      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80046d4:	bf00      	nop
 80046d6:	e002      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40020010 	.word	0x40020010
 80046e8:	40020028 	.word	0x40020028
 80046ec:	40020040 	.word	0x40020040
 80046f0:	40020058 	.word	0x40020058
 80046f4:	40020070 	.word	0x40020070
 80046f8:	40020088 	.word	0x40020088
 80046fc:	400200a0 	.word	0x400200a0
 8004700:	400200b8 	.word	0x400200b8
 8004704:	40020410 	.word	0x40020410
 8004708:	40020428 	.word	0x40020428
 800470c:	40020440 	.word	0x40020440
 8004710:	40020458 	.word	0x40020458
 8004714:	40020470 	.word	0x40020470
 8004718:	40020488 	.word	0x40020488
 800471c:	400204a0 	.word	0x400204a0
 8004720:	400204b8 	.word	0x400204b8

08004724 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a84      	ldr	r2, [pc, #528]	; (8004954 <DMA_SetConfig+0x230>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d072      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a82      	ldr	r2, [pc, #520]	; (8004958 <DMA_SetConfig+0x234>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d06d      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a81      	ldr	r2, [pc, #516]	; (800495c <DMA_SetConfig+0x238>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d068      	beq.n	800482e <DMA_SetConfig+0x10a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7f      	ldr	r2, [pc, #508]	; (8004960 <DMA_SetConfig+0x23c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d063      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7e      	ldr	r2, [pc, #504]	; (8004964 <DMA_SetConfig+0x240>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d05e      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a7c      	ldr	r2, [pc, #496]	; (8004968 <DMA_SetConfig+0x244>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d059      	beq.n	800482e <DMA_SetConfig+0x10a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7b      	ldr	r2, [pc, #492]	; (800496c <DMA_SetConfig+0x248>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d054      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a79      	ldr	r2, [pc, #484]	; (8004970 <DMA_SetConfig+0x24c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d04f      	beq.n	800482e <DMA_SetConfig+0x10a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a78      	ldr	r2, [pc, #480]	; (8004974 <DMA_SetConfig+0x250>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d04a      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a76      	ldr	r2, [pc, #472]	; (8004978 <DMA_SetConfig+0x254>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d045      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a75      	ldr	r2, [pc, #468]	; (800497c <DMA_SetConfig+0x258>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d040      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a73      	ldr	r2, [pc, #460]	; (8004980 <DMA_SetConfig+0x25c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d03b      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a72      	ldr	r2, [pc, #456]	; (8004984 <DMA_SetConfig+0x260>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d036      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a70      	ldr	r2, [pc, #448]	; (8004988 <DMA_SetConfig+0x264>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d031      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6f      	ldr	r2, [pc, #444]	; (800498c <DMA_SetConfig+0x268>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02c      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a6d      	ldr	r2, [pc, #436]	; (8004990 <DMA_SetConfig+0x26c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d027      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6c      	ldr	r2, [pc, #432]	; (8004994 <DMA_SetConfig+0x270>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d022      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <DMA_SetConfig+0x274>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01d      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a69      	ldr	r2, [pc, #420]	; (800499c <DMA_SetConfig+0x278>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <DMA_SetConfig+0x10a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a67      	ldr	r2, [pc, #412]	; (80049a0 <DMA_SetConfig+0x27c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a66      	ldr	r2, [pc, #408]	; (80049a4 <DMA_SetConfig+0x280>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a64      	ldr	r2, [pc, #400]	; (80049a8 <DMA_SetConfig+0x284>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <DMA_SetConfig+0x10a>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a63      	ldr	r2, [pc, #396]	; (80049ac <DMA_SetConfig+0x288>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <DMA_SetConfig+0x10a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a61      	ldr	r2, [pc, #388]	; (80049b0 <DMA_SetConfig+0x28c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <DMA_SetConfig+0x10e>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <DMA_SetConfig+0x110>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004840:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004852:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3e      	ldr	r2, [pc, #248]	; (8004954 <DMA_SetConfig+0x230>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d04a      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3d      	ldr	r2, [pc, #244]	; (8004958 <DMA_SetConfig+0x234>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d045      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3b      	ldr	r2, [pc, #236]	; (800495c <DMA_SetConfig+0x238>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d040      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a3a      	ldr	r2, [pc, #232]	; (8004960 <DMA_SetConfig+0x23c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d03b      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a38      	ldr	r2, [pc, #224]	; (8004964 <DMA_SetConfig+0x240>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d036      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a37      	ldr	r2, [pc, #220]	; (8004968 <DMA_SetConfig+0x244>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d031      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a35      	ldr	r2, [pc, #212]	; (800496c <DMA_SetConfig+0x248>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d02c      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a34      	ldr	r2, [pc, #208]	; (8004970 <DMA_SetConfig+0x24c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d027      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a32      	ldr	r2, [pc, #200]	; (8004974 <DMA_SetConfig+0x250>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d022      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a31      	ldr	r2, [pc, #196]	; (8004978 <DMA_SetConfig+0x254>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d01d      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2f      	ldr	r2, [pc, #188]	; (800497c <DMA_SetConfig+0x258>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d018      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2e      	ldr	r2, [pc, #184]	; (8004980 <DMA_SetConfig+0x25c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2c      	ldr	r2, [pc, #176]	; (8004984 <DMA_SetConfig+0x260>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00e      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2b      	ldr	r2, [pc, #172]	; (8004988 <DMA_SetConfig+0x264>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d009      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a29      	ldr	r2, [pc, #164]	; (800498c <DMA_SetConfig+0x268>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <DMA_SetConfig+0x1d0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a28      	ldr	r2, [pc, #160]	; (8004990 <DMA_SetConfig+0x26c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <DMA_SetConfig+0x1d4>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <DMA_SetConfig+0x1d6>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d05a      	beq.n	80049b4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	223f      	movs	r2, #63	; 0x3f
 8004908:	409a      	lsls	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800491c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d108      	bne.n	8004940 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800493e:	e087      	b.n	8004a50 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
}
 8004950:	e07e      	b.n	8004a50 <DMA_SetConfig+0x32c>
 8004952:	bf00      	nop
 8004954:	40020010 	.word	0x40020010
 8004958:	40020028 	.word	0x40020028
 800495c:	40020040 	.word	0x40020040
 8004960:	40020058 	.word	0x40020058
 8004964:	40020070 	.word	0x40020070
 8004968:	40020088 	.word	0x40020088
 800496c:	400200a0 	.word	0x400200a0
 8004970:	400200b8 	.word	0x400200b8
 8004974:	40020410 	.word	0x40020410
 8004978:	40020428 	.word	0x40020428
 800497c:	40020440 	.word	0x40020440
 8004980:	40020458 	.word	0x40020458
 8004984:	40020470 	.word	0x40020470
 8004988:	40020488 	.word	0x40020488
 800498c:	400204a0 	.word	0x400204a0
 8004990:	400204b8 	.word	0x400204b8
 8004994:	58025408 	.word	0x58025408
 8004998:	5802541c 	.word	0x5802541c
 800499c:	58025430 	.word	0x58025430
 80049a0:	58025444 	.word	0x58025444
 80049a4:	58025458 	.word	0x58025458
 80049a8:	5802546c 	.word	0x5802546c
 80049ac:	58025480 	.word	0x58025480
 80049b0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <DMA_SetConfig+0x338>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d022      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <DMA_SetConfig+0x33c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01d      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <DMA_SetConfig+0x340>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <DMA_SetConfig+0x344>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <DMA_SetConfig+0x348>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <DMA_SetConfig+0x34c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <DMA_SetConfig+0x350>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <DMA_SetConfig+0x2e0>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <DMA_SetConfig+0x354>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <DMA_SetConfig+0x2e4>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <DMA_SetConfig+0x2e6>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d020      	beq.n	8004a50 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	2201      	movs	r2, #1
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d108      	bne.n	8004a40 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
}
 8004a3e:	e007      	b.n	8004a50 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	58025408 	.word	0x58025408
 8004a60:	5802541c 	.word	0x5802541c
 8004a64:	58025430 	.word	0x58025430
 8004a68:	58025444 	.word	0x58025444
 8004a6c:	58025458 	.word	0x58025458
 8004a70:	5802546c 	.word	0x5802546c
 8004a74:	58025480 	.word	0x58025480
 8004a78:	58025494 	.word	0x58025494

08004a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a42      	ldr	r2, [pc, #264]	; (8004b94 <DMA_CalcBaseAndBitshift+0x118>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a41      	ldr	r2, [pc, #260]	; (8004b98 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <DMA_CalcBaseAndBitshift+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3e      	ldr	r2, [pc, #248]	; (8004ba0 <DMA_CalcBaseAndBitshift+0x124>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x128>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a39      	ldr	r2, [pc, #228]	; (8004bac <DMA_CalcBaseAndBitshift+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a38      	ldr	r2, [pc, #224]	; (8004bb0 <DMA_CalcBaseAndBitshift+0x134>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a36      	ldr	r2, [pc, #216]	; (8004bb4 <DMA_CalcBaseAndBitshift+0x138>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a35      	ldr	r2, [pc, #212]	; (8004bb8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a33      	ldr	r2, [pc, #204]	; (8004bbc <DMA_CalcBaseAndBitshift+0x140>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a32      	ldr	r2, [pc, #200]	; (8004bc0 <DMA_CalcBaseAndBitshift+0x144>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a30      	ldr	r2, [pc, #192]	; (8004bc4 <DMA_CalcBaseAndBitshift+0x148>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2d      	ldr	r2, [pc, #180]	; (8004bcc <DMA_CalcBaseAndBitshift+0x150>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x154>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <DMA_CalcBaseAndBitshift+0xac>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <DMA_CalcBaseAndBitshift+0xae>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d024      	beq.n	8004b78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3b10      	subs	r3, #16
 8004b36:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x158>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d908      	bls.n	8004b68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <DMA_CalcBaseAndBitshift+0x160>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	; 0x58
 8004b66:	e00d      	b.n	8004b84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <DMA_CalcBaseAndBitshift+0x160>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6593      	str	r3, [r2, #88]	; 0x58
 8004b76:	e005      	b.n	8004b84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	aaaaaaab 	.word	0xaaaaaaab
 8004bd8:	08009b24 	.word	0x08009b24
 8004bdc:	fffffc00 	.word	0xfffffc00

08004be0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d120      	bne.n	8004c36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d858      	bhi.n	8004cae <DMA_CheckFifoParam+0xce>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <DMA_CheckFifoParam+0x24>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c27 	.word	0x08004c27
 8004c0c:	08004c15 	.word	0x08004c15
 8004c10:	08004caf 	.word	0x08004caf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d048      	beq.n	8004cb2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c24:	e045      	b.n	8004cb2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c2e:	d142      	bne.n	8004cb6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c34:	e03f      	b.n	8004cb6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3e:	d123      	bne.n	8004c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d838      	bhi.n	8004cba <DMA_CheckFifoParam+0xda>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <DMA_CheckFifoParam+0x70>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c67 	.word	0x08004c67
 8004c58:	08004c61 	.word	0x08004c61
 8004c5c:	08004c79 	.word	0x08004c79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
        break;
 8004c64:	e030      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d025      	beq.n	8004cbe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c76:	e022      	b.n	8004cbe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c80:	d11f      	bne.n	8004cc2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c86:	e01c      	b.n	8004cc2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d902      	bls.n	8004c96 <DMA_CheckFifoParam+0xb6>
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d003      	beq.n	8004c9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c94:	e018      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
        break;
 8004c9a:	e015      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
    break;
 8004cac:	e00b      	b.n	8004cc6 <DMA_CheckFifoParam+0xe6>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e00a      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e008      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cb6:	bf00      	nop
 8004cb8:	e006      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cba:	bf00      	nop
 8004cbc:	e004      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
    break;
 8004cc6:	bf00      	nop
    }
  }

  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a36      	ldr	r2, [pc, #216]	; (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a35      	ldr	r2, [pc, #212]	; (8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a33      	ldr	r2, [pc, #204]	; (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a32      	ldr	r2, [pc, #200]	; (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	; (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2d      	ldr	r2, [pc, #180]	; (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01a      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3b08      	subs	r3, #8
 8004d48:	4a28      	ldr	r2, [pc, #160]	; (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d74:	e024      	b.n	8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3b10      	subs	r3, #16
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d806      	bhi.n	8004d9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d902      	bls.n	8004d9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004db0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	58025408 	.word	0x58025408
 8004dd0:	5802541c 	.word	0x5802541c
 8004dd4:	58025430 	.word	0x58025430
 8004dd8:	58025444 	.word	0x58025444
 8004ddc:	58025458 	.word	0x58025458
 8004de0:	5802546c 	.word	0x5802546c
 8004de4:	58025480 	.word	0x58025480
 8004de8:	58025494 	.word	0x58025494
 8004dec:	cccccccd 	.word	0xcccccccd
 8004df0:	16009600 	.word	0x16009600
 8004df4:	58025880 	.word	0x58025880
 8004df8:	aaaaaaab 	.word	0xaaaaaaab
 8004dfc:	400204b8 	.word	0x400204b8
 8004e00:	4002040f 	.word	0x4002040f
 8004e04:	10008200 	.word	0x10008200
 8004e08:	40020880 	.word	0x40020880

08004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04a      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d847      	bhi.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d022      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d01d      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e94:	671a      	str	r2, [r3, #112]	; 0x70
 8004e96:	e009      	b.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004eaa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494
 8004ee4:	1600963f 	.word	0x1600963f
 8004ee8:	58025940 	.word	0x58025940
 8004eec:	1000823f 	.word	0x1000823f
 8004ef0:	40020940 	.word	0x40020940

08004ef4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	460b      	mov	r3, r1
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e00a      	b.n	8004f26 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004f10:	7afb      	ldrb	r3, [r7, #11]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
      break;
 8004f22:	bf00      	nop
  }

  return status;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e003      	b.n	8004f4e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
  }
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f6a:	4b89      	ldr	r3, [pc, #548]	; (8005190 <HAL_GPIO_Init+0x234>)
 8004f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f6e:	e194      	b.n	800529a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8186 	beq.w	8005294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_GPIO_Init+0x4c>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d007      	beq.n	8004fa8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f9c:	2b11      	cmp	r3, #17
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b12      	cmp	r3, #18
 8004fa6:	d130      	bne.n	800500a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fde:	2201      	movs	r2, #1
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 0201 	and.w	r2, r3, #1
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	2203      	movs	r2, #3
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_GPIO_Init+0xee>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b12      	cmp	r3, #18
 8005048:	d123      	bne.n	8005092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	08da      	lsrs	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3208      	adds	r2, #8
 8005052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	220f      	movs	r2, #15
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	08da      	lsrs	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3208      	adds	r2, #8
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	2203      	movs	r2, #3
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80e0 	beq.w	8005294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d4:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_GPIO_Init+0x238>)
 80050d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050da:	4a2e      	ldr	r2, [pc, #184]	; (8005194 <HAL_GPIO_Init+0x238>)
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_GPIO_Init+0x238>)
 80050e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050f2:	4a29      	ldr	r2, [pc, #164]	; (8005198 <HAL_GPIO_Init+0x23c>)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	3302      	adds	r3, #2
 80050fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	220f      	movs	r2, #15
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a20      	ldr	r2, [pc, #128]	; (800519c <HAL_GPIO_Init+0x240>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d052      	beq.n	80051c4 <HAL_GPIO_Init+0x268>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <HAL_GPIO_Init+0x244>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d031      	beq.n	800518a <HAL_GPIO_Init+0x22e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_GPIO_Init+0x248>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <HAL_GPIO_Init+0x22a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_GPIO_Init+0x24c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d025      	beq.n	8005182 <HAL_GPIO_Init+0x226>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_GPIO_Init+0x250>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <HAL_GPIO_Init+0x222>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_GPIO_Init+0x254>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d019      	beq.n	800517a <HAL_GPIO_Init+0x21e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <HAL_GPIO_Init+0x258>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_GPIO_Init+0x21a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <HAL_GPIO_Init+0x25c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00d      	beq.n	8005172 <HAL_GPIO_Init+0x216>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_GPIO_Init+0x260>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <HAL_GPIO_Init+0x212>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <HAL_GPIO_Init+0x264>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <HAL_GPIO_Init+0x20e>
 8005166:	2309      	movs	r3, #9
 8005168:	e02d      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800516a:	230a      	movs	r3, #10
 800516c:	e02b      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800516e:	2308      	movs	r3, #8
 8005170:	e029      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005172:	2307      	movs	r3, #7
 8005174:	e027      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005176:	2306      	movs	r3, #6
 8005178:	e025      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800517a:	2305      	movs	r3, #5
 800517c:	e023      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800517e:	2304      	movs	r3, #4
 8005180:	e021      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005182:	2303      	movs	r3, #3
 8005184:	e01f      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005186:	2302      	movs	r3, #2
 8005188:	e01d      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800518a:	2301      	movs	r3, #1
 800518c:	e01b      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800518e:	bf00      	nop
 8005190:	58000080 	.word	0x58000080
 8005194:	58024400 	.word	0x58024400
 8005198:	58000400 	.word	0x58000400
 800519c:	58020000 	.word	0x58020000
 80051a0:	58020400 	.word	0x58020400
 80051a4:	58020800 	.word	0x58020800
 80051a8:	58020c00 	.word	0x58020c00
 80051ac:	58021000 	.word	0x58021000
 80051b0:	58021400 	.word	0x58021400
 80051b4:	58021800 	.word	0x58021800
 80051b8:	58021c00 	.word	0x58021c00
 80051bc:	58022000 	.word	0x58022000
 80051c0:	58022400 	.word	0x58022400
 80051c4:	2300      	movs	r3, #0
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	f002 0203 	and.w	r2, r2, #3
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	4093      	lsls	r3, r2
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d6:	4938      	ldr	r1, [pc, #224]	; (80052b8 <HAL_GPIO_Init+0x35c>)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3302      	adds	r3, #2
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800525e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800528c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f ae63 	bne.w	8004f70 <HAL_GPIO_Init+0x14>
  }
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	58000400 	.word	0x58000400

080052bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
 80052c8:	4613      	mov	r3, r2
 80052ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052cc:	787b      	ldrb	r3, [r7, #1]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052d8:	e003      	b.n	80052e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	041a      	lsls	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	619a      	str	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005300:	887a      	ldrh	r2, [r7, #2]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4013      	ands	r3, r2
 8005306:	041a      	lsls	r2, r3, #16
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	43d9      	mvns	r1, r3
 800530c:	887b      	ldrh	r3, [r7, #2]
 800530e:	400b      	ands	r3, r1
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	619a      	str	r2, [r3, #24]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	4603      	mov	r3, r0
 800532a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005330:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800533c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb fe29 	bl	8000fa0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005360:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d00a      	beq.n	8005382 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800536c:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <HAL_PWREx_ConfigSupply+0x70>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d001      	beq.n	800537e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e01f      	b.n	80053be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e01d      	b.n	80053be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	490f      	ldr	r1, [pc, #60]	; (80053c8 <HAL_PWREx_ConfigSupply+0x70>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4313      	orrs	r3, r2
 8005390:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005392:	f7fc fcb7 	bl	8001d04 <HAL_GetTick>
 8005396:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005398:	e009      	b.n	80053ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800539a:	f7fc fcb3 	bl	8001d04 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a8:	d901      	bls.n	80053ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e007      	b.n	80053be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_PWREx_ConfigSupply+0x70>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ba:	d1ee      	bne.n	800539a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	58024800 	.word	0x58024800

080053cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08c      	sub	sp, #48	; 0x30
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e3ff      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8087 	beq.w	80054fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ec:	4b99      	ldr	r3, [pc, #612]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f6:	4b97      	ldr	r3, [pc, #604]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d007      	beq.n	8005412 <HAL_RCC_OscConfig+0x46>
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b18      	cmp	r3, #24
 8005406:	d110      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d10b      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005412:	4b90      	ldr	r3, [pc, #576]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d06c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x12c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d168      	bne.n	80054f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e3d9      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d106      	bne.n	8005442 <HAL_RCC_OscConfig+0x76>
 8005434:	4b87      	ldr	r3, [pc, #540]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a86      	ldr	r2, [pc, #536]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800543a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e02e      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b82      	ldr	r3, [pc, #520]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a81      	ldr	r2, [pc, #516]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b7f      	ldr	r3, [pc, #508]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7e      	ldr	r2, [pc, #504]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800545c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0xbc>
 800546e:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a78      	ldr	r2, [pc, #480]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b76      	ldr	r3, [pc, #472]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a75      	ldr	r2, [pc, #468]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005488:	4b72      	ldr	r3, [pc, #456]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a71      	ldr	r2, [pc, #452]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a6e      	ldr	r2, [pc, #440]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fc fc2c 	bl	8001d04 <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fc fc28 	bl	8001d04 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e38d      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054c2:	4b64      	ldr	r3, [pc, #400]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xe4>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fc fc18 	bl	8001d04 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fc fc14 	bl	8001d04 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e379      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054ea:	4b5a      	ldr	r3, [pc, #360]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x10c>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80ae 	beq.w	8005664 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005510:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005512:	4b50      	ldr	r3, [pc, #320]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_RCC_OscConfig+0x162>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2b18      	cmp	r3, #24
 8005522:	d13a      	bne.n	800559a <HAL_RCC_OscConfig+0x1ce>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d135      	bne.n	800559a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552e:	4b49      	ldr	r3, [pc, #292]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCC_OscConfig+0x17a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e34b      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	f7fc fc1d 	bl	8001d84 <HAL_GetREVID>
 800554a:	4603      	mov	r3, r0
 800554c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005550:	4293      	cmp	r3, r2
 8005552:	d817      	bhi.n	8005584 <HAL_RCC_OscConfig+0x1b8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d108      	bne.n	800556e <HAL_RCC_OscConfig+0x1a2>
 800555c:	4b3d      	ldr	r3, [pc, #244]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005564:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556c:	e07a      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	031b      	lsls	r3, r3, #12
 800557c:	4935      	ldr	r1, [pc, #212]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005582:	e06f      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b33      	ldr	r3, [pc, #204]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	4930      	ldr	r1, [pc, #192]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005598:	e064      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d045      	beq.n	800562e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a2:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 0219 	bic.w	r2, r3, #25
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4929      	ldr	r1, [pc, #164]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc fba6 	bl	8001d04 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055bc:	f7fc fba2 	bl	8001d04 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e307      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055da:	f7fc fbd3 	bl	8001d84 <HAL_GetREVID>
 80055de:	4603      	mov	r3, r0
 80055e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d817      	bhi.n	8005618 <HAL_RCC_OscConfig+0x24c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d108      	bne.n	8005602 <HAL_RCC_OscConfig+0x236>
 80055f0:	4b18      	ldr	r3, [pc, #96]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055f8:	4a16      	ldr	r2, [pc, #88]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e030      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	031b      	lsls	r3, r3, #12
 8005610:	4910      	ldr	r1, [pc, #64]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005612:	4313      	orrs	r3, r2
 8005614:	604b      	str	r3, [r1, #4]
 8005616:	e025      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	061b      	lsls	r3, r3, #24
 8005626:	490b      	ldr	r1, [pc, #44]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]
 800562c:	e01a      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a08      	ldr	r2, [pc, #32]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fc fb63 	bl	8001d04 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fc fb5f 	bl	8001d04 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d903      	bls.n	8005658 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e2c4      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
 8005654:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005658:	4ba4      	ldr	r3, [pc, #656]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ee      	bne.n	8005642 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a9 	beq.w	80057c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005672:	4b9e      	ldr	r3, [pc, #632]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800567c:	4b9b      	ldr	r3, [pc, #620]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d007      	beq.n	8005698 <HAL_RCC_OscConfig+0x2cc>
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b18      	cmp	r3, #24
 800568c:	d13a      	bne.n	8005704 <HAL_RCC_OscConfig+0x338>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d135      	bne.n	8005704 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005698:	4b94      	ldr	r3, [pc, #592]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2e4>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e296      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b0:	f7fc fb68 	bl	8001d84 <HAL_GetREVID>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d817      	bhi.n	80056ee <HAL_RCC_OscConfig+0x322>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d108      	bne.n	80056d8 <HAL_RCC_OscConfig+0x30c>
 80056c6:	4b89      	ldr	r3, [pc, #548]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056ce:	4a87      	ldr	r2, [pc, #540]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056d6:	e075      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056d8:	4b84      	ldr	r3, [pc, #528]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	069b      	lsls	r3, r3, #26
 80056e6:	4981      	ldr	r1, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056ec:	e06a      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056ee:	4b7f      	ldr	r3, [pc, #508]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	497b      	ldr	r1, [pc, #492]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005702:	e05f      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d042      	beq.n	8005792 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800570c:	4b77      	ldr	r3, [pc, #476]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a76      	ldr	r2, [pc, #472]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fc faf4 	bl	8001d04 <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005720:	f7fc faf0 	bl	8001d04 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e255      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005732:	4b6e      	ldr	r3, [pc, #440]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800573e:	f7fc fb21 	bl	8001d84 <HAL_GetREVID>
 8005742:	4603      	mov	r3, r0
 8005744:	f241 0203 	movw	r2, #4099	; 0x1003
 8005748:	4293      	cmp	r3, r2
 800574a:	d817      	bhi.n	800577c <HAL_RCC_OscConfig+0x3b0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	2b20      	cmp	r3, #32
 8005752:	d108      	bne.n	8005766 <HAL_RCC_OscConfig+0x39a>
 8005754:	4b65      	ldr	r3, [pc, #404]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800575c:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800575e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005762:	6053      	str	r3, [r2, #4]
 8005764:	e02e      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	069b      	lsls	r3, r3, #26
 8005774:	495d      	ldr	r1, [pc, #372]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005776:	4313      	orrs	r3, r2
 8005778:	604b      	str	r3, [r1, #4]
 800577a:	e023      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
 800577c:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	4958      	ldr	r1, [pc, #352]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800578c:	4313      	orrs	r3, r2
 800578e:	60cb      	str	r3, [r1, #12]
 8005790:	e018      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005792:	4b56      	ldr	r3, [pc, #344]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a55      	ldr	r2, [pc, #340]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc fab1 	bl	8001d04 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057a6:	f7fc faad 	bl	8001d04 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e212      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057b8:	4b4c      	ldr	r3, [pc, #304]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d036      	beq.n	800583e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d019      	beq.n	800580c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d8:	4b44      	ldr	r3, [pc, #272]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	4a43      	ldr	r2, [pc, #268]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fc fa8e 	bl	8001d04 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ec:	f7fc fa8a 	bl	8001d04 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e1ef      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057fe:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x420>
 800580a:	e018      	b.n	800583e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580c:	4b37      	ldr	r3, [pc, #220]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	4a36      	ldr	r2, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fc fa74 	bl	8001d04 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005820:	f7fc fa70 	bl	8001d04 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e1d5      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005832:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d036      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d019      	beq.n	8005886 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800585c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800585e:	f7fc fa51 	bl	8001d04 <HAL_GetTick>
 8005862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005866:	f7fc fa4d 	bl	8001d04 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e1b2      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x49a>
 8005884:	e018      	b.n	80058b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005886:	4b19      	ldr	r3, [pc, #100]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005892:	f7fc fa37 	bl	8001d04 <HAL_GetTick>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800589a:	f7fc fa33 	bl	8001d04 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e198      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8085 	beq.w	80059d0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_RCC_OscConfig+0x524>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <HAL_RCC_OscConfig+0x524>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058d2:	f7fc fa17 	bl	8001d04 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058d8:	e00c      	b.n	80058f4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058da:	f7fc fa13 	bl	8001d04 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b64      	cmp	r3, #100	; 0x64
 80058e6:	d905      	bls.n	80058f4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e178      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
 80058ec:	58024400 	.word	0x58024400
 80058f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f4:	4b96      	ldr	r3, [pc, #600]	; (8005b50 <HAL_RCC_OscConfig+0x784>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ec      	beq.n	80058da <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HAL_RCC_OscConfig+0x54a>
 8005908:	4b92      	ldr	r3, [pc, #584]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a91      	ldr	r2, [pc, #580]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e02d      	b.n	8005972 <HAL_RCC_OscConfig+0x5a6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x56c>
 800591e:	4b8d      	ldr	r3, [pc, #564]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a8c      	ldr	r2, [pc, #560]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	4b8a      	ldr	r3, [pc, #552]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	4a89      	ldr	r2, [pc, #548]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
 8005936:	e01c      	b.n	8005972 <HAL_RCC_OscConfig+0x5a6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b05      	cmp	r3, #5
 800593e:	d10c      	bne.n	800595a <HAL_RCC_OscConfig+0x58e>
 8005940:	4b84      	ldr	r3, [pc, #528]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a83      	ldr	r2, [pc, #524]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6713      	str	r3, [r2, #112]	; 0x70
 8005958:	e00b      	b.n	8005972 <HAL_RCC_OscConfig+0x5a6>
 800595a:	4b7e      	ldr	r3, [pc, #504]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a7d      	ldr	r2, [pc, #500]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d015      	beq.n	80059a6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fc f9c3 	bl	8001d04 <HAL_GetTick>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005980:	e00a      	b.n	8005998 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fc f9bf 	bl	8001d04 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e122      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005998:	4b6e      	ldr	r3, [pc, #440]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ee      	beq.n	8005982 <HAL_RCC_OscConfig+0x5b6>
 80059a4:	e014      	b.n	80059d0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fc f9ad 	bl	8001d04 <HAL_GetTick>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fc f9a9 	bl	8001d04 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e10c      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059c4:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ee      	bne.n	80059ae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8101 	beq.w	8005bdc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059da:	4b5e      	ldr	r3, [pc, #376]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e2:	2b18      	cmp	r3, #24
 80059e4:	f000 80bc 	beq.w	8005b60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f040 8095 	bne.w	8005b1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b58      	ldr	r3, [pc, #352]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a57      	ldr	r2, [pc, #348]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fc f981 	bl	8001d04 <HAL_GetTick>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fc f97d 	bl	8001d04 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0e2      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a18:	4b4e      	ldr	r3, [pc, #312]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a28:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <HAL_RCC_OscConfig+0x78c>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a34:	0112      	lsls	r2, r2, #4
 8005a36:	430a      	orrs	r2, r1
 8005a38:	4946      	ldr	r1, [pc, #280]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	628b      	str	r3, [r1, #40]	; 0x28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	025b      	lsls	r3, r3, #9
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	3b01      	subs	r3, #1
 8005a68:	061b      	lsls	r3, r3, #24
 8005a6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a6e:	4939      	ldr	r1, [pc, #228]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a74:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a36      	ldr	r2, [pc, #216]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a80:	4b34      	ldr	r3, [pc, #208]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a84:	4b35      	ldr	r3, [pc, #212]	; (8005b5c <HAL_RCC_OscConfig+0x790>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a8c:	00d2      	lsls	r2, r2, #3
 8005a8e:	4931      	ldr	r1, [pc, #196]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f023 020c 	bic.w	r2, r3, #12
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	492c      	ldr	r1, [pc, #176]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f023 0202 	bic.w	r2, r3, #2
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	4928      	ldr	r1, [pc, #160]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ab8:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fc f906 	bl	8001d04 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fc f902 	bl	8001d04 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e067      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x730>
 8005b1a:	e05f      	b.n	8005bdc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fc f8ec 	bl	8001d04 <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fc f8e8 	bl	8001d04 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e04d      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x764>
 8005b4e:	e045      	b.n	8005bdc <HAL_RCC_OscConfig+0x810>
 8005b50:	58024800 	.word	0x58024800
 8005b54:	58024400 	.word	0x58024400
 8005b58:	fffffc0c 	.word	0xfffffc0c
 8005b5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b60:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <HAL_RCC_OscConfig+0x81c>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_OscConfig+0x81c>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d031      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0203 	and.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d12a      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d122      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d11a      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0a5b      	lsrs	r3, r3, #9
 8005ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d111      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d108      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3730      	adds	r7, #48	; 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400

08005bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e19c      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c00:	4b8a      	ldr	r3, [pc, #552]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d910      	bls.n	8005c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b87      	ldr	r3, [pc, #540]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 020f 	bic.w	r2, r3, #15
 8005c16:	4985      	ldr	r1, [pc, #532]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b83      	ldr	r3, [pc, #524]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e184      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	4b7b      	ldr	r3, [pc, #492]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d908      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c4c:	4b78      	ldr	r3, [pc, #480]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4975      	ldr	r1, [pc, #468]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	4b70      	ldr	r3, [pc, #448]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d908      	bls.n	8005c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c7a:	4b6d      	ldr	r3, [pc, #436]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	496a      	ldr	r1, [pc, #424]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	4b64      	ldr	r3, [pc, #400]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d908      	bls.n	8005cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	495e      	ldr	r1, [pc, #376]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d010      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d908      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cd6:	4b56      	ldr	r3, [pc, #344]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4953      	ldr	r1, [pc, #332]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d908      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b4a      	ldr	r3, [pc, #296]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f023 020f 	bic.w	r2, r3, #15
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4947      	ldr	r1, [pc, #284]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d055      	beq.n	8005dce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d22:	4b43      	ldr	r3, [pc, #268]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	4940      	ldr	r1, [pc, #256]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d121      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0f6      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d54:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d115      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0ea      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d6c:	4b30      	ldr	r3, [pc, #192]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0de      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0d6      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d8c:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f023 0207 	bic.w	r2, r3, #7
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4925      	ldr	r1, [pc, #148]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fb ffb1 	bl	8001d04 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da6:	f7fb ffad 	bl	8001d04 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e0be      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d1eb      	bne.n	8005da6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d208      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f023 020f 	bic.w	r2, r3, #15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	490e      	ldr	r1, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d214      	bcs.n	8005e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 020f 	bic.w	r2, r3, #15
 8005e12:	4906      	ldr	r1, [pc, #24]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e086      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
 8005e2c:	52002000 	.word	0x52002000
 8005e30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	4b3f      	ldr	r3, [pc, #252]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d208      	bcs.n	8005e62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e50:	4b3c      	ldr	r3, [pc, #240]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	4939      	ldr	r1, [pc, #228]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d208      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e7e:	4b31      	ldr	r3, [pc, #196]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	492e      	ldr	r1, [pc, #184]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d208      	bcs.n	8005ebe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4922      	ldr	r1, [pc, #136]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69da      	ldr	r2, [r3, #28]
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d208      	bcs.n	8005eec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	4917      	ldr	r1, [pc, #92]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eec:	f000 f834 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	4912      	ldr	r1, [pc, #72]	; (8005f48 <HAL_RCC_ClockConfig+0x35c>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <HAL_RCC_ClockConfig+0x35c>)
 8005f14:	5cd3      	ldrb	r3, [r2, r3]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <HAL_RCC_ClockConfig+0x360>)
 8005f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f24:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x364>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_RCC_ClockConfig+0x368>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fb fe9e 	bl	8001c70 <HAL_InitTick>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	08009b14 	.word	0x08009b14
 8005f4c:	2400001c 	.word	0x2400001c
 8005f50:	24000018 	.word	0x24000018
 8005f54:	24000020 	.word	0x24000020

08005f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f5e:	4bb3      	ldr	r3, [pc, #716]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f66:	2b18      	cmp	r3, #24
 8005f68:	f200 8155 	bhi.w	8006216 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	08006217 	.word	0x08006217
 8005f7c:	08006217 	.word	0x08006217
 8005f80:	08006217 	.word	0x08006217
 8005f84:	08006217 	.word	0x08006217
 8005f88:	08006217 	.word	0x08006217
 8005f8c:	08006217 	.word	0x08006217
 8005f90:	08006217 	.word	0x08006217
 8005f94:	08005fff 	.word	0x08005fff
 8005f98:	08006217 	.word	0x08006217
 8005f9c:	08006217 	.word	0x08006217
 8005fa0:	08006217 	.word	0x08006217
 8005fa4:	08006217 	.word	0x08006217
 8005fa8:	08006217 	.word	0x08006217
 8005fac:	08006217 	.word	0x08006217
 8005fb0:	08006217 	.word	0x08006217
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	08006217 	.word	0x08006217
 8005fbc:	08006217 	.word	0x08006217
 8005fc0:	08006217 	.word	0x08006217
 8005fc4:	08006217 	.word	0x08006217
 8005fc8:	08006217 	.word	0x08006217
 8005fcc:	08006217 	.word	0x08006217
 8005fd0:	08006217 	.word	0x08006217
 8005fd4:	0800600b 	.word	0x0800600b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd8:	4b94      	ldr	r3, [pc, #592]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fe4:	4b91      	ldr	r3, [pc, #580]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	08db      	lsrs	r3, r3, #3
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	4a90      	ldr	r2, [pc, #576]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ff6:	e111      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ff8:	4b8d      	ldr	r3, [pc, #564]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ffa:	61bb      	str	r3, [r7, #24]
    break;
 8005ffc:	e10e      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ffe:	4b8d      	ldr	r3, [pc, #564]	; (8006234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006000:	61bb      	str	r3, [r7, #24]
    break;
 8006002:	e10b      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006004:	4b8c      	ldr	r3, [pc, #560]	; (8006238 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006006:	61bb      	str	r3, [r7, #24]
    break;
 8006008:	e108      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800600a:	4b88      	ldr	r3, [pc, #544]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006014:	4b85      	ldr	r3, [pc, #532]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006020:	4b82      	ldr	r3, [pc, #520]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800602a:	4b80      	ldr	r3, [pc, #512]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	08db      	lsrs	r3, r3, #3
 8006030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006042:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80e1 	beq.w	8006210 <HAL_RCC_GetSysClockFreq+0x2b8>
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b02      	cmp	r3, #2
 8006052:	f000 8083 	beq.w	800615c <HAL_RCC_GetSysClockFreq+0x204>
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b02      	cmp	r3, #2
 800605a:	f200 80a1 	bhi.w	80061a0 <HAL_RCC_GetSysClockFreq+0x248>
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_RCC_GetSysClockFreq+0x114>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d056      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x1c0>
 800606a:	e099      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800606c:	4b6f      	ldr	r3, [pc, #444]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02d      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006078:	4b6c      	ldr	r3, [pc, #432]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	08db      	lsrs	r3, r3, #3
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	4a6b      	ldr	r2, [pc, #428]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
 8006088:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b62      	ldr	r3, [pc, #392]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800623c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80060d2:	e087      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2e8>
 80060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e6:	4b51      	ldr	r3, [pc, #324]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800623c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006116:	e065      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006244 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b40      	ldr	r3, [pc, #256]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a02 	vldr	s12, [r7, #8]
 800613e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800623c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615a:	e043      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006248 <HAL_RCC_GetSysClockFreq+0x2f0>
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006182:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800623c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619e:	e021      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006244 <HAL_RCC_GetSysClockFreq+0x2ec>
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800623c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	0a5b      	lsrs	r3, r3, #9
 80061ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ee:	3301      	adds	r3, #1
 80061f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006208:	ee17 3a90 	vmov	r3, s15
 800620c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800620e:	e005      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	61bb      	str	r3, [r7, #24]
    break;
 8006214:	e002      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006218:	61bb      	str	r3, [r7, #24]
    break;
 800621a:	bf00      	nop
  }

  return sysclockfreq;
 800621c:	69bb      	ldr	r3, [r7, #24]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3724      	adds	r7, #36	; 0x24
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
 8006230:	03d09000 	.word	0x03d09000
 8006234:	003d0900 	.word	0x003d0900
 8006238:	007f2815 	.word	0x007f2815
 800623c:	46000000 	.word	0x46000000
 8006240:	4c742400 	.word	0x4c742400
 8006244:	4a742400 	.word	0x4a742400
 8006248:	4afe502a 	.word	0x4afe502a

0800624c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006252:	f7ff fe81 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 8006256:	4602      	mov	r2, r0
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_RCC_GetHCLKFreq+0x50>)
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	490f      	ldr	r1, [pc, #60]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006264:	5ccb      	ldrb	r3, [r1, r3]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <HAL_RCC_GetHCLKFreq+0x50>)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800627a:	5cd3      	ldrb	r3, [r2, r3]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	fa22 f303 	lsr.w	r3, r2, r3
 8006286:	4a07      	ldr	r2, [pc, #28]	; (80062a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006288:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	58024400 	.word	0x58024400
 80062a0:	08009b14 	.word	0x08009b14
 80062a4:	2400001c 	.word	0x2400001c
 80062a8:	24000018 	.word	0x24000018

080062ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062b0:	f7ff ffcc 	bl	800624c <HAL_RCC_GetHCLKFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	4904      	ldr	r1, [pc, #16]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	58024400 	.word	0x58024400
 80062d4:	08009b14 	.word	0x08009b14

080062d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062dc:	f7ff ffb6 	bl	800624c <HAL_RCC_GetHCLKFreq>
 80062e0:	4602      	mov	r2, r0
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	4904      	ldr	r1, [pc, #16]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062ee:	5ccb      	ldrb	r3, [r1, r3]
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	58024400 	.word	0x58024400
 8006300:	08009b14 	.word	0x08009b14

08006304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006310:	2300      	movs	r3, #0
 8006312:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d03f      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006324:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006328:	d02a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800632a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800632e:	d824      	bhi.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006334:	d018      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633a:	d81e      	bhi.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006344:	d007      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006346:	e018      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4bab      	ldr	r3, [pc, #684]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4aaa      	ldr	r2, [pc, #680]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006354:	e015      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	2102      	movs	r1, #2
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f9cf 	bl	8007700 <RCCEx_PLL2_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006366:	e00c      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	2102      	movs	r1, #2
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fa78 	bl	8007864 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006378:	e003      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
      break;
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006388:	4b9b      	ldr	r3, [pc, #620]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	4998      	ldr	r1, [pc, #608]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006396:	4313      	orrs	r3, r2
 8006398:	650b      	str	r3, [r1, #80]	; 0x50
 800639a:	e001      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d03d      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d826      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063d1 	.word	0x080063d1
 80063c0:	080063df 	.word	0x080063df
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	08006409 	.word	0x08006409
 80063cc:	08006409 	.word	0x08006409
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d0:	4b89      	ldr	r3, [pc, #548]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a88      	ldr	r2, [pc, #544]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063dc:	e015      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f98b 	bl	8007700 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3324      	adds	r3, #36	; 0x24
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 fa34 	bl	8007864 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
      break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006410:	4b79      	ldr	r3, [pc, #484]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	f023 0207 	bic.w	r2, r3, #7
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	4976      	ldr	r1, [pc, #472]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	650b      	str	r3, [r1, #80]	; 0x50
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	2b00      	cmp	r3, #0
 8006432:	d042      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643c:	d02b      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800643e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006442:	d825      	bhi.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006444:	2bc0      	cmp	r3, #192	; 0xc0
 8006446:	d028      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006448:	2bc0      	cmp	r3, #192	; 0xc0
 800644a:	d821      	bhi.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d016      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d81d      	bhi.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d007      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800645c:	e018      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645e:	4b66      	ldr	r3, [pc, #408]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a65      	ldr	r2, [pc, #404]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800646a:	e017      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f001 f944 	bl	8007700 <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800647c:	e00e      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3324      	adds	r3, #36	; 0x24
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f9ed 	bl	8007864 <RCCEx_PLL3_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800648e:	e005      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
      break;
 8006494:	e002      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800649a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80064a2:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ae:	4952      	ldr	r1, [pc, #328]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	650b      	str	r3, [r1, #80]	; 0x50
 80064b4:	e001      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d049      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d0:	d030      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80064d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d6:	d82a      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064dc:	d02c      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064e2:	d824      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e8:	d018      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ee:	d81e      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064f8:	d007      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064fa:	e018      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fc:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a3d      	ldr	r2, [pc, #244]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006508:	e017      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f001 f8f5 	bl	8007700 <RCCEx_PLL2_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800651a:	e00e      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f99e 	bl	8007864 <RCCEx_PLL3_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800652c:	e005      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	e002      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006540:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800654e:	492a      	ldr	r1, [pc, #168]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006550:	4313      	orrs	r3, r2
 8006552:	658b      	str	r3, [r1, #88]	; 0x58
 8006554:	e001      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006562:	2b00      	cmp	r3, #0
 8006564:	d04c      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800656c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006570:	d030      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006576:	d82a      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006578:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800657c:	d02c      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800657e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006582:	d824      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006588:	d018      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800658a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658e:	d81e      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006598:	d007      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800659a:	e018      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065a8:	e017      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 f8a5 	bl	8007700 <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065ba:	e00e      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f94e 	bl	8007864 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065cc:	e005      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      break;
 80065d2:	e002      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80065d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10d      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065ee:	4902      	ldr	r1, [pc, #8]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	658b      	str	r3, [r1, #88]	; 0x58
 80065f4:	e004      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d032      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006610:	2b30      	cmp	r3, #48	; 0x30
 8006612:	d01c      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d817      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d00c      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d813      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d016      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d10f      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006628:	4baf      	ldr	r3, [pc, #700]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	4aae      	ldr	r2, [pc, #696]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800662e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006634:	e00e      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	2102      	movs	r1, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f001 f85f 	bl	8007700 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006646:	e005      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
      break;
 800664c:	e002      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800665a:	4ba3      	ldr	r3, [pc, #652]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	49a0      	ldr	r1, [pc, #640]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006668:	4313      	orrs	r3, r2
 800666a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800666c:	e001      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
 8006670:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d047      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006686:	d030      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668c:	d82a      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800668e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006692:	d02c      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006694:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006698:	d824      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800669a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669e:	d018      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80066a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a4:	d81e      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d007      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80066b0:	e018      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b2:	4b8d      	ldr	r3, [pc, #564]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	4a8c      	ldr	r2, [pc, #560]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066be:	e017      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f81a 	bl	8007700 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066d0:	e00e      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3324      	adds	r3, #36	; 0x24
 80066d6:	2100      	movs	r1, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	f001 f8c3 	bl	8007864 <RCCEx_PLL3_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066e2:	e005      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
      break;
 80066e8:	e002      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066ea:	bf00      	nop
 80066ec:	e000      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066f6:	4b7c      	ldr	r3, [pc, #496]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006702:	4979      	ldr	r1, [pc, #484]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006704:	4313      	orrs	r3, r2
 8006706:	650b      	str	r3, [r1, #80]	; 0x50
 8006708:	e001      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d049      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006722:	d02e      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006728:	d828      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800672a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800672e:	d02a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006734:	d822      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006736:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800673a:	d026      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800673c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006740:	d81c      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006746:	d010      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800674c:	d816      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01d      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d111      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f000 ffce 	bl	8007700 <RCCEx_PLL2_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006768:	e012      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f877 	bl	8007864 <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800677a:	e009      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
      break;
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006782:	bf00      	nop
 8006784:	e004      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006786:	bf00      	nop
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800678e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006796:	4b54      	ldr	r3, [pc, #336]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a2:	4951      	ldr	r1, [pc, #324]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	650b      	str	r3, [r1, #80]	; 0x50
 80067a8:	e001      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d04b      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c4:	d02e      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80067c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067ca:	d828      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d0:	d02a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d822      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067dc:	d026      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80067de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067e2:	d81c      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e8:	d010      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80067ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ee:	d816      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01d      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80067f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f8:	d111      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3304      	adds	r3, #4
 80067fe:	2101      	movs	r1, #1
 8006800:	4618      	mov	r0, r3
 8006802:	f000 ff7d 	bl	8007700 <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800680a:	e012      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3324      	adds	r3, #36	; 0x24
 8006810:	2101      	movs	r1, #1
 8006812:	4618      	mov	r0, r3
 8006814:	f001 f826 	bl	8007864 <RCCEx_PLL3_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800681c:	e009      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
      break;
 8006822:	e006      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006824:	bf00      	nop
 8006826:	e004      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006828:	bf00      	nop
 800682a:	e002      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006838:	4b2b      	ldr	r3, [pc, #172]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006846:	4928      	ldr	r1, [pc, #160]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006848:	4313      	orrs	r3, r2
 800684a:	658b      	str	r3, [r1, #88]	; 0x58
 800684c:	e001      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02f      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006866:	d00e      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686c:	d814      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d015      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006876:	d10f      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006878:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	4a1a      	ldr	r2, [pc, #104]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800687e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006884:	e00c      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3304      	adds	r3, #4
 800688a:	2101      	movs	r1, #1
 800688c:	4618      	mov	r0, r3
 800688e:	f000 ff37 	bl	8007700 <RCCEx_PLL2_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006896:	e003      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
      break;
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800689e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b2:	490d      	ldr	r1, [pc, #52]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	650b      	str	r3, [r1, #80]	; 0x50
 80068b8:	e001      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d033      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d81c      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	08006913 	.word	0x08006913
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068fb 	.word	0x080068fb
 80068e4:	08006913 	.word	0x08006913
 80068e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ec:	4bb8      	ldr	r3, [pc, #736]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	4ab7      	ldr	r2, [pc, #732]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068f8:	e00c      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2102      	movs	r1, #2
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fefd 	bl	8007700 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
      break;
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800691a:	4bad      	ldr	r3, [pc, #692]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	f023 0203 	bic.w	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	49aa      	ldr	r1, [pc, #680]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006928:	4313      	orrs	r3, r2
 800692a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800692c:	e001      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8086 	beq.w	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006940:	4ba4      	ldr	r3, [pc, #656]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4aa3      	ldr	r2, [pc, #652]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800694c:	f7fb f9da 	bl	8001d04 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006952:	e009      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006954:	f7fb f9d6 	bl	8001d04 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d902      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	75fb      	strb	r3, [r7, #23]
        break;
 8006966:	e005      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006968:	4b9a      	ldr	r3, [pc, #616]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ef      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d166      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800697a:	4b95      	ldr	r3, [pc, #596]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800697c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006984:	4053      	eors	r3, r2
 8006986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d013      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800698e:	4b90      	ldr	r3, [pc, #576]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006998:	4b8d      	ldr	r3, [pc, #564]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	4a8c      	ldr	r2, [pc, #560]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800699e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a4:	4b8a      	ldr	r3, [pc, #552]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	4a89      	ldr	r2, [pc, #548]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069b0:	4a87      	ldr	r2, [pc, #540]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c0:	d115      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fb f99f 	bl	8001d04 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c8:	e00b      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fb f99b 	bl	8001d04 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d902      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	75fb      	strb	r3, [r7, #23]
            break;
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e2:	4b7b      	ldr	r3, [pc, #492]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0ed      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d126      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a02:	d10d      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006a04:	4b72      	ldr	r3, [pc, #456]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a12:	0919      	lsrs	r1, r3, #4
 8006a14:	4b70      	ldr	r3, [pc, #448]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006a16:	400b      	ands	r3, r1
 8006a18:	496d      	ldr	r1, [pc, #436]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]
 8006a1e:	e005      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006a20:	4b6b      	ldr	r3, [pc, #428]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	4a6a      	ldr	r2, [pc, #424]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a2a:	6113      	str	r3, [r2, #16]
 8006a2c:	4b68      	ldr	r3, [pc, #416]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3a:	4965      	ldr	r1, [pc, #404]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	670b      	str	r3, [r1, #112]	; 0x70
 8006a40:	e004      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	75bb      	strb	r3, [r7, #22]
 8006a46:	e001      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d07e      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a5c:	2b28      	cmp	r3, #40	; 0x28
 8006a5e:	d867      	bhi.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a60:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006b37 	.word	0x08006b37
 8006a6c:	08006b31 	.word	0x08006b31
 8006a70:	08006b31 	.word	0x08006b31
 8006a74:	08006b31 	.word	0x08006b31
 8006a78:	08006b31 	.word	0x08006b31
 8006a7c:	08006b31 	.word	0x08006b31
 8006a80:	08006b31 	.word	0x08006b31
 8006a84:	08006b31 	.word	0x08006b31
 8006a88:	08006b0d 	.word	0x08006b0d
 8006a8c:	08006b31 	.word	0x08006b31
 8006a90:	08006b31 	.word	0x08006b31
 8006a94:	08006b31 	.word	0x08006b31
 8006a98:	08006b31 	.word	0x08006b31
 8006a9c:	08006b31 	.word	0x08006b31
 8006aa0:	08006b31 	.word	0x08006b31
 8006aa4:	08006b31 	.word	0x08006b31
 8006aa8:	08006b1f 	.word	0x08006b1f
 8006aac:	08006b31 	.word	0x08006b31
 8006ab0:	08006b31 	.word	0x08006b31
 8006ab4:	08006b31 	.word	0x08006b31
 8006ab8:	08006b31 	.word	0x08006b31
 8006abc:	08006b31 	.word	0x08006b31
 8006ac0:	08006b31 	.word	0x08006b31
 8006ac4:	08006b31 	.word	0x08006b31
 8006ac8:	08006b37 	.word	0x08006b37
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006b31 	.word	0x08006b31
 8006ad4:	08006b31 	.word	0x08006b31
 8006ad8:	08006b31 	.word	0x08006b31
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006b31 	.word	0x08006b31
 8006ae8:	08006b37 	.word	0x08006b37
 8006aec:	08006b31 	.word	0x08006b31
 8006af0:	08006b31 	.word	0x08006b31
 8006af4:	08006b31 	.word	0x08006b31
 8006af8:	08006b31 	.word	0x08006b31
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b31 	.word	0x08006b31
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	08006b37 	.word	0x08006b37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	2101      	movs	r1, #1
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fdf4 	bl	8007700 <RCCEx_PLL2_Config>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b1c:	e00c      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3324      	adds	r3, #36	; 0x24
 8006b22:	2101      	movs	r1, #1
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fe9d 	bl	8007864 <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	75fb      	strb	r3, [r7, #23]
      break;
 8006b34:	e000      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b3e:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b4a:	4921      	ldr	r1, [pc, #132]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	654b      	str	r3, [r1, #84]	; 0x54
 8006b50:	e001      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d03e      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d820      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006bb3 	.word	0x08006bb3
 8006b74:	08006b89 	.word	0x08006b89
 8006b78:	08006b9b 	.word	0x08006b9b
 8006b7c:	08006bb3 	.word	0x08006bb3
 8006b80:	08006bb3 	.word	0x08006bb3
 8006b84:	08006bb3 	.word	0x08006bb3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fdb6 	bl	8007700 <RCCEx_PLL2_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b98:	e00c      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3324      	adds	r3, #36	; 0x24
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fe5f 	bl	8007864 <RCCEx_PLL3_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb0:	e000      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d110      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	f023 0207 	bic.w	r2, r3, #7
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	4902      	ldr	r1, [pc, #8]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	654b      	str	r3, [r1, #84]	; 0x54
 8006bcc:	e008      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	58024800 	.word	0x58024800
 8006bd8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d039      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	d820      	bhi.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006bf6:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c3f 	.word	0x08006c3f
 8006c00:	08006c15 	.word	0x08006c15
 8006c04:	08006c27 	.word	0x08006c27
 8006c08:	08006c3f 	.word	0x08006c3f
 8006c0c:	08006c3f 	.word	0x08006c3f
 8006c10:	08006c3f 	.word	0x08006c3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	2101      	movs	r1, #1
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fd70 	bl	8007700 <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c24:	e00c      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3324      	adds	r3, #36	; 0x24
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fe19 	bl	8007864 <RCCEx_PLL3_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c46:	4bb7      	ldr	r3, [pc, #732]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	f023 0207 	bic.w	r2, r3, #7
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c54:	49b3      	ldr	r1, [pc, #716]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	658b      	str	r3, [r1, #88]	; 0x58
 8006c5a:	e001      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d04b      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c76:	d02e      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c7c:	d828      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c82:	d02a      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d822      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c8e:	d026      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c94:	d81c      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9a:	d010      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca0:	d816      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01d      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006caa:	d111      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fd24 	bl	8007700 <RCCEx_PLL2_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cbc:	e012      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3324      	adds	r3, #36	; 0x24
 8006cc2:	2102      	movs	r1, #2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fdcd 	bl	8007864 <RCCEx_PLL3_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cce:	e009      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd4:	e006      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e004      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cda:	bf00      	nop
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cea:	4b8e      	ldr	r3, [pc, #568]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf8:	498a      	ldr	r1, [pc, #552]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	654b      	str	r3, [r1, #84]	; 0x54
 8006cfe:	e001      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d04b      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d1a:	d02e      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006d1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d20:	d828      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	d02a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2c:	d822      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d32:	d026      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d38:	d81c      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3e:	d010      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d44:	d816      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01d      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4e:	d111      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fcd2 	bl	8007700 <RCCEx_PLL2_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d60:	e012      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	2102      	movs	r1, #2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fd7b 	bl	8007864 <RCCEx_PLL3_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d72:	e009      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	75fb      	strb	r3, [r7, #23]
      break;
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d7a:	bf00      	nop
 8006d7c:	e004      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d8e:	4b65      	ldr	r3, [pc, #404]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d9c:	4961      	ldr	r1, [pc, #388]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	658b      	str	r3, [r1, #88]	; 0x58
 8006da2:	e001      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d04b      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dbe:	d02e      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006dc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dc4:	d828      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dca:	d02a      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd0:	d822      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006dd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006dd6:	d026      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006dd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ddc:	d81c      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de2:	d010      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de8:	d816      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d01d      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df2:	d111      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fc80 	bl	8007700 <RCCEx_PLL2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e04:	e012      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3324      	adds	r3, #36	; 0x24
 8006e0a:	2102      	movs	r1, #2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fd29 	bl	8007864 <RCCEx_PLL3_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e16:	e009      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1c:	e006      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e004      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006e22:	bf00      	nop
 8006e24:	e002      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006e26:	bf00      	nop
 8006e28:	e000      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e32:	4b3c      	ldr	r3, [pc, #240]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e40:	4938      	ldr	r1, [pc, #224]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	658b      	str	r3, [r1, #88]	; 0x58
 8006e46:	e001      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	d10a      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	2102      	movs	r1, #2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fcfa 	bl	8007864 <RCCEx_PLL3_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e88:	4926      	ldr	r1, [pc, #152]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01a      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea4:	d10a      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fcd9 	bl	8007864 <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eca:	4916      	ldr	r1, [pc, #88]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d036      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee6:	d01f      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eec:	d817      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef6:	d009      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006ef8:	e011      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fbfd 	bl	8007700 <RCCEx_PLL2_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f0a:	e00e      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3324      	adds	r3, #36	; 0x24
 8006f10:	2102      	movs	r1, #2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fca6 	bl	8007864 <RCCEx_PLL3_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f1c:	e005      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
      break;
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006f24:	58024400 	.word	0x58024400
      break;
 8006f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f30:	4b93      	ldr	r3, [pc, #588]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f3e:	4990      	ldr	r1, [pc, #576]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	658b      	str	r3, [r1, #88]	; 0x58
 8006f44:	e001      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d033      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f60:	d01c      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006f62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f66:	d816      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f72:	d007      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006f74:	e00f      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f76:	4b82      	ldr	r3, [pc, #520]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	4a81      	ldr	r2, [pc, #516]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f82:	e00c      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fc6a 	bl	8007864 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f94:	e003      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	e000      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fa4:	4b76      	ldr	r3, [pc, #472]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb2:	4973      	ldr	r1, [pc, #460]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	654b      	str	r3, [r1, #84]	; 0x54
 8006fb8:	e001      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d029      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd6:	d007      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006fd8:	e00f      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fda:	4b69      	ldr	r3, [pc, #420]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	4a68      	ldr	r2, [pc, #416]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fe6:	e00b      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3304      	adds	r3, #4
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fb86 	bl	8007700 <RCCEx_PLL2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007006:	4b5e      	ldr	r3, [pc, #376]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	495b      	ldr	r1, [pc, #364]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007018:	e001      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3324      	adds	r3, #36	; 0x24
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fc17 	bl	8007864 <RCCEx_PLL3_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d030      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007054:	d017      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705a:	d811      	bhi.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800705c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007060:	d013      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007066:	d80b      	bhi.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800706c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007070:	d106      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007072:	4b43      	ldr	r3, [pc, #268]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	4a42      	ldr	r2, [pc, #264]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800707e:	e007      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
      break;
 8007084:	e004      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007086:	bf00      	nop
 8007088:	e002      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800708a:	bf00      	nop
 800708c:	e000      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800708e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007096:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a2:	4937      	ldr	r1, [pc, #220]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	654b      	str	r3, [r1, #84]	; 0x54
 80070a8:	e001      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	492e      	ldr	r1, [pc, #184]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070d8:	4b29      	ldr	r3, [pc, #164]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070e6:	4926      	ldr	r1, [pc, #152]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007104:	491e      	ldr	r1, [pc, #120]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007116:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	4a19      	ldr	r2, [pc, #100]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800711c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007120:	6113      	str	r3, [r2, #16]
 8007122:	4b17      	ldr	r3, [pc, #92]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800712c:	4914      	ldr	r1, [pc, #80]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800712e:	4313      	orrs	r3, r2
 8007130:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	da08      	bge.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800713a:	4b11      	ldr	r3, [pc, #68]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007146:	490e      	ldr	r1, [pc, #56]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007158:	4b09      	ldr	r3, [pc, #36]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	4906      	ldr	r1, [pc, #24]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800716c:	7dbb      	ldrb	r3, [r7, #22]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	58024400 	.word	0x58024400

08007184 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007188:	f7ff f860 	bl	800624c <HAL_RCC_GetHCLKFreq>
 800718c:	4602      	mov	r2, r0
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	091b      	lsrs	r3, r3, #4
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	4904      	ldr	r1, [pc, #16]	; (80071ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800719a:	5ccb      	ldrb	r3, [r1, r3]
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	58024400 	.word	0x58024400
 80071ac:	08009b14 	.word	0x08009b14

080071b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b089      	sub	sp, #36	; 0x24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071b8:	4ba1      	ldr	r3, [pc, #644]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071c2:	4b9f      	ldr	r3, [pc, #636]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	0b1b      	lsrs	r3, r3, #12
 80071c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071ce:	4b9c      	ldr	r3, [pc, #624]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	091b      	lsrs	r3, r3, #4
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071da:	4b99      	ldr	r3, [pc, #612]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8111 	beq.w	8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	f000 8083 	beq.w	800730c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f200 80a1 	bhi.w	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d056      	beq.n	80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800721a:	e099      	b.n	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721c:	4b88      	ldr	r3, [pc, #544]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d02d      	beq.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007228:	4b85      	ldr	r3, [pc, #532]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	08db      	lsrs	r3, r3, #3
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	4a84      	ldr	r2, [pc, #528]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b7b      	ldr	r3, [pc, #492]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007282:	e087      	b.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072c6:	e065      	b.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b59      	ldr	r3, [pc, #356]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800730a:	e043      	b.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b48      	ldr	r3, [pc, #288]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007332:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734e:	e021      	b.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b37      	ldr	r3, [pc, #220]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007392:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007394:	4b2a      	ldr	r3, [pc, #168]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	0a5b      	lsrs	r3, r3, #9
 800739a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ba:	ee17 2a90 	vmov	r2, s15
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073c2:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	0c1b      	lsrs	r3, r3, #16
 80073c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e8:	ee17 2a90 	vmov	r2, s15
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	0e1b      	lsrs	r3, r3, #24
 80073f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740a:	edd7 6a07 	vldr	s13, [r7, #28]
 800740e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007416:	ee17 2a90 	vmov	r2, s15
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800741e:	e008      	b.n	8007432 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	609a      	str	r2, [r3, #8]
}
 8007432:	bf00      	nop
 8007434:	3724      	adds	r7, #36	; 0x24
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400
 8007444:	03d09000 	.word	0x03d09000
 8007448:	46000000 	.word	0x46000000
 800744c:	4c742400 	.word	0x4c742400
 8007450:	4a742400 	.word	0x4a742400
 8007454:	4afe502a 	.word	0x4afe502a

08007458 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007460:	4ba1      	ldr	r3, [pc, #644]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800746a:	4b9f      	ldr	r3, [pc, #636]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	0d1b      	lsrs	r3, r3, #20
 8007470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007474:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007476:	4b9c      	ldr	r3, [pc, #624]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	0a1b      	lsrs	r3, r3, #8
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007482:	4b99      	ldr	r3, [pc, #612]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	08db      	lsrs	r3, r3, #3
 8007488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	fb02 f303 	mul.w	r3, r2, r3
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8111 	beq.w	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	f000 8083 	beq.w	80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	f200 80a1 	bhi.w	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d056      	beq.n	8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074c2:	e099      	b.n	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c4:	4b88      	ldr	r3, [pc, #544]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d02d      	beq.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074d0:	4b85      	ldr	r3, [pc, #532]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	08db      	lsrs	r3, r3, #3
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	4a84      	ldr	r2, [pc, #528]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
 80074e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b7b      	ldr	r3, [pc, #492]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a03 	vldr	s12, [r7, #12]
 800750e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800752a:	e087      	b.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b6a      	ldr	r3, [pc, #424]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800756e:	e065      	b.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b59      	ldr	r3, [pc, #356]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075b2:	e043      	b.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b48      	ldr	r3, [pc, #288]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075f6:	e021      	b.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b37      	ldr	r3, [pc, #220]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800763a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800763c:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	0a5b      	lsrs	r3, r3, #9
 8007642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007656:	edd7 6a07 	vldr	s13, [r7, #28]
 800765a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007662:	ee17 2a90 	vmov	r2, s15
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800766a:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	0c1b      	lsrs	r3, r3, #16
 8007670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007674:	ee07 3a90 	vmov	s15, r3
 8007678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007684:	edd7 6a07 	vldr	s13, [r7, #28]
 8007688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007690:	ee17 2a90 	vmov	r2, s15
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007698:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	0e1b      	lsrs	r3, r3, #24
 800769e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076be:	ee17 2a90 	vmov	r2, s15
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076c6:	e008      	b.n	80076da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	609a      	str	r2, [r3, #8]
}
 80076da:	bf00      	nop
 80076dc:	3724      	adds	r7, #36	; 0x24
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
 80076ec:	03d09000 	.word	0x03d09000
 80076f0:	46000000 	.word	0x46000000
 80076f4:	4c742400 	.word	0x4c742400
 80076f8:	4a742400 	.word	0x4a742400
 80076fc:	4afe502a 	.word	0x4afe502a

08007700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770e:	4b53      	ldr	r3, [pc, #332]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d101      	bne.n	800771e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e099      	b.n	8007852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4e      	ldr	r2, [pc, #312]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772a:	f7fa faeb 	bl	8001d04 <HAL_GetTick>
 800772e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007730:	e008      	b.n	8007744 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007732:	f7fa fae7 	bl	8001d04 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e086      	b.n	8007852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007744:	4b45      	ldr	r3, [pc, #276]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007750:	4b42      	ldr	r3, [pc, #264]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	031b      	lsls	r3, r3, #12
 800775e:	493f      	ldr	r1, [pc, #252]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	628b      	str	r3, [r1, #40]	; 0x28
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	3b01      	subs	r3, #1
 8007774:	025b      	lsls	r3, r3, #9
 8007776:	b29b      	uxth	r3, r3
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	3b01      	subs	r3, #1
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	3b01      	subs	r3, #1
 800778e:	061b      	lsls	r3, r3, #24
 8007790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007794:	4931      	ldr	r1, [pc, #196]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	492d      	ldr	r1, [pc, #180]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077ac:	4b2b      	ldr	r3, [pc, #172]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	f023 0220 	bic.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4928      	ldr	r1, [pc, #160]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077be:	4b27      	ldr	r3, [pc, #156]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	4a26      	ldr	r2, [pc, #152]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077c4:	f023 0310 	bic.w	r3, r3, #16
 80077c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <RCCEx_PLL2_Config+0x160>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	69d2      	ldr	r2, [r2, #28]
 80077d6:	00d2      	lsls	r2, r2, #3
 80077d8:	4920      	ldr	r1, [pc, #128]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077de:	4b1f      	ldr	r3, [pc, #124]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	4a1e      	ldr	r2, [pc, #120]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077e4:	f043 0310 	orr.w	r3, r3, #16
 80077e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077f0:	4b1a      	ldr	r3, [pc, #104]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4a19      	ldr	r2, [pc, #100]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077fc:	e00f      	b.n	800781e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d106      	bne.n	8007812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a14      	ldr	r2, [pc, #80]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 800780a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800780e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007810:	e005      	b.n	800781e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007812:	4b12      	ldr	r3, [pc, #72]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	4a11      	ldr	r2, [pc, #68]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800781c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a0e      	ldr	r2, [pc, #56]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782a:	f7fa fa6b 	bl	8001d04 <HAL_GetTick>
 800782e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007830:	e008      	b.n	8007844 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007832:	f7fa fa67 	bl	8001d04 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d901      	bls.n	8007844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007844:	4b05      	ldr	r3, [pc, #20]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0f0      	beq.n	8007832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400
 8007860:	ffff0007 	.word	0xffff0007

08007864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007872:	4b53      	ldr	r3, [pc, #332]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d101      	bne.n	8007882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e099      	b.n	80079b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007882:	4b4f      	ldr	r3, [pc, #316]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a4e      	ldr	r2, [pc, #312]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788e:	f7fa fa39 	bl	8001d04 <HAL_GetTick>
 8007892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007894:	e008      	b.n	80078a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007896:	f7fa fa35 	bl	8001d04 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e086      	b.n	80079b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a8:	4b45      	ldr	r3, [pc, #276]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078b4:	4b42      	ldr	r3, [pc, #264]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	051b      	lsls	r3, r3, #20
 80078c2:	493f      	ldr	r1, [pc, #252]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	628b      	str	r3, [r1, #40]	; 0x28
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	025b      	lsls	r3, r3, #9
 80078da:	b29b      	uxth	r3, r3
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078f8:	4931      	ldr	r1, [pc, #196]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078fe:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	492d      	ldr	r1, [pc, #180]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007910:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	4928      	ldr	r1, [pc, #160]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800791e:	4313      	orrs	r3, r2
 8007920:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007922:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800792c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <RCCEx_PLL3_Config+0x160>)
 8007934:	4013      	ands	r3, r2
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	69d2      	ldr	r2, [r2, #28]
 800793a:	00d2      	lsls	r2, r2, #3
 800793c:	4920      	ldr	r1, [pc, #128]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800793e:	4313      	orrs	r3, r2
 8007940:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007942:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007954:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4a19      	ldr	r2, [pc, #100]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800795a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007960:	e00f      	b.n	8007982 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d106      	bne.n	8007976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007968:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	4a14      	ldr	r2, [pc, #80]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800796e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007974:	e005      	b.n	8007982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007976:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a11      	ldr	r2, [pc, #68]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800797c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007980:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a0e      	ldr	r2, [pc, #56]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798e:	f7fa f9b9 	bl	8001d04 <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007994:	e008      	b.n	80079a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007996:	f7fa f9b5 	bl	8001d04 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e006      	b.n	80079b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0f0      	beq.n	8007996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	58024400 	.word	0x58024400
 80079c4:	ffff0007 	.word	0xffff0007

080079c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0eb      	b.n	8007bb6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a75      	ldr	r2, [pc, #468]	; (8007bc0 <HAL_SPI_Init+0x1f8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00f      	beq.n	8007a0e <HAL_SPI_Init+0x46>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a74      	ldr	r2, [pc, #464]	; (8007bc4 <HAL_SPI_Init+0x1fc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00a      	beq.n	8007a0e <HAL_SPI_Init+0x46>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a72      	ldr	r2, [pc, #456]	; (8007bc8 <HAL_SPI_Init+0x200>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d005      	beq.n	8007a0e <HAL_SPI_Init+0x46>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b0f      	cmp	r3, #15
 8007a08:	d901      	bls.n	8007a0e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e0d3      	b.n	8007bb6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fb94 	bl	800813c <SPI_GetPacketSize>
 8007a14:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a69      	ldr	r2, [pc, #420]	; (8007bc0 <HAL_SPI_Init+0x1f8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00c      	beq.n	8007a3a <HAL_SPI_Init+0x72>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a67      	ldr	r2, [pc, #412]	; (8007bc4 <HAL_SPI_Init+0x1fc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <HAL_SPI_Init+0x72>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a66      	ldr	r2, [pc, #408]	; (8007bc8 <HAL_SPI_Init+0x200>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d002      	beq.n	8007a3a <HAL_SPI_Init+0x72>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d811      	bhi.n	8007a5e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a3e:	4a60      	ldr	r2, [pc, #384]	; (8007bc0 <HAL_SPI_Init+0x1f8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a5e      	ldr	r2, [pc, #376]	; (8007bc4 <HAL_SPI_Init+0x1fc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_SPI_Init+0x90>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a5d      	ldr	r2, [pc, #372]	; (8007bc8 <HAL_SPI_Init+0x200>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d104      	bne.n	8007a62 <HAL_SPI_Init+0x9a>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d901      	bls.n	8007a62 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e0a9      	b.n	8007bb6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7f9 fafc 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a9c:	d119      	bne.n	8007ad2 <HAL_SPI_Init+0x10a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa6:	d103      	bne.n	8007ab0 <HAL_SPI_Init+0xe8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d008      	beq.n	8007ac2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac0:	d107      	bne.n	8007ad2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	431a      	orrs	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae4:	ea42 0103 	orr.w	r1, r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	ea42 0103 	orr.w	r1, r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d113      	bne.n	8007b72 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40013000 	.word	0x40013000
 8007bc4:	40003800 	.word	0x40003800
 8007bc8:	40003c00 	.word	0x40003c00

08007bcc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007be4:	6a3a      	ldr	r2, [r7, #32]
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bfe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3330      	adds	r3, #48	; 0x30
 8007c06:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d113      	bne.n	8007c3a <HAL_SPI_IRQHandler+0x6e>
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10e      	bne.n	8007c3a <HAL_SPI_IRQHandler+0x6e>
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f003 0304 	and.w	r3, r3, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d009      	beq.n	8007c3a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
    handled = 1UL;
 8007c36:	2301      	movs	r3, #1
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10f      	bne.n	8007c64 <HAL_SPI_IRQHandler+0x98>
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_SPI_IRQHandler+0x98>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
    handled = 1UL;
 8007c60:	2301      	movs	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10f      	bne.n	8007c8e <HAL_SPI_IRQHandler+0xc2>
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <HAL_SPI_IRQHandler+0xc2>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
    handled = 1UL;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 816f 	bne.w	8007f74 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80a0 	beq.w	8007de2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0208 	orr.w	r2, r2, #8
 8007cb0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0210 	orr.w	r2, r2, #16
 8007cc0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0208 	bic.w	r2, r2, #8
 8007ce0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00f      	beq.n	8007d0c <HAL_SPI_IRQHandler+0x140>
 8007cec:	7cfb      	ldrb	r3, [r7, #19]
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d004      	beq.n	8007cfc <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <HAL_SPI_IRQHandler+0x140>
 8007cfc:	7cfb      	ldrb	r3, [r7, #19]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d059      	beq.n	8007db6 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d154      	bne.n	8007db6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d13d      	bne.n	8007d96 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007d1a:	e036      	b.n	8007d8a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b0f      	cmp	r3, #15
 8007d22:	d90b      	bls.n	8007d3c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d2e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d34:	1d1a      	adds	r2, r3, #4
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	665a      	str	r2, [r3, #100]	; 0x64
 8007d3a:	e01d      	b.n	8007d78 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b07      	cmp	r3, #7
 8007d42:	d90b      	bls.n	8007d5c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	8812      	ldrh	r2, [r2, #0]
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d54:	1c9a      	adds	r2, r3, #2
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	665a      	str	r2, [r3, #100]	; 0x64
 8007d5a:	e00d      	b.n	8007d78 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d68:	7812      	ldrb	r2, [r2, #0]
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1c2      	bne.n	8007d1c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f930 	bl	8007ffc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7f9 f91e 	bl	8000ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007db4:	e0e3      	b.n	8007f7e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007db6:	7cfb      	ldrb	r3, [r7, #19]
 8007db8:	2b05      	cmp	r3, #5
 8007dba:	d103      	bne.n	8007dc4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8f9 	bl	8007fb4 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007dc2:	e0d9      	b.n	8007f78 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007dc4:	7cfb      	ldrb	r3, [r7, #19]
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d103      	bne.n	8007dd2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f8e8 	bl	8007fa0 <HAL_SPI_RxCpltCallback>
    return;
 8007dd0:	e0d2      	b.n	8007f78 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007dd2:	7cfb      	ldrb	r3, [r7, #19]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	f040 80cf 	bne.w	8007f78 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f8d6 	bl	8007f8c <HAL_SPI_TxCpltCallback>
    return;
 8007de0:	e0ca      	b.n	8007f78 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00d      	beq.n	8007e08 <HAL_SPI_IRQHandler+0x23c>
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e04:	619a      	str	r2, [r3, #24]

    return;
 8007e06:	e0ba      	b.n	8007f7e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80b5 	beq.w	8007f7e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00f      	beq.n	8007e3e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e24:	f043 0204 	orr.w	r2, r3, #4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e3c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00f      	beq.n	8007e68 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4e:	f043 0201 	orr.w	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e66:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00f      	beq.n	8007e92 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e78:	f043 0208 	orr.w	r2, r3, #8
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e90:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00f      	beq.n	8007ebc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0220 	orr.w	r2, r2, #32
 8007eba:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d05a      	beq.n	8007f7c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0201 	bic.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6919      	ldr	r1, [r3, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <HAL_SPI_IRQHandler+0x3b8>)
 8007ee2:	400b      	ands	r3, r1
 8007ee4:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007eec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ef0:	d138      	bne.n	8007f64 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f00:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d013      	beq.n	8007f32 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	; (8007f88 <HAL_SPI_IRQHandler+0x3bc>)
 8007f10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fb fa96 	bl	8003448 <HAL_DMA_Abort_IT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d020      	beq.n	8007f7c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f3e:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <HAL_SPI_IRQHandler+0x3bc>)
 8007f40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fb fa7e 	bl	8003448 <HAL_DMA_Abort_IT>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d014      	beq.n	8007f7c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f62:	e00b      	b.n	8007f7c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7f9 f83f 	bl	8000ff0 <HAL_SPI_ErrorCallback>
    return;
 8007f72:	e003      	b.n	8007f7c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007f74:	bf00      	nop
 8007f76:	e002      	b.n	8007f7e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007f78:	bf00      	nop
 8007f7a:	e000      	b.n	8007f7e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007f7c:	bf00      	nop
  }
}
 8007f7e:	3728      	adds	r7, #40	; 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	fffffc94 	.word	0xfffffc94
 8007f88:	08007fc9 	.word	0x08007fc9

08007f8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7f8 fffe 	bl	8000ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0208 	orr.w	r2, r2, #8
 800801a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0210 	orr.w	r2, r2, #16
 800802a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0201 	bic.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6919      	ldr	r1, [r3, #16]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4b3c      	ldr	r3, [pc, #240]	; (8008138 <SPI_CloseTransfer+0x13c>)
 8008048:	400b      	ands	r3, r1
 800804a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800805a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b04      	cmp	r3, #4
 8008066:	d014      	beq.n	8008092 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00f      	beq.n	8008092 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008078:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0220 	orr.w	r2, r2, #32
 8008090:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b03      	cmp	r3, #3
 800809c:	d014      	beq.n	80080c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00f      	beq.n	80080c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699a      	ldr	r2, [r3, #24]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00f      	beq.n	80080f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d8:	f043 0201 	orr.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00f      	beq.n	800811c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008102:	f043 0208 	orr.w	r2, r3, #8
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800811a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	fffffc90 	.word	0xfffffc90

0800813c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3307      	adds	r3, #7
 800815a:	08db      	lsrs	r3, r3, #3
 800815c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	fb02 f303 	mul.w	r3, r2, r3
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e042      	b.n	800820a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7f9 f91c 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2224      	movs	r2, #36	; 0x24
 80081a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0201 	bic.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fb87 	bl	80088c8 <UART_SetConfig>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e022      	b.n	800820a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f8db 	bl	8009388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0201 	orr.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f962 	bl	80094cc <UART_CheckIdleState>
 8008208:	4603      	mov	r3, r0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008228:	2b20      	cmp	r3, #32
 800822a:	d168      	bne.n	80082fe <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <HAL_UART_Transmit_DMA+0x24>
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e061      	b.n	8008300 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_UART_Transmit_DMA+0x36>
 8008246:	2302      	movs	r3, #2
 8008248:	e05a      	b.n	8008300 <HAL_UART_Transmit_DMA+0xec>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	88fa      	ldrh	r2, [r7, #6]
 800825c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	88fa      	ldrh	r2, [r7, #6]
 8008264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2221      	movs	r2, #33	; 0x21
 8008274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800827c:	2b00      	cmp	r3, #0
 800827e:	d02c      	beq.n	80082da <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008284:	4a20      	ldr	r2, [pc, #128]	; (8008308 <HAL_UART_Transmit_DMA+0xf4>)
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800828c:	4a1f      	ldr	r2, [pc, #124]	; (800830c <HAL_UART_Transmit_DMA+0xf8>)
 800828e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008294:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <HAL_UART_Transmit_DMA+0xfc>)
 8008296:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800829c:	2200      	movs	r2, #0
 800829e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	4619      	mov	r1, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3328      	adds	r3, #40	; 0x28
 80082b0:	461a      	mov	r2, r3
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	f7fa fb40 	bl	8002938 <HAL_DMA_Start_IT>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00d      	beq.n	80082da <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2210      	movs	r2, #16
 80082c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e012      	b.n	8008300 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2240      	movs	r2, #64	; 0x40
 80082e0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082f8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e000      	b.n	8008300 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80082fe:	2302      	movs	r3, #2
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	08009705 	.word	0x08009705
 800830c:	08009755 	.word	0x08009755
 8008310:	08009771 	.word	0x08009771

08008314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	f640 030f 	movw	r3, #2063	; 0x80f
 800833a:	4013      	ands	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d118      	bne.n	8008376 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d013      	beq.n	8008376 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 8282 	beq.w	8008870 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
      }
      return;
 8008374:	e27c      	b.n	8008870 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80ef 	beq.w	800855c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4b73      	ldr	r3, [pc, #460]	; (8008550 <HAL_UART_IRQHandler+0x23c>)
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	4b72      	ldr	r3, [pc, #456]	; (8008554 <HAL_UART_IRQHandler+0x240>)
 800838c:	4013      	ands	r3, r2
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 80e4 	beq.w	800855c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d010      	beq.n	80083c0 <HAL_UART_IRQHandler+0xac>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2201      	movs	r2, #1
 80083ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b6:	f043 0201 	orr.w	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d010      	beq.n	80083ec <HAL_UART_IRQHandler+0xd8>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2202      	movs	r2, #2
 80083da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e2:	f043 0204 	orr.w	r2, r3, #4
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d010      	beq.n	8008418 <HAL_UART_IRQHandler+0x104>
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2204      	movs	r2, #4
 8008406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800840e:	f043 0202 	orr.w	r2, r3, #2
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	f003 0308 	and.w	r3, r3, #8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d015      	beq.n	800844e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4b48      	ldr	r3, [pc, #288]	; (8008550 <HAL_UART_IRQHandler+0x23c>)
 8008430:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2208      	movs	r2, #8
 800843c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008444:	f043 0208 	orr.w	r2, r3, #8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008454:	2b00      	cmp	r3, #0
 8008456:	d011      	beq.n	800847c <HAL_UART_IRQHandler+0x168>
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00c      	beq.n	800847c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800846a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008472:	f043 0220 	orr.w	r2, r3, #32
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 81f6 	beq.w	8008874 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d011      	beq.n	80084b6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c8:	2b40      	cmp	r3, #64	; 0x40
 80084ca:	d004      	beq.n	80084d6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d031      	beq.n	800853a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 f8e2 	bl	80096a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d123      	bne.n	8008532 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d013      	beq.n	800852a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008506:	4a14      	ldr	r2, [pc, #80]	; (8008558 <HAL_UART_IRQHandler+0x244>)
 8008508:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850e:	4618      	mov	r0, r3
 8008510:	f7fa ff9a 	bl	8003448 <HAL_DMA_Abort_IT>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d017      	beq.n	800854a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008528:	e00f      	b.n	800854a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7f8 fd70 	bl	8001010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	e00b      	b.n	800854a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7f8 fd6c 	bl	8001010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008538:	e007      	b.n	800854a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7f8 fd68 	bl	8001010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008548:	e194      	b.n	8008874 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854a:	bf00      	nop
    return;
 800854c:	e192      	b.n	8008874 <HAL_UART_IRQHandler+0x560>
 800854e:	bf00      	nop
 8008550:	10000001 	.word	0x10000001
 8008554:	04000120 	.word	0x04000120
 8008558:	080097f1 	.word	0x080097f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008560:	2b01      	cmp	r3, #1
 8008562:	f040 810f 	bne.w	8008784 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8109 	beq.w	8008784 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8103 	beq.w	8008784 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2210      	movs	r2, #16
 8008584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008590:	2b40      	cmp	r3, #64	; 0x40
 8008592:	f040 80bb 	bne.w	800870c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a96      	ldr	r2, [pc, #600]	; (80087f8 <HAL_UART_IRQHandler+0x4e4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d059      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a94      	ldr	r2, [pc, #592]	; (80087fc <HAL_UART_IRQHandler+0x4e8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d053      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a92      	ldr	r2, [pc, #584]	; (8008800 <HAL_UART_IRQHandler+0x4ec>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d04d      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a90      	ldr	r2, [pc, #576]	; (8008804 <HAL_UART_IRQHandler+0x4f0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d047      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a8e      	ldr	r2, [pc, #568]	; (8008808 <HAL_UART_IRQHandler+0x4f4>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d041      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a8c      	ldr	r2, [pc, #560]	; (800880c <HAL_UART_IRQHandler+0x4f8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d03b      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a8a      	ldr	r2, [pc, #552]	; (8008810 <HAL_UART_IRQHandler+0x4fc>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d035      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a88      	ldr	r2, [pc, #544]	; (8008814 <HAL_UART_IRQHandler+0x500>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d02f      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a86      	ldr	r2, [pc, #536]	; (8008818 <HAL_UART_IRQHandler+0x504>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d029      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a84      	ldr	r2, [pc, #528]	; (800881c <HAL_UART_IRQHandler+0x508>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d023      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a82      	ldr	r2, [pc, #520]	; (8008820 <HAL_UART_IRQHandler+0x50c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01d      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a80      	ldr	r2, [pc, #512]	; (8008824 <HAL_UART_IRQHandler+0x510>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d017      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a7e      	ldr	r2, [pc, #504]	; (8008828 <HAL_UART_IRQHandler+0x514>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d011      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7c      	ldr	r2, [pc, #496]	; (800882c <HAL_UART_IRQHandler+0x518>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a7a      	ldr	r2, [pc, #488]	; (8008830 <HAL_UART_IRQHandler+0x51c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d005      	beq.n	8008656 <HAL_UART_IRQHandler+0x342>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a78      	ldr	r2, [pc, #480]	; (8008834 <HAL_UART_IRQHandler+0x520>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d105      	bne.n	8008662 <HAL_UART_IRQHandler+0x34e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b29b      	uxth	r3, r3
 8008660:	e004      	b.n	800866c <HAL_UART_IRQHandler+0x358>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	b29b      	uxth	r3, r3
 800866c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800866e:	893b      	ldrh	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8101 	beq.w	8008878 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800867c:	893a      	ldrh	r2, [r7, #8]
 800867e:	429a      	cmp	r2, r3
 8008680:	f080 80fa 	bcs.w	8008878 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	893a      	ldrh	r2, [r7, #8]
 8008688:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008696:	d02b      	beq.n	80086f0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086a6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086c6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0210 	bic.w	r2, r2, #16
 80086e4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fa fb8e 	bl	8002e0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f8d3 	bl	80088b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800870a:	e0b5      	b.n	8008878 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008718:	b29b      	uxth	r3, r3
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80a8 	beq.w	800887c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800872c:	897b      	ldrh	r3, [r7, #10]
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 80a4 	beq.w	800887c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008742:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6899      	ldr	r1, [r3, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <HAL_UART_IRQHandler+0x524>)
 8008750:	400b      	ands	r3, r1
 8008752:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2220      	movs	r2, #32
 8008758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0210 	bic.w	r2, r2, #16
 8008776:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008778:	897b      	ldrh	r3, [r7, #10]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f897 	bl	80088b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008782:	e07b      	b.n	800887c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <HAL_UART_IRQHandler+0x496>
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d008      	beq.n	80087aa <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 f854 	bl	8009850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087a8:	e06b      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d012      	beq.n	80087da <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d057      	beq.n	8008880 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
    }
    return;
 80087d8:	e052      	b.n	8008880 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02b      	beq.n	800883c <HAL_UART_IRQHandler+0x528>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d026      	beq.n	800883c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f814 	bl	800981c <UART_EndTransmit_IT>
    return;
 80087f4:	e045      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
 80087f6:	bf00      	nop
 80087f8:	40020010 	.word	0x40020010
 80087fc:	40020028 	.word	0x40020028
 8008800:	40020040 	.word	0x40020040
 8008804:	40020058 	.word	0x40020058
 8008808:	40020070 	.word	0x40020070
 800880c:	40020088 	.word	0x40020088
 8008810:	400200a0 	.word	0x400200a0
 8008814:	400200b8 	.word	0x400200b8
 8008818:	40020410 	.word	0x40020410
 800881c:	40020428 	.word	0x40020428
 8008820:	40020440 	.word	0x40020440
 8008824:	40020458 	.word	0x40020458
 8008828:	40020470 	.word	0x40020470
 800882c:	40020488 	.word	0x40020488
 8008830:	400204a0 	.word	0x400204a0
 8008834:	400204b8 	.word	0x400204b8
 8008838:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <HAL_UART_IRQHandler+0x544>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f811 	bl	8009878 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008856:	e014      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00f      	beq.n	8008882 <HAL_UART_IRQHandler+0x56e>
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	da0c      	bge.n	8008882 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fffb 	bl	8009864 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800886e:	e008      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
      return;
 8008870:	bf00      	nop
 8008872:	e006      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
    return;
 8008874:	bf00      	nop
 8008876:	e004      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
      return;
 8008878:	bf00      	nop
 800887a:	e002      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
      return;
 800887c:	bf00      	nop
 800887e:	e000      	b.n	8008882 <HAL_UART_IRQHandler+0x56e>
    return;
 8008880:	bf00      	nop
  }
}
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c8:	b5b0      	push	{r4, r5, r7, lr}
 80088ca:	b08e      	sub	sp, #56	; 0x38
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	4bbf      	ldr	r3, [pc, #764]	; (8008bf4 <UART_SetConfig+0x32c>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088fe:	430b      	orrs	r3, r1
 8008900:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4ab5      	ldr	r2, [pc, #724]	; (8008bf8 <UART_SetConfig+0x330>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d004      	beq.n	8008932 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800892e:	4313      	orrs	r3, r2
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	4bb0      	ldr	r3, [pc, #704]	; (8008bfc <UART_SetConfig+0x334>)
 800893a:	4013      	ands	r3, r2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008942:	430b      	orrs	r3, r1
 8008944:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	f023 010f 	bic.w	r1, r3, #15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4aa7      	ldr	r2, [pc, #668]	; (8008c00 <UART_SetConfig+0x338>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d176      	bne.n	8008a54 <UART_SetConfig+0x18c>
 8008966:	4ba7      	ldr	r3, [pc, #668]	; (8008c04 <UART_SetConfig+0x33c>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800896e:	2b28      	cmp	r3, #40	; 0x28
 8008970:	d86c      	bhi.n	8008a4c <UART_SetConfig+0x184>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0xb0>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008a1d 	.word	0x08008a1d
 800897c:	08008a4d 	.word	0x08008a4d
 8008980:	08008a4d 	.word	0x08008a4d
 8008984:	08008a4d 	.word	0x08008a4d
 8008988:	08008a4d 	.word	0x08008a4d
 800898c:	08008a4d 	.word	0x08008a4d
 8008990:	08008a4d 	.word	0x08008a4d
 8008994:	08008a4d 	.word	0x08008a4d
 8008998:	08008a25 	.word	0x08008a25
 800899c:	08008a4d 	.word	0x08008a4d
 80089a0:	08008a4d 	.word	0x08008a4d
 80089a4:	08008a4d 	.word	0x08008a4d
 80089a8:	08008a4d 	.word	0x08008a4d
 80089ac:	08008a4d 	.word	0x08008a4d
 80089b0:	08008a4d 	.word	0x08008a4d
 80089b4:	08008a4d 	.word	0x08008a4d
 80089b8:	08008a2d 	.word	0x08008a2d
 80089bc:	08008a4d 	.word	0x08008a4d
 80089c0:	08008a4d 	.word	0x08008a4d
 80089c4:	08008a4d 	.word	0x08008a4d
 80089c8:	08008a4d 	.word	0x08008a4d
 80089cc:	08008a4d 	.word	0x08008a4d
 80089d0:	08008a4d 	.word	0x08008a4d
 80089d4:	08008a4d 	.word	0x08008a4d
 80089d8:	08008a35 	.word	0x08008a35
 80089dc:	08008a4d 	.word	0x08008a4d
 80089e0:	08008a4d 	.word	0x08008a4d
 80089e4:	08008a4d 	.word	0x08008a4d
 80089e8:	08008a4d 	.word	0x08008a4d
 80089ec:	08008a4d 	.word	0x08008a4d
 80089f0:	08008a4d 	.word	0x08008a4d
 80089f4:	08008a4d 	.word	0x08008a4d
 80089f8:	08008a3d 	.word	0x08008a3d
 80089fc:	08008a4d 	.word	0x08008a4d
 8008a00:	08008a4d 	.word	0x08008a4d
 8008a04:	08008a4d 	.word	0x08008a4d
 8008a08:	08008a4d 	.word	0x08008a4d
 8008a0c:	08008a4d 	.word	0x08008a4d
 8008a10:	08008a4d 	.word	0x08008a4d
 8008a14:	08008a4d 	.word	0x08008a4d
 8008a18:	08008a45 	.word	0x08008a45
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e222      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a24:	2304      	movs	r3, #4
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e21e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a2c:	2308      	movs	r3, #8
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e21a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a34:	2310      	movs	r3, #16
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e216      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a42:	e212      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a44:	2340      	movs	r3, #64	; 0x40
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e20e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a4c:	2380      	movs	r3, #128	; 0x80
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	e20a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a6b      	ldr	r2, [pc, #428]	; (8008c08 <UART_SetConfig+0x340>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d130      	bne.n	8008ac0 <UART_SetConfig+0x1f8>
 8008a5e:	4b69      	ldr	r3, [pc, #420]	; (8008c04 <UART_SetConfig+0x33c>)
 8008a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	d826      	bhi.n	8008ab8 <UART_SetConfig+0x1f0>
 8008a6a:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <UART_SetConfig+0x1a8>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008a89 	.word	0x08008a89
 8008a74:	08008a91 	.word	0x08008a91
 8008a78:	08008a99 	.word	0x08008a99
 8008a7c:	08008aa1 	.word	0x08008aa1
 8008a80:	08008aa9 	.word	0x08008aa9
 8008a84:	08008ab1 	.word	0x08008ab1
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a8e:	e1ec      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a90:	2304      	movs	r3, #4
 8008a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a96:	e1e8      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008a98:	2308      	movs	r3, #8
 8008a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9e:	e1e4      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa6:	e1e0      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aae:	e1dc      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e1d8      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008abe:	e1d4      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a51      	ldr	r2, [pc, #324]	; (8008c0c <UART_SetConfig+0x344>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d130      	bne.n	8008b2c <UART_SetConfig+0x264>
 8008aca:	4b4e      	ldr	r3, [pc, #312]	; (8008c04 <UART_SetConfig+0x33c>)
 8008acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d826      	bhi.n	8008b24 <UART_SetConfig+0x25c>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <UART_SetConfig+0x214>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008af5 	.word	0x08008af5
 8008ae0:	08008afd 	.word	0x08008afd
 8008ae4:	08008b05 	.word	0x08008b05
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b15 	.word	0x08008b15
 8008af0:	08008b1d 	.word	0x08008b1d
 8008af4:	2300      	movs	r3, #0
 8008af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008afa:	e1b6      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008afc:	2304      	movs	r3, #4
 8008afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b02:	e1b2      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b04:	2308      	movs	r3, #8
 8008b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0a:	e1ae      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b12:	e1aa      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b14:	2320      	movs	r3, #32
 8008b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1a:	e1a6      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b1c:	2340      	movs	r3, #64	; 0x40
 8008b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b22:	e1a2      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b24:	2380      	movs	r3, #128	; 0x80
 8008b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2a:	e19e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <UART_SetConfig+0x348>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d130      	bne.n	8008b98 <UART_SetConfig+0x2d0>
 8008b36:	4b33      	ldr	r3, [pc, #204]	; (8008c04 <UART_SetConfig+0x33c>)
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d826      	bhi.n	8008b90 <UART_SetConfig+0x2c8>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <UART_SetConfig+0x280>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b61 	.word	0x08008b61
 8008b4c:	08008b69 	.word	0x08008b69
 8008b50:	08008b71 	.word	0x08008b71
 8008b54:	08008b79 	.word	0x08008b79
 8008b58:	08008b81 	.word	0x08008b81
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	2300      	movs	r3, #0
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e180      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b68:	2304      	movs	r3, #4
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e17c      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b70:	2308      	movs	r3, #8
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	e178      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7e:	e174      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b80:	2320      	movs	r3, #32
 8008b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b86:	e170      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b88:	2340      	movs	r3, #64	; 0x40
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	e16c      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b90:	2380      	movs	r3, #128	; 0x80
 8008b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b96:	e168      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <UART_SetConfig+0x34c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d142      	bne.n	8008c28 <UART_SetConfig+0x360>
 8008ba2:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <UART_SetConfig+0x33c>)
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d838      	bhi.n	8008c20 <UART_SetConfig+0x358>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x2ec>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bcd 	.word	0x08008bcd
 8008bb8:	08008bd5 	.word	0x08008bd5
 8008bbc:	08008bdd 	.word	0x08008bdd
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008c19 	.word	0x08008c19
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd2:	e14a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e146      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be2:	e142      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008be4:	2310      	movs	r3, #16
 8008be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bea:	e13e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008bec:	2320      	movs	r3, #32
 8008bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf2:	e13a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008bf4:	cfff69f3 	.word	0xcfff69f3
 8008bf8:	58000c00 	.word	0x58000c00
 8008bfc:	11fff4ff 	.word	0x11fff4ff
 8008c00:	40011000 	.word	0x40011000
 8008c04:	58024400 	.word	0x58024400
 8008c08:	40004400 	.word	0x40004400
 8008c0c:	40004800 	.word	0x40004800
 8008c10:	40004c00 	.word	0x40004c00
 8008c14:	40005000 	.word	0x40005000
 8008c18:	2340      	movs	r3, #64	; 0x40
 8008c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1e:	e124      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008c20:	2380      	movs	r3, #128	; 0x80
 8008c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c26:	e120      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4acc      	ldr	r2, [pc, #816]	; (8008f60 <UART_SetConfig+0x698>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d176      	bne.n	8008d20 <UART_SetConfig+0x458>
 8008c32:	4bcc      	ldr	r3, [pc, #816]	; (8008f64 <UART_SetConfig+0x69c>)
 8008c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c3a:	2b28      	cmp	r3, #40	; 0x28
 8008c3c:	d86c      	bhi.n	8008d18 <UART_SetConfig+0x450>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <UART_SetConfig+0x37c>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008ce9 	.word	0x08008ce9
 8008c48:	08008d19 	.word	0x08008d19
 8008c4c:	08008d19 	.word	0x08008d19
 8008c50:	08008d19 	.word	0x08008d19
 8008c54:	08008d19 	.word	0x08008d19
 8008c58:	08008d19 	.word	0x08008d19
 8008c5c:	08008d19 	.word	0x08008d19
 8008c60:	08008d19 	.word	0x08008d19
 8008c64:	08008cf1 	.word	0x08008cf1
 8008c68:	08008d19 	.word	0x08008d19
 8008c6c:	08008d19 	.word	0x08008d19
 8008c70:	08008d19 	.word	0x08008d19
 8008c74:	08008d19 	.word	0x08008d19
 8008c78:	08008d19 	.word	0x08008d19
 8008c7c:	08008d19 	.word	0x08008d19
 8008c80:	08008d19 	.word	0x08008d19
 8008c84:	08008cf9 	.word	0x08008cf9
 8008c88:	08008d19 	.word	0x08008d19
 8008c8c:	08008d19 	.word	0x08008d19
 8008c90:	08008d19 	.word	0x08008d19
 8008c94:	08008d19 	.word	0x08008d19
 8008c98:	08008d19 	.word	0x08008d19
 8008c9c:	08008d19 	.word	0x08008d19
 8008ca0:	08008d19 	.word	0x08008d19
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d19 	.word	0x08008d19
 8008cac:	08008d19 	.word	0x08008d19
 8008cb0:	08008d19 	.word	0x08008d19
 8008cb4:	08008d19 	.word	0x08008d19
 8008cb8:	08008d19 	.word	0x08008d19
 8008cbc:	08008d19 	.word	0x08008d19
 8008cc0:	08008d19 	.word	0x08008d19
 8008cc4:	08008d09 	.word	0x08008d09
 8008cc8:	08008d19 	.word	0x08008d19
 8008ccc:	08008d19 	.word	0x08008d19
 8008cd0:	08008d19 	.word	0x08008d19
 8008cd4:	08008d19 	.word	0x08008d19
 8008cd8:	08008d19 	.word	0x08008d19
 8008cdc:	08008d19 	.word	0x08008d19
 8008ce0:	08008d19 	.word	0x08008d19
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	e0bc      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e0b8      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfe:	e0b4      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d00:	2310      	movs	r3, #16
 8008d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d06:	e0b0      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d08:	2320      	movs	r3, #32
 8008d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0e:	e0ac      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d16:	e0a8      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d18:	2380      	movs	r3, #128	; 0x80
 8008d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1e:	e0a4      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a90      	ldr	r2, [pc, #576]	; (8008f68 <UART_SetConfig+0x6a0>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d130      	bne.n	8008d8c <UART_SetConfig+0x4c4>
 8008d2a:	4b8e      	ldr	r3, [pc, #568]	; (8008f64 <UART_SetConfig+0x69c>)
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	d826      	bhi.n	8008d84 <UART_SetConfig+0x4bc>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <UART_SetConfig+0x474>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d55 	.word	0x08008d55
 8008d40:	08008d5d 	.word	0x08008d5d
 8008d44:	08008d65 	.word	0x08008d65
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5a:	e086      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d62:	e082      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d64:	2308      	movs	r3, #8
 8008d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6a:	e07e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d72:	e07a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d74:	2320      	movs	r3, #32
 8008d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7a:	e076      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d7c:	2340      	movs	r3, #64	; 0x40
 8008d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d82:	e072      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d84:	2380      	movs	r3, #128	; 0x80
 8008d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8a:	e06e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a76      	ldr	r2, [pc, #472]	; (8008f6c <UART_SetConfig+0x6a4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d130      	bne.n	8008df8 <UART_SetConfig+0x530>
 8008d96:	4b73      	ldr	r3, [pc, #460]	; (8008f64 <UART_SetConfig+0x69c>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	f003 0307 	and.w	r3, r3, #7
 8008d9e:	2b05      	cmp	r3, #5
 8008da0:	d826      	bhi.n	8008df0 <UART_SetConfig+0x528>
 8008da2:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <UART_SetConfig+0x4e0>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008dc9 	.word	0x08008dc9
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008de1 	.word	0x08008de1
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dc6:	e050      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dce:	e04c      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd6:	e048      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dde:	e044      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008de0:	2320      	movs	r3, #32
 8008de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de6:	e040      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dee:	e03c      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008df6:	e038      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a5c      	ldr	r2, [pc, #368]	; (8008f70 <UART_SetConfig+0x6a8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d130      	bne.n	8008e64 <UART_SetConfig+0x59c>
 8008e02:	4b58      	ldr	r3, [pc, #352]	; (8008f64 <UART_SetConfig+0x69c>)
 8008e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d826      	bhi.n	8008e5c <UART_SetConfig+0x594>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x54c>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	08008e3d 	.word	0x08008e3d
 8008e20:	08008e45 	.word	0x08008e45
 8008e24:	08008e4d 	.word	0x08008e4d
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e32:	e01a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3a:	e016      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e012      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4a:	e00e      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e4c:	2320      	movs	r3, #32
 8008e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e52:	e00a      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e54:	2340      	movs	r3, #64	; 0x40
 8008e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5a:	e006      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e5c:	2380      	movs	r3, #128	; 0x80
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e62:	e002      	b.n	8008e6a <UART_SetConfig+0x5a2>
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a40      	ldr	r2, [pc, #256]	; (8008f70 <UART_SetConfig+0x6a8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	f040 80ef 	bne.w	8009054 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	dc46      	bgt.n	8008f0c <UART_SetConfig+0x644>
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	f2c0 8081 	blt.w	8008f86 <UART_SetConfig+0x6be>
 8008e84:	3b02      	subs	r3, #2
 8008e86:	2b1e      	cmp	r3, #30
 8008e88:	d87d      	bhi.n	8008f86 <UART_SetConfig+0x6be>
 8008e8a:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <UART_SetConfig+0x5c8>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008f13 	.word	0x08008f13
 8008e94:	08008f87 	.word	0x08008f87
 8008e98:	08008f1b 	.word	0x08008f1b
 8008e9c:	08008f87 	.word	0x08008f87
 8008ea0:	08008f87 	.word	0x08008f87
 8008ea4:	08008f87 	.word	0x08008f87
 8008ea8:	08008f2b 	.word	0x08008f2b
 8008eac:	08008f87 	.word	0x08008f87
 8008eb0:	08008f87 	.word	0x08008f87
 8008eb4:	08008f87 	.word	0x08008f87
 8008eb8:	08008f87 	.word	0x08008f87
 8008ebc:	08008f87 	.word	0x08008f87
 8008ec0:	08008f87 	.word	0x08008f87
 8008ec4:	08008f87 	.word	0x08008f87
 8008ec8:	08008f3b 	.word	0x08008f3b
 8008ecc:	08008f87 	.word	0x08008f87
 8008ed0:	08008f87 	.word	0x08008f87
 8008ed4:	08008f87 	.word	0x08008f87
 8008ed8:	08008f87 	.word	0x08008f87
 8008edc:	08008f87 	.word	0x08008f87
 8008ee0:	08008f87 	.word	0x08008f87
 8008ee4:	08008f87 	.word	0x08008f87
 8008ee8:	08008f87 	.word	0x08008f87
 8008eec:	08008f87 	.word	0x08008f87
 8008ef0:	08008f87 	.word	0x08008f87
 8008ef4:	08008f87 	.word	0x08008f87
 8008ef8:	08008f87 	.word	0x08008f87
 8008efc:	08008f87 	.word	0x08008f87
 8008f00:	08008f87 	.word	0x08008f87
 8008f04:	08008f87 	.word	0x08008f87
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d036      	beq.n	8008f7e <UART_SetConfig+0x6b6>
 8008f10:	e039      	b.n	8008f86 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f12:	f7fe f937 	bl	8007184 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f18:	e03b      	b.n	8008f92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1a:	f107 0314 	add.w	r3, r7, #20
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe f946 	bl	80071b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f28:	e033      	b.n	8008f92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fa92 	bl	8007458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f38:	e02b      	b.n	8008f92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <UART_SetConfig+0x69c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f46:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <UART_SetConfig+0x69c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	08db      	lsrs	r3, r3, #3
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	4a08      	ldr	r2, [pc, #32]	; (8008f74 <UART_SetConfig+0x6ac>)
 8008f52:	fa22 f303 	lsr.w	r3, r2, r3
 8008f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f58:	e01b      	b.n	8008f92 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008f5a:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <UART_SetConfig+0x6ac>)
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f5e:	e018      	b.n	8008f92 <UART_SetConfig+0x6ca>
 8008f60:	40011400 	.word	0x40011400
 8008f64:	58024400 	.word	0x58024400
 8008f68:	40007800 	.word	0x40007800
 8008f6c:	40007c00 	.word	0x40007c00
 8008f70:	58000c00 	.word	0x58000c00
 8008f74:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f78:	4bc4      	ldr	r3, [pc, #784]	; (800928c <UART_SetConfig+0x9c4>)
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f7c:	e009      	b.n	8008f92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f84:	e005      	b.n	8008f92 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 81da 	beq.w	800934e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	4abc      	ldr	r2, [pc, #752]	; (8009290 <UART_SetConfig+0x9c8>)
 8008fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	4413      	add	r3, r2
 8008fb8:	6a3a      	ldr	r2, [r7, #32]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d305      	bcc.n	8008fca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fc4:	6a3a      	ldr	r2, [r7, #32]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d903      	bls.n	8008fd2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008fd0:	e1bd      	b.n	800934e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f04f 0100 	mov.w	r1, #0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	4aac      	ldr	r2, [pc, #688]	; (8009290 <UART_SetConfig+0x9c8>)
 8008fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	f04f 0300 	mov.w	r3, #0
 8008fea:	f7f7 f975 	bl	80002d8 <__aeabi_uldivmod>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	f04f 0300 	mov.w	r3, #0
 8008ffe:	020b      	lsls	r3, r1, #8
 8009000:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009004:	0202      	lsls	r2, r0, #8
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	6849      	ldr	r1, [r1, #4]
 800900a:	0849      	lsrs	r1, r1, #1
 800900c:	4608      	mov	r0, r1
 800900e:	f04f 0100 	mov.w	r1, #0
 8009012:	1814      	adds	r4, r2, r0
 8009014:	eb43 0501 	adc.w	r5, r3, r1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	461a      	mov	r2, r3
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 f957 	bl	80002d8 <__aeabi_uldivmod>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4613      	mov	r3, r2
 8009030:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009038:	d308      	bcc.n	800904c <UART_SetConfig+0x784>
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009040:	d204      	bcs.n	800904c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	e180      	b.n	800934e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009052:	e17c      	b.n	800934e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800905c:	f040 80bf 	bne.w	80091de <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009064:	2b20      	cmp	r3, #32
 8009066:	dc49      	bgt.n	80090fc <UART_SetConfig+0x834>
 8009068:	2b00      	cmp	r3, #0
 800906a:	db7c      	blt.n	8009166 <UART_SetConfig+0x89e>
 800906c:	2b20      	cmp	r3, #32
 800906e:	d87a      	bhi.n	8009166 <UART_SetConfig+0x89e>
 8009070:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <UART_SetConfig+0x7b0>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	08009103 	.word	0x08009103
 800907c:	0800910b 	.word	0x0800910b
 8009080:	08009167 	.word	0x08009167
 8009084:	08009167 	.word	0x08009167
 8009088:	08009113 	.word	0x08009113
 800908c:	08009167 	.word	0x08009167
 8009090:	08009167 	.word	0x08009167
 8009094:	08009167 	.word	0x08009167
 8009098:	08009123 	.word	0x08009123
 800909c:	08009167 	.word	0x08009167
 80090a0:	08009167 	.word	0x08009167
 80090a4:	08009167 	.word	0x08009167
 80090a8:	08009167 	.word	0x08009167
 80090ac:	08009167 	.word	0x08009167
 80090b0:	08009167 	.word	0x08009167
 80090b4:	08009167 	.word	0x08009167
 80090b8:	08009133 	.word	0x08009133
 80090bc:	08009167 	.word	0x08009167
 80090c0:	08009167 	.word	0x08009167
 80090c4:	08009167 	.word	0x08009167
 80090c8:	08009167 	.word	0x08009167
 80090cc:	08009167 	.word	0x08009167
 80090d0:	08009167 	.word	0x08009167
 80090d4:	08009167 	.word	0x08009167
 80090d8:	08009167 	.word	0x08009167
 80090dc:	08009167 	.word	0x08009167
 80090e0:	08009167 	.word	0x08009167
 80090e4:	08009167 	.word	0x08009167
 80090e8:	08009167 	.word	0x08009167
 80090ec:	08009167 	.word	0x08009167
 80090f0:	08009167 	.word	0x08009167
 80090f4:	08009167 	.word	0x08009167
 80090f8:	08009159 	.word	0x08009159
 80090fc:	2b40      	cmp	r3, #64	; 0x40
 80090fe:	d02e      	beq.n	800915e <UART_SetConfig+0x896>
 8009100:	e031      	b.n	8009166 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009102:	f7fd f8d3 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8009106:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009108:	e033      	b.n	8009172 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800910a:	f7fd f8e5 	bl	80062d8 <HAL_RCC_GetPCLK2Freq>
 800910e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009110:	e02f      	b.n	8009172 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009112:	f107 0314 	add.w	r3, r7, #20
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe f84a 	bl	80071b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009120:	e027      	b.n	8009172 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe f996 	bl	8007458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009130:	e01f      	b.n	8009172 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009132:	4b58      	ldr	r3, [pc, #352]	; (8009294 <UART_SetConfig+0x9cc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d009      	beq.n	8009152 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800913e:	4b55      	ldr	r3, [pc, #340]	; (8009294 <UART_SetConfig+0x9cc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	08db      	lsrs	r3, r3, #3
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	4a53      	ldr	r2, [pc, #332]	; (8009298 <UART_SetConfig+0x9d0>)
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009150:	e00f      	b.n	8009172 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009152:	4b51      	ldr	r3, [pc, #324]	; (8009298 <UART_SetConfig+0x9d0>)
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009156:	e00c      	b.n	8009172 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009158:	4b4c      	ldr	r3, [pc, #304]	; (800928c <UART_SetConfig+0x9c4>)
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800915c:	e009      	b.n	8009172 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800915e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009164:	e005      	b.n	8009172 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 80ea 	beq.w	800934e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	4a44      	ldr	r2, [pc, #272]	; (8009290 <UART_SetConfig+0x9c8>)
 8009180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009184:	461a      	mov	r2, r3
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	fbb3 f3f2 	udiv	r3, r3, r2
 800918c:	005a      	lsls	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	fbb2 f3f3 	udiv	r3, r2, r3
 800919e:	b29b      	uxth	r3, r3
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	2b0f      	cmp	r3, #15
 80091a6:	d916      	bls.n	80091d6 <UART_SetConfig+0x90e>
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ae:	d212      	bcs.n	80091d6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	f023 030f 	bic.w	r3, r3, #15
 80091b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	085b      	lsrs	r3, r3, #1
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091c8:	4313      	orrs	r3, r2
 80091ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091d2:	60da      	str	r2, [r3, #12]
 80091d4:	e0bb      	b.n	800934e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80091dc:	e0b7      	b.n	800934e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	dc4a      	bgt.n	800927c <UART_SetConfig+0x9b4>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f2c0 8086 	blt.w	80092f8 <UART_SetConfig+0xa30>
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	f200 8083 	bhi.w	80092f8 <UART_SetConfig+0xa30>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <UART_SetConfig+0x930>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009283 	.word	0x08009283
 80091fc:	0800929d 	.word	0x0800929d
 8009200:	080092f9 	.word	0x080092f9
 8009204:	080092f9 	.word	0x080092f9
 8009208:	080092a5 	.word	0x080092a5
 800920c:	080092f9 	.word	0x080092f9
 8009210:	080092f9 	.word	0x080092f9
 8009214:	080092f9 	.word	0x080092f9
 8009218:	080092b5 	.word	0x080092b5
 800921c:	080092f9 	.word	0x080092f9
 8009220:	080092f9 	.word	0x080092f9
 8009224:	080092f9 	.word	0x080092f9
 8009228:	080092f9 	.word	0x080092f9
 800922c:	080092f9 	.word	0x080092f9
 8009230:	080092f9 	.word	0x080092f9
 8009234:	080092f9 	.word	0x080092f9
 8009238:	080092c5 	.word	0x080092c5
 800923c:	080092f9 	.word	0x080092f9
 8009240:	080092f9 	.word	0x080092f9
 8009244:	080092f9 	.word	0x080092f9
 8009248:	080092f9 	.word	0x080092f9
 800924c:	080092f9 	.word	0x080092f9
 8009250:	080092f9 	.word	0x080092f9
 8009254:	080092f9 	.word	0x080092f9
 8009258:	080092f9 	.word	0x080092f9
 800925c:	080092f9 	.word	0x080092f9
 8009260:	080092f9 	.word	0x080092f9
 8009264:	080092f9 	.word	0x080092f9
 8009268:	080092f9 	.word	0x080092f9
 800926c:	080092f9 	.word	0x080092f9
 8009270:	080092f9 	.word	0x080092f9
 8009274:	080092f9 	.word	0x080092f9
 8009278:	080092eb 	.word	0x080092eb
 800927c:	2b40      	cmp	r3, #64	; 0x40
 800927e:	d037      	beq.n	80092f0 <UART_SetConfig+0xa28>
 8009280:	e03a      	b.n	80092f8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009282:	f7fd f813 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8009286:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009288:	e03c      	b.n	8009304 <UART_SetConfig+0xa3c>
 800928a:	bf00      	nop
 800928c:	003d0900 	.word	0x003d0900
 8009290:	08009b2c 	.word	0x08009b2c
 8009294:	58024400 	.word	0x58024400
 8009298:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800929c:	f7fd f81c 	bl	80062d8 <HAL_RCC_GetPCLK2Freq>
 80092a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80092a2:	e02f      	b.n	8009304 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a4:	f107 0314 	add.w	r3, r7, #20
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fd ff81 	bl	80071b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092b2:	e027      	b.n	8009304 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092b4:	f107 0308 	add.w	r3, r7, #8
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe f8cd 	bl	8007458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092c2:	e01f      	b.n	8009304 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c4:	4b2c      	ldr	r3, [pc, #176]	; (8009378 <UART_SetConfig+0xab0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092d0:	4b29      	ldr	r3, [pc, #164]	; (8009378 <UART_SetConfig+0xab0>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	08db      	lsrs	r3, r3, #3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	4a28      	ldr	r2, [pc, #160]	; (800937c <UART_SetConfig+0xab4>)
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092e2:	e00f      	b.n	8009304 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80092e4:	4b25      	ldr	r3, [pc, #148]	; (800937c <UART_SetConfig+0xab4>)
 80092e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092e8:	e00c      	b.n	8009304 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092ea:	4b25      	ldr	r3, [pc, #148]	; (8009380 <UART_SetConfig+0xab8>)
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092ee:	e009      	b.n	8009304 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092f6:	e005      	b.n	8009304 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009302:	bf00      	nop
    }

    if (pclk != 0U)
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d021      	beq.n	800934e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <UART_SetConfig+0xabc>)
 8009310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009314:	461a      	mov	r2, r3
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	fbb3 f2f2 	udiv	r2, r3, r2
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	085b      	lsrs	r3, r3, #1
 8009322:	441a      	add	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	fbb2 f3f3 	udiv	r3, r2, r3
 800932c:	b29b      	uxth	r3, r3
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	2b0f      	cmp	r3, #15
 8009334:	d908      	bls.n	8009348 <UART_SetConfig+0xa80>
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800933c:	d204      	bcs.n	8009348 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009344:	60da      	str	r2, [r3, #12]
 8009346:	e002      	b.n	800934e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800936a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800936e:	4618      	mov	r0, r3
 8009370:	3738      	adds	r7, #56	; 0x38
 8009372:	46bd      	mov	sp, r7
 8009374:	bdb0      	pop	{r4, r5, r7, pc}
 8009376:	bf00      	nop
 8009378:	58024400 	.word	0x58024400
 800937c:	03d09000 	.word	0x03d09000
 8009380:	003d0900 	.word	0x003d0900
 8009384:	08009b2c 	.word	0x08009b2c

08009388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00a      	beq.n	80093f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941c:	f003 0310 	and.w	r3, r3, #16
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01a      	beq.n	800949e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009486:	d10a      	bne.n	800949e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	605a      	str	r2, [r3, #4]
  }
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094dc:	f7f8 fc12 	bl	8001d04 <HAL_GetTick>
 80094e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d10e      	bne.n	800950e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f82f 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e025      	b.n	800955a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b04      	cmp	r3, #4
 800951a:	d10e      	bne.n	800953a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800951c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f819 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e00f      	b.n	800955a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	603b      	str	r3, [r7, #0]
 800956e:	4613      	mov	r3, r2
 8009570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009572:	e062      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d05e      	beq.n	800963a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800957c:	f7f8 fbc2 	bl	8001d04 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	429a      	cmp	r2, r3
 800958a:	d302      	bcc.n	8009592 <UART_WaitOnFlagUntilTimeout+0x30>
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d11d      	bne.n	80095ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0201 	bic.w	r2, r2, #1
 80095b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e045      	b.n	800965a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d02e      	beq.n	800963a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ea:	d126      	bne.n	800963a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009604:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0201 	bic.w	r2, r2, #1
 8009614:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e00f      	b.n	800965a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69da      	ldr	r2, [r3, #28]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4013      	ands	r3, r2
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	429a      	cmp	r2, r3
 8009648:	bf0c      	ite	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	2300      	movne	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	429a      	cmp	r2, r3
 8009656:	d08d      	beq.n	8009574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009678:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009688:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6899      	ldr	r1, [r3, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <UART_EndRxTransfer+0x60>)
 80096c4:	400b      	ands	r3, r1
 80096c6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d107      	bne.n	80096e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0210 	bic.w	r2, r2, #16
 80096de:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	effffffe 	.word	0xeffffffe

08009704 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971a:	d014      	beq.n	8009746 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689a      	ldr	r2, [r3, #8]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009732:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009742:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009744:	e002      	b.n	800974c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff f89e 	bl	8008888 <HAL_UART_TxCpltCallback>
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff f89a 	bl	800889c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009784:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009798:	2b80      	cmp	r3, #128	; 0x80
 800979a:	d109      	bne.n	80097b0 <UART_DMAError+0x40>
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	2b21      	cmp	r3, #33	; 0x21
 80097a0:	d106      	bne.n	80097b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80097aa:	6978      	ldr	r0, [r7, #20]
 80097ac:	f7ff ff59 	bl	8009662 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ba:	2b40      	cmp	r3, #64	; 0x40
 80097bc:	d109      	bne.n	80097d2 <UART_DMAError+0x62>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b22      	cmp	r3, #34	; 0x22
 80097c2:	d106      	bne.n	80097d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80097cc:	6978      	ldr	r0, [r7, #20]
 80097ce:	f7ff ff67 	bl	80096a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d8:	f043 0210 	orr.w	r2, r3, #16
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097e2:	6978      	ldr	r0, [r7, #20]
 80097e4:	f7f7 fc14 	bl	8001010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e8:	bf00      	nop
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7f7 fbfe 	bl	8001010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009814:	bf00      	nop
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009832:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff f820 	bl	8008888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_UARTEx_EnableFifoMode+0x16>
 800989e:	2302      	movs	r3, #2
 80098a0:	e02b      	b.n	80098fa <HAL_UARTEx_EnableFifoMode+0x6e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2224      	movs	r2, #36	; 0x24
 80098ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80098d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f88a 	bl	80099fc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009916:	2302      	movs	r3, #2
 8009918:	e02d      	b.n	8009976 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2224      	movs	r2, #36	; 0x24
 8009926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0201 	bic.w	r2, r2, #1
 8009940:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f850 	bl	80099fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800998e:	2b01      	cmp	r3, #1
 8009990:	d101      	bne.n	8009996 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009992:	2302      	movs	r3, #2
 8009994:	e02d      	b.n	80099f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2224      	movs	r2, #36	; 0x24
 80099a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0201 	bic.w	r2, r2, #1
 80099bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f812 	bl	80099fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d108      	bne.n	8009a1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a1c:	e031      	b.n	8009a82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a1e:	2310      	movs	r3, #16
 8009a20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a22:	2310      	movs	r3, #16
 8009a24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	0e5b      	lsrs	r3, r3, #25
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	0f5b      	lsrs	r3, r3, #29
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f003 0307 	and.w	r3, r3, #7
 8009a44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	7b3a      	ldrb	r2, [r7, #12]
 8009a4a:	4911      	ldr	r1, [pc, #68]	; (8009a90 <UARTEx_SetNbDataToProcess+0x94>)
 8009a4c:	5c8a      	ldrb	r2, [r1, r2]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a52:	7b3a      	ldrb	r2, [r7, #12]
 8009a54:	490f      	ldr	r1, [pc, #60]	; (8009a94 <UARTEx_SetNbDataToProcess+0x98>)
 8009a56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	7b7a      	ldrb	r2, [r7, #13]
 8009a68:	4909      	ldr	r1, [pc, #36]	; (8009a90 <UARTEx_SetNbDataToProcess+0x94>)
 8009a6a:	5c8a      	ldrb	r2, [r1, r2]
 8009a6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a70:	7b7a      	ldrb	r2, [r7, #13]
 8009a72:	4908      	ldr	r1, [pc, #32]	; (8009a94 <UARTEx_SetNbDataToProcess+0x98>)
 8009a74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a76:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	08009b44 	.word	0x08009b44
 8009a94:	08009b4c 	.word	0x08009b4c

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ad0 <__libc_init_array+0x38>)
 8009a9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ad4 <__libc_init_array+0x3c>)
 8009a9e:	1b64      	subs	r4, r4, r5
 8009aa0:	10a4      	asrs	r4, r4, #2
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	4d0b      	ldr	r5, [pc, #44]	; (8009ad8 <__libc_init_array+0x40>)
 8009aaa:	4c0c      	ldr	r4, [pc, #48]	; (8009adc <__libc_init_array+0x44>)
 8009aac:	f000 f820 	bl	8009af0 <_init>
 8009ab0:	1b64      	subs	r4, r4, r5
 8009ab2:	10a4      	asrs	r4, r4, #2
 8009ab4:	2600      	movs	r6, #0
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	08009b5c 	.word	0x08009b5c
 8009ad4:	08009b5c 	.word	0x08009b5c
 8009ad8:	08009b5c 	.word	0x08009b5c
 8009adc:	08009b60 	.word	0x08009b60

08009ae0 <memset>:
 8009ae0:	4402      	add	r2, r0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <memset+0xa>
 8009ae8:	4770      	bx	lr
 8009aea:	f803 1b01 	strb.w	r1, [r3], #1
 8009aee:	e7f9      	b.n	8009ae4 <memset+0x4>

08009af0 <_init>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	bf00      	nop
 8009af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af6:	bc08      	pop	{r3}
 8009af8:	469e      	mov	lr, r3
 8009afa:	4770      	bx	lr

08009afc <_fini>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr
