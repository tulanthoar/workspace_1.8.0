
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009910  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009bfc  08009bfc  00019bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cec  24000040  08009c2c  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24001d2c  08009c2c  00021d2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5fd  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fc5  00000000  00000000  0003d653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  000413e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374ff  00000000  00000000  000420e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012f9c  00000000  00000000  000795df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f404  00000000  00000000  0008c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001eb97f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038dc  00000000  00000000  001eb9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009b90 	.word	0x08009b90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009b90 	.word	0x08009b90

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
//	length of the recieve buffer array
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005da:	817b      	strh	r3, [r7, #10]
//	length of a half transfer of recieve buffer
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
//	length of transmit buffer
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
//	set the transmit buffer to a known value
	for (int i = 0; i < txCount; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e00f      	b.n	800060e <main+0x3e>
		aTxBuffer[i] = i % 16384;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a85      	ldr	r2, [pc, #532]	; (8000818 <main+0x248>)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < txCount; ++i) {
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	69fa      	ldr	r2, [r7, #28]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b81      	ldr	r3, [pc, #516]	; (800081c <main+0x24c>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b7b      	ldr	r3, [pc, #492]	; (800081c <main+0x24c>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b76      	ldr	r3, [pc, #472]	; (800081c <main+0x24c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a75      	ldr	r2, [pc, #468]	; (800081c <main+0x24c>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
	//  SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f001 fb1c 	bl	8001c98 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f9c2 	bl	80009e8 <SystemClock_Config>

//    initialize GPIO
	MX_GPIO_Init();
 8000664:	f000 fbea 	bl	8000e3c <MX_GPIO_Init>

//	turn off all the PCB LEDs
	GPIOE->BSRR = GPIO_PIN_0 | GPIO_PIN_13 | GPIO_PIN_15;
 8000668:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <main+0x250>)
 800066a:	f24a 0201 	movw	r2, #40961	; 0xa001
 800066e:	619a      	str	r2, [r3, #24]
	GPIOF->BSRR = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000670:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <main+0x254>)
 8000672:	f44f 4238 	mov.w	r2, #47104	; 0xb800
 8000676:	619a      	str	r2, [r3, #24]
	GPIOG->BSRR = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_14;
 8000678:	4b6b      	ldr	r3, [pc, #428]	; (8000828 <main+0x258>)
 800067a:	f244 1270 	movw	r2, #16752	; 0x4170
 800067e:	619a      	str	r2, [r3, #24]
//	initialize the compensation cell to improve slew rate
	HAL_EnableCompensationCell();
 8000680:	f001 fbdc 	bl	8001e3c <HAL_EnableCompensationCell>
//	initialize the DMA, must be done before other peripherals
	MX_DMA_Init();
 8000684:	f000 fb92 	bl	8000dac <MX_DMA_Init>
//	initialize UART1, going to the ft232 interface
	MX_USART1_UART_Init();
 8000688:	f000 fae4 	bl	8000c54 <MX_USART1_UART_Init>
//	initialize URT3, going to the STLINK interface
	MX_USART3_UART_Init();
 800068c:	f000 fb38 	bl	8000d00 <MX_USART3_UART_Init>

//	initialize SPI1 interface, going to the breadboard converter
	MX_SPI1_Init();
 8000690:	f000 fa30 	bl	8000af4 <MX_SPI1_Init>
//	initialize the SPI2 interface, going to the pcb converter
    MX_SPI2_Init();
 8000694:	f000 fa86 	bl	8000ba4 <MX_SPI2_Init>

//  stall until the user button is pressed
	while (UserButtonStatus == 0) {
 8000698:	e005      	b.n	80006a6 <main+0xd6>
		BSP_LED_Toggle(LED1);
 800069a:	2000      	movs	r0, #0
 800069c:	f001 f998 	bl	80019d0 <BSP_LED_Toggle>
		HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f001 fb8b 	bl	8001dbc <HAL_Delay>
	while (UserButtonStatus == 0) {
 80006a6:	4b61      	ldr	r3, [pc, #388]	; (800082c <main+0x25c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f5      	beq.n	800069a <main+0xca>
	}
//	reset the user button status
	UserButtonStatus = 0;
 80006ae:	4b5f      	ldr	r3, [pc, #380]	; (800082c <main+0x25c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
//	reset LEDS
	BSP_LED_Off(LED1);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f001 f961 	bl	800197c <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 f95e 	bl	800197c <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f001 f95b 	bl	800197c <BSP_LED_Off>

	/* Configure communication direction : 1Line */
	SPI_1LINE_RX(&hspi1);
 80006c6:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <main+0x260>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b58      	ldr	r3, [pc, #352]	; (8000830 <main+0x260>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006d4:	601a      	str	r2, [r3, #0]
	SPI_1LINE_RX(&hspi2);
 80006d6:	4b57      	ldr	r3, [pc, #348]	; (8000834 <main+0x264>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <main+0x264>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006e4:	601a      	str	r2, [r3, #0]

//	configure the half transfer callback function to update the wTransferState value
	hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006e6:	4b52      	ldr	r3, [pc, #328]	; (8000830 <main+0x260>)
 80006e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006ea:	4a53      	ldr	r2, [pc, #332]	; (8000838 <main+0x268>)
 80006ec:	641a      	str	r2, [r3, #64]	; 0x40
	hspi2.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <main+0x264>)
 80006f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006f2:	4a51      	ldr	r2, [pc, #324]	; (8000838 <main+0x268>)
 80006f4:	641a      	str	r2, [r3, #64]	; 0x40

//	enable the transfer complete and half transfer interupts for SPI1
	SET_BIT(SPI1_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <main+0x26c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a50      	ldr	r2, [pc, #320]	; (800083c <main+0x26c>)
 80006fc:	f043 0318 	orr.w	r3, r3, #24
 8000700:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI2_DMA_INSTANCE->CR, DMA_IT_TC | DMA_IT_HT);
 8000702:	4b4f      	ldr	r3, [pc, #316]	; (8000840 <main+0x270>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a4e      	ldr	r2, [pc, #312]	; (8000840 <main+0x270>)
 8000708:	f043 0318 	orr.w	r3, r3, #24
 800070c:	6013      	str	r3, [r2, #0]
//		call our custom error handler
		Error_Handler();
	}
#else
	//	start the DMA transfer on SPI2, use HAL library to perform initial configurations
		if (HAL_DMA_Start(hspi2.hdmarx, (uint32_t) &hspi2.Instance->RXDR,
 800070e:	4b49      	ldr	r3, [pc, #292]	; (8000834 <main+0x264>)
 8000710:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <main+0x264>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3330      	adds	r3, #48	; 0x30
 8000718:	4619      	mov	r1, r3
 800071a:	4a4a      	ldr	r2, [pc, #296]	; (8000844 <main+0x274>)
 800071c:	897b      	ldrh	r3, [r7, #10]
 800071e:	f002 f83b 	bl	8002798 <HAL_DMA_Start>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00d      	beq.n	8000744 <main+0x174>
						(uint32_t) aRxBuffer, rxCount) != HAL_OK) {
	//		if the DMA initalization was not OK, set the error bit
			SET_BIT(hspi2.ErrorCode, HAL_SPI_ERROR_DMA);
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <main+0x264>)
 800072a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	4a40      	ldr	r2, [pc, #256]	; (8000834 <main+0x264>)
 8000734:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	//		reset SPI ready state
			hspi2.State = HAL_SPI_STATE_READY;
 8000738:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <main+0x264>)
 800073a:	2201      	movs	r2, #1
 800073c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	//		call our custom error handler
			Error_Handler();
 8000740:	f000 fcc3 	bl	80010ca <Error_Handler>
		}
#endif

//	set the transfer size to 0 (unlimited)
	MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8000744:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <main+0x260>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6859      	ldr	r1, [r3, #4]
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <main+0x260>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <main+0x278>)
 8000750:	400b      	ands	r3, r1
 8000752:	6053      	str	r3, [r2, #4]
	MODIFY_REG(hspi2.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <main+0x264>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6859      	ldr	r1, [r3, #4]
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <main+0x264>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <main+0x278>)
 8000760:	400b      	ands	r3, r1
 8000762:	6053      	str	r3, [r2, #4]

//	enable DMA requests on the SPI instance
	SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <main+0x260>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <main+0x260>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000772:	609a      	str	r2, [r3, #8]
	SET_BIT(hspi2.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0x264>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	689a      	ldr	r2, [r3, #8]
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <main+0x264>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000782:	609a      	str	r2, [r3, #8]

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <main+0x260>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	691a      	ldr	r2, [r3, #16]
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <main+0x260>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000792:	611a      	str	r2, [r3, #16]
	__HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <main+0x264>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	691a      	ldr	r2, [r3, #16]
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <main+0x264>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80007a2:	611a      	str	r2, [r3, #16]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(&hspi1);
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <main+0x260>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <main+0x260>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2);
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <main+0x264>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <main+0x264>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0201 	orr.w	r2, r2, #1
 80007c2:	601a      	str	r2, [r3, #0]

//	start the SPI transfers
#ifdef USE_BREADBOARD
	SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
#else
	SET_BIT(hspi2.Instance->CR1, SPI_CR1_CSTART);
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <main+0x264>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <main+0x264>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007d2:	601a      	str	r2, [r3, #0]
#endif

//	wait for the first half of the transfer to complete
	while (wTransferState != TRANSFER_H_COMPLETE) {
 80007d4:	e005      	b.n	80007e2 <main+0x212>
//		toggle LED2 every 20 ms
		HAL_Delay(20);
 80007d6:	2014      	movs	r0, #20
 80007d8:	f001 faf0 	bl	8001dbc <HAL_Delay>
		BSP_LED_Toggle(LED3);
 80007dc:	2002      	movs	r0, #2
 80007de:	f001 f8f7 	bl	80019d0 <BSP_LED_Toggle>
	while (wTransferState != TRANSFER_H_COMPLETE) {
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <main+0x27c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d1f5      	bne.n	80007d6 <main+0x206>
	}
//	reset transfer state
	wTransferState = TRANSFER_WAIT;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <main+0x27c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
//	reset LEDs
	BSP_LED_Off(LED1);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f8c3 	bl	800197c <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f001 f8c0 	bl	800197c <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f001 f8bd 	bl	800197c <BSP_LED_Off>
//	transfer data from rxbuffer to tx buffer
//	j is the index for the rx buffer
	int j = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
	aTxBuffer[0] = aRxBuffer[0];
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <main+0x274>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b02      	ldr	r3, [pc, #8]	; (8000818 <main+0x248>)
 800080e:	801a      	strh	r2, [r3, #0]
//	i is the index of the tx buffer
//	j increases by the oversampling ratio for each inciment in i
	for (int i = 1; i < txCount; ++i) {
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e02b      	b.n	800086e <main+0x29e>
 8000816:	bf00      	nop
 8000818:	24000080 	.word	0x24000080
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	58021000 	.word	0x58021000
 8000824:	58021400 	.word	0x58021400
 8000828:	58021800 	.word	0x58021800
 800082c:	24000060 	.word	0x24000060
 8000830:	24001b90 	.word	0x24001b90
 8000834:	24001880 	.word	0x24001880
 8000838:	08001071 	.word	0x08001071
 800083c:	40020410 	.word	0x40020410
 8000840:	40020428 	.word	0x40020428
 8000844:	24000880 	.word	0x24000880
 8000848:	ffff0000 	.word	0xffff0000
 800084c:	2400005c 	.word	0x2400005c
		j += OVERSAMPLING;
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3301      	adds	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
		aTxBuffer[i] = aRxBuffer[j];
 8000856:	4a5d      	ldr	r2, [pc, #372]	; (80009cc <main+0x3fc>)
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	b299      	uxth	r1, r3
 8000860:	4a5b      	ldr	r2, [pc, #364]	; (80009d0 <main+0x400>)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < txCount; ++i) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	429a      	cmp	r2, r3
 8000874:	dbec      	blt.n	8000850 <main+0x280>
	}
//	Use the HAL driver to transmit the buffer over DMA
//	HAL will initialize many of the settings for us
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer))
 8000876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800087a:	4955      	ldr	r1, [pc, #340]	; (80009d0 <main+0x400>)
 800087c:	4855      	ldr	r0, [pc, #340]	; (80009d4 <main+0x404>)
 800087e:	f007 fd19 	bl	80082b4 <HAL_UART_Transmit_DMA>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <main+0x2bc>
			!= HAL_OK) {
//		if it fails, call our error handler
		Error_Handler();
 8000888:	f000 fc1f 	bl	80010ca <Error_Handler>
	}
//	Suspend interupts that we no longer need, for the purpose of efficiency
//	suspend the systick
	HAL_SuspendTick();
 800088c:	f001 faba 	bl	8001e04 <HAL_SuspendTick>
//	suspend UART3 interupts
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000890:	2027      	movs	r0, #39	; 0x27
 8000892:	f001 fc0a 	bl	80020aa <HAL_NVIC_DisableIRQ>
//	suspend DMA interupts for the UART3 channel
	HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 8000896:	200c      	movs	r0, #12
 8000898:	f001 fc07 	bl	80020aa <HAL_NVIC_DisableIRQ>
//	suspend DMA interrupts for the SPI channel
	HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 800089c:	2038      	movs	r0, #56	; 0x38
 800089e:	f001 fc04 	bl	80020aa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SPI2_DMA_IRQN);
 80008a2:	2039      	movs	r0, #57	; 0x39
 80008a4:	f001 fc01 	bl	80020aa <HAL_NVIC_DisableIRQ>
//	reset LEDs
	BSP_LED_Off(LED1);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 f867 	bl	800197c <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f001 f864 	bl	800197c <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f001 f861 	bl	800197c <BSP_LED_Off>
	while (1) {
//		wait for the second half of the receive buffer to finish transferring
#ifdef USE_BREADBOARD
		while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4) { }
#else
		while ((DMA2->LISR & DMA_FLAG_TCIF1_5) != DMA_FLAG_TCIF1_5) { }
 80008ba:	bf00      	nop
 80008bc:	4b46      	ldr	r3, [pc, #280]	; (80009d8 <main+0x408>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008c8:	d1f8      	bne.n	80008bc <main+0x2ec>
#endif
//		clear the transfer complete flag of the SPI channel
		DMA2->LIFCR = DMA_FLAG_TCIF0_4 | DMA_FLAG_TCIF1_5;
 80008ca:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <main+0x408>)
 80008cc:	f44f 6202 	mov.w	r2, #2080	; 0x820
 80008d0:	609a      	str	r2, [r3, #8]
//		the rx buffer index starts at half way through the buffer and goes to the end
		j = rxOffset;
 80008d2:	893b      	ldrh	r3, [r7, #8]
 80008d4:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[j];
 80008d6:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <main+0x3fc>)
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <main+0x400>)
 80008e2:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	e00e      	b.n	8000908 <main+0x338>
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//			j increases by the oversampling ratio for every increment in i
			j += OVERSAMPLING;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	3301      	adds	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <main+0x3fc>)
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f8:	b299      	uxth	r1, r3
 80008fa:	4a35      	ldr	r2, [pc, #212]	; (80009d0 <main+0x400>)
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3301      	adds	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbec      	blt.n	80008ea <main+0x31a>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) { }
 8000910:	bf00      	nop
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <main+0x40c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091a:	2b40      	cmp	r3, #64	; 0x40
 800091c:	d1f9      	bne.n	8000912 <main+0x342>
//		reset the UART transfer complete flag
		USART3->ICR = UART_CLEAR_TCF;
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0x40c>)
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	621a      	str	r2, [r3, #32]
//		reset the UART's DMA channel transfer complete and half transfer flags
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x410>)
 8000926:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800092a:	609a      	str	r2, [r3, #8]
//		reenable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 800092c:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <main+0x414>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <main+0x414>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <main+0x40c>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	4a27      	ldr	r2, [pc, #156]	; (80009dc <main+0x40c>)
 800093e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000942:	6093      	str	r3, [r2, #8]

//		wait for the first half of the receive buffer to be ready
#ifdef USE_BREADBOARD
		while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4) {}
#else
		while ((DMA2->LISR & DMA_FLAG_HTIF1_5) != DMA_FLAG_HTIF1_5) {}
 8000944:	bf00      	nop
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <main+0x408>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000952:	d1f8      	bne.n	8000946 <main+0x376>
#endif
//		reset the SPI DMA channel half transfer flag
		DMA2->LIFCR = DMA_FLAG_HTIF0_4 | DMA_FLAG_HTIF1_5;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <main+0x408>)
 8000956:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800095a:	609a      	str	r2, [r3, #8]
//		the starting index for the recieve buffer is 0
		j = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
		aTxBuffer[0] = aRxBuffer[0];
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <main+0x3fc>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <main+0x400>)
 8000968:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < txCount; ++i) {
 800096a:	2301      	movs	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e00e      	b.n	800098e <main+0x3be>
			//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
			//			  yi[j] = aRxBuffer[j] * 1.0;
			//		  }
//            j increases by the oversampling ratio for each increment of i
			j += OVERSAMPLING;
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	3301      	adds	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
			aTxBuffer[i] = aRxBuffer[j];
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <main+0x3fc>)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097e:	b299      	uxth	r1, r3
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <main+0x400>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 1; i < txCount; ++i) {
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	429a      	cmp	r2, r3
 8000994:	dbec      	blt.n	8000970 <main+0x3a0>
		}

//		wait for the UART to finish transferring
		while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC) {}
 8000996:	bf00      	nop
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <main+0x40c>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	2b40      	cmp	r3, #64	; 0x40
 80009a2:	d1f9      	bne.n	8000998 <main+0x3c8>
//		clear the transfer complete flag of the UART
		USART3->ICR = UART_CLEAR_TCF;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x40c>)
 80009a6:	2240      	movs	r2, #64	; 0x40
 80009a8:	621a      	str	r2, [r3, #32]
//		clear the transfer complete and half transfer flags of the UART DMA channel
		DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <main+0x410>)
 80009ac:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009b0:	609a      	str	r2, [r3, #8]
//		enable the UART DMA channel
		SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <main+0x414>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <main+0x414>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6013      	str	r3, [r2, #0]
//		start the UART DMA transfer
		SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <main+0x40c>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4a06      	ldr	r2, [pc, #24]	; (80009dc <main+0x40c>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6093      	str	r3, [r2, #8]
		while ((DMA2->LISR & DMA_FLAG_TCIF1_5) != DMA_FLAG_TCIF1_5) { }
 80009ca:	e776      	b.n	80008ba <main+0x2ea>
 80009cc:	24000880 	.word	0x24000880
 80009d0:	24000080 	.word	0x24000080
 80009d4:	24001908 	.word	0x24001908
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40004800 	.word	0x40004800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020028 	.word	0x40020028

080009e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09c      	sub	sp, #112	; 0x70
 80009ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	224c      	movs	r2, #76	; 0x4c
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f009 f8c2 	bl	8009b80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2220      	movs	r2, #32
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f009 f8bc 	bl	8009b80 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f004 fcf5 	bl	80053f8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <SystemClock_Config+0x100>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a34      	ldr	r2, [pc, #208]	; (8000ae8 <SystemClock_Config+0x100>)
 8000a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <SystemClock_Config+0x100>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <SystemClock_Config+0x104>)
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <SystemClock_Config+0x104>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <SystemClock_Config+0x104>)
 8000a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000a40:	bf00      	nop
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemClock_Config+0x100>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4e:	d1f8      	bne.n	8000a42 <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a50:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <SystemClock_Config+0x108>)
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	f023 0303 	bic.w	r3, r3, #3
 8000a58:	4a25      	ldr	r2, [pc, #148]	; (8000af0 <SystemClock_Config+0x108>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000a60:	2321      	movs	r3, #33	; 0x21
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 115;
 8000a7a:	2373      	movs	r3, #115	; 0x73
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fce6 	bl	800546c <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xc2>
		Error_Handler();
 8000aa6:	f000 fb10 	bl	80010ca <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 f8db 	bl	8005c8c <HAL_RCC_ClockConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xf8>
		Error_Handler();
 8000adc:	f000 faf5 	bl	80010ca <Error_Handler>
	}

}
 8000ae0:	bf00      	nop
 8000ae2:	3770      	adds	r7, #112	; 0x70
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58024800 	.word	0x58024800
 8000aec:	58000400 	.word	0x58000400
 8000af0:	58024400 	.word	0x58024400

08000af4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000afa:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <MX_SPI1_Init+0xac>)
 8000afc:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b04:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b0c:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b10:	220d      	movs	r2, #13
 8000b12:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b1a:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b28:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.TxCRCInitializationPattern =
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b70:	2220      	movs	r2, #32
 8000b72:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000b88:	f006 ff6e 	bl	8007a68 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI1_Init+0xa2>
		Error_Handler();
 8000b92:	f000 fa9a 	bl	80010ca <Error_Handler>
	}

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24001b90 	.word	0x24001b90
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi2.Instance = SPI2;
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000baa:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <MX_SPI2_Init+0xac>)
 8000bac:	601a      	str	r2, [r3, #0]
//	set mode to master
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bb4:	605a      	str	r2, [r3, #4]
//	recieve only
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bbc:	609a      	str	r2, [r3, #8]
//	14 data bits, which includes the 2 leading 0s
	hspi2.Init.DataSize = SPI_DATASIZE_14BIT;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bc0:	220d      	movs	r2, #13
 8000bc2:	60da      	str	r2, [r3, #12]
//	clock polarity is high
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bca:	611a      	str	r2, [r3, #16]
//	data is clocked on the first edge
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
//	slave select is managed by hardware
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bd8:	619a      	str	r2, [r3, #24]
//	peripheral clock rate is half of pll clock
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
//	MSB transferred first
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
//	not TI mode
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
//	no CRC
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.TxCRCInitializationPattern =
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
//	the slave select pin will pulse inactive in between frames
//	the length of the pulse is 1 cycle
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
//	slave select active low
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
//	request data transfer function after 1 data
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c
//	no idle time before first transfer
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	649a      	str	r2, [r3, #72]	; 0x48
//	spend two idle cycles between transfers, the slave select is high for one of these cycles
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c20:	2220      	movs	r2, #32
 8000c22:	64da      	str	r2, [r3, #76]	; 0x4c
//	no auto suspend on overflow
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	651a      	str	r2, [r3, #80]	; 0x50
//	don't fix IO state
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	655a      	str	r2, [r3, #84]	; 0x54
//	don't swap MISO and MOSI
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	659a      	str	r2, [r3, #88]	; 0x58
//	initialize SPI with HAL library
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_SPI2_Init+0xa8>)
 8000c38:	f006 ff16 	bl	8007a68 <HAL_SPI_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_SPI2_Init+0xa2>
		Error_Handler();
 8000c42:	f000 fa42 	bl	80010ca <Error_Handler>
	}

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24001880 	.word	0x24001880
 8000c50:	40003800 	.word	0x40003800

08000c54 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c5a:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <MX_USART1_UART_Init+0xa4>)
 8000c5c:	601a      	str	r2, [r3, #0]
//	baud rate is peripheral clock divided by 8, check the ioc file
	huart1.Init.BaudRate = 11978688;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <MX_USART1_UART_Init+0xa8>)
 8000c62:	605a      	str	r2, [r3, #4]
//	8 bits per word
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
//	1 stop bit
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
//	no parity check
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
//	UART in both transmit and receive
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c78:	220c      	movs	r2, #12
 8000c7a:	615a      	str	r2, [r3, #20]
//	no HW flow control
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
//	oversample by 8
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c88:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
//	divide the peripheral clock by 1
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
//	no advanced features
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
//	initialize peripheral with HAL library
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000c9e:	f007 fab8 	bl	8008212 <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000ca8:	f000 fa0f 	bl	80010ca <Error_Handler>
	}
//	initialize transfer fifo
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000cb0:	f008 fe77 	bl	80099a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000cba:	f000 fa06 	bl	80010ca <Error_Handler>
	}
//	initialize receive fifo
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000cc2:	f008 feac 	bl	8009a1e <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000ccc:	f000 f9fd 	bl	80010ca <Error_Handler>
	}
//	enable fifo
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0xa0>)
 8000cd2:	f008 fe2b 	bl	800992c <HAL_UARTEx_EnableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000cdc:	f000 f9f5 	bl	80010ca <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f001 f9b8 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cea:	2025      	movs	r0, #37	; 0x25
 8000cec:	f001 f9cf 	bl	800208e <HAL_NVIC_EnableIRQ>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24001b00 	.word	0x24001b00
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	00b6c7c0 	.word	0x00b6c7c0

08000d00 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <MX_USART3_UART_Init+0xa4>)
 8000d08:	601a      	str	r2, [r3, #0]
	//	baud rate is peripheral clock divided by 8, check the ioc file
		huart3.Init.BaudRate = 11978688;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <MX_USART3_UART_Init+0xa8>)
 8000d0e:	605a      	str	r2, [r3, #4]
	//	8 bits per word
		huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
	//	1 stop bit
		huart3.Init.StopBits = UART_STOPBITS_1;
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
	//	no parity check
		huart3.Init.Parity = UART_PARITY_NONE;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
	//	UART in both transmit and receive
		huart3.Init.Mode = UART_MODE_TX_RX;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d24:	220c      	movs	r2, #12
 8000d26:	615a      	str	r2, [r3, #20]
	//	no HW flow control
		huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
	//	oversample by 8
		huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d34:	61da      	str	r2, [r3, #28]
		huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
	//	divide the peripheral clock by 1
		huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
	//	no advanced features
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
	//	initialize peripheral with HAL library
		if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d4a:	f007 fa62 	bl	8008212 <HAL_UART_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART3_UART_Init+0x58>
			Error_Handler();
 8000d54:	f000 f9b9 	bl	80010ca <Error_Handler>
		}
	//	initialize transfer fifo
		if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d5c:	f008 fe21 	bl	80099a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x6a>
				!= HAL_OK) {
			Error_Handler();
 8000d66:	f000 f9b0 	bl	80010ca <Error_Handler>
		}
	//	initialize receive fifo
		if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d6e:	f008 fe56 	bl	8009a1e <HAL_UARTEx_SetRxFifoThreshold>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x7c>
				!= HAL_OK) {
			Error_Handler();
 8000d78:	f000 f9a7 	bl	80010ca <Error_Handler>
		}
	//	enable fifo
		if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK) {
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <MX_USART3_UART_Init+0xa0>)
 8000d7e:	f008 fdd5 	bl	800992c <HAL_UARTEx_EnableFifoMode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART3_UART_Init+0x8c>
			Error_Handler();
 8000d88:	f000 f99f 	bl	80010ca <Error_Handler>
		}
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2027      	movs	r0, #39	; 0x27
 8000d92:	f001 f962 	bl	800205a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d96:	2027      	movs	r0, #39	; 0x27
 8000d98:	f001 f979 	bl	800208e <HAL_NVIC_EnableIRQ>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24001908 	.word	0x24001908
 8000da4:	40004800 	.word	0x40004800
 8000da8:	00b6c7c0 	.word	0x00b6c7c0

08000dac <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_DMA_Init+0x8c>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db8:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <MX_DMA_Init+0x8c>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_DMA_Init+0x8c>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_DMA_Init+0x8c>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <MX_DMA_Init+0x8c>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_DMA_Init+0x8c>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2100      	movs	r1, #0
 8000df2:	200b      	movs	r0, #11
 8000df4:	f001 f931 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000df8:	200b      	movs	r0, #11
 8000dfa:	f001 f948 	bl	800208e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2100      	movs	r1, #0
 8000e02:	200c      	movs	r0, #12
 8000e04:	f001 f929 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f001 f940 	bl	800208e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	2038      	movs	r0, #56	; 0x38
 8000e14:	f001 f921 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e18:	2038      	movs	r0, #56	; 0x38
 8000e1a:	f001 f938 	bl	800208e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 1);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2100      	movs	r1, #0
 8000e22:	2039      	movs	r0, #57	; 0x39
 8000e24:	f001 f919 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e28:	2039      	movs	r0, #57	; 0x39
 8000e2a:	f001 f930 	bl	800208e <HAL_NVIC_EnableIRQ>


}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	58024400 	.word	0x58024400

08000e3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b75      	ldr	r3, [pc, #468]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a73      	ldr	r2, [pc, #460]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b71      	ldr	r3, [pc, #452]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a6c      	ldr	r2, [pc, #432]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b69      	ldr	r3, [pc, #420]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b66      	ldr	r3, [pc, #408]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a64      	ldr	r2, [pc, #400]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000eac:	4b5e      	ldr	r3, [pc, #376]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	4a5d      	ldr	r2, [pc, #372]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebc:	4b5a      	ldr	r3, [pc, #360]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	4b57      	ldr	r3, [pc, #348]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a55      	ldr	r2, [pc, #340]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee8:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a46      	ldr	r2, [pc, #280]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b44      	ldr	r3, [pc, #272]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f24:	4b40      	ldr	r3, [pc, #256]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a3f      	ldr	r2, [pc, #252]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <MX_GPIO_Init+0x1ec>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f48:	4838      	ldr	r0, [pc, #224]	; (800102c <MX_GPIO_Init+0x1f0>)
 8000f4a:	f004 fa07 	bl	800535c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <MX_GPIO_Init+0x1f4>)
 8000f54:	f004 fa02 	bl	800535c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4831      	ldr	r0, [pc, #196]	; (8001034 <MX_GPIO_Init+0x1f8>)
 8000f6e:	f004 f845 	bl	8004ffc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000f72:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <MX_GPIO_Init+0x1f0>)
 8000f8c:	f004 f836 	bl	8004ffc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000f90:	2302      	movs	r3, #2
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <MX_GPIO_Init+0x1f4>)
 8000fa8:	f004 f828 	bl	8004ffc <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIOE LEDs */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_13 | GPIO_PIN_15;
 8000fac:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <MX_GPIO_Init+0x1f4>)
 8000fc6:	f004 f819 	bl	8004ffc <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIOF LEDs */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000fca:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <MX_GPIO_Init+0x1fc>)
 8000fe4:	f004 f80a 	bl	8004ffc <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIOG LEDs */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_14;
 8000fe8:	f244 1370 	movw	r3, #16752	; 0x4170
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_GPIO_Init+0x200>)
 8001002:	f003 fffb 	bl	8004ffc <HAL_GPIO_Init>

	BSP_LED_Init(LED1);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 fc18 	bl	800183c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800100c:	2001      	movs	r0, #1
 800100e:	f000 fc15 	bl	800183c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8001012:	2002      	movs	r0, #2
 8001014:	f000 fc12 	bl	800183c <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001018:	2101      	movs	r1, #1
 800101a:	2000      	movs	r0, #0
 800101c:	f000 fd02 	bl	8001a24 <BSP_PB_Init>
}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	; 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58024400 	.word	0x58024400
 800102c:	58020400 	.word	0x58020400
 8001030:	58021000 	.word	0x58021000
 8001034:	58020800 	.word	0x58020800
 8001038:	58021400 	.word	0x58021400
 800103c:	58021800 	.word	0x58021800

08001040 <HAL_GPIO_EXTI_Callback>:

// callback function for external GPIO interrupt
// toggles the value of UserButtonStatus
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_USER_PIN) {
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001050:	d105      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x1e>
		UserButtonStatus ^= 1;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_GPIO_EXTI_Callback+0x2c>)
 800105c:	6013      	str	r3, [r2, #0]
	}
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	24000060 	.word	0x24000060

08001070 <tx_h_complete>:

// callback for SPI DMA half transfer complete
void tx_h_complete(DMA_HandleTypeDef *hdma) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_H_COMPLETE;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <tx_h_complete+0x1c>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2400005c 	.word	0x2400005c

08001090 <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_SPI_ErrorCallback+0x1c>)
 800109a:	2202      	movs	r2, #2
 800109c:	601a      	str	r2, [r3, #0]
	Error_Handler();
 800109e:	f000 f814 	bl	80010ca <Error_Handler>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2400005c 	.word	0x2400005c

080010b0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f000 fc35 	bl	8001928 <BSP_LED_On>
	Error_Handler();
 80010be:	f000 f804 	bl	80010ca <Error_Handler>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010ce:	b672      	cpsid	i
}
 80010d0:	bf00      	nop
//	disable interrupts
	__disable_irq();
//	toggle the red LED forever
	while (1) {
		BSP_LED_Toggle(LED3);
 80010d2:	2002      	movs	r0, #2
 80010d4:	f000 fc7c 	bl	80019d0 <BSP_LED_Toggle>
		HAL_Delay(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f000 fe6f 	bl	8001dbc <HAL_Delay>
		BSP_LED_Toggle(LED3);
 80010de:	e7f8      	b.n	80010d2 <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
const unsigned short pll2_r = 2;

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_MspInit+0x30>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x30>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x30>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	58024400 	.word	0x58024400

08001114 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b0bc      	sub	sp, #240	; 0xf0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800111c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	22bc      	movs	r2, #188	; 0xbc
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f008 fd23 	bl	8009b80 <memset>
	if (hspi->Instance == SPI1) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4abd      	ldr	r2, [pc, #756]	; (8001434 <HAL_SPI_MspInit+0x320>)
 8001140:	4293      	cmp	r3, r2
 8001142:	f040 8096 	bne.w	8001272 <HAL_SPI_MspInit+0x15e>

//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	623b      	str	r3, [r7, #32]
//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	67fb      	str	r3, [r7, #124]	; 0x7c
//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001152:	2304      	movs	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001156:	f240 1317 	movw	r3, #279	; 0x117
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 800115c:	2320      	movs	r3, #32
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001160:	2302      	movs	r3, #2
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001164:	2302      	movs	r3, #2
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001168:	2340      	movs	r3, #64	; 0x40
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f005 f913 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_SPI_MspInit+0x74>
			Error_Handler();
 8001184:	f7ff ffa1 	bl	80010ca <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001188:	4bab      	ldr	r3, [pc, #684]	; (8001438 <HAL_SPI_MspInit+0x324>)
 800118a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800118e:	4aaa      	ldr	r2, [pc, #680]	; (8001438 <HAL_SPI_MspInit+0x324>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001194:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001198:	4ba7      	ldr	r3, [pc, #668]	; (8001438 <HAL_SPI_MspInit+0x324>)
 800119a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4ba4      	ldr	r3, [pc, #656]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4aa2      	ldr	r2, [pc, #648]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4ba0      	ldr	r3, [pc, #640]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69bb      	ldr	r3, [r7, #24]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA15 (JTDI)     ------> SPI1_NSS
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 80011c4:	f248 0360 	movw	r3, #32864	; 0x8060
 80011c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011de:	2305      	movs	r3, #5
 80011e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e8:	4619      	mov	r1, r3
 80011ea:	4894      	ldr	r0, [pc, #592]	; (800143c <HAL_SPI_MspInit+0x328>)
 80011ec:	f003 ff06 	bl	8004ffc <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = SPI1_DMA_INSTANCE;
 80011f0:	4b93      	ldr	r3, [pc, #588]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 80011f2:	4a94      	ldr	r2, [pc, #592]	; (8001444 <HAL_SPI_MspInit+0x330>)
 80011f4:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80011f6:	4b92      	ldr	r3, [pc, #584]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 80011f8:	2225      	movs	r2, #37	; 0x25
 80011fa:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b90      	ldr	r3, [pc, #576]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b8f      	ldr	r3, [pc, #572]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b8d      	ldr	r3, [pc, #564]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001210:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001216:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001218:	4b89      	ldr	r3, [pc, #548]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001220:	4b87      	ldr	r3, [pc, #540]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001226:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122e:	4b84      	ldr	r3, [pc, #528]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001234:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800123a:	4b81      	ldr	r3, [pc, #516]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001240:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 8001246:	487e      	ldr	r0, [pc, #504]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 8001248:	f000 ff4a 	bl	80020e0 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_SPI_MspInit+0x142>
			Error_Handler();
 8001252:	f7ff ff3a 	bl	80010ca <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi1_rx);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a79      	ldr	r2, [pc, #484]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 800125a:	67da      	str	r2, [r3, #124]	; 0x7c
 800125c:	4a78      	ldr	r2, [pc, #480]	; (8001440 <HAL_SPI_MspInit+0x32c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2023      	movs	r0, #35	; 0x23
 8001268:	f000 fef7 	bl	800205a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800126c:	2023      	movs	r0, #35	; 0x23
 800126e:	f000 ff0e 	bl	800208e <HAL_NVIC_EnableIRQ>
	}
	if (hspi->Instance == SPI2) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a74      	ldr	r2, [pc, #464]	; (8001448 <HAL_SPI_MspInit+0x334>)
 8001278:	4293      	cmp	r3, r2
 800127a:	f040 80f6 	bne.w	800146a <HAL_SPI_MspInit+0x356>

		/** Initializes the peripherals clock
		 */
		//		configure clock for SPI1
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	623b      	str	r3, [r7, #32]
		//		clock source is pll2p
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	67fb      	str	r3, [r7, #124]	; 0x7c
		//		configure m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800128a:	2304      	movs	r3, #4
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800128e:	f240 1317 	movw	r3, #279	; 0x117
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001294:	2320      	movs	r3, #32
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001298:	2302      	movs	r3, #2
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
		//		clock input is 2.08 MHz
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
		//		use high frequency VCO mode
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		//		no fractional N
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
		//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 f877 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_SPI_MspInit+0x1ac>
			Error_Handler();
 80012bc:	f7ff ff05 	bl	80010ca <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 80012c0:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c6:	4a5c      	ldr	r2, [pc, #368]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012d0:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ee:	4b52      	ldr	r3, [pc, #328]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <HAL_SPI_MspInit+0x324>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <HAL_SPI_MspInit+0x324>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_SPI_MspInit+0x324>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_SPI_MspInit+0x324>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <HAL_SPI_MspInit+0x324>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_SPI_MspInit+0x324>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
		 PC2_C     ------> SPI2_MISO
		 PC3_C     ------> SPI2_MOSI
		 PB12     ------> SPI2_NSS
		 PD3     ------> SPI2_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001338:	230c      	movs	r3, #12
 800133a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		//		set high frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800135a:	4619      	mov	r1, r3
 800135c:	483b      	ldr	r0, [pc, #236]	; (800144c <HAL_SPI_MspInit+0x338>)
 800135e:	f003 fe4d 	bl	8004ffc <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137c:	2305      	movs	r3, #5
 800137e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001386:	4619      	mov	r1, r3
 8001388:	4831      	ldr	r0, [pc, #196]	; (8001450 <HAL_SPI_MspInit+0x33c>)
 800138a:	f003 fe37 	bl	8004ffc <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800138e:	2308      	movs	r3, #8
 8001390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a6:	2305      	movs	r3, #5
 80013a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b0:	4619      	mov	r1, r3
 80013b2:	4828      	ldr	r0, [pc, #160]	; (8001454 <HAL_SPI_MspInit+0x340>)
 80013b4:	f003 fe22 	bl	8004ffc <HAL_GPIO_Init>

		/* SPI2 DMA Init */
		/* SPI2_RX Init */
		hdma_spi2_rx.Instance = SPI2_DMA_INSTANCE;
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_SPI_MspInit+0x348>)
 80013bc:	601a      	str	r2, [r3, #0]
		hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013c0:	2227      	movs	r2, #39	; 0x27
 80013c2:	605a      	str	r2, [r3, #4]
//		transfer from SPI peripheral to memory
		hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
//		do not increment peripheral address
		hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
//		do increment memory address
		hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	611a      	str	r2, [r3, #16]
//		peripheral data aligned to half word
		hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013de:	615a      	str	r2, [r3, #20]
//		memory aligned to half word
		hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e6:	619a      	str	r2, [r3, #24]
//		circular mode (upon completion it loops to beginning)
		hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
//		no fifo
		hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_SPI_MspInit+0x344>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_SPI_MspInit+0x344>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_SPI_MspInit+0x344>)
 800140a:	2200      	movs	r2, #0
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
//		use HAL to configure DMA
		if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK) {
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <HAL_SPI_MspInit+0x344>)
 8001410:	f000 fe66 	bl	80020e0 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_SPI_MspInit+0x30a>
			Error_Handler();
 800141a:	f7ff fe56 	bl	80010ca <Error_Handler>
		}
		__HAL_LINKDMA(hspi, hdmarx, hdma_spi2_rx);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_SPI_MspInit+0x344>)
 8001422:	67da      	str	r2, [r3, #124]	; 0x7c
 8001424:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <HAL_SPI_MspInit+0x344>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	; 0x38

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2024      	movs	r0, #36	; 0x24
 8001430:	e016      	b.n	8001460 <HAL_SPI_MspInit+0x34c>
 8001432:	bf00      	nop
 8001434:	40013000 	.word	0x40013000
 8001438:	58024400 	.word	0x58024400
 800143c:	58020000 	.word	0x58020000
 8001440:	24001c18 	.word	0x24001c18
 8001444:	40020410 	.word	0x40020410
 8001448:	40003800 	.word	0x40003800
 800144c:	58020800 	.word	0x58020800
 8001450:	58020400 	.word	0x58020400
 8001454:	58020c00 	.word	0x58020c00
 8001458:	24001998 	.word	0x24001998
 800145c:	40020428 	.word	0x40020428
 8001460:	f000 fdfb 	bl	800205a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001464:	2024      	movs	r0, #36	; 0x24
 8001466:	f000 fe12 	bl	800208e <HAL_NVIC_EnableIRQ>
	}

}
 800146a:	bf00      	nop
 800146c:	37f0      	adds	r7, #240	; 0xf0
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop

08001474 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b0ba      	sub	sp, #232	; 0xe8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800147c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	22bc      	movs	r2, #188	; 0xbc
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f008 fb73 	bl	8009b80 <memset>
	if (huart->Instance == USART1) {
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a95      	ldr	r2, [pc, #596]	; (80016f4 <HAL_UART_MspInit+0x280>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f040 8099 	bne.w	80015d8 <HAL_UART_MspInit+0x164>
		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
//		peripheral uses pll3q
		PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80014aa:	2310      	movs	r3, #16
 80014ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//		set m, n, p, q, r according to ioc file
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80014b0:	2304      	movs	r3, #4
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80014b4:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80014b8:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80014ba:	2309      	movs	r3, #9
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80014be:	2308      	movs	r3, #8
 80014c0:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80014c2:	2302      	movs	r3, #2
 80014c4:	64fb      	str	r3, [r7, #76]	; 0x4c
//		input clock speed is 2.08 MHz
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	653b      	str	r3, [r7, #80]	; 0x50
//		use high frequency VCO mode
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
//		no fractional n
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
//		use HAL library to configure peripheral clock
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 ff63 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x74>
			Error_Handler();
 80014e4:	f7ff fdf1 	bl	80010ca <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80014e8:	4b83      	ldr	r3, [pc, #524]	; (80016f8 <HAL_UART_MspInit+0x284>)
 80014ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ee:	4a82      	ldr	r2, [pc, #520]	; (80016f8 <HAL_UART_MspInit+0x284>)
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014f8:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <HAL_UART_MspInit+0x284>)
 80014fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b7c      	ldr	r3, [pc, #496]	; (80016f8 <HAL_UART_MspInit+0x284>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	4a7a      	ldr	r2, [pc, #488]	; (80016f8 <HAL_UART_MspInit+0x284>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_UART_MspInit+0x284>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PB15     ------> USART1_RX
		 PB6     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001528:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800153e:	2304      	movs	r3, #4
 8001540:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001548:	4619      	mov	r1, r3
 800154a:	486c      	ldr	r0, [pc, #432]	; (80016fc <HAL_UART_MspInit+0x288>)
 800154c:	f003 fd56 	bl	8004ffc <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//		low frequency
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001568:	2307      	movs	r3, #7
 800156a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001572:	4619      	mov	r1, r3
 8001574:	4861      	ldr	r0, [pc, #388]	; (80016fc <HAL_UART_MspInit+0x288>)
 8001576:	f003 fd41 	bl	8004ffc <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream0;
 800157a:	4b61      	ldr	r3, [pc, #388]	; (8001700 <HAL_UART_MspInit+0x28c>)
 800157c:	4a61      	ldr	r2, [pc, #388]	; (8001704 <HAL_UART_MspInit+0x290>)
 800157e:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_UART_MspInit+0x28c>)
 8001582:	222a      	movs	r2, #42	; 0x2a
 8001584:	605a      	str	r2, [r3, #4]
//		set memory to peripheral transfer
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001586:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <HAL_UART_MspInit+0x28c>)
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	609a      	str	r2, [r3, #8]
//		do not increment peripheral memory address
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_UART_MspInit+0x28c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
//		increment memory address
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <HAL_UART_MspInit+0x28c>)
 8001594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001598:	611a      	str	r2, [r3, #16]
//		align data by bytes
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_UART_MspInit+0x28c>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
//		align data by half word
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a0:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a6:	619a      	str	r2, [r3, #24]
//		non circular mode
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
//		low priority
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
//		do not use FIFO
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
//		configure DMA with HAL library
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80015ba:	4851      	ldr	r0, [pc, #324]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015bc:	f000 fd90 	bl	80020e0 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x156>
			Error_Handler();
 80015c6:	f7ff fd80 	bl	80010ca <Error_Handler>
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015ce:	679a      	str	r2, [r3, #120]	; 0x78
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <HAL_UART_MspInit+0x28c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38
		}
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);

	}

}
 80015d6:	e088      	b.n	80016ea <HAL_UART_MspInit+0x276>
	} else if (huart->Instance == USART3) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4a      	ldr	r2, [pc, #296]	; (8001708 <HAL_UART_MspInit+0x294>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	f040 8083 	bne.w	80016ea <HAL_UART_MspInit+0x276>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
		PeriphClkInitStruct.Usart234578ClockSelection =
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80015ee:	2304      	movs	r3, #4
 80015f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80015f2:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
		PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80015f8:	2309      	movs	r3, #9
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
		PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80015fc:	2308      	movs	r3, #8
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
		PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001600:	2302      	movs	r3, #2
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001608:	653b      	str	r3, [r7, #80]	; 0x50
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800160a:	2300      	movs	r3, #0
 800160c:	657b      	str	r3, [r7, #84]	; 0x54
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	4618      	mov	r0, r3
 8001618:	f004 fec4 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_UART_MspInit+0x1b2>
			Error_Handler();
 8001622:	f7ff fd52 	bl	80010ca <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_UART_MspInit+0x284>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162c:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_UART_MspInit+0x284>)
 800162e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001632:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_UART_MspInit+0x284>)
 8001638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <HAL_UART_MspInit+0x284>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <HAL_UART_MspInit+0x284>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_UART_MspInit+0x284>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8001662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800167c:	2307      	movs	r3, #7
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001686:	4619      	mov	r1, r3
 8001688:	4820      	ldr	r0, [pc, #128]	; (800170c <HAL_UART_MspInit+0x298>)
 800168a:	f003 fcb7 	bl	8004ffc <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_UART_MspInit+0x29c>)
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <HAL_UART_MspInit+0x2a0>)
 8001692:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_UART_MspInit+0x29c>)
 8001696:	222e      	movs	r2, #46	; 0x2e
 8001698:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_UART_MspInit+0x29c>)
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ac:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 80016ce:	4810      	ldr	r0, [pc, #64]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016d0:	f000 fd06 	bl	80020e0 <HAL_DMA_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_UART_MspInit+0x26a>
			Error_Handler();
 80016da:	f7ff fcf6 	bl	80010ca <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016e2:	679a      	str	r2, [r3, #120]	; 0x78
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_UART_MspInit+0x29c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016ea:	bf00      	nop
 80016ec:	37e8      	adds	r7, #232	; 0xe8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40011000 	.word	0x40011000
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58020400 	.word	0x58020400
 8001700:	24001a88 	.word	0x24001a88
 8001704:	40020010 	.word	0x40020010
 8001708:	40004800 	.word	0x40004800
 800170c:	58020c00 	.word	0x58020c00
 8001710:	24001a10 	.word	0x24001a10
 8001714:	40020028 	.word	0x40020028

08001718 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001764:	f000 fb0a 	bl	8001d7c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
//	turn on the red LED
	BSP_LED_On(LED3);
 8001770:	2002      	movs	r0, #2
 8001772:	f000 f8d9 	bl	8001928 <BSP_LED_On>
//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001776:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA1_Stream0_IRQHandler+0x14>)
 8001778:	f002 f8fa 	bl	8003970 <HAL_DMA_IRQHandler>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	24001a88 	.word	0x24001a88

08001784 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001788:	2002      	movs	r0, #2
 800178a:	f000 f8cd 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800178e:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Stream1_IRQHandler+0x14>)
 8001790:	f002 f8ee 	bl	8003970 <HAL_DMA_IRQHandler>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24001a10 	.word	0x24001a10

0800179c <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f000 f8c1 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA2_Stream0_IRQHandler+0x14>)
 80017a8:	f002 f8e2 	bl	8003970 <HAL_DMA_IRQHandler>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	24001c18 	.word	0x24001c18

080017b4 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f000 f8b5 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <DMA2_Stream1_IRQHandler+0x14>)
 80017c0:	f002 f8d6 	bl	8003970 <HAL_DMA_IRQHandler>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	24001998 	.word	0x24001998

080017cc <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles external GPIO global interrupt for user button.
 */
void EXTI15_10_IRQHandler(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	//	call the HAL library interrupt handler
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 80017d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017d4:	f003 fdf5 	bl	80053c2 <HAL_GPIO_EXTI_IRQHandler>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80017e0:	2002      	movs	r0, #2
 80017e2:	f000 f8a1 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart1);
 80017e6:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART1_IRQHandler+0x14>)
 80017e8:	f006 fde4 	bl	80083b4 <HAL_UART_IRQHandler>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24001b00 	.word	0x24001b00

080017f4 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f000 f895 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_UART_IRQHandler(&huart3);
 80017fe:	4802      	ldr	r0, [pc, #8]	; (8001808 <USART3_IRQHandler+0x14>)
 8001800:	f006 fdd8 	bl	80083b4 <HAL_UART_IRQHandler>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	24001908 	.word	0x24001908

0800180c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001810:	2002      	movs	r0, #2
 8001812:	f000 f889 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi1);
 8001816:	4802      	ldr	r0, [pc, #8]	; (8001820 <SPI1_IRQHandler+0x14>)
 8001818:	f006 fa28 	bl	8007c6c <HAL_SPI_IRQHandler>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	24001b90 	.word	0x24001b90

08001824 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	//	turn on the red LED
	BSP_LED_On(LED3);
 8001828:	2002      	movs	r0, #2
 800182a:	f000 f87d 	bl	8001928 <BSP_LED_On>
	//	call the HAL library interrupt handler
	HAL_SPI_IRQHandler(&hspi2);
 800182e:	4802      	ldr	r0, [pc, #8]	; (8001838 <SPI2_IRQHandler+0x14>)
 8001830:	f006 fa1c 	bl	8007c6c <HAL_SPI_IRQHandler>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24001880 	.word	0x24001880

0800183c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <BSP_LED_Init+0x28>
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d006      	beq.n	8001864 <BSP_LED_Init+0x28>
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d003      	beq.n	8001864 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800185c:	f06f 0301 	mvn.w	r3, #1
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001862:	e055      	b.n	8001910 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <BSP_LED_Init+0xe0>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a2a      	ldr	r2, [pc, #168]	; (800191c <BSP_LED_Init+0xe0>)
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <BSP_LED_Init+0xe0>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	e021      	b.n	80018ce <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10f      	bne.n	80018b0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <BSP_LED_Init+0xe0>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	4a21      	ldr	r2, [pc, #132]	; (800191c <BSP_LED_Init+0xe0>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <BSP_LED_Init+0xe0>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	e00e      	b.n	80018ce <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <BSP_LED_Init+0xe0>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	4a19      	ldr	r2, [pc, #100]	; (800191c <BSP_LED_Init+0xe0>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <BSP_LED_Init+0xe0>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <BSP_LED_Init+0xe4>)
 80018d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <BSP_LED_Init+0xe8>)
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	f107 0218 	add.w	r2, r7, #24
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fb82 	bl	8004ffc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <BSP_LED_Init+0xe8>)
 80018fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <BSP_LED_Init+0xe4>)
 8001904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	f003 fd26 	bl	800535c <HAL_GPIO_WritePin>
  }

  return ret;
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001912:	4618      	mov	r0, r3
 8001914:	3730      	adds	r7, #48	; 0x30
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	58024400 	.word	0x58024400
 8001920:	08009ba8 	.word	0x08009ba8
 8001924:	24000000 	.word	0x24000000

08001928 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <BSP_LED_On+0x28>
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d006      	beq.n	8001950 <BSP_LED_On+0x28>
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d003      	beq.n	8001950 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001948:	f06f 0301 	mvn.w	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e00b      	b.n	8001968 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <BSP_LED_On+0x4c>)
 8001954:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <BSP_LED_On+0x50>)
 800195c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	f003 fcfa 	bl	800535c <HAL_GPIO_WritePin>
  }

  return ret;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24000000 	.word	0x24000000
 8001978:	08009ba8 	.word	0x08009ba8

0800197c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <BSP_LED_Off+0x28>
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d006      	beq.n	80019a4 <BSP_LED_Off+0x28>
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800199c:	f06f 0301 	mvn.w	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e00b      	b.n	80019bc <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <BSP_LED_Off+0x4c>)
 80019a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <BSP_LED_Off+0x50>)
 80019b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	f003 fcd0 	bl	800535c <HAL_GPIO_WritePin>
  }

  return ret;
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	24000000 	.word	0x24000000
 80019cc:	08009ba8 	.word	0x08009ba8

080019d0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d009      	beq.n	80019f8 <BSP_LED_Toggle+0x28>
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d006      	beq.n	80019f8 <BSP_LED_Toggle+0x28>
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d003      	beq.n	80019f8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019f0:	f06f 0301 	mvn.w	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	e00b      	b.n	8001a10 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <BSP_LED_Toggle+0x4c>)
 80019fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4907      	ldr	r1, [pc, #28]	; (8001a20 <BSP_LED_Toggle+0x50>)
 8001a04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f003 fcbf 	bl	800538e <HAL_GPIO_TogglePin>
  }

  return ret;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	24000000 	.word	0x24000000
 8001a20:	08009ba8 	.word	0x08009ba8

08001a24 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <BSP_PB_Init+0xc8>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <BSP_PB_Init+0xc8>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <BSP_PB_Init+0xc8>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <BSP_PB_Init+0xcc>)
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	f107 020c 	add.w	r2, r7, #12
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fabf 	bl	8004ffc <HAL_GPIO_Init>
 8001a7e:	e030      	b.n	8001ae2 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <BSP_PB_Init+0xd0>)
 8001a82:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <BSP_PB_Init+0xcc>)
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	f107 020c 	add.w	r2, r7, #12
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fab2 	bl	8004ffc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <BSP_PB_Init+0xd4>)
 8001a9e:	441a      	add	r2, r3
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4916      	ldr	r1, [pc, #88]	; (8001afc <BSP_PB_Init+0xd8>)
 8001aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f003 fa91 	bl	8004fd2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <BSP_PB_Init+0xd4>)
 8001ab6:	1898      	adds	r0, r3, r2
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <BSP_PB_Init+0xdc>)
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f003 fa66 	bl	8004f94 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <BSP_PB_Init+0xe0>)
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f000 fac0 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001ada:	2328      	movs	r3, #40	; 0x28
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fad6 	bl	800208e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58024400 	.word	0x58024400
 8001af0:	2400000c 	.word	0x2400000c
 8001af4:	11110000 	.word	0x11110000
 8001af8:	24001c90 	.word	0x24001c90
 8001afc:	08009bb0 	.word	0x08009bb0
 8001b00:	24000010 	.word	0x24000010
 8001b04:	24000014 	.word	0x24000014

08001b08 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fff0 	bl	8001b08 <BSP_PB_Callback>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <SystemInit+0xec>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <SystemInit+0xec>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <SystemInit+0xf0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d807      	bhi.n	8001b5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b4c:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <SystemInit+0xf0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 030f 	bic.w	r3, r3, #15
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <SystemInit+0xf0>)
 8001b56:	f043 0307 	orr.w	r3, r3, #7
 8001b5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <SystemInit+0xf4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <SystemInit+0xf4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <SystemInit+0xf4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <SystemInit+0xf4>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	492b      	ldr	r1, [pc, #172]	; (8001c20 <SystemInit+0xf4>)
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <SystemInit+0xf8>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <SystemInit+0xf0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <SystemInit+0xf0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 030f 	bic.w	r3, r3, #15
 8001b8e:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <SystemInit+0xf0>)
 8001b90:	f043 0307 	orr.w	r3, r3, #7
 8001b94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <SystemInit+0xf4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <SystemInit+0xf4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <SystemInit+0xf4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <SystemInit+0xf4>)
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <SystemInit+0xfc>)
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <SystemInit+0xf4>)
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <SystemInit+0x100>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <SystemInit+0xf4>)
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <SystemInit+0x104>)
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <SystemInit+0xf4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <SystemInit+0xf4>)
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <SystemInit+0x104>)
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <SystemInit+0xf4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <SystemInit+0xf4>)
 8001bce:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <SystemInit+0x104>)
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <SystemInit+0xf4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <SystemInit+0xf4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <SystemInit+0xf4>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <SystemInit+0xf4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <SystemInit+0x108>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <SystemInit+0x10c>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf6:	d202      	bcs.n	8001bfe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <SystemInit+0x110>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <SystemInit+0x114>)
 8001c00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c04:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SystemInit+0xec>)
 8001c08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	52002000 	.word	0x52002000
 8001c20:	58024400 	.word	0x58024400
 8001c24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c28:	02020200 	.word	0x02020200
 8001c2c:	01ff0000 	.word	0x01ff0000
 8001c30:	01010280 	.word	0x01010280
 8001c34:	5c001000 	.word	0x5c001000
 8001c38:	ffff0000 	.word	0xffff0000
 8001c3c:	51008108 	.word	0x51008108
 8001c40:	52004000 	.word	0x52004000

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c48:	f7ff ff70 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	; (8001c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	; (8001c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f007 ff61 	bl	8009b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7fe fcab 	bl	80005d0 <main>
  bx  lr
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c84:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001c88:	08009c04 	.word	0x08009c04
  ldr r2, =_sbss
 8001c8c:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001c90:	24001d2c 	.word	0x24001d2c

08001c94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC3_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 f9d0 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca4:	f004 f9a8 	bl	8005ff8 <HAL_RCC_GetSysClockFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_Init+0x68>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	4913      	ldr	r1, [pc, #76]	; (8001d04 <HAL_Init+0x6c>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_Init+0x68>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_Init+0x6c>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_Init+0x70>)
 8001cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_Init+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f814 	bl	8001d10 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e002      	b.n	8001cf8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf2:	f7ff f9f5 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	58024400 	.word	0x58024400
 8001d04:	08009bb4 	.word	0x08009bb4
 8001d08:	2400001c 	.word	0x2400001c
 8001d0c:	24000018 	.word	0x24000018

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_InitTick+0x60>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e021      	b.n	8001d68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_InitTick+0x64>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_InitTick+0x60>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f9c3 	bl	80020c6 <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f97f 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x68>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24000024 	.word	0x24000024
 8001d74:	24000018 	.word	0x24000018
 8001d78:	24000020 	.word	0x24000020

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	24000024 	.word	0x24000024
 8001da0:	24001d28 	.word	0x24001d28

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	24001d28 	.word	0x24001d28

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24000024 	.word	0x24000024

08001e04 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_SuspendTick+0x1c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_SuspendTick+0x1c>)
 8001e0e:	f023 0302 	bic.w	r3, r3, #2
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetREVID+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	5c001000 	.word	0x5c001000

08001e3c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_EnableCompensationCell+0x1c>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_EnableCompensationCell+0x1c>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	58000400 	.word	0x58000400

08001e5c <__NVIC_SetPriorityGrouping>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <__NVIC_SetPriorityGrouping+0x40>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x40>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	05fa0000 	.word	0x05fa0000

08001ea4 <__NVIC_GetPriorityGrouping>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_EnableIRQ>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db0b      	blt.n	8001eea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4907      	ldr	r1, [pc, #28]	; (8001ef8 <__NVIC_EnableIRQ+0x38>)
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_DisableIRQ>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db12      	blt.n	8001f34 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	490a      	ldr	r1, [pc, #40]	; (8001f40 <__NVIC_DisableIRQ+0x44>)
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	3320      	adds	r3, #32
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f28:	f3bf 8f4f 	dsb	sy
}
 8001f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f2e:	f3bf 8f6f 	isb	sy
}
 8001f32:	bf00      	nop
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff8e 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff05 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff1c 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff90 	bl	8001f98 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5f 	bl	8001f44 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff0f 	bl	8001ec0 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff1f 	bl	8001efc <__NVIC_DisableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff96 	bl	8002000 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fe5c 	bl	8001da4 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e316      	b.n	8002726 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a66      	ldr	r2, [pc, #408]	; (8002298 <HAL_DMA_Init+0x1b8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04a      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_DMA_Init+0x1bc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d045      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <HAL_DMA_Init+0x1c0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d040      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <HAL_DMA_Init+0x1c4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d03b      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a60      	ldr	r2, [pc, #384]	; (80022a8 <HAL_DMA_Init+0x1c8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d036      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5f      	ldr	r2, [pc, #380]	; (80022ac <HAL_DMA_Init+0x1cc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d031      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a5d      	ldr	r2, [pc, #372]	; (80022b0 <HAL_DMA_Init+0x1d0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02c      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <HAL_DMA_Init+0x1d4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d027      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_DMA_Init+0x1d8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a59      	ldr	r2, [pc, #356]	; (80022bc <HAL_DMA_Init+0x1dc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01d      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_DMA_Init+0x1e0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d018      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <HAL_DMA_Init+0x1e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_DMA_Init+0x1e8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00e      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_DMA_Init+0x1ec>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_DMA_Init+0x1f0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_DMA_Init+0xb8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <HAL_DMA_Init+0x1f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_DMA_Init+0xbc>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_DMA_Init+0xbe>
 800219c:	2300      	movs	r3, #0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 813b 	beq.w	800241a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <HAL_DMA_Init+0x1b8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d04a      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_DMA_Init+0x1bc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d045      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <HAL_DMA_Init+0x1c0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d040      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a33      	ldr	r2, [pc, #204]	; (80022a4 <HAL_DMA_Init+0x1c4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03b      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_DMA_Init+0x1c8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d036      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a30      	ldr	r2, [pc, #192]	; (80022ac <HAL_DMA_Init+0x1cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_DMA_Init+0x1d0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02c      	beq.n	8002254 <HAL_DMA_Init+0x174>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <HAL_DMA_Init+0x1d4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d027      	beq.n	8002254 <HAL_DMA_Init+0x174>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_DMA_Init+0x1d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d022      	beq.n	8002254 <HAL_DMA_Init+0x174>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_DMA_Init+0x1dc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d01d      	beq.n	8002254 <HAL_DMA_Init+0x174>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_DMA_Init+0x1e0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_DMA_Init+0x174>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_DMA_Init+0x1e4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_DMA_Init+0x174>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_DMA_Init+0x1e8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_DMA_Init+0x174>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_DMA_Init+0x1ec>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_DMA_Init+0x174>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_DMA_Init+0x1f0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_DMA_Init+0x174>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <HAL_DMA_Init+0x1f4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <HAL_DMA_Init+0x186>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_DMA_Init+0x196>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002276:	e02f      	b.n	80022d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002278:	f7ff fd94 	bl	8001da4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d928      	bls.n	80022d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2203      	movs	r2, #3
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e246      	b.n	8002726 <HAL_DMA_Init+0x646>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1c8      	bne.n	8002278 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4b83      	ldr	r3, [pc, #524]	; (8002500 <HAL_DMA_Init+0x420>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80022fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002316:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2b04      	cmp	r3, #4
 800232a:	d107      	bne.n	800233c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4313      	orrs	r3, r2
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800233c:	4b71      	ldr	r3, [pc, #452]	; (8002504 <HAL_DMA_Init+0x424>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b71      	ldr	r3, [pc, #452]	; (8002508 <HAL_DMA_Init+0x428>)
 8002342:	4013      	ands	r3, r2
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002348:	d328      	bcc.n	800239c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b28      	cmp	r3, #40	; 0x28
 8002350:	d903      	bls.n	800235a <HAL_DMA_Init+0x27a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b2e      	cmp	r3, #46	; 0x2e
 8002358:	d917      	bls.n	800238a <HAL_DMA_Init+0x2aa>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b3e      	cmp	r3, #62	; 0x3e
 8002360:	d903      	bls.n	800236a <HAL_DMA_Init+0x28a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b42      	cmp	r3, #66	; 0x42
 8002368:	d90f      	bls.n	800238a <HAL_DMA_Init+0x2aa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b46      	cmp	r3, #70	; 0x46
 8002370:	d903      	bls.n	800237a <HAL_DMA_Init+0x29a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b48      	cmp	r3, #72	; 0x48
 8002378:	d907      	bls.n	800238a <HAL_DMA_Init+0x2aa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b4e      	cmp	r3, #78	; 0x4e
 8002380:	d905      	bls.n	800238e <HAL_DMA_Init+0x2ae>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b52      	cmp	r3, #82	; 0x52
 8002388:	d801      	bhi.n	800238e <HAL_DMA_Init+0x2ae>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_DMA_Init+0x2b0>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0307 	bic.w	r3, r3, #7
 80023b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d117      	bne.n	80023f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f002 fc51 	bl	8004c80 <DMA_CheckFifoParam>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e197      	b.n	8002726 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f002 fb8c 	bl	8004b1c <DMA_CalcBaseAndBitshift>
 8002404:	4603      	mov	r3, r0
 8002406:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	223f      	movs	r2, #63	; 0x3f
 8002412:	409a      	lsls	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e0cd      	b.n	80025b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3b      	ldr	r2, [pc, #236]	; (800250c <HAL_DMA_Init+0x42c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Init+0x38a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_DMA_Init+0x430>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_Init+0x38a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a38      	ldr	r2, [pc, #224]	; (8002514 <HAL_DMA_Init+0x434>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_Init+0x38a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a36      	ldr	r2, [pc, #216]	; (8002518 <HAL_DMA_Init+0x438>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_Init+0x38a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a35      	ldr	r2, [pc, #212]	; (800251c <HAL_DMA_Init+0x43c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Init+0x38a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_DMA_Init+0x440>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_Init+0x38a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a32      	ldr	r2, [pc, #200]	; (8002524 <HAL_DMA_Init+0x444>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_Init+0x38a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a30      	ldr	r2, [pc, #192]	; (8002528 <HAL_DMA_Init+0x448>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_DMA_Init+0x38e>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_DMA_Init+0x390>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8097 	beq.w	80025a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_DMA_Init+0x42c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d021      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Init+0x430>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01c      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_DMA_Init+0x434>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d017      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_DMA_Init+0x438>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d012      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_DMA_Init+0x43c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00d      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_DMA_Init+0x440>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d008      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_DMA_Init+0x444>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_Init+0x3e4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_DMA_Init+0x448>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_DMA_Init+0x44c>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d020      	beq.n	8002530 <HAL_DMA_Init+0x450>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b80      	cmp	r3, #128	; 0x80
 80024f4:	d102      	bne.n	80024fc <HAL_DMA_Init+0x41c>
 80024f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024fa:	e01a      	b.n	8002532 <HAL_DMA_Init+0x452>
 80024fc:	2300      	movs	r3, #0
 80024fe:	e018      	b.n	8002532 <HAL_DMA_Init+0x452>
 8002500:	fe10803f 	.word	0xfe10803f
 8002504:	5c001000 	.word	0x5c001000
 8002508:	ffff0000 	.word	0xffff0000
 800250c:	58025408 	.word	0x58025408
 8002510:	5802541c 	.word	0x5802541c
 8002514:	58025430 	.word	0x58025430
 8002518:	58025444 	.word	0x58025444
 800251c:	58025458 	.word	0x58025458
 8002520:	5802546c 	.word	0x5802546c
 8002524:	58025480 	.word	0x58025480
 8002528:	58025494 	.word	0x58025494
 800252c:	fffe000f 	.word	0xfffe000f
 8002530:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002560:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b6e      	ldr	r3, [pc, #440]	; (8002730 <HAL_DMA_Init+0x650>)
 8002578:	4413      	add	r3, r2
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_DMA_Init+0x654>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f002 fac7 	bl	8004b1c <DMA_CalcBaseAndBitshift>
 800258e:	4603      	mov	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2201      	movs	r2, #1
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	e008      	b.n	80025b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2203      	movs	r2, #3
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0b7      	b.n	8002726 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5f      	ldr	r2, [pc, #380]	; (8002738 <HAL_DMA_Init+0x658>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d072      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_DMA_Init+0x65c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d06d      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_DMA_Init+0x660>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d068      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5a      	ldr	r2, [pc, #360]	; (8002744 <HAL_DMA_Init+0x664>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d063      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a59      	ldr	r2, [pc, #356]	; (8002748 <HAL_DMA_Init+0x668>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d05e      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a57      	ldr	r2, [pc, #348]	; (800274c <HAL_DMA_Init+0x66c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d059      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_DMA_Init+0x670>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d054      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_DMA_Init+0x674>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d04f      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a53      	ldr	r2, [pc, #332]	; (8002758 <HAL_DMA_Init+0x678>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d04a      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_DMA_Init+0x67c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d045      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_DMA_Init+0x680>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d040      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4e      	ldr	r2, [pc, #312]	; (8002764 <HAL_DMA_Init+0x684>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d03b      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a4d      	ldr	r2, [pc, #308]	; (8002768 <HAL_DMA_Init+0x688>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d036      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a4b      	ldr	r2, [pc, #300]	; (800276c <HAL_DMA_Init+0x68c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d031      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <HAL_DMA_Init+0x690>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d02c      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_DMA_Init+0x694>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d027      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_DMA_Init+0x698>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a45      	ldr	r2, [pc, #276]	; (800277c <HAL_DMA_Init+0x69c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01d      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a44      	ldr	r2, [pc, #272]	; (8002780 <HAL_DMA_Init+0x6a0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d018      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a42      	ldr	r2, [pc, #264]	; (8002784 <HAL_DMA_Init+0x6a4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a41      	ldr	r2, [pc, #260]	; (8002788 <HAL_DMA_Init+0x6a8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00e      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3f      	ldr	r2, [pc, #252]	; (800278c <HAL_DMA_Init+0x6ac>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d009      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <HAL_DMA_Init+0x6b0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d004      	beq.n	80026a6 <HAL_DMA_Init+0x5c6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3c      	ldr	r2, [pc, #240]	; (8002794 <HAL_DMA_Init+0x6b4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_DMA_Init+0x5ca>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_DMA_Init+0x5cc>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d032      	beq.n	8002716 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f002 fb61 	bl	8004d78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d102      	bne.n	80026c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d010      	beq.n	8002704 <HAL_DMA_Init+0x624>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d80c      	bhi.n	8002704 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f002 fbde 	bl	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e008      	b.n	8002716 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	a7fdabf8 	.word	0xa7fdabf8
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	40020010 	.word	0x40020010
 800273c:	40020028 	.word	0x40020028
 8002740:	40020040 	.word	0x40020040
 8002744:	40020058 	.word	0x40020058
 8002748:	40020070 	.word	0x40020070
 800274c:	40020088 	.word	0x40020088
 8002750:	400200a0 	.word	0x400200a0
 8002754:	400200b8 	.word	0x400200b8
 8002758:	40020410 	.word	0x40020410
 800275c:	40020428 	.word	0x40020428
 8002760:	40020440 	.word	0x40020440
 8002764:	40020458 	.word	0x40020458
 8002768:	40020470 	.word	0x40020470
 800276c:	40020488 	.word	0x40020488
 8002770:	400204a0 	.word	0x400204a0
 8002774:	400204b8 	.word	0x400204b8
 8002778:	58025408 	.word	0x58025408
 800277c:	5802541c 	.word	0x5802541c
 8002780:	58025430 	.word	0x58025430
 8002784:	58025444 	.word	0x58025444
 8002788:	58025458 	.word	0x58025458
 800278c:	5802546c 	.word	0x5802546c
 8002790:	58025480 	.word	0x58025480
 8002794:	58025494 	.word	0x58025494

08002798 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0ec      	b.n	800298e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_DMA_Start+0x2a>
 80027be:	2302      	movs	r3, #2
 80027c0:	e0e5      	b.n	800298e <HAL_DMA_Start+0x1f6>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	f040 80d0 	bne.w	8002978 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <HAL_DMA_Start+0x200>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d04a      	beq.n	8002886 <HAL_DMA_Start+0xee>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a69      	ldr	r2, [pc, #420]	; (800299c <HAL_DMA_Start+0x204>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d045      	beq.n	8002886 <HAL_DMA_Start+0xee>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a68      	ldr	r2, [pc, #416]	; (80029a0 <HAL_DMA_Start+0x208>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d040      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <HAL_DMA_Start+0x20c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d03b      	beq.n	8002886 <HAL_DMA_Start+0xee>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a65      	ldr	r2, [pc, #404]	; (80029a8 <HAL_DMA_Start+0x210>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d036      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a63      	ldr	r2, [pc, #396]	; (80029ac <HAL_DMA_Start+0x214>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d031      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a62      	ldr	r2, [pc, #392]	; (80029b0 <HAL_DMA_Start+0x218>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d02c      	beq.n	8002886 <HAL_DMA_Start+0xee>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_DMA_Start+0x21c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d027      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_DMA_Start+0x220>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <HAL_DMA_Start+0x224>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_Start+0xee>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <HAL_DMA_Start+0x228>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d018      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a5a      	ldr	r2, [pc, #360]	; (80029c4 <HAL_DMA_Start+0x22c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_DMA_Start+0xee>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a59      	ldr	r2, [pc, #356]	; (80029c8 <HAL_DMA_Start+0x230>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00e      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_DMA_Start+0x234>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_DMA_Start+0xee>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a56      	ldr	r2, [pc, #344]	; (80029d0 <HAL_DMA_Start+0x238>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_Start+0xee>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a54      	ldr	r2, [pc, #336]	; (80029d4 <HAL_DMA_Start+0x23c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d108      	bne.n	8002898 <HAL_DMA_Start+0x100>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e007      	b.n	80028a8 <HAL_DMA_Start+0x110>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f001 ff88 	bl	80047c4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a37      	ldr	r2, [pc, #220]	; (8002998 <HAL_DMA_Start+0x200>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d04a      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a36      	ldr	r2, [pc, #216]	; (800299c <HAL_DMA_Start+0x204>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d045      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <HAL_DMA_Start+0x208>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d040      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a33      	ldr	r2, [pc, #204]	; (80029a4 <HAL_DMA_Start+0x20c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d03b      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <HAL_DMA_Start+0x210>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d036      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a30      	ldr	r2, [pc, #192]	; (80029ac <HAL_DMA_Start+0x214>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d031      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_DMA_Start+0x218>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d02c      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_DMA_Start+0x21c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d027      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_DMA_Start+0x220>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d022      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_DMA_Start+0x224>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d01d      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <HAL_DMA_Start+0x228>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d018      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_DMA_Start+0x22c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <HAL_DMA_Start+0x230>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00e      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_DMA_Start+0x234>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_DMA_Start+0x238>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d004      	beq.n	8002954 <HAL_DMA_Start+0x1bc>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <HAL_DMA_Start+0x23c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d108      	bne.n	8002966 <HAL_DMA_Start+0x1ce>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e012      	b.n	800298c <HAL_DMA_Start+0x1f4>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e009      	b.n	800298c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002986:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020010 	.word	0x40020010
 800299c:	40020028 	.word	0x40020028
 80029a0:	40020040 	.word	0x40020040
 80029a4:	40020058 	.word	0x40020058
 80029a8:	40020070 	.word	0x40020070
 80029ac:	40020088 	.word	0x40020088
 80029b0:	400200a0 	.word	0x400200a0
 80029b4:	400200b8 	.word	0x400200b8
 80029b8:	40020410 	.word	0x40020410
 80029bc:	40020428 	.word	0x40020428
 80029c0:	40020440 	.word	0x40020440
 80029c4:	40020458 	.word	0x40020458
 80029c8:	40020470 	.word	0x40020470
 80029cc:	40020488 	.word	0x40020488
 80029d0:	400204a0 	.word	0x400204a0
 80029d4:	400204b8 	.word	0x400204b8

080029d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e226      	b.n	8002e42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_DMA_Start_IT+0x2a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e21f      	b.n	8002e42 <HAL_DMA_Start_IT+0x46a>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f040 820a 	bne.w	8002e2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a68      	ldr	r2, [pc, #416]	; (8002bcc <HAL_DMA_Start_IT+0x1f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_DMA_Start_IT+0x1f8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_DMA_Start_IT+0x1fc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a63      	ldr	r2, [pc, #396]	; (8002bd8 <HAL_DMA_Start_IT+0x200>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a62      	ldr	r2, [pc, #392]	; (8002bdc <HAL_DMA_Start_IT+0x204>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a60      	ldr	r2, [pc, #384]	; (8002be0 <HAL_DMA_Start_IT+0x208>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5f      	ldr	r2, [pc, #380]	; (8002be4 <HAL_DMA_Start_IT+0x20c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a5d      	ldr	r2, [pc, #372]	; (8002be8 <HAL_DMA_Start_IT+0x210>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5c      	ldr	r2, [pc, #368]	; (8002bec <HAL_DMA_Start_IT+0x214>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5a      	ldr	r2, [pc, #360]	; (8002bf0 <HAL_DMA_Start_IT+0x218>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a59      	ldr	r2, [pc, #356]	; (8002bf4 <HAL_DMA_Start_IT+0x21c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a57      	ldr	r2, [pc, #348]	; (8002bf8 <HAL_DMA_Start_IT+0x220>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a56      	ldr	r2, [pc, #344]	; (8002bfc <HAL_DMA_Start_IT+0x224>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a54      	ldr	r2, [pc, #336]	; (8002c00 <HAL_DMA_Start_IT+0x228>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a53      	ldr	r2, [pc, #332]	; (8002c04 <HAL_DMA_Start_IT+0x22c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Start_IT+0xee>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a51      	ldr	r2, [pc, #324]	; (8002c08 <HAL_DMA_Start_IT+0x230>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <HAL_DMA_Start_IT+0x100>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e007      	b.n	8002ae8 <HAL_DMA_Start_IT+0x110>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f001 fe68 	bl	80047c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_DMA_Start_IT+0x1f4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04a      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <HAL_DMA_Start_IT+0x1f8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d045      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_DMA_Start_IT+0x1fc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d040      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <HAL_DMA_Start_IT+0x200>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d03b      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_DMA_Start_IT+0x204>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d036      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <HAL_DMA_Start_IT+0x208>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d031      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <HAL_DMA_Start_IT+0x20c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02c      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <HAL_DMA_Start_IT+0x210>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d027      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_DMA_Start_IT+0x214>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d022      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <HAL_DMA_Start_IT+0x218>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d01d      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <HAL_DMA_Start_IT+0x21c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a24      	ldr	r2, [pc, #144]	; (8002bf8 <HAL_DMA_Start_IT+0x220>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_DMA_Start_IT+0x224>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00e      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <HAL_DMA_Start_IT+0x228>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_DMA_Start_IT+0x22c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_DMA_Start_IT+0x1bc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <HAL_DMA_Start_IT+0x230>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_DMA_Start_IT+0x1c0>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_DMA_Start_IT+0x1c2>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 021e 	bic.w	r2, r3, #30
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0216 	orr.w	r2, r2, #22
 8002bb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d03e      	beq.n	8002c38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0208 	orr.w	r2, r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e035      	b.n	8002c38 <HAL_DMA_Start_IT+0x260>
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 020e 	bic.w	r2, r3, #14
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 020a 	orr.w	r2, r2, #10
 8002c1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0204 	orr.w	r2, r2, #4
 8002c36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <HAL_DMA_Start_IT+0x474>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d072      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a82      	ldr	r2, [pc, #520]	; (8002e50 <HAL_DMA_Start_IT+0x478>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d06d      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a80      	ldr	r2, [pc, #512]	; (8002e54 <HAL_DMA_Start_IT+0x47c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d068      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7f      	ldr	r2, [pc, #508]	; (8002e58 <HAL_DMA_Start_IT+0x480>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d063      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7d      	ldr	r2, [pc, #500]	; (8002e5c <HAL_DMA_Start_IT+0x484>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d05e      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7c      	ldr	r2, [pc, #496]	; (8002e60 <HAL_DMA_Start_IT+0x488>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d059      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7a      	ldr	r2, [pc, #488]	; (8002e64 <HAL_DMA_Start_IT+0x48c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d054      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a79      	ldr	r2, [pc, #484]	; (8002e68 <HAL_DMA_Start_IT+0x490>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04f      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a77      	ldr	r2, [pc, #476]	; (8002e6c <HAL_DMA_Start_IT+0x494>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d04a      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a76      	ldr	r2, [pc, #472]	; (8002e70 <HAL_DMA_Start_IT+0x498>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d045      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a74      	ldr	r2, [pc, #464]	; (8002e74 <HAL_DMA_Start_IT+0x49c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d040      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a73      	ldr	r2, [pc, #460]	; (8002e78 <HAL_DMA_Start_IT+0x4a0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d03b      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a71      	ldr	r2, [pc, #452]	; (8002e7c <HAL_DMA_Start_IT+0x4a4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d036      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a70      	ldr	r2, [pc, #448]	; (8002e80 <HAL_DMA_Start_IT+0x4a8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d031      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_DMA_Start_IT+0x4ac>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02c      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6d      	ldr	r2, [pc, #436]	; (8002e88 <HAL_DMA_Start_IT+0x4b0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d027      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6b      	ldr	r2, [pc, #428]	; (8002e8c <HAL_DMA_Start_IT+0x4b4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6a      	ldr	r2, [pc, #424]	; (8002e90 <HAL_DMA_Start_IT+0x4b8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01d      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a68      	ldr	r2, [pc, #416]	; (8002e94 <HAL_DMA_Start_IT+0x4bc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d018      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a67      	ldr	r2, [pc, #412]	; (8002e98 <HAL_DMA_Start_IT+0x4c0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_DMA_Start_IT+0x4c4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a64      	ldr	r2, [pc, #400]	; (8002ea0 <HAL_DMA_Start_IT+0x4c8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a62      	ldr	r2, [pc, #392]	; (8002ea4 <HAL_DMA_Start_IT+0x4cc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_Start_IT+0x350>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a61      	ldr	r2, [pc, #388]	; (8002ea8 <HAL_DMA_Start_IT+0x4d0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_DMA_Start_IT+0x354>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_DMA_Start_IT+0x356>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a37      	ldr	r2, [pc, #220]	; (8002e4c <HAL_DMA_Start_IT+0x474>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04a      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a36      	ldr	r2, [pc, #216]	; (8002e50 <HAL_DMA_Start_IT+0x478>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d045      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_DMA_Start_IT+0x47c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d040      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_DMA_Start_IT+0x480>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d03b      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_DMA_Start_IT+0x484>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d036      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <HAL_DMA_Start_IT+0x488>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d031      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <HAL_DMA_Start_IT+0x48c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02c      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_DMA_Start_IT+0x490>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d027      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_DMA_Start_IT+0x494>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <HAL_DMA_Start_IT+0x498>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01d      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_DMA_Start_IT+0x49c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_DMA_Start_IT+0x4a0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_DMA_Start_IT+0x4a4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_DMA_Start_IT+0x4a8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_DMA_Start_IT+0x4ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_Start_IT+0x430>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_DMA_Start_IT+0x4b0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <HAL_DMA_Start_IT+0x442>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e012      	b.n	8002e40 <HAL_DMA_Start_IT+0x468>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e009      	b.n	8002e40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	58025408 	.word	0x58025408
 8002e90:	5802541c 	.word	0x5802541c
 8002e94:	58025430 	.word	0x58025430
 8002e98:	58025444 	.word	0x58025444
 8002e9c:	58025458 	.word	0x58025458
 8002ea0:	5802546c 	.word	0x5802546c
 8002ea4:	58025480 	.word	0x58025480
 8002ea8:	58025494 	.word	0x58025494

08002eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7fe ff76 	bl	8001da4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e2dc      	b.n	800347e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d008      	beq.n	8002ee2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e2cd      	b.n	800347e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a76      	ldr	r2, [pc, #472]	; (80030c0 <HAL_DMA_Abort+0x214>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d04a      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a74      	ldr	r2, [pc, #464]	; (80030c4 <HAL_DMA_Abort+0x218>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d045      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a73      	ldr	r2, [pc, #460]	; (80030c8 <HAL_DMA_Abort+0x21c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d040      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a71      	ldr	r2, [pc, #452]	; (80030cc <HAL_DMA_Abort+0x220>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d03b      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a70      	ldr	r2, [pc, #448]	; (80030d0 <HAL_DMA_Abort+0x224>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d036      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6e      	ldr	r2, [pc, #440]	; (80030d4 <HAL_DMA_Abort+0x228>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d031      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6d      	ldr	r2, [pc, #436]	; (80030d8 <HAL_DMA_Abort+0x22c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d02c      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6b      	ldr	r2, [pc, #428]	; (80030dc <HAL_DMA_Abort+0x230>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d027      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_DMA_Abort+0x234>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d022      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <HAL_DMA_Abort+0x238>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01d      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_DMA_Abort+0x23c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d018      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_DMA_Abort+0x240>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a64      	ldr	r2, [pc, #400]	; (80030f0 <HAL_DMA_Abort+0x244>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a62      	ldr	r2, [pc, #392]	; (80030f4 <HAL_DMA_Abort+0x248>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d009      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_DMA_Abort+0x24c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_DMA_Abort+0xd6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5f      	ldr	r2, [pc, #380]	; (80030fc <HAL_DMA_Abort+0x250>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_DMA_Abort+0xda>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_DMA_Abort+0xdc>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 021e 	bic.w	r2, r2, #30
 8002f9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002faa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e00a      	b.n	8002fca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 020e 	bic.w	r2, r2, #14
 8002fc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <HAL_DMA_Abort+0x214>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d072      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_DMA_Abort+0x218>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d06d      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a39      	ldr	r2, [pc, #228]	; (80030c8 <HAL_DMA_Abort+0x21c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d068      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a37      	ldr	r2, [pc, #220]	; (80030cc <HAL_DMA_Abort+0x220>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d063      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a36      	ldr	r2, [pc, #216]	; (80030d0 <HAL_DMA_Abort+0x224>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d05e      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a34      	ldr	r2, [pc, #208]	; (80030d4 <HAL_DMA_Abort+0x228>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d059      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a33      	ldr	r2, [pc, #204]	; (80030d8 <HAL_DMA_Abort+0x22c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d054      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_DMA_Abort+0x230>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d04f      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a30      	ldr	r2, [pc, #192]	; (80030e0 <HAL_DMA_Abort+0x234>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d04a      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2e      	ldr	r2, [pc, #184]	; (80030e4 <HAL_DMA_Abort+0x238>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d045      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_DMA_Abort+0x23c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <HAL_DMA_Abort+0x240>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d03b      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_DMA_Abort+0x244>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d036      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <HAL_DMA_Abort+0x248>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d031      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_DMA_Abort+0x24c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d02c      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_DMA_Abort+0x250>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d027      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a24      	ldr	r2, [pc, #144]	; (8003100 <HAL_DMA_Abort+0x254>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a22      	ldr	r2, [pc, #136]	; (8003104 <HAL_DMA_Abort+0x258>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01d      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_DMA_Abort+0x25c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_DMA_Abort+0x260>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_DMA_Abort+0x264>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <HAL_DMA_Abort+0x268>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_DMA_Abort+0x26c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_DMA_Abort+0x20e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_DMA_Abort+0x270>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d132      	bne.n	8003120 <HAL_DMA_Abort+0x274>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e031      	b.n	8003122 <HAL_DMA_Abort+0x276>
 80030be:	bf00      	nop
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8
 8003100:	58025408 	.word	0x58025408
 8003104:	5802541c 	.word	0x5802541c
 8003108:	58025430 	.word	0x58025430
 800310c:	58025444 	.word	0x58025444
 8003110:	58025458 	.word	0x58025458
 8003114:	5802546c 	.word	0x5802546c
 8003118:	58025480 	.word	0x58025480
 800311c:	58025494 	.word	0x58025494
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003134:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6d      	ldr	r2, [pc, #436]	; (80032f0 <HAL_DMA_Abort+0x444>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d04a      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6b      	ldr	r2, [pc, #428]	; (80032f4 <HAL_DMA_Abort+0x448>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d045      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6a      	ldr	r2, [pc, #424]	; (80032f8 <HAL_DMA_Abort+0x44c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d040      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a68      	ldr	r2, [pc, #416]	; (80032fc <HAL_DMA_Abort+0x450>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03b      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a67      	ldr	r2, [pc, #412]	; (8003300 <HAL_DMA_Abort+0x454>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d036      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_DMA_Abort+0x458>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a64      	ldr	r2, [pc, #400]	; (8003308 <HAL_DMA_Abort+0x45c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d02c      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a62      	ldr	r2, [pc, #392]	; (800330c <HAL_DMA_Abort+0x460>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a61      	ldr	r2, [pc, #388]	; (8003310 <HAL_DMA_Abort+0x464>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5f      	ldr	r2, [pc, #380]	; (8003314 <HAL_DMA_Abort+0x468>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_DMA_Abort+0x46c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a5c      	ldr	r2, [pc, #368]	; (800331c <HAL_DMA_Abort+0x470>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5b      	ldr	r2, [pc, #364]	; (8003320 <HAL_DMA_Abort+0x474>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a59      	ldr	r2, [pc, #356]	; (8003324 <HAL_DMA_Abort+0x478>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a58      	ldr	r2, [pc, #352]	; (8003328 <HAL_DMA_Abort+0x47c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_Abort+0x32a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a56      	ldr	r2, [pc, #344]	; (800332c <HAL_DMA_Abort+0x480>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_DMA_Abort+0x33c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e007      	b.n	80031f8 <HAL_DMA_Abort+0x34c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031f8:	e013      	b.n	8003222 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031fa:	f7fe fdd3 	bl	8001da4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b05      	cmp	r3, #5
 8003206:	d90c      	bls.n	8003222 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e12d      	b.n	800347e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_DMA_Abort+0x444>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04a      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2d      	ldr	r2, [pc, #180]	; (80032f4 <HAL_DMA_Abort+0x448>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d045      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <HAL_DMA_Abort+0x44c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d040      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_DMA_Abort+0x450>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d03b      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a29      	ldr	r2, [pc, #164]	; (8003300 <HAL_DMA_Abort+0x454>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d036      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_DMA_Abort+0x458>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d031      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a26      	ldr	r2, [pc, #152]	; (8003308 <HAL_DMA_Abort+0x45c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d02c      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <HAL_DMA_Abort+0x460>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d027      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_DMA_Abort+0x464>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d022      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a21      	ldr	r2, [pc, #132]	; (8003314 <HAL_DMA_Abort+0x468>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01d      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_DMA_Abort+0x46c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d018      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1e      	ldr	r2, [pc, #120]	; (800331c <HAL_DMA_Abort+0x470>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_DMA_Abort+0x474>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_DMA_Abort+0x478>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <HAL_DMA_Abort+0x47c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_DMA_Abort+0x422>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_DMA_Abort+0x480>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_DMA_Abort+0x426>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_DMA_Abort+0x428>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02b      	beq.n	8003330 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	223f      	movs	r2, #63	; 0x3f
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	e02a      	b.n	8003346 <HAL_DMA_Abort+0x49a>
 80032f0:	40020010 	.word	0x40020010
 80032f4:	40020028 	.word	0x40020028
 80032f8:	40020040 	.word	0x40020040
 80032fc:	40020058 	.word	0x40020058
 8003300:	40020070 	.word	0x40020070
 8003304:	40020088 	.word	0x40020088
 8003308:	400200a0 	.word	0x400200a0
 800330c:	400200b8 	.word	0x400200b8
 8003310:	40020410 	.word	0x40020410
 8003314:	40020428 	.word	0x40020428
 8003318:	40020440 	.word	0x40020440
 800331c:	40020458 	.word	0x40020458
 8003320:	40020470 	.word	0x40020470
 8003324:	40020488 	.word	0x40020488
 8003328:	400204a0 	.word	0x400204a0
 800332c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_DMA_Abort+0x5dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d072      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a4d      	ldr	r2, [pc, #308]	; (800348c <HAL_DMA_Abort+0x5e0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d06d      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_DMA_Abort+0x5e4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d068      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_DMA_Abort+0x5e8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d063      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a49      	ldr	r2, [pc, #292]	; (8003498 <HAL_DMA_Abort+0x5ec>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d05e      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a47      	ldr	r2, [pc, #284]	; (800349c <HAL_DMA_Abort+0x5f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d059      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a46      	ldr	r2, [pc, #280]	; (80034a0 <HAL_DMA_Abort+0x5f4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d054      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a44      	ldr	r2, [pc, #272]	; (80034a4 <HAL_DMA_Abort+0x5f8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d04f      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a43      	ldr	r2, [pc, #268]	; (80034a8 <HAL_DMA_Abort+0x5fc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d04a      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a41      	ldr	r2, [pc, #260]	; (80034ac <HAL_DMA_Abort+0x600>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d045      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <HAL_DMA_Abort+0x604>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d040      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3e      	ldr	r2, [pc, #248]	; (80034b4 <HAL_DMA_Abort+0x608>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d03b      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <HAL_DMA_Abort+0x60c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d036      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <HAL_DMA_Abort+0x610>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <HAL_DMA_Abort+0x614>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d02c      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a38      	ldr	r2, [pc, #224]	; (80034c4 <HAL_DMA_Abort+0x618>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d027      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a37      	ldr	r2, [pc, #220]	; (80034c8 <HAL_DMA_Abort+0x61c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d022      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <HAL_DMA_Abort+0x620>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01d      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <HAL_DMA_Abort+0x624>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d018      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <HAL_DMA_Abort+0x628>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <HAL_DMA_Abort+0x62c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00e      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <HAL_DMA_Abort+0x630>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <HAL_DMA_Abort+0x634>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d004      	beq.n	8003436 <HAL_DMA_Abort+0x58a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2c      	ldr	r2, [pc, #176]	; (80034e4 <HAL_DMA_Abort+0x638>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_DMA_Abort+0x58e>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_DMA_Abort+0x590>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003448:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003460:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800346a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40020010 	.word	0x40020010
 800348c:	40020028 	.word	0x40020028
 8003490:	40020040 	.word	0x40020040
 8003494:	40020058 	.word	0x40020058
 8003498:	40020070 	.word	0x40020070
 800349c:	40020088 	.word	0x40020088
 80034a0:	400200a0 	.word	0x400200a0
 80034a4:	400200b8 	.word	0x400200b8
 80034a8:	40020410 	.word	0x40020410
 80034ac:	40020428 	.word	0x40020428
 80034b0:	40020440 	.word	0x40020440
 80034b4:	40020458 	.word	0x40020458
 80034b8:	40020470 	.word	0x40020470
 80034bc:	40020488 	.word	0x40020488
 80034c0:	400204a0 	.word	0x400204a0
 80034c4:	400204b8 	.word	0x400204b8
 80034c8:	58025408 	.word	0x58025408
 80034cc:	5802541c 	.word	0x5802541c
 80034d0:	58025430 	.word	0x58025430
 80034d4:	58025444 	.word	0x58025444
 80034d8:	58025458 	.word	0x58025458
 80034dc:	5802546c 	.word	0x5802546c
 80034e0:	58025480 	.word	0x58025480
 80034e4:	58025494 	.word	0x58025494

080034e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e205      	b.n	8003906 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d004      	beq.n	8003510 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e1fa      	b.n	8003906 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a8c      	ldr	r2, [pc, #560]	; (8003748 <HAL_DMA_Abort_IT+0x260>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d04a      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8b      	ldr	r2, [pc, #556]	; (800374c <HAL_DMA_Abort_IT+0x264>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d045      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a89      	ldr	r2, [pc, #548]	; (8003750 <HAL_DMA_Abort_IT+0x268>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d040      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a88      	ldr	r2, [pc, #544]	; (8003754 <HAL_DMA_Abort_IT+0x26c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d03b      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a86      	ldr	r2, [pc, #536]	; (8003758 <HAL_DMA_Abort_IT+0x270>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d036      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a85      	ldr	r2, [pc, #532]	; (800375c <HAL_DMA_Abort_IT+0x274>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d031      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a83      	ldr	r2, [pc, #524]	; (8003760 <HAL_DMA_Abort_IT+0x278>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02c      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a82      	ldr	r2, [pc, #520]	; (8003764 <HAL_DMA_Abort_IT+0x27c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d027      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a80      	ldr	r2, [pc, #512]	; (8003768 <HAL_DMA_Abort_IT+0x280>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d022      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7f      	ldr	r2, [pc, #508]	; (800376c <HAL_DMA_Abort_IT+0x284>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d01d      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7d      	ldr	r2, [pc, #500]	; (8003770 <HAL_DMA_Abort_IT+0x288>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d018      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7c      	ldr	r2, [pc, #496]	; (8003774 <HAL_DMA_Abort_IT+0x28c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a7a      	ldr	r2, [pc, #488]	; (8003778 <HAL_DMA_Abort_IT+0x290>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00e      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a79      	ldr	r2, [pc, #484]	; (800377c <HAL_DMA_Abort_IT+0x294>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_DMA_Abort_IT+0x298>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xc8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a76      	ldr	r2, [pc, #472]	; (8003784 <HAL_DMA_Abort_IT+0x29c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_DMA_Abort_IT+0xcc>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_DMA_Abort_IT+0xce>
 80035b4:	2300      	movs	r3, #0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d065      	beq.n	8003686 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2204      	movs	r2, #4
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_DMA_Abort_IT+0x260>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d04a      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5e      	ldr	r2, [pc, #376]	; (800374c <HAL_DMA_Abort_IT+0x264>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d045      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <HAL_DMA_Abort_IT+0x268>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d040      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5b      	ldr	r2, [pc, #364]	; (8003754 <HAL_DMA_Abort_IT+0x26c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d03b      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5a      	ldr	r2, [pc, #360]	; (8003758 <HAL_DMA_Abort_IT+0x270>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d036      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_DMA_Abort_IT+0x274>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d031      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_DMA_Abort_IT+0x278>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d02c      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a55      	ldr	r2, [pc, #340]	; (8003764 <HAL_DMA_Abort_IT+0x27c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d027      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_DMA_Abort_IT+0x280>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_DMA_Abort_IT+0x284>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01d      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_DMA_Abort_IT+0x288>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d018      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4f      	ldr	r2, [pc, #316]	; (8003774 <HAL_DMA_Abort_IT+0x28c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4e      	ldr	r2, [pc, #312]	; (8003778 <HAL_DMA_Abort_IT+0x290>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_DMA_Abort_IT+0x294>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_DMA_Abort_IT+0x298>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_DMA_Abort_IT+0x17a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_DMA_Abort_IT+0x29c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <HAL_DMA_Abort_IT+0x18c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e147      	b.n	8003904 <HAL_DMA_Abort_IT+0x41c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e13e      	b.n	8003904 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 020e 	bic.w	r2, r2, #14
 8003694:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_DMA_Abort_IT+0x260>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04a      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a29      	ldr	r2, [pc, #164]	; (800374c <HAL_DMA_Abort_IT+0x264>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d045      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_DMA_Abort_IT+0x268>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d040      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a26      	ldr	r2, [pc, #152]	; (8003754 <HAL_DMA_Abort_IT+0x26c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d03b      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a25      	ldr	r2, [pc, #148]	; (8003758 <HAL_DMA_Abort_IT+0x270>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d036      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a23      	ldr	r2, [pc, #140]	; (800375c <HAL_DMA_Abort_IT+0x274>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d031      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_DMA_Abort_IT+0x278>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d02c      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <HAL_DMA_Abort_IT+0x27c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d027      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_DMA_Abort_IT+0x280>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_DMA_Abort_IT+0x284>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01d      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <HAL_DMA_Abort_IT+0x288>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_DMA_Abort_IT+0x28c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_DMA_Abort_IT+0x290>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_DMA_Abort_IT+0x294>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_DMA_Abort_IT+0x298>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_DMA_Abort_IT+0x24e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_DMA_Abort_IT+0x29c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d128      	bne.n	8003788 <HAL_DMA_Abort_IT+0x2a0>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e027      	b.n	8003798 <HAL_DMA_Abort_IT+0x2b0>
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_DMA_Abort_IT+0x428>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d072      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5b      	ldr	r2, [pc, #364]	; (8003914 <HAL_DMA_Abort_IT+0x42c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d06d      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a59      	ldr	r2, [pc, #356]	; (8003918 <HAL_DMA_Abort_IT+0x430>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d068      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_DMA_Abort_IT+0x434>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d063      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a56      	ldr	r2, [pc, #344]	; (8003920 <HAL_DMA_Abort_IT+0x438>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d05e      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a55      	ldr	r2, [pc, #340]	; (8003924 <HAL_DMA_Abort_IT+0x43c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d059      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a53      	ldr	r2, [pc, #332]	; (8003928 <HAL_DMA_Abort_IT+0x440>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d054      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_DMA_Abort_IT+0x444>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04f      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_DMA_Abort_IT+0x448>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4f      	ldr	r2, [pc, #316]	; (8003934 <HAL_DMA_Abort_IT+0x44c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d045      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a4d      	ldr	r2, [pc, #308]	; (8003938 <HAL_DMA_Abort_IT+0x450>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d040      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a4c      	ldr	r2, [pc, #304]	; (800393c <HAL_DMA_Abort_IT+0x454>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d03b      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a4a      	ldr	r2, [pc, #296]	; (8003940 <HAL_DMA_Abort_IT+0x458>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d036      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a49      	ldr	r2, [pc, #292]	; (8003944 <HAL_DMA_Abort_IT+0x45c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d031      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a47      	ldr	r2, [pc, #284]	; (8003948 <HAL_DMA_Abort_IT+0x460>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a46      	ldr	r2, [pc, #280]	; (800394c <HAL_DMA_Abort_IT+0x464>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d027      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a44      	ldr	r2, [pc, #272]	; (8003950 <HAL_DMA_Abort_IT+0x468>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a43      	ldr	r2, [pc, #268]	; (8003954 <HAL_DMA_Abort_IT+0x46c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01d      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a41      	ldr	r2, [pc, #260]	; (8003958 <HAL_DMA_Abort_IT+0x470>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a40      	ldr	r2, [pc, #256]	; (800395c <HAL_DMA_Abort_IT+0x474>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3e      	ldr	r2, [pc, #248]	; (8003960 <HAL_DMA_Abort_IT+0x478>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3d      	ldr	r2, [pc, #244]	; (8003964 <HAL_DMA_Abort_IT+0x47c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3b      	ldr	r2, [pc, #236]	; (8003968 <HAL_DMA_Abort_IT+0x480>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_DMA_Abort_IT+0x3a0>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_DMA_Abort_IT+0x484>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_DMA_Abort_IT+0x3a4>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_DMA_Abort_IT+0x3a6>
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d028      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40020010 	.word	0x40020010
 8003914:	40020028 	.word	0x40020028
 8003918:	40020040 	.word	0x40020040
 800391c:	40020058 	.word	0x40020058
 8003920:	40020070 	.word	0x40020070
 8003924:	40020088 	.word	0x40020088
 8003928:	400200a0 	.word	0x400200a0
 800392c:	400200b8 	.word	0x400200b8
 8003930:	40020410 	.word	0x40020410
 8003934:	40020428 	.word	0x40020428
 8003938:	40020440 	.word	0x40020440
 800393c:	40020458 	.word	0x40020458
 8003940:	40020470 	.word	0x40020470
 8003944:	40020488 	.word	0x40020488
 8003948:	400204a0 	.word	0x400204a0
 800394c:	400204b8 	.word	0x400204b8
 8003950:	58025408 	.word	0x58025408
 8003954:	5802541c 	.word	0x5802541c
 8003958:	58025430 	.word	0x58025430
 800395c:	58025444 	.word	0x58025444
 8003960:	58025458 	.word	0x58025458
 8003964:	5802546c 	.word	0x5802546c
 8003968:	58025480 	.word	0x58025480
 800396c:	58025494 	.word	0x58025494

08003970 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800397c:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <HAL_DMA_IRQHandler+0x1ac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a67      	ldr	r2, [pc, #412]	; (8003b20 <HAL_DMA_IRQHandler+0x1b0>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5f      	ldr	r2, [pc, #380]	; (8003b24 <HAL_DMA_IRQHandler+0x1b4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d04a      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <HAL_DMA_IRQHandler+0x1b8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d045      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5c      	ldr	r2, [pc, #368]	; (8003b2c <HAL_DMA_IRQHandler+0x1bc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d040      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5a      	ldr	r2, [pc, #360]	; (8003b30 <HAL_DMA_IRQHandler+0x1c0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d03b      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a59      	ldr	r2, [pc, #356]	; (8003b34 <HAL_DMA_IRQHandler+0x1c4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a57      	ldr	r2, [pc, #348]	; (8003b38 <HAL_DMA_IRQHandler+0x1c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a56      	ldr	r2, [pc, #344]	; (8003b3c <HAL_DMA_IRQHandler+0x1cc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a54      	ldr	r2, [pc, #336]	; (8003b40 <HAL_DMA_IRQHandler+0x1d0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a53      	ldr	r2, [pc, #332]	; (8003b44 <HAL_DMA_IRQHandler+0x1d4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a51      	ldr	r2, [pc, #324]	; (8003b48 <HAL_DMA_IRQHandler+0x1d8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a50      	ldr	r2, [pc, #320]	; (8003b4c <HAL_DMA_IRQHandler+0x1dc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4e      	ldr	r2, [pc, #312]	; (8003b50 <HAL_DMA_IRQHandler+0x1e0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a4d      	ldr	r2, [pc, #308]	; (8003b54 <HAL_DMA_IRQHandler+0x1e4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a4b      	ldr	r2, [pc, #300]	; (8003b58 <HAL_DMA_IRQHandler+0x1e8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a4a      	ldr	r2, [pc, #296]	; (8003b5c <HAL_DMA_IRQHandler+0x1ec>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xd2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <HAL_DMA_IRQHandler+0x1f0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_DMA_IRQHandler+0xd6>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 842b 	beq.w	80042a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2208      	movs	r2, #8
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80a2 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2e      	ldr	r2, [pc, #184]	; (8003b24 <HAL_DMA_IRQHandler+0x1b4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d04a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <HAL_DMA_IRQHandler+0x1b8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d045      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <HAL_DMA_IRQHandler+0x1bc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d040      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_DMA_IRQHandler+0x1c0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d03b      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <HAL_DMA_IRQHandler+0x1c4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d036      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <HAL_DMA_IRQHandler+0x1c8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d031      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <HAL_DMA_IRQHandler+0x1cc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <HAL_DMA_IRQHandler+0x1d0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d027      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <HAL_DMA_IRQHandler+0x1d4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d022      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <HAL_DMA_IRQHandler+0x1d8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d01d      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1f      	ldr	r2, [pc, #124]	; (8003b4c <HAL_DMA_IRQHandler+0x1dc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_DMA_IRQHandler+0x1e0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <HAL_DMA_IRQHandler+0x1e4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_DMA_IRQHandler+0x1e8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_DMA_IRQHandler+0x1ec>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x194>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_DMA_IRQHandler+0x1f0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d12f      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x1f4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	e02e      	b.n	8003b78 <HAL_DMA_IRQHandler+0x208>
 8003b1a:	bf00      	nop
 8003b1c:	24000018 	.word	0x24000018
 8003b20:	1b4e81b5 	.word	0x1b4e81b5
 8003b24:	40020010 	.word	0x40020010
 8003b28:	40020028 	.word	0x40020028
 8003b2c:	40020040 	.word	0x40020040
 8003b30:	40020058 	.word	0x40020058
 8003b34:	40020070 	.word	0x40020070
 8003b38:	40020088 	.word	0x40020088
 8003b3c:	400200a0 	.word	0x400200a0
 8003b40:	400200b8 	.word	0x400200b8
 8003b44:	40020410 	.word	0x40020410
 8003b48:	40020428 	.word	0x40020428
 8003b4c:	40020440 	.word	0x40020440
 8003b50:	40020458 	.word	0x40020458
 8003b54:	40020470 	.word	0x40020470
 8003b58:	40020488 	.word	0x40020488
 8003b5c:	400204a0 	.word	0x400204a0
 8003b60:	400204b8 	.word	0x400204b8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d015      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0204 	bic.w	r2, r2, #4
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2208      	movs	r2, #8
 8003b96:	409a      	lsls	r2, r3
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d06e      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a69      	ldr	r2, [pc, #420]	; (8003d68 <HAL_DMA_IRQHandler+0x3f8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d04a      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a67      	ldr	r2, [pc, #412]	; (8003d6c <HAL_DMA_IRQHandler+0x3fc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d045      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a66      	ldr	r2, [pc, #408]	; (8003d70 <HAL_DMA_IRQHandler+0x400>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d040      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a64      	ldr	r2, [pc, #400]	; (8003d74 <HAL_DMA_IRQHandler+0x404>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d03b      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a63      	ldr	r2, [pc, #396]	; (8003d78 <HAL_DMA_IRQHandler+0x408>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d036      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a61      	ldr	r2, [pc, #388]	; (8003d7c <HAL_DMA_IRQHandler+0x40c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d031      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a60      	ldr	r2, [pc, #384]	; (8003d80 <HAL_DMA_IRQHandler+0x410>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d02c      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5e      	ldr	r2, [pc, #376]	; (8003d84 <HAL_DMA_IRQHandler+0x414>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d027      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5d      	ldr	r2, [pc, #372]	; (8003d88 <HAL_DMA_IRQHandler+0x418>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5b      	ldr	r2, [pc, #364]	; (8003d8c <HAL_DMA_IRQHandler+0x41c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01d      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5a      	ldr	r2, [pc, #360]	; (8003d90 <HAL_DMA_IRQHandler+0x420>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a58      	ldr	r2, [pc, #352]	; (8003d94 <HAL_DMA_IRQHandler+0x424>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a57      	ldr	r2, [pc, #348]	; (8003d98 <HAL_DMA_IRQHandler+0x428>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a55      	ldr	r2, [pc, #340]	; (8003d9c <HAL_DMA_IRQHandler+0x42c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a54      	ldr	r2, [pc, #336]	; (8003da0 <HAL_DMA_IRQHandler+0x430>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2ee>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <HAL_DMA_IRQHandler+0x434>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10a      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x304>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e003      	b.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0202 	orr.w	r2, r3, #2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 808f 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <HAL_DMA_IRQHandler+0x3f8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04a      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <HAL_DMA_IRQHandler+0x3fc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d045      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <HAL_DMA_IRQHandler+0x400>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_DMA_IRQHandler+0x404>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d03b      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a26      	ldr	r2, [pc, #152]	; (8003d78 <HAL_DMA_IRQHandler+0x408>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d036      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a24      	ldr	r2, [pc, #144]	; (8003d7c <HAL_DMA_IRQHandler+0x40c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <HAL_DMA_IRQHandler+0x410>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d02c      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <HAL_DMA_IRQHandler+0x414>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <HAL_DMA_IRQHandler+0x418>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <HAL_DMA_IRQHandler+0x41c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_DMA_IRQHandler+0x420>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <HAL_DMA_IRQHandler+0x424>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <HAL_DMA_IRQHandler+0x428>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_DMA_IRQHandler+0x42c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <HAL_DMA_IRQHandler+0x430>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x3e2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <HAL_DMA_IRQHandler+0x434>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12a      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x438>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e023      	b.n	8003db0 <HAL_DMA_IRQHandler+0x440>
 8003d68:	40020010 	.word	0x40020010
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	40020040 	.word	0x40020040
 8003d74:	40020058 	.word	0x40020058
 8003d78:	40020070 	.word	0x40020070
 8003d7c:	40020088 	.word	0x40020088
 8003d80:	400200a0 	.word	0x400200a0
 8003d84:	400200b8 	.word	0x400200b8
 8003d88:	40020410 	.word	0x40020410
 8003d8c:	40020428 	.word	0x40020428
 8003d90:	40020440 	.word	0x40020440
 8003d94:	40020458 	.word	0x40020458
 8003d98:	40020470 	.word	0x40020470
 8003d9c:	40020488 	.word	0x40020488
 8003da0:	400204a0 	.word	0x400204a0
 8003da4:	400204b8 	.word	0x400204b8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2210      	movs	r2, #16
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a6 	beq.w	8003f32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a85      	ldr	r2, [pc, #532]	; (8004000 <HAL_DMA_IRQHandler+0x690>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d04a      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a83      	ldr	r2, [pc, #524]	; (8004004 <HAL_DMA_IRQHandler+0x694>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d045      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a82      	ldr	r2, [pc, #520]	; (8004008 <HAL_DMA_IRQHandler+0x698>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d040      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a80      	ldr	r2, [pc, #512]	; (800400c <HAL_DMA_IRQHandler+0x69c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d03b      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7f      	ldr	r2, [pc, #508]	; (8004010 <HAL_DMA_IRQHandler+0x6a0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d036      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7d      	ldr	r2, [pc, #500]	; (8004014 <HAL_DMA_IRQHandler+0x6a4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d031      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7c      	ldr	r2, [pc, #496]	; (8004018 <HAL_DMA_IRQHandler+0x6a8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d02c      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a7a      	ldr	r2, [pc, #488]	; (800401c <HAL_DMA_IRQHandler+0x6ac>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d027      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a79      	ldr	r2, [pc, #484]	; (8004020 <HAL_DMA_IRQHandler+0x6b0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d022      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a77      	ldr	r2, [pc, #476]	; (8004024 <HAL_DMA_IRQHandler+0x6b4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01d      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a76      	ldr	r2, [pc, #472]	; (8004028 <HAL_DMA_IRQHandler+0x6b8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d018      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a74      	ldr	r2, [pc, #464]	; (800402c <HAL_DMA_IRQHandler+0x6bc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a73      	ldr	r2, [pc, #460]	; (8004030 <HAL_DMA_IRQHandler+0x6c0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a71      	ldr	r2, [pc, #452]	; (8004034 <HAL_DMA_IRQHandler+0x6c4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a70      	ldr	r2, [pc, #448]	; (8004038 <HAL_DMA_IRQHandler+0x6c8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x516>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6e      	ldr	r2, [pc, #440]	; (800403c <HAL_DMA_IRQHandler+0x6cc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10a      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x52c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e009      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x540>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d03e      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d024      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e01f      	b.n	8003f32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01b      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
 8003f02:	e016      	b.n	8003f32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0208 	bic.w	r2, r2, #8
 8003f20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8110 	beq.w	8004168 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <HAL_DMA_IRQHandler+0x690>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d04a      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <HAL_DMA_IRQHandler+0x694>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d045      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a29      	ldr	r2, [pc, #164]	; (8004008 <HAL_DMA_IRQHandler+0x698>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d040      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a28      	ldr	r2, [pc, #160]	; (800400c <HAL_DMA_IRQHandler+0x69c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d03b      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a26      	ldr	r2, [pc, #152]	; (8004010 <HAL_DMA_IRQHandler+0x6a0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d036      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a25      	ldr	r2, [pc, #148]	; (8004014 <HAL_DMA_IRQHandler+0x6a4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d031      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <HAL_DMA_IRQHandler+0x6a8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d02c      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_DMA_IRQHandler+0x6ac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d027      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a20      	ldr	r2, [pc, #128]	; (8004020 <HAL_DMA_IRQHandler+0x6b0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d022      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <HAL_DMA_IRQHandler+0x6b4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d01d      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_DMA_IRQHandler+0x6b8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d018      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_DMA_IRQHandler+0x6bc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <HAL_DMA_IRQHandler+0x6c0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_DMA_IRQHandler+0x6c4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <HAL_DMA_IRQHandler+0x6c8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x678>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <HAL_DMA_IRQHandler+0x6cc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d12b      	bne.n	8004040 <HAL_DMA_IRQHandler+0x6d0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e02a      	b.n	8004054 <HAL_DMA_IRQHandler+0x6e4>
 8003ffe:	bf00      	nop
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8087 	beq.w	8004168 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2220      	movs	r2, #32
 8004064:	409a      	lsls	r2, r3
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b04      	cmp	r3, #4
 8004074:	d139      	bne.n	80040ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0216 	bic.w	r2, r2, #22
 8004084:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004094:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x736>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0208 	bic.w	r2, r2, #8
 80040b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	223f      	movs	r2, #63	; 0x3f
 80040c0:	409a      	lsls	r2, r3
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 834a 	beq.w	8004774 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
          }
          return;
 80040e8:	e344      	b.n	8004774 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d018      	beq.n	800412a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d108      	bne.n	8004118 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02c      	beq.n	8004168 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
 8004116:	e027      	b.n	8004168 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
 8004128:	e01e      	b.n	8004168 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10f      	bne.n	8004158 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0210 	bic.w	r2, r2, #16
 8004146:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8306 	beq.w	800477e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8088 	beq.w	8004290 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a7a      	ldr	r2, [pc, #488]	; (8004378 <HAL_DMA_IRQHandler+0xa08>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d04a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a79      	ldr	r2, [pc, #484]	; (800437c <HAL_DMA_IRQHandler+0xa0c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d045      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a77      	ldr	r2, [pc, #476]	; (8004380 <HAL_DMA_IRQHandler+0xa10>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d040      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a76      	ldr	r2, [pc, #472]	; (8004384 <HAL_DMA_IRQHandler+0xa14>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d03b      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a74      	ldr	r2, [pc, #464]	; (8004388 <HAL_DMA_IRQHandler+0xa18>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d036      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a73      	ldr	r2, [pc, #460]	; (800438c <HAL_DMA_IRQHandler+0xa1c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d031      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a71      	ldr	r2, [pc, #452]	; (8004390 <HAL_DMA_IRQHandler+0xa20>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02c      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a70      	ldr	r2, [pc, #448]	; (8004394 <HAL_DMA_IRQHandler+0xa24>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d027      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_DMA_IRQHandler+0xa28>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6d      	ldr	r2, [pc, #436]	; (800439c <HAL_DMA_IRQHandler+0xa2c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d01d      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6b      	ldr	r2, [pc, #428]	; (80043a0 <HAL_DMA_IRQHandler+0xa30>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6a      	ldr	r2, [pc, #424]	; (80043a4 <HAL_DMA_IRQHandler+0xa34>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a68      	ldr	r2, [pc, #416]	; (80043a8 <HAL_DMA_IRQHandler+0xa38>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_DMA_IRQHandler+0xa3c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a65      	ldr	r2, [pc, #404]	; (80043b0 <HAL_DMA_IRQHandler+0xa40>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_DMA_IRQHandler+0x8b8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a64      	ldr	r2, [pc, #400]	; (80043b4 <HAL_DMA_IRQHandler+0xa44>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <HAL_DMA_IRQHandler+0x8ca>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e007      	b.n	800424a <HAL_DMA_IRQHandler+0x8da>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	429a      	cmp	r2, r3
 8004254:	d307      	bcc.n	8004266 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f2      	bne.n	800424a <HAL_DMA_IRQHandler+0x8da>
 8004264:	e000      	b.n	8004268 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004266:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2203      	movs	r2, #3
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004286:	e003      	b.n	8004290 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8272 	beq.w	800477e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
 80042a2:	e26c      	b.n	800477e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <HAL_DMA_IRQHandler+0xa48>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a42      	ldr	r2, [pc, #264]	; (80043bc <HAL_DMA_IRQHandler+0xa4c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d01d      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a40      	ldr	r2, [pc, #256]	; (80043c0 <HAL_DMA_IRQHandler+0xa50>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <HAL_DMA_IRQHandler+0xa54>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <HAL_DMA_IRQHandler+0xa58>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <HAL_DMA_IRQHandler+0xa5c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <HAL_DMA_IRQHandler+0xa60>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x984>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_DMA_IRQHandler+0xa64>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x988>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_DMA_IRQHandler+0x98a>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 823f 	beq.w	800477e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2204      	movs	r2, #4
 8004312:	409a      	lsls	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80cd 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xb48>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80c7 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2204      	movs	r2, #4
 8004334:	409a      	lsls	r2, r3
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d049      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8210 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004360:	e20a      	b.n	8004778 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8206 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004374:	e200      	b.n	8004778 <HAL_DMA_IRQHandler+0xe08>
 8004376:	bf00      	nop
 8004378:	40020010 	.word	0x40020010
 800437c:	40020028 	.word	0x40020028
 8004380:	40020040 	.word	0x40020040
 8004384:	40020058 	.word	0x40020058
 8004388:	40020070 	.word	0x40020070
 800438c:	40020088 	.word	0x40020088
 8004390:	400200a0 	.word	0x400200a0
 8004394:	400200b8 	.word	0x400200b8
 8004398:	40020410 	.word	0x40020410
 800439c:	40020428 	.word	0x40020428
 80043a0:	40020440 	.word	0x40020440
 80043a4:	40020458 	.word	0x40020458
 80043a8:	40020470 	.word	0x40020470
 80043ac:	40020488 	.word	0x40020488
 80043b0:	400204a0 	.word	0x400204a0
 80043b4:	400204b8 	.word	0x400204b8
 80043b8:	58025408 	.word	0x58025408
 80043bc:	5802541c 	.word	0x5802541c
 80043c0:	58025430 	.word	0x58025430
 80043c4:	58025444 	.word	0x58025444
 80043c8:	58025458 	.word	0x58025458
 80043cc:	5802546c 	.word	0x5802546c
 80043d0:	58025480 	.word	0x58025480
 80043d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d160      	bne.n	80044a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a8c      	ldr	r2, [pc, #560]	; (8004618 <HAL_DMA_IRQHandler+0xca8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a8a      	ldr	r2, [pc, #552]	; (800461c <HAL_DMA_IRQHandler+0xcac>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a89      	ldr	r2, [pc, #548]	; (8004620 <HAL_DMA_IRQHandler+0xcb0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a87      	ldr	r2, [pc, #540]	; (8004624 <HAL_DMA_IRQHandler+0xcb4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a86      	ldr	r2, [pc, #536]	; (8004628 <HAL_DMA_IRQHandler+0xcb8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a84      	ldr	r2, [pc, #528]	; (800462c <HAL_DMA_IRQHandler+0xcbc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a83      	ldr	r2, [pc, #524]	; (8004630 <HAL_DMA_IRQHandler+0xcc0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a81      	ldr	r2, [pc, #516]	; (8004634 <HAL_DMA_IRQHandler+0xcc4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a80      	ldr	r2, [pc, #512]	; (8004638 <HAL_DMA_IRQHandler+0xcc8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a7e      	ldr	r2, [pc, #504]	; (800463c <HAL_DMA_IRQHandler+0xccc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7d      	ldr	r2, [pc, #500]	; (8004640 <HAL_DMA_IRQHandler+0xcd0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7b      	ldr	r2, [pc, #492]	; (8004644 <HAL_DMA_IRQHandler+0xcd4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7a      	ldr	r2, [pc, #488]	; (8004648 <HAL_DMA_IRQHandler+0xcd8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a78      	ldr	r2, [pc, #480]	; (800464c <HAL_DMA_IRQHandler+0xcdc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a77      	ldr	r2, [pc, #476]	; (8004650 <HAL_DMA_IRQHandler+0xce0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_IRQHandler+0xb12>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a75      	ldr	r2, [pc, #468]	; (8004654 <HAL_DMA_IRQHandler+0xce4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d108      	bne.n	8004494 <HAL_DMA_IRQHandler+0xb24>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0208 	bic.w	r2, r2, #8
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e007      	b.n	80044a4 <HAL_DMA_IRQHandler+0xb34>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0204 	bic.w	r2, r2, #4
 80044a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8165 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b6:	e15f      	b.n	8004778 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2202      	movs	r2, #2
 80044c2:	409a      	lsls	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80c5 	beq.w	8004658 <HAL_DMA_IRQHandler+0xce8>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80bf 	beq.w	8004658 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2202      	movs	r2, #2
 80044e4:	409a      	lsls	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d018      	beq.n	8004526 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 813a 	beq.w	800477c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004510:	e134      	b.n	800477c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8130 	beq.w	800477c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004524:	e12a      	b.n	800477c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d168      	bne.n	8004602 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a38      	ldr	r2, [pc, #224]	; (8004618 <HAL_DMA_IRQHandler+0xca8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d04a      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_DMA_IRQHandler+0xcac>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d045      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a35      	ldr	r2, [pc, #212]	; (8004620 <HAL_DMA_IRQHandler+0xcb0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d040      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a34      	ldr	r2, [pc, #208]	; (8004624 <HAL_DMA_IRQHandler+0xcb4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d03b      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a32      	ldr	r2, [pc, #200]	; (8004628 <HAL_DMA_IRQHandler+0xcb8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d036      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a31      	ldr	r2, [pc, #196]	; (800462c <HAL_DMA_IRQHandler+0xcbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d031      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <HAL_DMA_IRQHandler+0xcc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d02c      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2e      	ldr	r2, [pc, #184]	; (8004634 <HAL_DMA_IRQHandler+0xcc4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d027      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <HAL_DMA_IRQHandler+0xcc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d022      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2b      	ldr	r2, [pc, #172]	; (800463c <HAL_DMA_IRQHandler+0xccc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d01d      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a29      	ldr	r2, [pc, #164]	; (8004640 <HAL_DMA_IRQHandler+0xcd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a28      	ldr	r2, [pc, #160]	; (8004644 <HAL_DMA_IRQHandler+0xcd4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <HAL_DMA_IRQHandler+0xcd8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a25      	ldr	r2, [pc, #148]	; (800464c <HAL_DMA_IRQHandler+0xcdc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_DMA_IRQHandler+0xce0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_DMA_IRQHandler+0xc60>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a22      	ldr	r2, [pc, #136]	; (8004654 <HAL_DMA_IRQHandler+0xce4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d108      	bne.n	80045e2 <HAL_DMA_IRQHandler+0xc72>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0214 	bic.w	r2, r2, #20
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e007      	b.n	80045f2 <HAL_DMA_IRQHandler+0xc82>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 020a 	bic.w	r2, r2, #10
 80045f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80b8 	beq.w	800477c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004614:	e0b2      	b.n	800477c <HAL_DMA_IRQHandler+0xe0c>
 8004616:	bf00      	nop
 8004618:	40020010 	.word	0x40020010
 800461c:	40020028 	.word	0x40020028
 8004620:	40020040 	.word	0x40020040
 8004624:	40020058 	.word	0x40020058
 8004628:	40020070 	.word	0x40020070
 800462c:	40020088 	.word	0x40020088
 8004630:	400200a0 	.word	0x400200a0
 8004634:	400200b8 	.word	0x400200b8
 8004638:	40020410 	.word	0x40020410
 800463c:	40020428 	.word	0x40020428
 8004640:	40020440 	.word	0x40020440
 8004644:	40020458 	.word	0x40020458
 8004648:	40020470 	.word	0x40020470
 800464c:	40020488 	.word	0x40020488
 8004650:	400204a0 	.word	0x400204a0
 8004654:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2208      	movs	r2, #8
 8004662:	409a      	lsls	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8088 	beq.w	800477e <HAL_DMA_IRQHandler+0xe0e>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8082 	beq.w	800477e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a41      	ldr	r2, [pc, #260]	; (8004784 <HAL_DMA_IRQHandler+0xe14>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d04a      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3f      	ldr	r2, [pc, #252]	; (8004788 <HAL_DMA_IRQHandler+0xe18>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d045      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3e      	ldr	r2, [pc, #248]	; (800478c <HAL_DMA_IRQHandler+0xe1c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d040      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3c      	ldr	r2, [pc, #240]	; (8004790 <HAL_DMA_IRQHandler+0xe20>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d03b      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <HAL_DMA_IRQHandler+0xe24>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d036      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a39      	ldr	r2, [pc, #228]	; (8004798 <HAL_DMA_IRQHandler+0xe28>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d031      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a38      	ldr	r2, [pc, #224]	; (800479c <HAL_DMA_IRQHandler+0xe2c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d02c      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a36      	ldr	r2, [pc, #216]	; (80047a0 <HAL_DMA_IRQHandler+0xe30>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d027      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <HAL_DMA_IRQHandler+0xe34>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d022      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <HAL_DMA_IRQHandler+0xe38>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01d      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a32      	ldr	r2, [pc, #200]	; (80047ac <HAL_DMA_IRQHandler+0xe3c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d018      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a30      	ldr	r2, [pc, #192]	; (80047b0 <HAL_DMA_IRQHandler+0xe40>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2f      	ldr	r2, [pc, #188]	; (80047b4 <HAL_DMA_IRQHandler+0xe44>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2d      	ldr	r2, [pc, #180]	; (80047b8 <HAL_DMA_IRQHandler+0xe48>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <HAL_DMA_IRQHandler+0xe4c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_DMA_IRQHandler+0xdaa>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <HAL_DMA_IRQHandler+0xe50>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <HAL_DMA_IRQHandler+0xdbc>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 021c 	bic.w	r2, r2, #28
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e007      	b.n	800473c <HAL_DMA_IRQHandler+0xdcc>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 020e 	bic.w	r2, r2, #14
 800473a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2201      	movs	r2, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
 8004772:	e004      	b.n	800477e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004774:	bf00      	nop
 8004776:	e002      	b.n	800477e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004778:	bf00      	nop
 800477a:	e000      	b.n	800477e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800477e:	3728      	adds	r7, #40	; 0x28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40020010 	.word	0x40020010
 8004788:	40020028 	.word	0x40020028
 800478c:	40020040 	.word	0x40020040
 8004790:	40020058 	.word	0x40020058
 8004794:	40020070 	.word	0x40020070
 8004798:	40020088 	.word	0x40020088
 800479c:	400200a0 	.word	0x400200a0
 80047a0:	400200b8 	.word	0x400200b8
 80047a4:	40020410 	.word	0x40020410
 80047a8:	40020428 	.word	0x40020428
 80047ac:	40020440 	.word	0x40020440
 80047b0:	40020458 	.word	0x40020458
 80047b4:	40020470 	.word	0x40020470
 80047b8:	40020488 	.word	0x40020488
 80047bc:	400204a0 	.word	0x400204a0
 80047c0:	400204b8 	.word	0x400204b8

080047c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a84      	ldr	r2, [pc, #528]	; (80049f4 <DMA_SetConfig+0x230>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d072      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a82      	ldr	r2, [pc, #520]	; (80049f8 <DMA_SetConfig+0x234>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d06d      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a81      	ldr	r2, [pc, #516]	; (80049fc <DMA_SetConfig+0x238>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d068      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a7f      	ldr	r2, [pc, #508]	; (8004a00 <DMA_SetConfig+0x23c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d063      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7e      	ldr	r2, [pc, #504]	; (8004a04 <DMA_SetConfig+0x240>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d05e      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a7c      	ldr	r2, [pc, #496]	; (8004a08 <DMA_SetConfig+0x244>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d059      	beq.n	80048ce <DMA_SetConfig+0x10a>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7b      	ldr	r2, [pc, #492]	; (8004a0c <DMA_SetConfig+0x248>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d054      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a79      	ldr	r2, [pc, #484]	; (8004a10 <DMA_SetConfig+0x24c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d04f      	beq.n	80048ce <DMA_SetConfig+0x10a>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a78      	ldr	r2, [pc, #480]	; (8004a14 <DMA_SetConfig+0x250>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a76      	ldr	r2, [pc, #472]	; (8004a18 <DMA_SetConfig+0x254>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a75      	ldr	r2, [pc, #468]	; (8004a1c <DMA_SetConfig+0x258>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <DMA_SetConfig+0x10a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a73      	ldr	r2, [pc, #460]	; (8004a20 <DMA_SetConfig+0x25c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a72      	ldr	r2, [pc, #456]	; (8004a24 <DMA_SetConfig+0x260>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a70      	ldr	r2, [pc, #448]	; (8004a28 <DMA_SetConfig+0x264>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <DMA_SetConfig+0x10a>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a6f      	ldr	r2, [pc, #444]	; (8004a2c <DMA_SetConfig+0x268>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6d      	ldr	r2, [pc, #436]	; (8004a30 <DMA_SetConfig+0x26c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <DMA_SetConfig+0x10a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6c      	ldr	r2, [pc, #432]	; (8004a34 <DMA_SetConfig+0x270>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a6a      	ldr	r2, [pc, #424]	; (8004a38 <DMA_SetConfig+0x274>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <DMA_SetConfig+0x10a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a69      	ldr	r2, [pc, #420]	; (8004a3c <DMA_SetConfig+0x278>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <DMA_SetConfig+0x10a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a67      	ldr	r2, [pc, #412]	; (8004a40 <DMA_SetConfig+0x27c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a66      	ldr	r2, [pc, #408]	; (8004a44 <DMA_SetConfig+0x280>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a64      	ldr	r2, [pc, #400]	; (8004a48 <DMA_SetConfig+0x284>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a63      	ldr	r2, [pc, #396]	; (8004a4c <DMA_SetConfig+0x288>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a61      	ldr	r2, [pc, #388]	; (8004a50 <DMA_SetConfig+0x28c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <DMA_SetConfig+0x10e>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <DMA_SetConfig+0x110>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a3e      	ldr	r2, [pc, #248]	; (80049f4 <DMA_SetConfig+0x230>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d04a      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <DMA_SetConfig+0x234>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d045      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <DMA_SetConfig+0x238>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d040      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <DMA_SetConfig+0x23c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d03b      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a38      	ldr	r2, [pc, #224]	; (8004a04 <DMA_SetConfig+0x240>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d036      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <DMA_SetConfig+0x244>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d031      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <DMA_SetConfig+0x248>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d02c      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <DMA_SetConfig+0x24c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d027      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <DMA_SetConfig+0x250>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d022      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a31      	ldr	r2, [pc, #196]	; (8004a18 <DMA_SetConfig+0x254>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d01d      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <DMA_SetConfig+0x258>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d018      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2e      	ldr	r2, [pc, #184]	; (8004a20 <DMA_SetConfig+0x25c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2c      	ldr	r2, [pc, #176]	; (8004a24 <DMA_SetConfig+0x260>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00e      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2b      	ldr	r2, [pc, #172]	; (8004a28 <DMA_SetConfig+0x264>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d009      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <DMA_SetConfig+0x268>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <DMA_SetConfig+0x1d0>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <DMA_SetConfig+0x26c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <DMA_SetConfig+0x1d4>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <DMA_SetConfig+0x1d6>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d05a      	beq.n	8004a54 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	223f      	movs	r2, #63	; 0x3f
 80049a8:	409a      	lsls	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d108      	bne.n	80049e0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049de:	e087      	b.n	8004af0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
}
 80049f0:	e07e      	b.n	8004af0 <DMA_SetConfig+0x32c>
 80049f2:	bf00      	nop
 80049f4:	40020010 	.word	0x40020010
 80049f8:	40020028 	.word	0x40020028
 80049fc:	40020040 	.word	0x40020040
 8004a00:	40020058 	.word	0x40020058
 8004a04:	40020070 	.word	0x40020070
 8004a08:	40020088 	.word	0x40020088
 8004a0c:	400200a0 	.word	0x400200a0
 8004a10:	400200b8 	.word	0x400200b8
 8004a14:	40020410 	.word	0x40020410
 8004a18:	40020428 	.word	0x40020428
 8004a1c:	40020440 	.word	0x40020440
 8004a20:	40020458 	.word	0x40020458
 8004a24:	40020470 	.word	0x40020470
 8004a28:	40020488 	.word	0x40020488
 8004a2c:	400204a0 	.word	0x400204a0
 8004a30:	400204b8 	.word	0x400204b8
 8004a34:	58025408 	.word	0x58025408
 8004a38:	5802541c 	.word	0x5802541c
 8004a3c:	58025430 	.word	0x58025430
 8004a40:	58025444 	.word	0x58025444
 8004a44:	58025458 	.word	0x58025458
 8004a48:	5802546c 	.word	0x5802546c
 8004a4c:	58025480 	.word	0x58025480
 8004a50:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a28      	ldr	r2, [pc, #160]	; (8004afc <DMA_SetConfig+0x338>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d022      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <DMA_SetConfig+0x33c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d01d      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <DMA_SetConfig+0x340>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a24      	ldr	r2, [pc, #144]	; (8004b08 <DMA_SetConfig+0x344>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <DMA_SetConfig+0x348>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <DMA_SetConfig+0x34c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <DMA_SetConfig+0x350>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <DMA_SetConfig+0x2e0>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <DMA_SetConfig+0x354>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <DMA_SetConfig+0x2e4>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <DMA_SetConfig+0x2e6>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d108      	bne.n	8004ae0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	60da      	str	r2, [r3, #12]
}
 8004ade:	e007      	b.n	8004af0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	58025408 	.word	0x58025408
 8004b00:	5802541c 	.word	0x5802541c
 8004b04:	58025430 	.word	0x58025430
 8004b08:	58025444 	.word	0x58025444
 8004b0c:	58025458 	.word	0x58025458
 8004b10:	5802546c 	.word	0x5802546c
 8004b14:	58025480 	.word	0x58025480
 8004b18:	58025494 	.word	0x58025494

08004b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a42      	ldr	r2, [pc, #264]	; (8004c34 <DMA_CalcBaseAndBitshift+0x118>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a41      	ldr	r2, [pc, #260]	; (8004c38 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a3f      	ldr	r2, [pc, #252]	; (8004c3c <DMA_CalcBaseAndBitshift+0x120>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a3e      	ldr	r2, [pc, #248]	; (8004c40 <DMA_CalcBaseAndBitshift+0x124>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3c      	ldr	r2, [pc, #240]	; (8004c44 <DMA_CalcBaseAndBitshift+0x128>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a3b      	ldr	r2, [pc, #236]	; (8004c48 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a39      	ldr	r2, [pc, #228]	; (8004c4c <DMA_CalcBaseAndBitshift+0x130>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a38      	ldr	r2, [pc, #224]	; (8004c50 <DMA_CalcBaseAndBitshift+0x134>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a36      	ldr	r2, [pc, #216]	; (8004c54 <DMA_CalcBaseAndBitshift+0x138>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a35      	ldr	r2, [pc, #212]	; (8004c58 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a33      	ldr	r2, [pc, #204]	; (8004c5c <DMA_CalcBaseAndBitshift+0x140>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a32      	ldr	r2, [pc, #200]	; (8004c60 <DMA_CalcBaseAndBitshift+0x144>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <DMA_CalcBaseAndBitshift+0x148>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <DMA_CalcBaseAndBitshift+0x150>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <DMA_CalcBaseAndBitshift+0x154>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <DMA_CalcBaseAndBitshift+0xac>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <DMA_CalcBaseAndBitshift+0xae>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d024      	beq.n	8004c18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	3b10      	subs	r3, #16
 8004bd6:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <DMA_CalcBaseAndBitshift+0x158>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <DMA_CalcBaseAndBitshift+0x15c>)
 8004be8:	5cd3      	ldrb	r3, [r2, r3]
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d908      	bls.n	8004c08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <DMA_CalcBaseAndBitshift+0x160>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	659a      	str	r2, [r3, #88]	; 0x58
 8004c06:	e00d      	b.n	8004c24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <DMA_CalcBaseAndBitshift+0x160>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6593      	str	r3, [r2, #88]	; 0x58
 8004c16:	e005      	b.n	8004c24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40020010 	.word	0x40020010
 8004c38:	40020028 	.word	0x40020028
 8004c3c:	40020040 	.word	0x40020040
 8004c40:	40020058 	.word	0x40020058
 8004c44:	40020070 	.word	0x40020070
 8004c48:	40020088 	.word	0x40020088
 8004c4c:	400200a0 	.word	0x400200a0
 8004c50:	400200b8 	.word	0x400200b8
 8004c54:	40020410 	.word	0x40020410
 8004c58:	40020428 	.word	0x40020428
 8004c5c:	40020440 	.word	0x40020440
 8004c60:	40020458 	.word	0x40020458
 8004c64:	40020470 	.word	0x40020470
 8004c68:	40020488 	.word	0x40020488
 8004c6c:	400204a0 	.word	0x400204a0
 8004c70:	400204b8 	.word	0x400204b8
 8004c74:	aaaaaaab 	.word	0xaaaaaaab
 8004c78:	08009bc4 	.word	0x08009bc4
 8004c7c:	fffffc00 	.word	0xfffffc00

08004c80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d120      	bne.n	8004cd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d858      	bhi.n	8004d4e <DMA_CheckFifoParam+0xce>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <DMA_CheckFifoParam+0x24>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc7 	.word	0x08004cc7
 8004cac:	08004cb5 	.word	0x08004cb5
 8004cb0:	08004d4f 	.word	0x08004d4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d048      	beq.n	8004d52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cc4:	e045      	b.n	8004d52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cce:	d142      	bne.n	8004d56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cd4:	e03f      	b.n	8004d56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cde:	d123      	bne.n	8004d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d838      	bhi.n	8004d5a <DMA_CheckFifoParam+0xda>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <DMA_CheckFifoParam+0x70>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d07 	.word	0x08004d07
 8004cf8:	08004d01 	.word	0x08004d01
 8004cfc:	08004d19 	.word	0x08004d19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
        break;
 8004d04:	e030      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d025      	beq.n	8004d5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d16:	e022      	b.n	8004d5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d20:	d11f      	bne.n	8004d62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d26:	e01c      	b.n	8004d62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d902      	bls.n	8004d36 <DMA_CheckFifoParam+0xb6>
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d003      	beq.n	8004d3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d34:	e018      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
        break;
 8004d3a:	e015      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004d4c:	e00b      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e00a      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        break;
 8004d52:	bf00      	nop
 8004d54:	e008      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        break;
 8004d56:	bf00      	nop
 8004d58:	e006      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e004      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e002      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
        break;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <DMA_CheckFifoParam+0xe8>
    break;
 8004d66:	bf00      	nop
    }
  }

  return status;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop

08004d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a38      	ldr	r2, [pc, #224]	; (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a35      	ldr	r2, [pc, #212]	; (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a32      	ldr	r2, [pc, #200]	; (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2f      	ldr	r2, [pc, #188]	; (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2d      	ldr	r2, [pc, #180]	; (8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01a      	beq.n	8004e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	3b08      	subs	r3, #8
 8004de8:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a24      	ldr	r2, [pc, #144]	; (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e14:	e024      	b.n	8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3b10      	subs	r3, #16
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d806      	bhi.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d902      	bls.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	461a      	mov	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	58025408 	.word	0x58025408
 8004e70:	5802541c 	.word	0x5802541c
 8004e74:	58025430 	.word	0x58025430
 8004e78:	58025444 	.word	0x58025444
 8004e7c:	58025458 	.word	0x58025458
 8004e80:	5802546c 	.word	0x5802546c
 8004e84:	58025480 	.word	0x58025480
 8004e88:	58025494 	.word	0x58025494
 8004e8c:	cccccccd 	.word	0xcccccccd
 8004e90:	16009600 	.word	0x16009600
 8004e94:	58025880 	.word	0x58025880
 8004e98:	aaaaaaab 	.word	0xaaaaaaab
 8004e9c:	400204b8 	.word	0x400204b8
 8004ea0:	4002040f 	.word	0x4002040f
 8004ea4:	10008200 	.word	0x10008200
 8004ea8:	40020880 	.word	0x40020880

08004eac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04a      	beq.n	8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d847      	bhi.n	8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a25      	ldr	r2, [pc, #148]	; (8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01d      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1e      	ldr	r2, [pc, #120]	; (8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f34:	671a      	str	r2, [r3, #112]	; 0x70
 8004f36:	e009      	b.n	8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	2201      	movs	r2, #1
 8004f52:	409a      	lsls	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	58025408 	.word	0x58025408
 8004f68:	5802541c 	.word	0x5802541c
 8004f6c:	58025430 	.word	0x58025430
 8004f70:	58025444 	.word	0x58025444
 8004f74:	58025458 	.word	0x58025458
 8004f78:	5802546c 	.word	0x5802546c
 8004f7c:	58025480 	.word	0x58025480
 8004f80:	58025494 	.word	0x58025494
 8004f84:	1600963f 	.word	0x1600963f
 8004f88:	58025940 	.word	0x58025940
 8004f8c:	1000823f 	.word	0x1000823f
 8004f90:	40020940 	.word	0x40020940

08004f94 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e00a      	b.n	8004fc6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	bf00      	nop
  }

  return status;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e003      	b.n	8004fee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800500a:	4b89      	ldr	r3, [pc, #548]	; (8005230 <HAL_GPIO_Init+0x234>)
 800500c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800500e:	e194      	b.n	800533a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	2101      	movs	r1, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa01 f303 	lsl.w	r3, r1, r3
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8186 	beq.w	8005334 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d00b      	beq.n	8005048 <HAL_GPIO_Init+0x4c>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d007      	beq.n	8005048 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800503c:	2b11      	cmp	r3, #17
 800503e:	d003      	beq.n	8005048 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b12      	cmp	r3, #18
 8005046:	d130      	bne.n	80050aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	2203      	movs	r2, #3
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800507e:	2201      	movs	r2, #1
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	f003 0201 	and.w	r2, r3, #1
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	2203      	movs	r2, #3
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d003      	beq.n	80050ea <HAL_GPIO_Init+0xee>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b12      	cmp	r3, #18
 80050e8:	d123      	bne.n	8005132 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	08da      	lsrs	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3208      	adds	r2, #8
 80050f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	220f      	movs	r2, #15
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4013      	ands	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	08da      	lsrs	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3208      	adds	r2, #8
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	2203      	movs	r2, #3
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0203 	and.w	r2, r3, #3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80e0 	beq.w	8005334 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005174:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <HAL_GPIO_Init+0x238>)
 8005176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800517a:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <HAL_GPIO_Init+0x238>)
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005184:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <HAL_GPIO_Init+0x238>)
 8005186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005192:	4a29      	ldr	r2, [pc, #164]	; (8005238 <HAL_GPIO_Init+0x23c>)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	089b      	lsrs	r3, r3, #2
 8005198:	3302      	adds	r3, #2
 800519a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	220f      	movs	r2, #15
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <HAL_GPIO_Init+0x240>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d052      	beq.n	8005264 <HAL_GPIO_Init+0x268>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_GPIO_Init+0x244>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d031      	beq.n	800522a <HAL_GPIO_Init+0x22e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <HAL_GPIO_Init+0x248>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02b      	beq.n	8005226 <HAL_GPIO_Init+0x22a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_GPIO_Init+0x24c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d025      	beq.n	8005222 <HAL_GPIO_Init+0x226>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <HAL_GPIO_Init+0x250>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <HAL_GPIO_Init+0x222>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <HAL_GPIO_Init+0x254>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d019      	beq.n	800521a <HAL_GPIO_Init+0x21e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <HAL_GPIO_Init+0x258>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_GPIO_Init+0x21a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_GPIO_Init+0x25c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00d      	beq.n	8005212 <HAL_GPIO_Init+0x216>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a18      	ldr	r2, [pc, #96]	; (800525c <HAL_GPIO_Init+0x260>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <HAL_GPIO_Init+0x212>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a17      	ldr	r2, [pc, #92]	; (8005260 <HAL_GPIO_Init+0x264>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_GPIO_Init+0x20e>
 8005206:	2309      	movs	r3, #9
 8005208:	e02d      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 800520a:	230a      	movs	r3, #10
 800520c:	e02b      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 800520e:	2308      	movs	r3, #8
 8005210:	e029      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 8005212:	2307      	movs	r3, #7
 8005214:	e027      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 8005216:	2306      	movs	r3, #6
 8005218:	e025      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 800521a:	2305      	movs	r3, #5
 800521c:	e023      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 800521e:	2304      	movs	r3, #4
 8005220:	e021      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 8005222:	2303      	movs	r3, #3
 8005224:	e01f      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 8005226:	2302      	movs	r3, #2
 8005228:	e01d      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 800522a:	2301      	movs	r3, #1
 800522c:	e01b      	b.n	8005266 <HAL_GPIO_Init+0x26a>
 800522e:	bf00      	nop
 8005230:	58000080 	.word	0x58000080
 8005234:	58024400 	.word	0x58024400
 8005238:	58000400 	.word	0x58000400
 800523c:	58020000 	.word	0x58020000
 8005240:	58020400 	.word	0x58020400
 8005244:	58020800 	.word	0x58020800
 8005248:	58020c00 	.word	0x58020c00
 800524c:	58021000 	.word	0x58021000
 8005250:	58021400 	.word	0x58021400
 8005254:	58021800 	.word	0x58021800
 8005258:	58021c00 	.word	0x58021c00
 800525c:	58022000 	.word	0x58022000
 8005260:	58022400 	.word	0x58022400
 8005264:	2300      	movs	r3, #0
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	f002 0203 	and.w	r2, r2, #3
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	4093      	lsls	r3, r2
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005276:	4938      	ldr	r1, [pc, #224]	; (8005358 <HAL_GPIO_Init+0x35c>)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	3302      	adds	r3, #2
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	43db      	mvns	r3, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4013      	ands	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80052fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800532c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3301      	adds	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f ae63 	bne.w	8005010 <HAL_GPIO_Init+0x14>
  }
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	3724      	adds	r7, #36	; 0x24
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	58000400 	.word	0x58000400

0800535c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	807b      	strh	r3, [r7, #2]
 8005368:	4613      	mov	r3, r2
 800536a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800536c:	787b      	ldrb	r3, [r7, #1]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005378:	e003      	b.n	8005382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800537a:	887b      	ldrh	r3, [r7, #2]
 800537c:	041a      	lsls	r2, r3, #16
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	619a      	str	r2, [r3, #24]
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4013      	ands	r3, r2
 80053a6:	041a      	lsls	r2, r3, #16
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	43d9      	mvns	r1, r3
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	400b      	ands	r3, r1
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	619a      	str	r2, [r3, #24]
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	4603      	mov	r3, r0
 80053ca:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb fe29 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_PWREx_ConfigSupply+0x70>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d00a      	beq.n	8005422 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_PWREx_ConfigSupply+0x70>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d001      	beq.n	800541e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e01f      	b.n	800545e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e01d      	b.n	800545e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <HAL_PWREx_ConfigSupply+0x70>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f023 0207 	bic.w	r2, r3, #7
 800542a:	490f      	ldr	r1, [pc, #60]	; (8005468 <HAL_PWREx_ConfigSupply+0x70>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4313      	orrs	r3, r2
 8005430:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005432:	f7fc fcb7 	bl	8001da4 <HAL_GetTick>
 8005436:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005438:	e009      	b.n	800544e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800543a:	f7fc fcb3 	bl	8001da4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005448:	d901      	bls.n	800544e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e007      	b.n	800545e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <HAL_PWREx_ConfigSupply+0x70>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545a:	d1ee      	bne.n	800543a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	58024800 	.word	0x58024800

0800546c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e3ff      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8087 	beq.w	800559a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548c:	4b99      	ldr	r3, [pc, #612]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005496:	4b97      	ldr	r3, [pc, #604]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d007      	beq.n	80054b2 <HAL_RCC_OscConfig+0x46>
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2b18      	cmp	r3, #24
 80054a6:	d110      	bne.n	80054ca <HAL_RCC_OscConfig+0x5e>
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d10b      	bne.n	80054ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b2:	4b90      	ldr	r3, [pc, #576]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d06c      	beq.n	8005598 <HAL_RCC_OscConfig+0x12c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d168      	bne.n	8005598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e3d9      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x76>
 80054d4:	4b87      	ldr	r3, [pc, #540]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a86      	ldr	r2, [pc, #536]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e02e      	b.n	8005540 <HAL_RCC_OscConfig+0xd4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x98>
 80054ea:	4b82      	ldr	r3, [pc, #520]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a81      	ldr	r2, [pc, #516]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b7f      	ldr	r3, [pc, #508]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a7e      	ldr	r2, [pc, #504]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80054fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e01d      	b.n	8005540 <HAL_RCC_OscConfig+0xd4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0xbc>
 800550e:	4b79      	ldr	r3, [pc, #484]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a78      	ldr	r2, [pc, #480]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a75      	ldr	r2, [pc, #468]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e00b      	b.n	8005540 <HAL_RCC_OscConfig+0xd4>
 8005528:	4b72      	ldr	r3, [pc, #456]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a71      	ldr	r2, [pc, #452]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4b6f      	ldr	r3, [pc, #444]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a6e      	ldr	r2, [pc, #440]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800553a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fc fc2c 	bl	8001da4 <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005550:	f7fc fc28 	bl	8001da4 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e38d      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005562:	4b64      	ldr	r3, [pc, #400]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0xe4>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fc fc18 	bl	8001da4 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005578:	f7fc fc14 	bl	8001da4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	; 0x64
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e379      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800558a:	4b5a      	ldr	r3, [pc, #360]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x10c>
 8005596:	e000      	b.n	800559a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80ae 	beq.w	8005704 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055a8:	4b52      	ldr	r3, [pc, #328]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055b2:	4b50      	ldr	r3, [pc, #320]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_RCC_OscConfig+0x162>
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b18      	cmp	r3, #24
 80055c2:	d13a      	bne.n	800563a <HAL_RCC_OscConfig+0x1ce>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d135      	bne.n	800563a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ce:	4b49      	ldr	r3, [pc, #292]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_RCC_OscConfig+0x17a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e34b      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e6:	f7fc fc1d 	bl	8001e24 <HAL_GetREVID>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d817      	bhi.n	8005624 <HAL_RCC_OscConfig+0x1b8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d108      	bne.n	800560e <HAL_RCC_OscConfig+0x1a2>
 80055fc:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005604:	4a3b      	ldr	r2, [pc, #236]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560c:	e07a      	b.n	8005704 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560e:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	031b      	lsls	r3, r3, #12
 800561c:	4935      	ldr	r1, [pc, #212]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800561e:	4313      	orrs	r3, r2
 8005620:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005622:	e06f      	b.n	8005704 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005624:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	4930      	ldr	r1, [pc, #192]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005634:	4313      	orrs	r3, r2
 8005636:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005638:	e064      	b.n	8005704 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d045      	beq.n	80056ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005642:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 0219 	bic.w	r2, r3, #25
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4929      	ldr	r1, [pc, #164]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc fba6 	bl	8001da4 <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800565c:	f7fc fba2 	bl	8001da4 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e307      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	f7fc fbd3 	bl	8001e24 <HAL_GetREVID>
 800567e:	4603      	mov	r3, r0
 8005680:	f241 0203 	movw	r2, #4099	; 0x1003
 8005684:	4293      	cmp	r3, r2
 8005686:	d817      	bhi.n	80056b8 <HAL_RCC_OscConfig+0x24c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d108      	bne.n	80056a2 <HAL_RCC_OscConfig+0x236>
 8005690:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 800569a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569e:	6053      	str	r3, [r2, #4]
 80056a0:	e030      	b.n	8005704 <HAL_RCC_OscConfig+0x298>
 80056a2:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	031b      	lsls	r3, r3, #12
 80056b0:	4910      	ldr	r1, [pc, #64]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]
 80056b6:	e025      	b.n	8005704 <HAL_RCC_OscConfig+0x298>
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	490b      	ldr	r1, [pc, #44]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	604b      	str	r3, [r1, #4]
 80056cc:	e01a      	b.n	8005704 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <HAL_RCC_OscConfig+0x288>)
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fc fb63 	bl	8001da4 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e2:	f7fc fb5f 	bl	8001da4 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d903      	bls.n	80056f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e2c4      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
 80056f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056f8:	4ba4      	ldr	r3, [pc, #656]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ee      	bne.n	80056e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a9 	beq.w	8005864 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005712:	4b9e      	ldr	r3, [pc, #632]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800571a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800571c:	4b9b      	ldr	r3, [pc, #620]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d007      	beq.n	8005738 <HAL_RCC_OscConfig+0x2cc>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b18      	cmp	r3, #24
 800572c:	d13a      	bne.n	80057a4 <HAL_RCC_OscConfig+0x338>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d135      	bne.n	80057a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005738:	4b94      	ldr	r3, [pc, #592]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_OscConfig+0x2e4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e296      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005750:	f7fc fb68 	bl	8001e24 <HAL_GetREVID>
 8005754:	4603      	mov	r3, r0
 8005756:	f241 0203 	movw	r2, #4099	; 0x1003
 800575a:	4293      	cmp	r3, r2
 800575c:	d817      	bhi.n	800578e <HAL_RCC_OscConfig+0x322>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	2b20      	cmp	r3, #32
 8005764:	d108      	bne.n	8005778 <HAL_RCC_OscConfig+0x30c>
 8005766:	4b89      	ldr	r3, [pc, #548]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800576e:	4a87      	ldr	r2, [pc, #540]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005774:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005776:	e075      	b.n	8005864 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005778:	4b84      	ldr	r3, [pc, #528]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	069b      	lsls	r3, r3, #26
 8005786:	4981      	ldr	r1, [pc, #516]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800578c:	e06a      	b.n	8005864 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800578e:	4b7f      	ldr	r3, [pc, #508]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	497b      	ldr	r1, [pc, #492]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057a2:	e05f      	b.n	8005864 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d042      	beq.n	8005832 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80057ac:	4b77      	ldr	r3, [pc, #476]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a76      	ldr	r2, [pc, #472]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fc faf4 	bl	8001da4 <HAL_GetTick>
 80057bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057c0:	f7fc faf0 	bl	8001da4 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e255      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057d2:	4b6e      	ldr	r3, [pc, #440]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057de:	f7fc fb21 	bl	8001e24 <HAL_GetREVID>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d817      	bhi.n	800581c <HAL_RCC_OscConfig+0x3b0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d108      	bne.n	8005806 <HAL_RCC_OscConfig+0x39a>
 80057f4:	4b65      	ldr	r3, [pc, #404]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057fc:	4a63      	ldr	r2, [pc, #396]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80057fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005802:	6053      	str	r3, [r2, #4]
 8005804:	e02e      	b.n	8005864 <HAL_RCC_OscConfig+0x3f8>
 8005806:	4b61      	ldr	r3, [pc, #388]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	069b      	lsls	r3, r3, #26
 8005814:	495d      	ldr	r1, [pc, #372]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005816:	4313      	orrs	r3, r2
 8005818:	604b      	str	r3, [r1, #4]
 800581a:	e023      	b.n	8005864 <HAL_RCC_OscConfig+0x3f8>
 800581c:	4b5b      	ldr	r3, [pc, #364]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	4958      	ldr	r1, [pc, #352]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800582c:	4313      	orrs	r3, r2
 800582e:	60cb      	str	r3, [r1, #12]
 8005830:	e018      	b.n	8005864 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005832:	4b56      	ldr	r3, [pc, #344]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a55      	ldr	r2, [pc, #340]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fc fab1 	bl	8001da4 <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005846:	f7fc faad 	bl	8001da4 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e212      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005858:	4b4c      	ldr	r3, [pc, #304]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d036      	beq.n	80058de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d019      	beq.n	80058ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005878:	4b44      	ldr	r3, [pc, #272]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800587a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587c:	4a43      	ldr	r2, [pc, #268]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005884:	f7fc fa8e 	bl	8001da4 <HAL_GetTick>
 8005888:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588c:	f7fc fa8a 	bl	8001da4 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e1ef      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80058a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x420>
 80058aa:	e018      	b.n	80058de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ac:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	4a36      	ldr	r2, [pc, #216]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b8:	f7fc fa74 	bl	8001da4 <HAL_GetTick>
 80058bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058c0:	f7fc fa70 	bl	8001da4 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1d5      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058d2:	4b2e      	ldr	r3, [pc, #184]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80058d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d036      	beq.n	8005958 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d019      	beq.n	8005926 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a25      	ldr	r2, [pc, #148]	; (800598c <HAL_RCC_OscConfig+0x520>)
 80058f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058fe:	f7fc fa51 	bl	8001da4 <HAL_GetTick>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005906:	f7fc fa4d 	bl	8001da4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e1b2      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x49a>
 8005924:	e018      	b.n	8005958 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005926:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_RCC_OscConfig+0x520>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800592c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005930:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005932:	f7fc fa37 	bl	8001da4 <HAL_GetTick>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800593a:	f7fc fa33 	bl	8001da4 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e198      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <HAL_RCC_OscConfig+0x520>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8085 	beq.w	8005a70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <HAL_RCC_OscConfig+0x524>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a09      	ldr	r2, [pc, #36]	; (8005990 <HAL_RCC_OscConfig+0x524>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005972:	f7fc fa17 	bl	8001da4 <HAL_GetTick>
 8005976:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005978:	e00c      	b.n	8005994 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fc fa13 	bl	8001da4 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b64      	cmp	r3, #100	; 0x64
 8005986:	d905      	bls.n	8005994 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e178      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
 800598c:	58024400 	.word	0x58024400
 8005990:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005994:	4b96      	ldr	r3, [pc, #600]	; (8005bf0 <HAL_RCC_OscConfig+0x784>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ec      	beq.n	800597a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d106      	bne.n	80059b6 <HAL_RCC_OscConfig+0x54a>
 80059a8:	4b92      	ldr	r3, [pc, #584]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	4a91      	ldr	r2, [pc, #580]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6713      	str	r3, [r2, #112]	; 0x70
 80059b4:	e02d      	b.n	8005a12 <HAL_RCC_OscConfig+0x5a6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCC_OscConfig+0x56c>
 80059be:	4b8d      	ldr	r3, [pc, #564]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	4a8c      	ldr	r2, [pc, #560]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ca:	4b8a      	ldr	r3, [pc, #552]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	4a89      	ldr	r2, [pc, #548]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059d0:	f023 0304 	bic.w	r3, r3, #4
 80059d4:	6713      	str	r3, [r2, #112]	; 0x70
 80059d6:	e01c      	b.n	8005a12 <HAL_RCC_OscConfig+0x5a6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b05      	cmp	r3, #5
 80059de:	d10c      	bne.n	80059fa <HAL_RCC_OscConfig+0x58e>
 80059e0:	4b84      	ldr	r3, [pc, #528]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	4a83      	ldr	r2, [pc, #524]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	6713      	str	r3, [r2, #112]	; 0x70
 80059ec:	4b81      	ldr	r3, [pc, #516]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a80      	ldr	r2, [pc, #512]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
 80059f8:	e00b      	b.n	8005a12 <HAL_RCC_OscConfig+0x5a6>
 80059fa:	4b7e      	ldr	r3, [pc, #504]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	4a7d      	ldr	r2, [pc, #500]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	6713      	str	r3, [r2, #112]	; 0x70
 8005a06:	4b7b      	ldr	r3, [pc, #492]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	4a7a      	ldr	r2, [pc, #488]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d015      	beq.n	8005a46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fc f9c3 	bl	8001da4 <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a20:	e00a      	b.n	8005a38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a22:	f7fc f9bf 	bl	8001da4 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e122      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a38:	4b6e      	ldr	r3, [pc, #440]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ee      	beq.n	8005a22 <HAL_RCC_OscConfig+0x5b6>
 8005a44:	e014      	b.n	8005a70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a46:	f7fc f9ad 	bl	8001da4 <HAL_GetTick>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a4c:	e00a      	b.n	8005a64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a4e:	f7fc f9a9 	bl	8001da4 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e10c      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a64:	4b63      	ldr	r3, [pc, #396]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1ee      	bne.n	8005a4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8101 	beq.w	8005c7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a7a:	4b5e      	ldr	r3, [pc, #376]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a82:	2b18      	cmp	r3, #24
 8005a84:	f000 80bc 	beq.w	8005c00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f040 8095 	bne.w	8005bbc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a92:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a57      	ldr	r2, [pc, #348]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fc f981 	bl	8001da4 <HAL_GetTick>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fc f97d 	bl	8001da4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0e2      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ab8:	4b4e      	ldr	r3, [pc, #312]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ac4:	4b4b      	ldr	r3, [pc, #300]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <HAL_RCC_OscConfig+0x78c>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ad4:	0112      	lsls	r2, r2, #4
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	4946      	ldr	r1, [pc, #280]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	628b      	str	r3, [r1, #40]	; 0x28
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	3b01      	subs	r3, #1
 8005aee:	025b      	lsls	r3, r3, #9
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	3b01      	subs	r3, #1
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	3b01      	subs	r3, #1
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b0e:	4939      	ldr	r1, [pc, #228]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005b14:	4b37      	ldr	r3, [pc, #220]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	4a36      	ldr	r2, [pc, #216]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b1a:	f023 0301 	bic.w	r3, r3, #1
 8005b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b20:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b24:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <HAL_RCC_OscConfig+0x790>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b2c:	00d2      	lsls	r2, r2, #3
 8005b2e:	4931      	ldr	r1, [pc, #196]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b34:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	f023 020c 	bic.w	r2, r3, #12
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	492c      	ldr	r1, [pc, #176]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b46:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f023 0202 	bic.w	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	4928      	ldr	r1, [pc, #160]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b58:	4b26      	ldr	r3, [pc, #152]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b70:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fc f906 	bl	8001da4 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fc f902 	bl	8001da4 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e067      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x730>
 8005bba:	e05f      	b.n	8005c7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0c      	ldr	r2, [pc, #48]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc f8ec 	bl	8001da4 <HAL_GetTick>
 8005bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fc f8e8 	bl	8001da4 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e04d      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be2:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_RCC_OscConfig+0x788>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x764>
 8005bee:	e045      	b.n	8005c7c <HAL_RCC_OscConfig+0x810>
 8005bf0:	58024800 	.word	0x58024800
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	fffffc0c 	.word	0xfffffc0c
 8005bfc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <HAL_RCC_OscConfig+0x81c>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c06:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <HAL_RCC_OscConfig+0x81c>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d031      	beq.n	8005c78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f003 0203 	and.w	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d12a      	bne.n	8005c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d122      	bne.n	8005c78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d11a      	bne.n	8005c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	0a5b      	lsrs	r3, r3, #9
 8005c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d111      	bne.n	8005c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d108      	bne.n	8005c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	0e1b      	lsrs	r3, r3, #24
 8005c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d001      	beq.n	8005c7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3730      	adds	r7, #48	; 0x30
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400

08005c8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e19c      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b8a      	ldr	r3, [pc, #552]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d910      	bls.n	8005cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b87      	ldr	r3, [pc, #540]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 020f 	bic.w	r2, r3, #15
 8005cb6:	4985      	ldr	r1, [pc, #532]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	4b83      	ldr	r3, [pc, #524]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e184      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	4b7b      	ldr	r3, [pc, #492]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d908      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cec:	4b78      	ldr	r3, [pc, #480]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	4975      	ldr	r1, [pc, #468]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d908      	bls.n	8005d2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	496a      	ldr	r1, [pc, #424]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	4b64      	ldr	r3, [pc, #400]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d908      	bls.n	8005d5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d48:	4b61      	ldr	r3, [pc, #388]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	495e      	ldr	r1, [pc, #376]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d010      	beq.n	8005d88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69da      	ldr	r2, [r3, #28]
 8005d6a:	4b59      	ldr	r3, [pc, #356]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d908      	bls.n	8005d88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d76:	4b56      	ldr	r3, [pc, #344]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4953      	ldr	r1, [pc, #332]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	4b4d      	ldr	r3, [pc, #308]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d908      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f023 020f 	bic.w	r2, r3, #15
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4947      	ldr	r1, [pc, #284]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d055      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005dc2:	4b43      	ldr	r3, [pc, #268]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	4940      	ldr	r1, [pc, #256]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ddc:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d121      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0f6      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005df4:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d115      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0ea      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e0c:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0de      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0d6      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f023 0207 	bic.w	r2, r3, #7
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4925      	ldr	r1, [pc, #148]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3e:	f7fb ffb1 	bl	8001da4 <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e44:	e00a      	b.n	8005e5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e46:	f7fb ffad 	bl	8001da4 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e0be      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5c:	4b1c      	ldr	r3, [pc, #112]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d1eb      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d010      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d208      	bcs.n	8005e9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f023 020f 	bic.w	r2, r3, #15
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <HAL_RCC_ClockConfig+0x244>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d214      	bcs.n	8005ed4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 020f 	bic.w	r2, r3, #15
 8005eb2:	4906      	ldr	r1, [pc, #24]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <HAL_RCC_ClockConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e086      	b.n	8005fda <HAL_RCC_ClockConfig+0x34e>
 8005ecc:	52002000 	.word	0x52002000
 8005ed0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	4b3f      	ldr	r3, [pc, #252]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d208      	bcs.n	8005f02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ef0:	4b3c      	ldr	r3, [pc, #240]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	4939      	ldr	r1, [pc, #228]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d010      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d208      	bcs.n	8005f30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	492e      	ldr	r1, [pc, #184]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d208      	bcs.n	8005f5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f4c:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	4922      	ldr	r1, [pc, #136]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d010      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d208      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4917      	ldr	r1, [pc, #92]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f8c:	f000 f834 	bl	8005ff8 <HAL_RCC_GetSysClockFreq>
 8005f90:	4602      	mov	r2, r0
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	4912      	ldr	r1, [pc, #72]	; (8005fe8 <HAL_RCC_ClockConfig+0x35c>)
 8005f9e:	5ccb      	ldrb	r3, [r1, r3]
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <HAL_RCC_ClockConfig+0x358>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	4a0d      	ldr	r2, [pc, #52]	; (8005fe8 <HAL_RCC_ClockConfig+0x35c>)
 8005fb4:	5cd3      	ldrb	r3, [r2, r3]
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <HAL_RCC_ClockConfig+0x360>)
 8005fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <HAL_RCC_ClockConfig+0x364>)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <HAL_RCC_ClockConfig+0x368>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fb fe9e 	bl	8001d10 <HAL_InitTick>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	08009bb4 	.word	0x08009bb4
 8005fec:	2400001c 	.word	0x2400001c
 8005ff0:	24000018 	.word	0x24000018
 8005ff4:	24000020 	.word	0x24000020

08005ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	; 0x24
 8005ffc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ffe:	4bb3      	ldr	r3, [pc, #716]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006006:	2b18      	cmp	r3, #24
 8006008:	f200 8155 	bhi.w	80062b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <HAL_RCC_GetSysClockFreq+0x1c>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006079 	.word	0x08006079
 8006018:	080062b7 	.word	0x080062b7
 800601c:	080062b7 	.word	0x080062b7
 8006020:	080062b7 	.word	0x080062b7
 8006024:	080062b7 	.word	0x080062b7
 8006028:	080062b7 	.word	0x080062b7
 800602c:	080062b7 	.word	0x080062b7
 8006030:	080062b7 	.word	0x080062b7
 8006034:	0800609f 	.word	0x0800609f
 8006038:	080062b7 	.word	0x080062b7
 800603c:	080062b7 	.word	0x080062b7
 8006040:	080062b7 	.word	0x080062b7
 8006044:	080062b7 	.word	0x080062b7
 8006048:	080062b7 	.word	0x080062b7
 800604c:	080062b7 	.word	0x080062b7
 8006050:	080062b7 	.word	0x080062b7
 8006054:	080060a5 	.word	0x080060a5
 8006058:	080062b7 	.word	0x080062b7
 800605c:	080062b7 	.word	0x080062b7
 8006060:	080062b7 	.word	0x080062b7
 8006064:	080062b7 	.word	0x080062b7
 8006068:	080062b7 	.word	0x080062b7
 800606c:	080062b7 	.word	0x080062b7
 8006070:	080062b7 	.word	0x080062b7
 8006074:	080060ab 	.word	0x080060ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006078:	4b94      	ldr	r3, [pc, #592]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006084:	4b91      	ldr	r3, [pc, #580]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	08db      	lsrs	r3, r3, #3
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	4a90      	ldr	r2, [pc, #576]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006096:	e111      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006098:	4b8d      	ldr	r3, [pc, #564]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800609a:	61bb      	str	r3, [r7, #24]
    break;
 800609c:	e10e      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800609e:	4b8d      	ldr	r3, [pc, #564]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060a0:	61bb      	str	r3, [r7, #24]
    break;
 80060a2:	e10b      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80060a4:	4b8c      	ldr	r3, [pc, #560]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80060a6:	61bb      	str	r3, [r7, #24]
    break;
 80060a8:	e108      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060aa:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80060b4:	4b85      	ldr	r3, [pc, #532]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80060c0:	4b82      	ldr	r3, [pc, #520]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80060ca:	4b80      	ldr	r3, [pc, #512]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80e1 	beq.w	80062b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f000 8083 	beq.w	80061fc <HAL_RCC_GetSysClockFreq+0x204>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	f200 80a1 	bhi.w	8006240 <HAL_RCC_GetSysClockFreq+0x248>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x114>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d056      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800610a:	e099      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800610c:	4b6f      	ldr	r3, [pc, #444]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02d      	beq.n	8006174 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006118:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	4a6b      	ldr	r2, [pc, #428]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a02 	vldr	s12, [r7, #8]
 8006156:	eddf 5a61 	vldr	s11, [pc, #388]	; 80062dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006172:	e087      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80062e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006186:	4b51      	ldr	r3, [pc, #324]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006196:	ed97 6a02 	vldr	s12, [r7, #8]
 800619a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80062dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800619e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061b6:	e065      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80062e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80061c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ca:	4b40      	ldr	r3, [pc, #256]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061da:	ed97 6a02 	vldr	s12, [r7, #8]
 80061de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80062dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80061e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061fa:	e043      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	eddf 6a38 	vldr	s13, [pc, #224]	; 80062e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800620a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620e:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006222:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80062dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800623e:	e021      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80062e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800624e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006262:	ed97 6a02 	vldr	s12, [r7, #8]
 8006266:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80062dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800626a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006282:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006284:	4b11      	ldr	r3, [pc, #68]	; (80062cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	0a5b      	lsrs	r3, r3, #9
 800628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628e:	3301      	adds	r3, #1
 8006290:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800629c:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a8:	ee17 3a90 	vmov	r3, s15
 80062ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80062ae:	e005      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61bb      	str	r3, [r7, #24]
    break;
 80062b4:	e002      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062b8:	61bb      	str	r3, [r7, #24]
    break;
 80062ba:	bf00      	nop
  }

  return sysclockfreq;
 80062bc:	69bb      	ldr	r3, [r7, #24]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
 80062d0:	03d09000 	.word	0x03d09000
 80062d4:	003d0900 	.word	0x003d0900
 80062d8:	007f2815 	.word	0x007f2815
 80062dc:	46000000 	.word	0x46000000
 80062e0:	4c742400 	.word	0x4c742400
 80062e4:	4a742400 	.word	0x4a742400
 80062e8:	4afe502a 	.word	0x4afe502a

080062ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80062f2:	f7ff fe81 	bl	8005ff8 <HAL_RCC_GetSysClockFreq>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4b10      	ldr	r3, [pc, #64]	; (800633c <HAL_RCC_GetHCLKFreq+0x50>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	490f      	ldr	r1, [pc, #60]	; (8006340 <HAL_RCC_GetHCLKFreq+0x54>)
 8006304:	5ccb      	ldrb	r3, [r1, r3]
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <HAL_RCC_GetHCLKFreq+0x50>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	4a09      	ldr	r2, [pc, #36]	; (8006340 <HAL_RCC_GetHCLKFreq+0x54>)
 800631a:	5cd3      	ldrb	r3, [r2, r3]
 800631c:	f003 031f 	and.w	r3, r3, #31
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	4a07      	ldr	r2, [pc, #28]	; (8006344 <HAL_RCC_GetHCLKFreq+0x58>)
 8006328:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800632a:	4a07      	ldr	r2, [pc, #28]	; (8006348 <HAL_RCC_GetHCLKFreq+0x5c>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <HAL_RCC_GetHCLKFreq+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	58024400 	.word	0x58024400
 8006340:	08009bb4 	.word	0x08009bb4
 8006344:	2400001c 	.word	0x2400001c
 8006348:	24000018 	.word	0x24000018

0800634c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006350:	f7ff ffcc 	bl	80062ec <HAL_RCC_GetHCLKFreq>
 8006354:	4602      	mov	r2, r0
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	4904      	ldr	r1, [pc, #16]	; (8006374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006362:	5ccb      	ldrb	r3, [r1, r3]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd80      	pop	{r7, pc}
 8006370:	58024400 	.word	0x58024400
 8006374:	08009bb4 	.word	0x08009bb4

08006378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800637c:	f7ff ffb6 	bl	80062ec <HAL_RCC_GetHCLKFreq>
 8006380:	4602      	mov	r2, r0
 8006382:	4b06      	ldr	r3, [pc, #24]	; (800639c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	4904      	ldr	r1, [pc, #16]	; (80063a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800638e:	5ccb      	ldrb	r3, [r1, r3]
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	58024400 	.word	0x58024400
 80063a0:	08009bb4 	.word	0x08009bb4

080063a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063ac:	2300      	movs	r3, #0
 80063ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063b0:	2300      	movs	r3, #0
 80063b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d03f      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063c8:	d02a      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80063ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063ce:	d824      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d4:	d018      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063da:	d81e      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e4:	d007      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80063e6:	e018      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e8:	4bab      	ldr	r3, [pc, #684]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4aaa      	ldr	r2, [pc, #680]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063f4:	e015      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	2102      	movs	r1, #2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 f9cf 	bl	80077a0 <RCCEx_PLL2_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006406:	e00c      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3324      	adds	r3, #36	; 0x24
 800640c:	2102      	movs	r1, #2
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fa78 	bl	8007904 <RCCEx_PLL3_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
      break;
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006428:	4b9b      	ldr	r3, [pc, #620]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006434:	4998      	ldr	r1, [pc, #608]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	650b      	str	r3, [r1, #80]	; 0x50
 800643a:	e001      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d03d      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006450:	2b04      	cmp	r3, #4
 8006452:	d826      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006454:	a201      	add	r2, pc, #4	; (adr r2, 800645c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645a:	bf00      	nop
 800645c:	08006471 	.word	0x08006471
 8006460:	0800647f 	.word	0x0800647f
 8006464:	08006491 	.word	0x08006491
 8006468:	080064a9 	.word	0x080064a9
 800646c:	080064a9 	.word	0x080064a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006470:	4b89      	ldr	r3, [pc, #548]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a88      	ldr	r2, [pc, #544]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800647a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800647c:	e015      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f98b 	bl	80077a0 <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800648e:	e00c      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3324      	adds	r3, #36	; 0x24
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fa34 	bl	8007904 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	75fb      	strb	r3, [r7, #23]
      break;
 80064a6:	e000      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80064a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064b0:	4b79      	ldr	r3, [pc, #484]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b4:	f023 0207 	bic.w	r2, r3, #7
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	4976      	ldr	r1, [pc, #472]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	650b      	str	r3, [r1, #80]	; 0x50
 80064c2:	e001      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d042      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064dc:	d02b      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d825      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064e4:	2bc0      	cmp	r3, #192	; 0xc0
 80064e6:	d028      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064e8:	2bc0      	cmp	r3, #192	; 0xc0
 80064ea:	d821      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d016      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d81d      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d007      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80064fc:	e018      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fe:	4b66      	ldr	r3, [pc, #408]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	4a65      	ldr	r2, [pc, #404]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800650a:	e017      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f001 f944 	bl	80077a0 <RCCEx_PLL2_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800651c:	e00e      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3324      	adds	r3, #36	; 0x24
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f001 f9ed 	bl	8007904 <RCCEx_PLL3_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800652e:	e005      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]
      break;
 8006534:	e002      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800653a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006542:	4b55      	ldr	r3, [pc, #340]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006546:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	4952      	ldr	r1, [pc, #328]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006550:	4313      	orrs	r3, r2
 8006552:	650b      	str	r3, [r1, #80]	; 0x50
 8006554:	e001      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006562:	2b00      	cmp	r3, #0
 8006564:	d049      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800656c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006570:	d030      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006576:	d82a      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006578:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800657c:	d02c      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800657e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006582:	d824      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006588:	d018      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800658a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658e:	d81e      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006598:	d007      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800659a:	e018      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4b3e      	ldr	r3, [pc, #248]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a3d      	ldr	r2, [pc, #244]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065a8:	e017      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 f8f5 	bl	80077a0 <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065ba:	e00e      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f99e 	bl	8007904 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065cc:	e005      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      break;
 80065d2:	e002      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80065d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80065e0:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065ee:	492a      	ldr	r1, [pc, #168]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	658b      	str	r3, [r1, #88]	; 0x58
 80065f4:	e001      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006602:	2b00      	cmp	r3, #0
 8006604:	d04c      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800660c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006610:	d030      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006616:	d82a      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800661c:	d02c      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800661e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006622:	d824      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006628:	d018      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800662a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800662e:	d81e      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006638:	d007      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800663a:	e018      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663c:	4b16      	ldr	r3, [pc, #88]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a15      	ldr	r2, [pc, #84]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006648:	e017      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3304      	adds	r3, #4
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f8a5 	bl	80077a0 <RCCEx_PLL2_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800665a:	e00e      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3324      	adds	r3, #36	; 0x24
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f001 f94e 	bl	8007904 <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800666c:	e005      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
      break;
 8006672:	e002      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10d      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006684:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800668e:	4902      	ldr	r1, [pc, #8]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	658b      	str	r3, [r1, #88]	; 0x58
 8006694:	e004      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d032      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d01c      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066b4:	2b30      	cmp	r3, #48	; 0x30
 80066b6:	d817      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d00c      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d813      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d10f      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c8:	4baf      	ldr	r3, [pc, #700]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	4aae      	ldr	r2, [pc, #696]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80066d4:	e00e      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3304      	adds	r3, #4
 80066da:	2102      	movs	r1, #2
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 f85f 	bl	80077a0 <RCCEx_PLL2_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80066e6:	e005      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
      break;
 80066ec:	e002      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80066f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066fa:	4ba3      	ldr	r3, [pc, #652]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006706:	49a0      	ldr	r1, [pc, #640]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006708:	4313      	orrs	r3, r2
 800670a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800670c:	e001      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d047      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006726:	d030      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800672c:	d82a      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800672e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006732:	d02c      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006734:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006738:	d824      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800673a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673e:	d018      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006744:	d81e      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674e:	d007      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006750:	e018      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006752:	4b8d      	ldr	r3, [pc, #564]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	4a8c      	ldr	r2, [pc, #560]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800675e:	e017      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f81a 	bl	80077a0 <RCCEx_PLL2_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006770:	e00e      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3324      	adds	r3, #36	; 0x24
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f001 f8c3 	bl	8007904 <RCCEx_PLL3_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006782:	e005      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
      break;
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800678e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006796:	4b7c      	ldr	r3, [pc, #496]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	4979      	ldr	r1, [pc, #484]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	650b      	str	r3, [r1, #80]	; 0x50
 80067a8:	e001      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d049      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067c2:	d02e      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80067c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067c8:	d828      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80067ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067ce:	d02a      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80067d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067d4:	d822      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80067d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067da:	d026      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80067dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067e0:	d81c      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80067e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e6:	d010      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ec:	d816      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01d      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80067f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f6:	d111      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	2101      	movs	r1, #1
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 ffce 	bl	80077a0 <RCCEx_PLL2_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006808:	e012      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3324      	adds	r3, #36	; 0x24
 800680e:	2101      	movs	r1, #1
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f877 	bl	8007904 <RCCEx_PLL3_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800681a:	e009      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
      break;
 8006820:	e006      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006822:	bf00      	nop
 8006824:	e004      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006826:	bf00      	nop
 8006828:	e002      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800682a:	bf00      	nop
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800682e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006836:	4b54      	ldr	r3, [pc, #336]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006842:	4951      	ldr	r1, [pc, #324]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006844:	4313      	orrs	r3, r2
 8006846:	650b      	str	r3, [r1, #80]	; 0x50
 8006848:	e001      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d04b      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006864:	d02e      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800686a:	d828      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006870:	d02a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d822      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006878:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800687c:	d026      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800687e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006882:	d81c      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006888:	d010      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800688a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688e:	d816      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01d      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006898:	d111      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3304      	adds	r3, #4
 800689e:	2101      	movs	r1, #1
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 ff7d 	bl	80077a0 <RCCEx_PLL2_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068aa:	e012      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3324      	adds	r3, #36	; 0x24
 80068b0:	2101      	movs	r1, #1
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f826 	bl	8007904 <RCCEx_PLL3_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068bc:	e009      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
      break;
 80068c2:	e006      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068c4:	bf00      	nop
 80068c6:	e004      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068c8:	bf00      	nop
 80068ca:	e002      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068d8:	4b2b      	ldr	r3, [pc, #172]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068e6:	4928      	ldr	r1, [pc, #160]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	658b      	str	r3, [r1, #88]	; 0x58
 80068ec:	e001      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d02f      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006906:	d00e      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690c:	d814      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d015      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006916:	d10f      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006924:	e00c      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3304      	adds	r3, #4
 800692a:	2101      	movs	r1, #1
 800692c:	4618      	mov	r0, r3
 800692e:	f000 ff37 	bl	80077a0 <RCCEx_PLL2_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006936:	e003      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
      break;
 800693c:	e000      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800693e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	490d      	ldr	r1, [pc, #52]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006954:	4313      	orrs	r3, r2
 8006956:	650b      	str	r3, [r1, #80]	; 0x50
 8006958:	e001      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d033      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	2b03      	cmp	r3, #3
 8006970:	d81c      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	080069b3 	.word	0x080069b3
 800697c:	0800698d 	.word	0x0800698d
 8006980:	0800699b 	.word	0x0800699b
 8006984:	080069b3 	.word	0x080069b3
 8006988:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698c:	4bb8      	ldr	r3, [pc, #736]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4ab7      	ldr	r2, [pc, #732]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	2102      	movs	r1, #2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fefd 	bl	80077a0 <RCCEx_PLL2_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80069b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069ba:	4bad      	ldr	r3, [pc, #692]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069be:	f023 0203 	bic.w	r2, r3, #3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c6:	49aa      	ldr	r1, [pc, #680]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069cc:	e001      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8086 	beq.w	8006aec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069e0:	4ba4      	ldr	r3, [pc, #656]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4aa3      	ldr	r2, [pc, #652]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80069e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069ec:	f7fb f9da 	bl	8001da4 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069f2:	e009      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f4:	f7fb f9d6 	bl	8001da4 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	; 0x64
 8006a00:	d902      	bls.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	75fb      	strb	r3, [r7, #23]
        break;
 8006a06:	e005      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a08:	4b9a      	ldr	r3, [pc, #616]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0ef      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d166      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a1a:	4b95      	ldr	r3, [pc, #596]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a24:	4053      	eors	r3, r2
 8006a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d013      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a2e:	4b90      	ldr	r3, [pc, #576]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a38:	4b8d      	ldr	r3, [pc, #564]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	4a8c      	ldr	r2, [pc, #560]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a44:	4b8a      	ldr	r3, [pc, #552]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	4a89      	ldr	r2, [pc, #548]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a50:	4a87      	ldr	r2, [pc, #540]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a60:	d115      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a62:	f7fb f99f 	bl	8001da4 <HAL_GetTick>
 8006a66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a68:	e00b      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6a:	f7fb f99b 	bl	8001da4 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d902      	bls.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	75fb      	strb	r3, [r7, #23]
            break;
 8006a80:	e005      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a82:	4b7b      	ldr	r3, [pc, #492]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0ed      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d126      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa2:	d10d      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006aa4:	4b72      	ldr	r3, [pc, #456]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ab2:	0919      	lsrs	r1, r3, #4
 8006ab4:	4b70      	ldr	r3, [pc, #448]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006ab6:	400b      	ands	r3, r1
 8006ab8:	496d      	ldr	r1, [pc, #436]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]
 8006abe:	e005      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006ac0:	4b6b      	ldr	r3, [pc, #428]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	4a6a      	ldr	r2, [pc, #424]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ac6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006aca:	6113      	str	r3, [r2, #16]
 8006acc:	4b68      	ldr	r3, [pc, #416]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ada:	4965      	ldr	r1, [pc, #404]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	670b      	str	r3, [r1, #112]	; 0x70
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	75bb      	strb	r3, [r7, #22]
 8006ae6:	e001      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d07e      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006afc:	2b28      	cmp	r3, #40	; 0x28
 8006afe:	d867      	bhi.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006bd7 	.word	0x08006bd7
 8006b0c:	08006bd1 	.word	0x08006bd1
 8006b10:	08006bd1 	.word	0x08006bd1
 8006b14:	08006bd1 	.word	0x08006bd1
 8006b18:	08006bd1 	.word	0x08006bd1
 8006b1c:	08006bd1 	.word	0x08006bd1
 8006b20:	08006bd1 	.word	0x08006bd1
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006bad 	.word	0x08006bad
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006bd1 	.word	0x08006bd1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bbf 	.word	0x08006bbf
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bd7 	.word	0x08006bd7
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bd7 	.word	0x08006bd7
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bd1 	.word	0x08006bd1
 8006ba0:	08006bd1 	.word	0x08006bd1
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006bd7 	.word	0x08006bd7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fdf4 	bl	80077a0 <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006bbc:	e00c      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3324      	adds	r3, #36	; 0x24
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fe9d 	bl	8007904 <RCCEx_PLL3_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006bce:	e003      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bea:	4921      	ldr	r1, [pc, #132]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	654b      	str	r3, [r1, #84]	; 0x54
 8006bf0:	e001      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d03e      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d820      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c53 	.word	0x08006c53
 8006c14:	08006c29 	.word	0x08006c29
 8006c18:	08006c3b 	.word	0x08006c3b
 8006c1c:	08006c53 	.word	0x08006c53
 8006c20:	08006c53 	.word	0x08006c53
 8006c24:	08006c53 	.word	0x08006c53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fdb6 	bl	80077a0 <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c38:	e00c      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3324      	adds	r3, #36	; 0x24
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fe5f 	bl	8007904 <RCCEx_PLL3_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c4a:	e003      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c50:	e000      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d110      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	f023 0207 	bic.w	r2, r3, #7
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c66:	4902      	ldr	r1, [pc, #8]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	654b      	str	r3, [r1, #84]	; 0x54
 8006c6c:	e008      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006c6e:	bf00      	nop
 8006c70:	58024400 	.word	0x58024400
 8006c74:	58024800 	.word	0x58024800
 8006c78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d039      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d820      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cdf 	.word	0x08006cdf
 8006ca0:	08006cb5 	.word	0x08006cb5
 8006ca4:	08006cc7 	.word	0x08006cc7
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006cdf 	.word	0x08006cdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	2101      	movs	r1, #1
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fd70 	bl	80077a0 <RCCEx_PLL2_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cc4:	e00c      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3324      	adds	r3, #36	; 0x24
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fe19 	bl	8007904 <RCCEx_PLL3_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cd6:	e003      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
      break;
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ce6:	4bb7      	ldr	r3, [pc, #732]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	f023 0207 	bic.w	r2, r3, #7
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf4:	49b3      	ldr	r1, [pc, #716]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	658b      	str	r3, [r1, #88]	; 0x58
 8006cfa:	e001      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d04b      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d16:	d02e      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d1c:	d828      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d22:	d02a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	d822      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d2e:	d026      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006d30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d34:	d81c      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d3a:	d010      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d40:	d816      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01d      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4a:	d111      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fd24 	bl	80077a0 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d5c:	e012      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fdcd 	bl	8007904 <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d6e:	e009      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
      break;
 8006d74:	e006      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006d76:	bf00      	nop
 8006d78:	e004      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006d7a:	bf00      	nop
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d8a:	4b8e      	ldr	r3, [pc, #568]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d98:	498a      	ldr	r1, [pc, #552]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	654b      	str	r3, [r1, #84]	; 0x54
 8006d9e:	e001      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d04b      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dba:	d02e      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006dbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dc0:	d828      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc6:	d02a      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dcc:	d822      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd2:	d026      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd8:	d81c      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dde:	d010      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de4:	d816      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01d      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dee:	d111      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fcd2 	bl	80077a0 <RCCEx_PLL2_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e00:	e012      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3324      	adds	r3, #36	; 0x24
 8006e06:	2102      	movs	r1, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fd7b 	bl	8007904 <RCCEx_PLL3_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e12:	e009      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]
      break;
 8006e18:	e006      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e004      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e002      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e2e:	4b65      	ldr	r3, [pc, #404]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e3c:	4961      	ldr	r1, [pc, #388]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	658b      	str	r3, [r1, #88]	; 0x58
 8006e42:	e001      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d04b      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e5e:	d02e      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006e60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e64:	d828      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6a:	d02a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	d822      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006e72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e76:	d026      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006e78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e7c:	d81c      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e82:	d010      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e88:	d816      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01d      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e92:	d111      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3304      	adds	r3, #4
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fc80 	bl	80077a0 <RCCEx_PLL2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ea4:	e012      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fd29 	bl	8007904 <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006eb6:	e009      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebc:	e006      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ebe:	bf00      	nop
 8006ec0:	e004      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e002      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ec6:	bf00      	nop
 8006ec8:	e000      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ed2:	4b3c      	ldr	r3, [pc, #240]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ee0:	4938      	ldr	r1, [pc, #224]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee6:	e001      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	d10a      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fcfa 	bl	8007904 <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f1a:	4b2a      	ldr	r3, [pc, #168]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f28:	4926      	ldr	r1, [pc, #152]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f44:	d10a      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3324      	adds	r3, #36	; 0x24
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fcd9 	bl	8007904 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f5c:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f6a:	4916      	ldr	r1, [pc, #88]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d036      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f86:	d01f      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8c:	d817      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f96:	d009      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006f98:	e011      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fbfd 	bl	80077a0 <RCCEx_PLL2_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006faa:	e00e      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3324      	adds	r3, #36	; 0x24
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fca6 	bl	8007904 <RCCEx_PLL3_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fbc:	e005      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc2:	e002      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006fc4:	58024400 	.word	0x58024400
      break;
 8006fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fd0:	4b93      	ldr	r3, [pc, #588]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fde:	4990      	ldr	r1, [pc, #576]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	658b      	str	r3, [r1, #88]	; 0x58
 8006fe4:	e001      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d033      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007000:	d01c      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007002:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007006:	d816      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800700e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007012:	d007      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007014:	e00f      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007016:	4b82      	ldr	r3, [pc, #520]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a81      	ldr	r2, [pc, #516]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007022:	e00c      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	2101      	movs	r1, #1
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fc6a 	bl	8007904 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007034:	e003      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
      break;
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800703c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007044:	4b76      	ldr	r3, [pc, #472]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007052:	4973      	ldr	r1, [pc, #460]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007054:	4313      	orrs	r3, r2
 8007056:	654b      	str	r3, [r1, #84]	; 0x54
 8007058:	e001      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d029      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007076:	d007      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007078:	e00f      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800707a:	4b69      	ldr	r3, [pc, #420]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a68      	ldr	r2, [pc, #416]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007086:	e00b      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	2102      	movs	r1, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fb86 	bl	80077a0 <RCCEx_PLL2_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007098:	e002      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
      break;
 800709e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070a6:	4b5e      	ldr	r3, [pc, #376]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b2:	495b      	ldr	r1, [pc, #364]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070b8:	e001      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3324      	adds	r3, #36	; 0x24
 80070ce:	2102      	movs	r1, #2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fc17 	bl	8007904 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d030      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f4:	d017      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80070f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fa:	d811      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80070fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007100:	d013      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007106:	d80b      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800710c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007110:	d106      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007112:	4b43      	ldr	r3, [pc, #268]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	4a42      	ldr	r2, [pc, #264]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800711e:	e007      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	75fb      	strb	r3, [r7, #23]
      break;
 8007124:	e004      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800712e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007136:	4b3a      	ldr	r3, [pc, #232]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007142:	4937      	ldr	r1, [pc, #220]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007144:	4313      	orrs	r3, r2
 8007146:	654b      	str	r3, [r1, #84]	; 0x54
 8007148:	e001      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d008      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	492e      	ldr	r1, [pc, #184]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007178:	4b29      	ldr	r3, [pc, #164]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007186:	4926      	ldr	r1, [pc, #152]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007188:	4313      	orrs	r3, r2
 800718a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007198:	4b21      	ldr	r3, [pc, #132]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800719a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a4:	491e      	ldr	r1, [pc, #120]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	4a19      	ldr	r2, [pc, #100]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c0:	6113      	str	r3, [r2, #16]
 80071c2:	4b17      	ldr	r3, [pc, #92]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071c4:	691a      	ldr	r2, [r3, #16]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80071cc:	4914      	ldr	r1, [pc, #80]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da08      	bge.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e6:	490e      	ldr	r1, [pc, #56]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d009      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007206:	4906      	ldr	r1, [pc, #24]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007208:	4313      	orrs	r3, r2
 800720a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800720c:	7dbb      	ldrb	r3, [r7, #22]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	e000      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	58024400 	.word	0x58024400

08007224 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007228:	f7ff f860 	bl	80062ec <HAL_RCC_GetHCLKFreq>
 800722c:	4602      	mov	r2, r0
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	091b      	lsrs	r3, r3, #4
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	4904      	ldr	r1, [pc, #16]	; (800724c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800723a:	5ccb      	ldrb	r3, [r1, r3]
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007244:	4618      	mov	r0, r3
 8007246:	bd80      	pop	{r7, pc}
 8007248:	58024400 	.word	0x58024400
 800724c:	08009bb4 	.word	0x08009bb4

08007250 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007258:	4ba1      	ldr	r3, [pc, #644]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007262:	4b9f      	ldr	r3, [pc, #636]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	0b1b      	lsrs	r3, r3, #12
 8007268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800726e:	4b9c      	ldr	r3, [pc, #624]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	091b      	lsrs	r3, r3, #4
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800727a:	4b99      	ldr	r3, [pc, #612]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	08db      	lsrs	r3, r3, #3
 8007280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8111 	beq.w	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	f000 8083 	beq.w	80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f200 80a1 	bhi.w	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d056      	beq.n	8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072ba:	e099      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072bc:	4b88      	ldr	r3, [pc, #544]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d02d      	beq.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072c8:	4b85      	ldr	r3, [pc, #532]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	08db      	lsrs	r3, r3, #3
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	4a84      	ldr	r2, [pc, #528]	; (80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
 80072d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f2:	4b7b      	ldr	r3, [pc, #492]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007302:	ed97 6a03 	vldr	s12, [r7, #12]
 8007306:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007322:	e087      	b.n	8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007336:	4b6a      	ldr	r3, [pc, #424]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007346:	ed97 6a03 	vldr	s12, [r7, #12]
 800734a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800734e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007366:	e065      	b.n	8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737a:	4b59      	ldr	r3, [pc, #356]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738a:	ed97 6a03 	vldr	s12, [r7, #12]
 800738e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073aa:	e043      	b.n	8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	4b48      	ldr	r3, [pc, #288]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ee:	e021      	b.n	8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	ed97 6a03 	vldr	s12, [r7, #12]
 8007416:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007432:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007434:	4b2a      	ldr	r3, [pc, #168]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	0a5b      	lsrs	r3, r3, #9
 800743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800744a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800745a:	ee17 2a90 	vmov	r2, s15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007462:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	0c1b      	lsrs	r3, r3, #16
 8007468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800747c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007488:	ee17 2a90 	vmov	r2, s15
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	0e1b      	lsrs	r3, r3, #24
 8007496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b6:	ee17 2a90 	vmov	r2, s15
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074be:	e008      	b.n	80074d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	609a      	str	r2, [r3, #8]
}
 80074d2:	bf00      	nop
 80074d4:	3724      	adds	r7, #36	; 0x24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400
 80074e4:	03d09000 	.word	0x03d09000
 80074e8:	46000000 	.word	0x46000000
 80074ec:	4c742400 	.word	0x4c742400
 80074f0:	4a742400 	.word	0x4a742400
 80074f4:	4afe502a 	.word	0x4afe502a

080074f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b089      	sub	sp, #36	; 0x24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007500:	4ba1      	ldr	r3, [pc, #644]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800750a:	4b9f      	ldr	r3, [pc, #636]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	0d1b      	lsrs	r3, r3, #20
 8007510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007514:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007516:	4b9c      	ldr	r3, [pc, #624]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	0a1b      	lsrs	r3, r3, #8
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007522:	4b99      	ldr	r3, [pc, #612]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 8111 	beq.w	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b02      	cmp	r3, #2
 800754a:	f000 8083 	beq.w	8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b02      	cmp	r3, #2
 8007552:	f200 80a1 	bhi.w	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d056      	beq.n	8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007562:	e099      	b.n	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007564:	4b88      	ldr	r3, [pc, #544]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02d      	beq.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007570:	4b85      	ldr	r3, [pc, #532]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	08db      	lsrs	r3, r3, #3
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	4a84      	ldr	r2, [pc, #528]	; (800778c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b7b      	ldr	r3, [pc, #492]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075ca:	e087      	b.n	80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b6a      	ldr	r3, [pc, #424]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800760e:	e065      	b.n	80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b59      	ldr	r3, [pc, #356]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a03 	vldr	s12, [r7, #12]
 8007636:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007652:	e043      	b.n	80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b48      	ldr	r3, [pc, #288]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a03 	vldr	s12, [r7, #12]
 800767a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007696:	e021      	b.n	80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076aa:	4b37      	ldr	r3, [pc, #220]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80076be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076dc:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	0a5b      	lsrs	r3, r3, #9
 80076e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007702:	ee17 2a90 	vmov	r2, s15
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	0c1b      	lsrs	r3, r3, #16
 8007710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007724:	edd7 6a07 	vldr	s13, [r7, #28]
 8007728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007730:	ee17 2a90 	vmov	r2, s15
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	0e1b      	lsrs	r3, r3, #24
 800773e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800774e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007752:	edd7 6a07 	vldr	s13, [r7, #28]
 8007756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800775e:	ee17 2a90 	vmov	r2, s15
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007766:	e008      	b.n	800777a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	609a      	str	r2, [r3, #8]
}
 800777a:	bf00      	nop
 800777c:	3724      	adds	r7, #36	; 0x24
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	58024400 	.word	0x58024400
 800778c:	03d09000 	.word	0x03d09000
 8007790:	46000000 	.word	0x46000000
 8007794:	4c742400 	.word	0x4c742400
 8007798:	4a742400 	.word	0x4a742400
 800779c:	4afe502a 	.word	0x4afe502a

080077a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ae:	4b53      	ldr	r3, [pc, #332]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d101      	bne.n	80077be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e099      	b.n	80078f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077be:	4b4f      	ldr	r3, [pc, #316]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a4e      	ldr	r2, [pc, #312]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80077c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ca:	f7fa faeb 	bl	8001da4 <HAL_GetTick>
 80077ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077d0:	e008      	b.n	80077e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077d2:	f7fa fae7 	bl	8001da4 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e086      	b.n	80078f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077e4:	4b45      	ldr	r3, [pc, #276]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f0      	bne.n	80077d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077f0:	4b42      	ldr	r3, [pc, #264]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	031b      	lsls	r3, r3, #12
 80077fe:	493f      	ldr	r1, [pc, #252]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007800:	4313      	orrs	r3, r2
 8007802:	628b      	str	r3, [r1, #40]	; 0x28
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	3b01      	subs	r3, #1
 800780a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	3b01      	subs	r3, #1
 8007814:	025b      	lsls	r3, r3, #9
 8007816:	b29b      	uxth	r3, r3
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	3b01      	subs	r3, #1
 8007820:	041b      	lsls	r3, r3, #16
 8007822:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	3b01      	subs	r3, #1
 800782e:	061b      	lsls	r3, r3, #24
 8007830:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007834:	4931      	ldr	r1, [pc, #196]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007836:	4313      	orrs	r3, r2
 8007838:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800783a:	4b30      	ldr	r3, [pc, #192]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	492d      	ldr	r1, [pc, #180]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007848:	4313      	orrs	r3, r2
 800784a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800784c:	4b2b      	ldr	r3, [pc, #172]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	f023 0220 	bic.w	r2, r3, #32
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	4928      	ldr	r1, [pc, #160]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800785e:	4b27      	ldr	r3, [pc, #156]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007862:	4a26      	ldr	r2, [pc, #152]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007864:	f023 0310 	bic.w	r3, r3, #16
 8007868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800786a:	4b24      	ldr	r3, [pc, #144]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 800786c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800786e:	4b24      	ldr	r3, [pc, #144]	; (8007900 <RCCEx_PLL2_Config+0x160>)
 8007870:	4013      	ands	r3, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	69d2      	ldr	r2, [r2, #28]
 8007876:	00d2      	lsls	r2, r2, #3
 8007878:	4920      	ldr	r1, [pc, #128]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 800787a:	4313      	orrs	r3, r2
 800787c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800787e:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007884:	f043 0310 	orr.w	r3, r3, #16
 8007888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d106      	bne.n	800789e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	4a19      	ldr	r2, [pc, #100]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 8007896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800789a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800789c:	e00f      	b.n	80078be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d106      	bne.n	80078b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078a4:	4b15      	ldr	r3, [pc, #84]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	4a14      	ldr	r2, [pc, #80]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b0:	e005      	b.n	80078be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078b2:	4b12      	ldr	r3, [pc, #72]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	4a11      	ldr	r2, [pc, #68]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a0e      	ldr	r2, [pc, #56]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ca:	f7fa fa6b 	bl	8001da4 <HAL_GetTick>
 80078ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078d0:	e008      	b.n	80078e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078d2:	f7fa fa67 	bl	8001da4 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e006      	b.n	80078f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <RCCEx_PLL2_Config+0x15c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
 8007900:	ffff0007 	.word	0xffff0007

08007904 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007912:	4b53      	ldr	r3, [pc, #332]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d101      	bne.n	8007922 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e099      	b.n	8007a56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007922:	4b4f      	ldr	r3, [pc, #316]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a4e      	ldr	r2, [pc, #312]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800792c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792e:	f7fa fa39 	bl	8001da4 <HAL_GetTick>
 8007932:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007934:	e008      	b.n	8007948 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007936:	f7fa fa35 	bl	8001da4 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e086      	b.n	8007a56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007948:	4b45      	ldr	r3, [pc, #276]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f0      	bne.n	8007936 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007954:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	051b      	lsls	r3, r3, #20
 8007962:	493f      	ldr	r1, [pc, #252]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007964:	4313      	orrs	r3, r2
 8007966:	628b      	str	r3, [r1, #40]	; 0x28
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	3b01      	subs	r3, #1
 800796e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	3b01      	subs	r3, #1
 8007978:	025b      	lsls	r3, r3, #9
 800797a:	b29b      	uxth	r3, r3
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	3b01      	subs	r3, #1
 8007984:	041b      	lsls	r3, r3, #16
 8007986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	3b01      	subs	r3, #1
 8007992:	061b      	lsls	r3, r3, #24
 8007994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007998:	4931      	ldr	r1, [pc, #196]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 800799a:	4313      	orrs	r3, r2
 800799c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800799e:	4b30      	ldr	r3, [pc, #192]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	492d      	ldr	r1, [pc, #180]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079b0:	4b2b      	ldr	r3, [pc, #172]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	4928      	ldr	r1, [pc, #160]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079c2:	4b27      	ldr	r3, [pc, #156]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079ce:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d2:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <RCCEx_PLL3_Config+0x160>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	69d2      	ldr	r2, [r2, #28]
 80079da:	00d2      	lsls	r2, r2, #3
 80079dc:	4920      	ldr	r1, [pc, #128]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079e2:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079f4:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 80079fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a00:	e00f      	b.n	8007a22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d106      	bne.n	8007a16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	4a14      	ldr	r2, [pc, #80]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a14:	e005      	b.n	8007a22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a16:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a22:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a0e      	ldr	r2, [pc, #56]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2e:	f7fa f9b9 	bl	8001da4 <HAL_GetTick>
 8007a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a34:	e008      	b.n	8007a48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a36:	f7fa f9b5 	bl	8001da4 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e006      	b.n	8007a56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <RCCEx_PLL3_Config+0x15c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0f0      	beq.n	8007a36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	58024400 	.word	0x58024400
 8007a64:	ffff0007 	.word	0xffff0007

08007a68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e0eb      	b.n	8007c56 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a75      	ldr	r2, [pc, #468]	; (8007c60 <HAL_SPI_Init+0x1f8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00f      	beq.n	8007aae <HAL_SPI_Init+0x46>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a74      	ldr	r2, [pc, #464]	; (8007c64 <HAL_SPI_Init+0x1fc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00a      	beq.n	8007aae <HAL_SPI_Init+0x46>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a72      	ldr	r2, [pc, #456]	; (8007c68 <HAL_SPI_Init+0x200>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d005      	beq.n	8007aae <HAL_SPI_Init+0x46>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d901      	bls.n	8007aae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e0d3      	b.n	8007c56 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fb94 	bl	80081dc <SPI_GetPacketSize>
 8007ab4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a69      	ldr	r2, [pc, #420]	; (8007c60 <HAL_SPI_Init+0x1f8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00c      	beq.n	8007ada <HAL_SPI_Init+0x72>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a67      	ldr	r2, [pc, #412]	; (8007c64 <HAL_SPI_Init+0x1fc>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d007      	beq.n	8007ada <HAL_SPI_Init+0x72>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a66      	ldr	r2, [pc, #408]	; (8007c68 <HAL_SPI_Init+0x200>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d002      	beq.n	8007ada <HAL_SPI_Init+0x72>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d811      	bhi.n	8007afe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ade:	4a60      	ldr	r2, [pc, #384]	; (8007c60 <HAL_SPI_Init+0x1f8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5e      	ldr	r2, [pc, #376]	; (8007c64 <HAL_SPI_Init+0x1fc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_SPI_Init+0x90>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a5d      	ldr	r2, [pc, #372]	; (8007c68 <HAL_SPI_Init+0x200>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d104      	bne.n	8007b02 <HAL_SPI_Init+0x9a>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d901      	bls.n	8007b02 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e0a9      	b.n	8007c56 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7f9 fafc 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b3c:	d119      	bne.n	8007b72 <HAL_SPI_Init+0x10a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b46:	d103      	bne.n	8007b50 <HAL_SPI_Init+0xe8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10c      	bne.n	8007b72 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b60:	d107      	bne.n	8007b72 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69da      	ldr	r2, [r3, #28]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b84:	ea42 0103 	orr.w	r1, r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd2:	ea42 0103 	orr.w	r1, r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d113      	bne.n	8007c12 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40013000 	.word	0x40013000
 8007c64:	40003800 	.word	0x40003800
 8007c68:	40003c00 	.word	0x40003c00

08007c6c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	; 0x28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007c84:	6a3a      	ldr	r2, [r7, #32]
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c9e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3330      	adds	r3, #48	; 0x30
 8007ca6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d113      	bne.n	8007cda <HAL_SPI_IRQHandler+0x6e>
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10e      	bne.n	8007cda <HAL_SPI_IRQHandler+0x6e>
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
    handled = 1UL;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10f      	bne.n	8007d04 <HAL_SPI_IRQHandler+0x98>
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_SPI_IRQHandler+0x98>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
    handled = 1UL;
 8007d00:	2301      	movs	r3, #1
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10f      	bne.n	8007d2e <HAL_SPI_IRQHandler+0xc2>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <HAL_SPI_IRQHandler+0xc2>
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d105      	bne.n	8007d2e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
    handled = 1UL;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 816f 	bne.w	8008014 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80a0 	beq.w	8007e82 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0208 	orr.w	r2, r2, #8
 8007d50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0210 	orr.w	r2, r2, #16
 8007d60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699a      	ldr	r2, [r3, #24]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d70:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0208 	bic.w	r2, r2, #8
 8007d80:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00f      	beq.n	8007dac <HAL_SPI_IRQHandler+0x140>
 8007d8c:	7cfb      	ldrb	r3, [r7, #19]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d004      	beq.n	8007d9c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_SPI_IRQHandler+0x140>
 8007d9c:	7cfb      	ldrb	r3, [r7, #19]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d059      	beq.n	8007e56 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d154      	bne.n	8007e56 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d13d      	bne.n	8007e36 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007dba:	e036      	b.n	8007e2a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b0f      	cmp	r3, #15
 8007dc2:	d90b      	bls.n	8007ddc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007dce:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd4:	1d1a      	adds	r2, r3, #4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	665a      	str	r2, [r3, #100]	; 0x64
 8007dda:	e01d      	b.n	8007e18 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b07      	cmp	r3, #7
 8007de2:	d90b      	bls.n	8007dfc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	8812      	ldrh	r2, [r2, #0]
 8007dec:	b292      	uxth	r2, r2
 8007dee:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	1c9a      	adds	r2, r3, #2
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	665a      	str	r2, [r3, #100]	; 0x64
 8007dfa:	e00d      	b.n	8007e18 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1c2      	bne.n	8007dbc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f930 	bl	800809c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7f9 f91e 	bl	8001090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007e54:	e0e3      	b.n	800801e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007e56:	7cfb      	ldrb	r3, [r7, #19]
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d103      	bne.n	8007e64 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f8f9 	bl	8008054 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007e62:	e0d9      	b.n	8008018 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007e64:	7cfb      	ldrb	r3, [r7, #19]
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d103      	bne.n	8007e72 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f8e8 	bl	8008040 <HAL_SPI_RxCpltCallback>
    return;
 8007e70:	e0d2      	b.n	8008018 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007e72:	7cfb      	ldrb	r3, [r7, #19]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	f040 80cf 	bne.w	8008018 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f8d6 	bl	800802c <HAL_SPI_TxCpltCallback>
    return;
 8007e80:	e0ca      	b.n	8008018 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00d      	beq.n	8007ea8 <HAL_SPI_IRQHandler+0x23c>
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ea4:	619a      	str	r2, [r3, #24]

    return;
 8007ea6:	e0ba      	b.n	800801e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 80b5 	beq.w	800801e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00f      	beq.n	8007ede <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec4:	f043 0204 	orr.w	r2, r3, #4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007edc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00f      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eee:	f043 0201 	orr.w	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f06:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00f      	beq.n	8007f32 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f18:	f043 0208 	orr.w	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699a      	ldr	r2, [r3, #24]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f30:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00f      	beq.n	8007f5c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0220 	orr.w	r2, r2, #32
 8007f5a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d05a      	beq.n	800801c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6919      	ldr	r1, [r3, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b28      	ldr	r3, [pc, #160]	; (8008024 <HAL_SPI_IRQHandler+0x3b8>)
 8007f82:	400b      	ands	r3, r1
 8007f84:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f90:	d138      	bne.n	8008004 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007fa0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d013      	beq.n	8007fd2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <HAL_SPI_IRQHandler+0x3bc>)
 8007fb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fb fa96 	bl	80034e8 <HAL_DMA_Abort_IT>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d020      	beq.n	800801c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fde:	4a12      	ldr	r2, [pc, #72]	; (8008028 <HAL_SPI_IRQHandler+0x3bc>)
 8007fe0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fb fa7e 	bl	80034e8 <HAL_DMA_Abort_IT>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d014      	beq.n	800801c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008002:	e00b      	b.n	800801c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7f9 f83f 	bl	8001090 <HAL_SPI_ErrorCallback>
    return;
 8008012:	e003      	b.n	800801c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8008014:	bf00      	nop
 8008016:	e002      	b.n	800801e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008018:	bf00      	nop
 800801a:	e000      	b.n	800801e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800801c:	bf00      	nop
  }
}
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	fffffc94 	.word	0xfffffc94
 8008028:	08008069 	.word	0x08008069

0800802c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7f8 fffe 	bl	8001090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0208 	orr.w	r2, r2, #8
 80080ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0210 	orr.w	r2, r2, #16
 80080ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6919      	ldr	r1, [r3, #16]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b3c      	ldr	r3, [pc, #240]	; (80081d8 <SPI_CloseTransfer+0x13c>)
 80080e8:	400b      	ands	r3, r1
 80080ea:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80080fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b04      	cmp	r3, #4
 8008106:	d014      	beq.n	8008132 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699a      	ldr	r2, [r3, #24]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0220 	orr.w	r2, r2, #32
 8008130:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d014      	beq.n	8008168 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00f      	beq.n	8008168 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814e:	f043 0204 	orr.w	r2, r3, #4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008166:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00f      	beq.n	8008192 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008178:	f043 0201 	orr.w	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008190:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00f      	beq.n	80081bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a2:	f043 0208 	orr.w	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80081cc:	bf00      	nop
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	fffffc90 	.word	0xfffffc90

080081dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	095b      	lsrs	r3, r3, #5
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	3307      	adds	r3, #7
 80081fa:	08db      	lsrs	r3, r3, #3
 80081fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	fb02 f303 	mul.w	r3, r2, r3
}
 8008206:	4618      	mov	r0, r3
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e042      	b.n	80082aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7f9 f91c 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2224      	movs	r2, #36	; 0x24
 8008240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb87 	bl	8008968 <UART_SetConfig>
 800825a:	4603      	mov	r3, r0
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e022      	b.n	80082aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f8db 	bl	8009428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008280:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008290:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0201 	orr.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 f962 	bl	800956c <UART_CheckIdleState>
 80082a8:	4603      	mov	r3, r0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d168      	bne.n	800839e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <HAL_UART_Transmit_DMA+0x24>
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e061      	b.n	80083a0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UART_Transmit_DMA+0x36>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e05a      	b.n	80083a0 <HAL_UART_Transmit_DMA+0xec>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	88fa      	ldrh	r2, [r7, #6]
 8008304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800831c:	2b00      	cmp	r3, #0
 800831e:	d02c      	beq.n	800837a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008324:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <HAL_UART_Transmit_DMA+0xf4>)
 8008326:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800832c:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <HAL_UART_Transmit_DMA+0xf8>)
 800832e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008334:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <HAL_UART_Transmit_DMA+0xfc>)
 8008336:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800833c:	2200      	movs	r2, #0
 800833e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008348:	4619      	mov	r1, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3328      	adds	r3, #40	; 0x28
 8008350:	461a      	mov	r2, r3
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	f7fa fb40 	bl	80029d8 <HAL_DMA_Start_IT>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2210      	movs	r2, #16
 8008362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e012      	b.n	80083a0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008398:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	e000      	b.n	80083a0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800839e:	2302      	movs	r3, #2
  }
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	080097a5 	.word	0x080097a5
 80083ac:	080097f5 	.word	0x080097f5
 80083b0:	08009811 	.word	0x08009811

080083b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80083da:	4013      	ands	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d118      	bne.n	8008416 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d013      	beq.n	8008416 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 8282 	beq.w	8008910 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
      }
      return;
 8008414:	e27c      	b.n	8008910 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80ef 	beq.w	80085fc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4b73      	ldr	r3, [pc, #460]	; (80085f0 <HAL_UART_IRQHandler+0x23c>)
 8008422:	4013      	ands	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d105      	bne.n	8008434 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4b72      	ldr	r3, [pc, #456]	; (80085f4 <HAL_UART_IRQHandler+0x240>)
 800842c:	4013      	ands	r3, r2
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80e4 	beq.w	80085fc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d010      	beq.n	8008460 <HAL_UART_IRQHandler+0xac>
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2201      	movs	r2, #1
 800844e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008456:	f043 0201 	orr.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d010      	beq.n	800848c <HAL_UART_IRQHandler+0xd8>
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2202      	movs	r2, #2
 800847a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008482:	f043 0204 	orr.w	r2, r3, #4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d010      	beq.n	80084b8 <HAL_UART_IRQHandler+0x104>
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2204      	movs	r2, #4
 80084a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ae:	f043 0202 	orr.w	r2, r3, #2
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d015      	beq.n	80084ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d104      	bne.n	80084d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4b48      	ldr	r3, [pc, #288]	; (80085f0 <HAL_UART_IRQHandler+0x23c>)
 80084d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2208      	movs	r2, #8
 80084dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e4:	f043 0208 	orr.w	r2, r3, #8
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d011      	beq.n	800851c <HAL_UART_IRQHandler+0x168>
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00c      	beq.n	800851c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800850a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008512:	f043 0220 	orr.w	r2, r3, #32
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 81f6 	beq.w	8008914 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d011      	beq.n	8008556 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d004      	beq.n	8008576 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008572:	2b00      	cmp	r3, #0
 8008574:	d031      	beq.n	80085da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f8e2 	bl	8009740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d123      	bne.n	80085d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008598:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d013      	beq.n	80085ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a6:	4a14      	ldr	r2, [pc, #80]	; (80085f8 <HAL_UART_IRQHandler+0x244>)
 80085a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fa ff9a 	bl	80034e8 <HAL_DMA_Abort_IT>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d017      	beq.n	80085ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c8:	e00f      	b.n	80085ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7f8 fd70 	bl	80010b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	e00b      	b.n	80085ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7f8 fd6c 	bl	80010b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	e007      	b.n	80085ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fd68 	bl	80010b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80085e8:	e194      	b.n	8008914 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ea:	bf00      	nop
    return;
 80085ec:	e192      	b.n	8008914 <HAL_UART_IRQHandler+0x560>
 80085ee:	bf00      	nop
 80085f0:	10000001 	.word	0x10000001
 80085f4:	04000120 	.word	0x04000120
 80085f8:	08009891 	.word	0x08009891

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008600:	2b01      	cmp	r3, #1
 8008602:	f040 810f 	bne.w	8008824 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f003 0310 	and.w	r3, r3, #16
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8109 	beq.w	8008824 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8103 	beq.w	8008824 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2210      	movs	r2, #16
 8008624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	f040 80bb 	bne.w	80087ac <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a96      	ldr	r2, [pc, #600]	; (8008898 <HAL_UART_IRQHandler+0x4e4>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d059      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a94      	ldr	r2, [pc, #592]	; (800889c <HAL_UART_IRQHandler+0x4e8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d053      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a92      	ldr	r2, [pc, #584]	; (80088a0 <HAL_UART_IRQHandler+0x4ec>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d04d      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a90      	ldr	r2, [pc, #576]	; (80088a4 <HAL_UART_IRQHandler+0x4f0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d047      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a8e      	ldr	r2, [pc, #568]	; (80088a8 <HAL_UART_IRQHandler+0x4f4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d041      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a8c      	ldr	r2, [pc, #560]	; (80088ac <HAL_UART_IRQHandler+0x4f8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d03b      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a8a      	ldr	r2, [pc, #552]	; (80088b0 <HAL_UART_IRQHandler+0x4fc>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d035      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a88      	ldr	r2, [pc, #544]	; (80088b4 <HAL_UART_IRQHandler+0x500>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d02f      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a86      	ldr	r2, [pc, #536]	; (80088b8 <HAL_UART_IRQHandler+0x504>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d029      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a84      	ldr	r2, [pc, #528]	; (80088bc <HAL_UART_IRQHandler+0x508>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d023      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a82      	ldr	r2, [pc, #520]	; (80088c0 <HAL_UART_IRQHandler+0x50c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d01d      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a80      	ldr	r2, [pc, #512]	; (80088c4 <HAL_UART_IRQHandler+0x510>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d017      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a7e      	ldr	r2, [pc, #504]	; (80088c8 <HAL_UART_IRQHandler+0x514>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d011      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a7c      	ldr	r2, [pc, #496]	; (80088cc <HAL_UART_IRQHandler+0x518>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00b      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a7a      	ldr	r2, [pc, #488]	; (80088d0 <HAL_UART_IRQHandler+0x51c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d005      	beq.n	80086f6 <HAL_UART_IRQHandler+0x342>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a78      	ldr	r2, [pc, #480]	; (80088d4 <HAL_UART_IRQHandler+0x520>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d105      	bne.n	8008702 <HAL_UART_IRQHandler+0x34e>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	e004      	b.n	800870c <HAL_UART_IRQHandler+0x358>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	b29b      	uxth	r3, r3
 800870c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800870e:	893b      	ldrh	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8101 	beq.w	8008918 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800871c:	893a      	ldrh	r2, [r7, #8]
 800871e:	429a      	cmp	r2, r3
 8008720:	f080 80fa 	bcs.w	8008918 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	893a      	ldrh	r2, [r7, #8]
 8008728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008736:	d02b      	beq.n	8008790 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008746:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0201 	bic.w	r2, r2, #1
 8008756:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008766:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0210 	bic.w	r2, r2, #16
 8008784:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878a:	4618      	mov	r0, r3
 800878c:	f7fa fb8e 	bl	8002eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800879c:	b29b      	uxth	r3, r3
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f8d3 	bl	8008950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087aa:	e0b5      	b.n	8008918 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80a8 	beq.w	800891c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80087cc:	897b      	ldrh	r3, [r7, #10]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80a4 	beq.w	800891c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087e2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6899      	ldr	r1, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b3a      	ldr	r3, [pc, #232]	; (80088d8 <HAL_UART_IRQHandler+0x524>)
 80087f0:	400b      	ands	r3, r1
 80087f2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0210 	bic.w	r2, r2, #16
 8008816:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008818:	897b      	ldrh	r3, [r7, #10]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f897 	bl	8008950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008822:	e07b      	b.n	800891c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00d      	beq.n	800884a <HAL_UART_IRQHandler+0x496>
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d008      	beq.n	800884a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 f854 	bl	80098f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008848:	e06b      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008850:	2b00      	cmp	r3, #0
 8008852:	d012      	beq.n	800887a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d008      	beq.n	800887a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886c:	2b00      	cmp	r3, #0
 800886e:	d057      	beq.n	8008920 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
    }
    return;
 8008878:	e052      	b.n	8008920 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	d02b      	beq.n	80088dc <HAL_UART_IRQHandler+0x528>
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d026      	beq.n	80088dc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 f814 	bl	80098bc <UART_EndTransmit_IT>
    return;
 8008894:	e045      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
 8008896:	bf00      	nop
 8008898:	40020010 	.word	0x40020010
 800889c:	40020028 	.word	0x40020028
 80088a0:	40020040 	.word	0x40020040
 80088a4:	40020058 	.word	0x40020058
 80088a8:	40020070 	.word	0x40020070
 80088ac:	40020088 	.word	0x40020088
 80088b0:	400200a0 	.word	0x400200a0
 80088b4:	400200b8 	.word	0x400200b8
 80088b8:	40020410 	.word	0x40020410
 80088bc:	40020428 	.word	0x40020428
 80088c0:	40020440 	.word	0x40020440
 80088c4:	40020458 	.word	0x40020458
 80088c8:	40020470 	.word	0x40020470
 80088cc:	40020488 	.word	0x40020488
 80088d0:	400204a0 	.word	0x400204a0
 80088d4:	400204b8 	.word	0x400204b8
 80088d8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <HAL_UART_IRQHandler+0x544>
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f811 	bl	8009918 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088f6:	e014      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <HAL_UART_IRQHandler+0x56e>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	da0c      	bge.n	8008922 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fffb 	bl	8009904 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800890e:	e008      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
      return;
 8008910:	bf00      	nop
 8008912:	e006      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
    return;
 8008914:	bf00      	nop
 8008916:	e004      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
      return;
 8008918:	bf00      	nop
 800891a:	e002      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
      return;
 800891c:	bf00      	nop
 800891e:	e000      	b.n	8008922 <HAL_UART_IRQHandler+0x56e>
    return;
 8008920:	bf00      	nop
  }
}
 8008922:	3720      	adds	r7, #32
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008968:	b5b0      	push	{r4, r5, r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	4313      	orrs	r3, r2
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4bbf      	ldr	r3, [pc, #764]	; (8008c94 <UART_SetConfig+0x32c>)
 8008996:	4013      	ands	r3, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800899e:	430b      	orrs	r3, r1
 80089a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4ab5      	ldr	r2, [pc, #724]	; (8008c98 <UART_SetConfig+0x330>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d004      	beq.n	80089d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ce:	4313      	orrs	r3, r2
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	4bb0      	ldr	r3, [pc, #704]	; (8008c9c <UART_SetConfig+0x334>)
 80089da:	4013      	ands	r3, r2
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6812      	ldr	r2, [r2, #0]
 80089e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089e2:	430b      	orrs	r3, r1
 80089e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	f023 010f 	bic.w	r1, r3, #15
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4aa7      	ldr	r2, [pc, #668]	; (8008ca0 <UART_SetConfig+0x338>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d176      	bne.n	8008af4 <UART_SetConfig+0x18c>
 8008a06:	4ba7      	ldr	r3, [pc, #668]	; (8008ca4 <UART_SetConfig+0x33c>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a0e:	2b28      	cmp	r3, #40	; 0x28
 8008a10:	d86c      	bhi.n	8008aec <UART_SetConfig+0x184>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <UART_SetConfig+0xb0>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008abd 	.word	0x08008abd
 8008a1c:	08008aed 	.word	0x08008aed
 8008a20:	08008aed 	.word	0x08008aed
 8008a24:	08008aed 	.word	0x08008aed
 8008a28:	08008aed 	.word	0x08008aed
 8008a2c:	08008aed 	.word	0x08008aed
 8008a30:	08008aed 	.word	0x08008aed
 8008a34:	08008aed 	.word	0x08008aed
 8008a38:	08008ac5 	.word	0x08008ac5
 8008a3c:	08008aed 	.word	0x08008aed
 8008a40:	08008aed 	.word	0x08008aed
 8008a44:	08008aed 	.word	0x08008aed
 8008a48:	08008aed 	.word	0x08008aed
 8008a4c:	08008aed 	.word	0x08008aed
 8008a50:	08008aed 	.word	0x08008aed
 8008a54:	08008aed 	.word	0x08008aed
 8008a58:	08008acd 	.word	0x08008acd
 8008a5c:	08008aed 	.word	0x08008aed
 8008a60:	08008aed 	.word	0x08008aed
 8008a64:	08008aed 	.word	0x08008aed
 8008a68:	08008aed 	.word	0x08008aed
 8008a6c:	08008aed 	.word	0x08008aed
 8008a70:	08008aed 	.word	0x08008aed
 8008a74:	08008aed 	.word	0x08008aed
 8008a78:	08008ad5 	.word	0x08008ad5
 8008a7c:	08008aed 	.word	0x08008aed
 8008a80:	08008aed 	.word	0x08008aed
 8008a84:	08008aed 	.word	0x08008aed
 8008a88:	08008aed 	.word	0x08008aed
 8008a8c:	08008aed 	.word	0x08008aed
 8008a90:	08008aed 	.word	0x08008aed
 8008a94:	08008aed 	.word	0x08008aed
 8008a98:	08008add 	.word	0x08008add
 8008a9c:	08008aed 	.word	0x08008aed
 8008aa0:	08008aed 	.word	0x08008aed
 8008aa4:	08008aed 	.word	0x08008aed
 8008aa8:	08008aed 	.word	0x08008aed
 8008aac:	08008aed 	.word	0x08008aed
 8008ab0:	08008aed 	.word	0x08008aed
 8008ab4:	08008aed 	.word	0x08008aed
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac2:	e222      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e21e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008acc:	2308      	movs	r3, #8
 8008ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad2:	e21a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ada:	e216      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008adc:	2320      	movs	r3, #32
 8008ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae2:	e212      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aea:	e20e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af2:	e20a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a6b      	ldr	r2, [pc, #428]	; (8008ca8 <UART_SetConfig+0x340>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d130      	bne.n	8008b60 <UART_SetConfig+0x1f8>
 8008afe:	4b69      	ldr	r3, [pc, #420]	; (8008ca4 <UART_SetConfig+0x33c>)
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b05      	cmp	r3, #5
 8008b08:	d826      	bhi.n	8008b58 <UART_SetConfig+0x1f0>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x1a8>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b29 	.word	0x08008b29
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b49 	.word	0x08008b49
 8008b24:	08008b51 	.word	0x08008b51
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e1ec      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b30:	2304      	movs	r3, #4
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e1e8      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3e:	e1e4      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b40:	2310      	movs	r3, #16
 8008b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b46:	e1e0      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4e:	e1dc      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b56:	e1d8      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5e:	e1d4      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a51      	ldr	r2, [pc, #324]	; (8008cac <UART_SetConfig+0x344>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d130      	bne.n	8008bcc <UART_SetConfig+0x264>
 8008b6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ca4 <UART_SetConfig+0x33c>)
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	2b05      	cmp	r3, #5
 8008b74:	d826      	bhi.n	8008bc4 <UART_SetConfig+0x25c>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <UART_SetConfig+0x214>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008b95 	.word	0x08008b95
 8008b80:	08008b9d 	.word	0x08008b9d
 8008b84:	08008ba5 	.word	0x08008ba5
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	2300      	movs	r3, #0
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e1b6      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e1b2      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e1ae      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e1aa      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008bb4:	2320      	movs	r3, #32
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bba:	e1a6      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008bbc:	2340      	movs	r3, #64	; 0x40
 8008bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc2:	e1a2      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bca:	e19e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a37      	ldr	r2, [pc, #220]	; (8008cb0 <UART_SetConfig+0x348>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d130      	bne.n	8008c38 <UART_SetConfig+0x2d0>
 8008bd6:	4b33      	ldr	r3, [pc, #204]	; (8008ca4 <UART_SetConfig+0x33c>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d826      	bhi.n	8008c30 <UART_SetConfig+0x2c8>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <UART_SetConfig+0x280>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c01 	.word	0x08008c01
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	08008c11 	.word	0x08008c11
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c21 	.word	0x08008c21
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	2300      	movs	r3, #0
 8008c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c06:	e180      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0e:	e17c      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c10:	2308      	movs	r3, #8
 8008c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c16:	e178      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c18:	2310      	movs	r3, #16
 8008c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1e:	e174      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c20:	2320      	movs	r3, #32
 8008c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c26:	e170      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c28:	2340      	movs	r3, #64	; 0x40
 8008c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2e:	e16c      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c30:	2380      	movs	r3, #128	; 0x80
 8008c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c36:	e168      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a1d      	ldr	r2, [pc, #116]	; (8008cb4 <UART_SetConfig+0x34c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d142      	bne.n	8008cc8 <UART_SetConfig+0x360>
 8008c42:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <UART_SetConfig+0x33c>)
 8008c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d838      	bhi.n	8008cc0 <UART_SetConfig+0x358>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <UART_SetConfig+0x2ec>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c6d 	.word	0x08008c6d
 8008c58:	08008c75 	.word	0x08008c75
 8008c5c:	08008c7d 	.word	0x08008c7d
 8008c60:	08008c85 	.word	0x08008c85
 8008c64:	08008c8d 	.word	0x08008c8d
 8008c68:	08008cb9 	.word	0x08008cb9
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c72:	e14a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c74:	2304      	movs	r3, #4
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7a:	e146      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e142      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c84:	2310      	movs	r3, #16
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e13e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c92:	e13a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008c94:	cfff69f3 	.word	0xcfff69f3
 8008c98:	58000c00 	.word	0x58000c00
 8008c9c:	11fff4ff 	.word	0x11fff4ff
 8008ca0:	40011000 	.word	0x40011000
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	40004400 	.word	0x40004400
 8008cac:	40004800 	.word	0x40004800
 8008cb0:	40004c00 	.word	0x40004c00
 8008cb4:	40005000 	.word	0x40005000
 8008cb8:	2340      	movs	r3, #64	; 0x40
 8008cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cbe:	e124      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008cc0:	2380      	movs	r3, #128	; 0x80
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc6:	e120      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4acc      	ldr	r2, [pc, #816]	; (8009000 <UART_SetConfig+0x698>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d176      	bne.n	8008dc0 <UART_SetConfig+0x458>
 8008cd2:	4bcc      	ldr	r3, [pc, #816]	; (8009004 <UART_SetConfig+0x69c>)
 8008cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cda:	2b28      	cmp	r3, #40	; 0x28
 8008cdc:	d86c      	bhi.n	8008db8 <UART_SetConfig+0x450>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <UART_SetConfig+0x37c>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d89 	.word	0x08008d89
 8008ce8:	08008db9 	.word	0x08008db9
 8008cec:	08008db9 	.word	0x08008db9
 8008cf0:	08008db9 	.word	0x08008db9
 8008cf4:	08008db9 	.word	0x08008db9
 8008cf8:	08008db9 	.word	0x08008db9
 8008cfc:	08008db9 	.word	0x08008db9
 8008d00:	08008db9 	.word	0x08008db9
 8008d04:	08008d91 	.word	0x08008d91
 8008d08:	08008db9 	.word	0x08008db9
 8008d0c:	08008db9 	.word	0x08008db9
 8008d10:	08008db9 	.word	0x08008db9
 8008d14:	08008db9 	.word	0x08008db9
 8008d18:	08008db9 	.word	0x08008db9
 8008d1c:	08008db9 	.word	0x08008db9
 8008d20:	08008db9 	.word	0x08008db9
 8008d24:	08008d99 	.word	0x08008d99
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008db9 	.word	0x08008db9
 8008d34:	08008db9 	.word	0x08008db9
 8008d38:	08008db9 	.word	0x08008db9
 8008d3c:	08008db9 	.word	0x08008db9
 8008d40:	08008db9 	.word	0x08008db9
 8008d44:	08008da1 	.word	0x08008da1
 8008d48:	08008db9 	.word	0x08008db9
 8008d4c:	08008db9 	.word	0x08008db9
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008da9 	.word	0x08008da9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008db9 	.word	0x08008db9
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008db9 	.word	0x08008db9
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8e:	e0bc      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008d90:	2304      	movs	r3, #4
 8008d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d96:	e0b8      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008d98:	2308      	movs	r3, #8
 8008d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d9e:	e0b4      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008da0:	2310      	movs	r3, #16
 8008da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008da6:	e0b0      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008da8:	2320      	movs	r3, #32
 8008daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dae:	e0ac      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008db0:	2340      	movs	r3, #64	; 0x40
 8008db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008db6:	e0a8      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dbe:	e0a4      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a90      	ldr	r2, [pc, #576]	; (8009008 <UART_SetConfig+0x6a0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d130      	bne.n	8008e2c <UART_SetConfig+0x4c4>
 8008dca:	4b8e      	ldr	r3, [pc, #568]	; (8009004 <UART_SetConfig+0x69c>)
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	d826      	bhi.n	8008e24 <UART_SetConfig+0x4bc>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <UART_SetConfig+0x474>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008df5 	.word	0x08008df5
 8008de0:	08008dfd 	.word	0x08008dfd
 8008de4:	08008e05 	.word	0x08008e05
 8008de8:	08008e0d 	.word	0x08008e0d
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dfa:	e086      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e02:	e082      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e0a:	e07e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e12:	e07a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e14:	2320      	movs	r3, #32
 8008e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1a:	e076      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e22:	e072      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e24:	2380      	movs	r3, #128	; 0x80
 8008e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2a:	e06e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a76      	ldr	r2, [pc, #472]	; (800900c <UART_SetConfig+0x6a4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d130      	bne.n	8008e98 <UART_SetConfig+0x530>
 8008e36:	4b73      	ldr	r3, [pc, #460]	; (8009004 <UART_SetConfig+0x69c>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d826      	bhi.n	8008e90 <UART_SetConfig+0x528>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0x4e0>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e66:	e050      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6e:	e04c      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e76:	e048      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e7e:	e044      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e80:	2320      	movs	r3, #32
 8008e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e86:	e040      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e88:	2340      	movs	r3, #64	; 0x40
 8008e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8e:	e03c      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e90:	2380      	movs	r3, #128	; 0x80
 8008e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e96:	e038      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a5c      	ldr	r2, [pc, #368]	; (8009010 <UART_SetConfig+0x6a8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d130      	bne.n	8008f04 <UART_SetConfig+0x59c>
 8008ea2:	4b58      	ldr	r3, [pc, #352]	; (8009004 <UART_SetConfig+0x69c>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d826      	bhi.n	8008efc <UART_SetConfig+0x594>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <UART_SetConfig+0x54c>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ecd 	.word	0x08008ecd
 8008eb8:	08008ed5 	.word	0x08008ed5
 8008ebc:	08008edd 	.word	0x08008edd
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008eed 	.word	0x08008eed
 8008ec8:	08008ef5 	.word	0x08008ef5
 8008ecc:	2302      	movs	r3, #2
 8008ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed2:	e01a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ed4:	2304      	movs	r3, #4
 8008ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eda:	e016      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008edc:	2308      	movs	r3, #8
 8008ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee2:	e012      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eea:	e00e      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008eec:	2320      	movs	r3, #32
 8008eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef2:	e00a      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008ef4:	2340      	movs	r3, #64	; 0x40
 8008ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efa:	e006      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008efc:	2380      	movs	r3, #128	; 0x80
 8008efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f02:	e002      	b.n	8008f0a <UART_SetConfig+0x5a2>
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a40      	ldr	r2, [pc, #256]	; (8009010 <UART_SetConfig+0x6a8>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	f040 80ef 	bne.w	80090f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f1a:	2b20      	cmp	r3, #32
 8008f1c:	dc46      	bgt.n	8008fac <UART_SetConfig+0x644>
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	f2c0 8081 	blt.w	8009026 <UART_SetConfig+0x6be>
 8008f24:	3b02      	subs	r3, #2
 8008f26:	2b1e      	cmp	r3, #30
 8008f28:	d87d      	bhi.n	8009026 <UART_SetConfig+0x6be>
 8008f2a:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <UART_SetConfig+0x5c8>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008fb3 	.word	0x08008fb3
 8008f34:	08009027 	.word	0x08009027
 8008f38:	08008fbb 	.word	0x08008fbb
 8008f3c:	08009027 	.word	0x08009027
 8008f40:	08009027 	.word	0x08009027
 8008f44:	08009027 	.word	0x08009027
 8008f48:	08008fcb 	.word	0x08008fcb
 8008f4c:	08009027 	.word	0x08009027
 8008f50:	08009027 	.word	0x08009027
 8008f54:	08009027 	.word	0x08009027
 8008f58:	08009027 	.word	0x08009027
 8008f5c:	08009027 	.word	0x08009027
 8008f60:	08009027 	.word	0x08009027
 8008f64:	08009027 	.word	0x08009027
 8008f68:	08008fdb 	.word	0x08008fdb
 8008f6c:	08009027 	.word	0x08009027
 8008f70:	08009027 	.word	0x08009027
 8008f74:	08009027 	.word	0x08009027
 8008f78:	08009027 	.word	0x08009027
 8008f7c:	08009027 	.word	0x08009027
 8008f80:	08009027 	.word	0x08009027
 8008f84:	08009027 	.word	0x08009027
 8008f88:	08009027 	.word	0x08009027
 8008f8c:	08009027 	.word	0x08009027
 8008f90:	08009027 	.word	0x08009027
 8008f94:	08009027 	.word	0x08009027
 8008f98:	08009027 	.word	0x08009027
 8008f9c:	08009027 	.word	0x08009027
 8008fa0:	08009027 	.word	0x08009027
 8008fa4:	08009027 	.word	0x08009027
 8008fa8:	08009019 	.word	0x08009019
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	d036      	beq.n	800901e <UART_SetConfig+0x6b6>
 8008fb0:	e039      	b.n	8009026 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fb2:	f7fe f937 	bl	8007224 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fb8:	e03b      	b.n	8009032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fba:	f107 0314 	add.w	r3, r7, #20
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe f946 	bl	8007250 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fc8:	e033      	b.n	8009032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fca:	f107 0308 	add.w	r3, r7, #8
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fa92 	bl	80074f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fd8:	e02b      	b.n	8009032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fda:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <UART_SetConfig+0x69c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d009      	beq.n	8008ffa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fe6:	4b07      	ldr	r3, [pc, #28]	; (8009004 <UART_SetConfig+0x69c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	08db      	lsrs	r3, r3, #3
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	4a08      	ldr	r2, [pc, #32]	; (8009014 <UART_SetConfig+0x6ac>)
 8008ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ff8:	e01b      	b.n	8009032 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <UART_SetConfig+0x6ac>)
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ffe:	e018      	b.n	8009032 <UART_SetConfig+0x6ca>
 8009000:	40011400 	.word	0x40011400
 8009004:	58024400 	.word	0x58024400
 8009008:	40007800 	.word	0x40007800
 800900c:	40007c00 	.word	0x40007c00
 8009010:	58000c00 	.word	0x58000c00
 8009014:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009018:	4bc4      	ldr	r3, [pc, #784]	; (800932c <UART_SetConfig+0x9c4>)
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800901c:	e009      	b.n	8009032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009024:	e005      	b.n	8009032 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009030:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 81da 	beq.w	80093ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	4abc      	ldr	r2, [pc, #752]	; (8009330 <UART_SetConfig+0x9c8>)
 8009040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009044:	461a      	mov	r2, r3
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	fbb3 f3f2 	udiv	r3, r3, r2
 800904c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	4613      	mov	r3, r2
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	4413      	add	r3, r2
 8009058:	6a3a      	ldr	r2, [r7, #32]
 800905a:	429a      	cmp	r2, r3
 800905c:	d305      	bcc.n	800906a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009064:	6a3a      	ldr	r2, [r7, #32]
 8009066:	429a      	cmp	r2, r3
 8009068:	d903      	bls.n	8009072 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009070:	e1bd      	b.n	80093ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	4618      	mov	r0, r3
 8009076:	f04f 0100 	mov.w	r1, #0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	4aac      	ldr	r2, [pc, #688]	; (8009330 <UART_SetConfig+0x9c8>)
 8009080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009084:	b29a      	uxth	r2, r3
 8009086:	f04f 0300 	mov.w	r3, #0
 800908a:	f7f7 f925 	bl	80002d8 <__aeabi_uldivmod>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4610      	mov	r0, r2
 8009094:	4619      	mov	r1, r3
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	f04f 0300 	mov.w	r3, #0
 800909e:	020b      	lsls	r3, r1, #8
 80090a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090a4:	0202      	lsls	r2, r0, #8
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	6849      	ldr	r1, [r1, #4]
 80090aa:	0849      	lsrs	r1, r1, #1
 80090ac:	4608      	mov	r0, r1
 80090ae:	f04f 0100 	mov.w	r1, #0
 80090b2:	1814      	adds	r4, r2, r0
 80090b4:	eb43 0501 	adc.w	r5, r3, r1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	461a      	mov	r2, r3
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	4620      	mov	r0, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 f907 	bl	80002d8 <__aeabi_uldivmod>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4613      	mov	r3, r2
 80090d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090d8:	d308      	bcc.n	80090ec <UART_SetConfig+0x784>
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e0:	d204      	bcs.n	80090ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	e180      	b.n	80093ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090f2:	e17c      	b.n	80093ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fc:	f040 80bf 	bne.w	800927e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009100:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009104:	2b20      	cmp	r3, #32
 8009106:	dc49      	bgt.n	800919c <UART_SetConfig+0x834>
 8009108:	2b00      	cmp	r3, #0
 800910a:	db7c      	blt.n	8009206 <UART_SetConfig+0x89e>
 800910c:	2b20      	cmp	r3, #32
 800910e:	d87a      	bhi.n	8009206 <UART_SetConfig+0x89e>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <UART_SetConfig+0x7b0>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	080091a3 	.word	0x080091a3
 800911c:	080091ab 	.word	0x080091ab
 8009120:	08009207 	.word	0x08009207
 8009124:	08009207 	.word	0x08009207
 8009128:	080091b3 	.word	0x080091b3
 800912c:	08009207 	.word	0x08009207
 8009130:	08009207 	.word	0x08009207
 8009134:	08009207 	.word	0x08009207
 8009138:	080091c3 	.word	0x080091c3
 800913c:	08009207 	.word	0x08009207
 8009140:	08009207 	.word	0x08009207
 8009144:	08009207 	.word	0x08009207
 8009148:	08009207 	.word	0x08009207
 800914c:	08009207 	.word	0x08009207
 8009150:	08009207 	.word	0x08009207
 8009154:	08009207 	.word	0x08009207
 8009158:	080091d3 	.word	0x080091d3
 800915c:	08009207 	.word	0x08009207
 8009160:	08009207 	.word	0x08009207
 8009164:	08009207 	.word	0x08009207
 8009168:	08009207 	.word	0x08009207
 800916c:	08009207 	.word	0x08009207
 8009170:	08009207 	.word	0x08009207
 8009174:	08009207 	.word	0x08009207
 8009178:	08009207 	.word	0x08009207
 800917c:	08009207 	.word	0x08009207
 8009180:	08009207 	.word	0x08009207
 8009184:	08009207 	.word	0x08009207
 8009188:	08009207 	.word	0x08009207
 800918c:	08009207 	.word	0x08009207
 8009190:	08009207 	.word	0x08009207
 8009194:	08009207 	.word	0x08009207
 8009198:	080091f9 	.word	0x080091f9
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d02e      	beq.n	80091fe <UART_SetConfig+0x896>
 80091a0:	e031      	b.n	8009206 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a2:	f7fd f8d3 	bl	800634c <HAL_RCC_GetPCLK1Freq>
 80091a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80091a8:	e033      	b.n	8009212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091aa:	f7fd f8e5 	bl	8006378 <HAL_RCC_GetPCLK2Freq>
 80091ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80091b0:	e02f      	b.n	8009212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f84a 	bl	8007250 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c0:	e027      	b.n	8009212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe f996 	bl	80074f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091d0:	e01f      	b.n	8009212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d2:	4b58      	ldr	r3, [pc, #352]	; (8009334 <UART_SetConfig+0x9cc>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091de:	4b55      	ldr	r3, [pc, #340]	; (8009334 <UART_SetConfig+0x9cc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	08db      	lsrs	r3, r3, #3
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	4a53      	ldr	r2, [pc, #332]	; (8009338 <UART_SetConfig+0x9d0>)
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091f0:	e00f      	b.n	8009212 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80091f2:	4b51      	ldr	r3, [pc, #324]	; (8009338 <UART_SetConfig+0x9d0>)
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091f6:	e00c      	b.n	8009212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091f8:	4b4c      	ldr	r3, [pc, #304]	; (800932c <UART_SetConfig+0x9c4>)
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091fc:	e009      	b.n	8009212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009204:	e005      	b.n	8009212 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 80ea 	beq.w	80093ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	4a44      	ldr	r2, [pc, #272]	; (8009330 <UART_SetConfig+0x9c8>)
 8009220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009224:	461a      	mov	r2, r3
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	fbb3 f3f2 	udiv	r3, r3, r2
 800922c:	005a      	lsls	r2, r3, #1
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	441a      	add	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	fbb2 f3f3 	udiv	r3, r2, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	2b0f      	cmp	r3, #15
 8009246:	d916      	bls.n	8009276 <UART_SetConfig+0x90e>
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800924e:	d212      	bcs.n	8009276 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	b29b      	uxth	r3, r3
 8009254:	f023 030f 	bic.w	r3, r3, #15
 8009258:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	085b      	lsrs	r3, r3, #1
 800925e:	b29b      	uxth	r3, r3
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	b29a      	uxth	r2, r3
 8009266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009268:	4313      	orrs	r3, r2
 800926a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009272:	60da      	str	r2, [r3, #12]
 8009274:	e0bb      	b.n	80093ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800927c:	e0b7      	b.n	80093ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800927e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009282:	2b20      	cmp	r3, #32
 8009284:	dc4a      	bgt.n	800931c <UART_SetConfig+0x9b4>
 8009286:	2b00      	cmp	r3, #0
 8009288:	f2c0 8086 	blt.w	8009398 <UART_SetConfig+0xa30>
 800928c:	2b20      	cmp	r3, #32
 800928e:	f200 8083 	bhi.w	8009398 <UART_SetConfig+0xa30>
 8009292:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <UART_SetConfig+0x930>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	08009323 	.word	0x08009323
 800929c:	0800933d 	.word	0x0800933d
 80092a0:	08009399 	.word	0x08009399
 80092a4:	08009399 	.word	0x08009399
 80092a8:	08009345 	.word	0x08009345
 80092ac:	08009399 	.word	0x08009399
 80092b0:	08009399 	.word	0x08009399
 80092b4:	08009399 	.word	0x08009399
 80092b8:	08009355 	.word	0x08009355
 80092bc:	08009399 	.word	0x08009399
 80092c0:	08009399 	.word	0x08009399
 80092c4:	08009399 	.word	0x08009399
 80092c8:	08009399 	.word	0x08009399
 80092cc:	08009399 	.word	0x08009399
 80092d0:	08009399 	.word	0x08009399
 80092d4:	08009399 	.word	0x08009399
 80092d8:	08009365 	.word	0x08009365
 80092dc:	08009399 	.word	0x08009399
 80092e0:	08009399 	.word	0x08009399
 80092e4:	08009399 	.word	0x08009399
 80092e8:	08009399 	.word	0x08009399
 80092ec:	08009399 	.word	0x08009399
 80092f0:	08009399 	.word	0x08009399
 80092f4:	08009399 	.word	0x08009399
 80092f8:	08009399 	.word	0x08009399
 80092fc:	08009399 	.word	0x08009399
 8009300:	08009399 	.word	0x08009399
 8009304:	08009399 	.word	0x08009399
 8009308:	08009399 	.word	0x08009399
 800930c:	08009399 	.word	0x08009399
 8009310:	08009399 	.word	0x08009399
 8009314:	08009399 	.word	0x08009399
 8009318:	0800938b 	.word	0x0800938b
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	d037      	beq.n	8009390 <UART_SetConfig+0xa28>
 8009320:	e03a      	b.n	8009398 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009322:	f7fd f813 	bl	800634c <HAL_RCC_GetPCLK1Freq>
 8009326:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009328:	e03c      	b.n	80093a4 <UART_SetConfig+0xa3c>
 800932a:	bf00      	nop
 800932c:	003d0900 	.word	0x003d0900
 8009330:	08009bcc 	.word	0x08009bcc
 8009334:	58024400 	.word	0x58024400
 8009338:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800933c:	f7fd f81c 	bl	8006378 <HAL_RCC_GetPCLK2Freq>
 8009340:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009342:	e02f      	b.n	80093a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009344:	f107 0314 	add.w	r3, r7, #20
 8009348:	4618      	mov	r0, r3
 800934a:	f7fd ff81 	bl	8007250 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009352:	e027      	b.n	80093a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe f8cd 	bl	80074f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009362:	e01f      	b.n	80093a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009364:	4b2c      	ldr	r3, [pc, #176]	; (8009418 <UART_SetConfig+0xab0>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <UART_SetConfig+0xab0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	08db      	lsrs	r3, r3, #3
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	4a28      	ldr	r2, [pc, #160]	; (800941c <UART_SetConfig+0xab4>)
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009382:	e00f      	b.n	80093a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009384:	4b25      	ldr	r3, [pc, #148]	; (800941c <UART_SetConfig+0xab4>)
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009388:	e00c      	b.n	80093a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800938a:	4b25      	ldr	r3, [pc, #148]	; (8009420 <UART_SetConfig+0xab8>)
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800938e:	e009      	b.n	80093a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009396:	e005      	b.n	80093a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093a2:	bf00      	nop
    }

    if (pclk != 0U)
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d021      	beq.n	80093ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	4a1d      	ldr	r2, [pc, #116]	; (8009424 <UART_SetConfig+0xabc>)
 80093b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	085b      	lsrs	r3, r3, #1
 80093c2:	441a      	add	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	2b0f      	cmp	r3, #15
 80093d4:	d908      	bls.n	80093e8 <UART_SetConfig+0xa80>
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093dc:	d204      	bcs.n	80093e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e4:	60da      	str	r2, [r3, #12]
 80093e6:	e002      	b.n	80093ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800940a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800940e:	4618      	mov	r0, r3
 8009410:	3738      	adds	r7, #56	; 0x38
 8009412:	46bd      	mov	sp, r7
 8009414:	bdb0      	pop	{r4, r5, r7, pc}
 8009416:	bf00      	nop
 8009418:	58024400 	.word	0x58024400
 800941c:	03d09000 	.word	0x03d09000
 8009420:	003d0900 	.word	0x003d0900
 8009424:	08009bcc 	.word	0x08009bcc

08009428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01a      	beq.n	800953e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009526:	d10a      	bne.n	800953e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	605a      	str	r2, [r3, #4]
  }
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800957c:	f7f8 fc12 	bl	8001da4 <HAL_GetTick>
 8009580:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0308 	and.w	r3, r3, #8
 800958c:	2b08      	cmp	r3, #8
 800958e:	d10e      	bne.n	80095ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f82f 	bl	8009602 <UART_WaitOnFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e025      	b.n	80095fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d10e      	bne.n	80095da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f819 	bl	8009602 <UART_WaitOnFlagUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e00f      	b.n	80095fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	4613      	mov	r3, r2
 8009610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009612:	e062      	b.n	80096da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961a:	d05e      	beq.n	80096da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800961c:	f7f8 fbc2 	bl	8001da4 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	429a      	cmp	r2, r3
 800962a:	d302      	bcc.n	8009632 <UART_WaitOnFlagUntilTimeout+0x30>
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d11d      	bne.n	800966e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009640:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2220      	movs	r2, #32
 8009656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e045      	b.n	80096fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d02e      	beq.n	80096da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800968a:	d126      	bne.n	80096da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009694:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e00f      	b.n	80096fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4013      	ands	r3, r2
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	bf0c      	ite	eq
 80096ea:	2301      	moveq	r3, #1
 80096ec:	2300      	movne	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d08d      	beq.n	8009614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009718:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009728:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
	...

08009740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009756:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6899      	ldr	r1, [r3, #8]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <UART_EndRxTransfer+0x60>)
 8009764:	400b      	ands	r3, r1
 8009766:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d107      	bne.n	8009780 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0210 	bic.w	r2, r2, #16
 800977e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	effffffe 	.word	0xeffffffe

080097a4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ba:	d014      	beq.n	80097e6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097d2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097e4:	e002      	b.n	80097ec <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f7ff f89e 	bl	8008928 <HAL_UART_TxCpltCallback>
}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff f89a 	bl	800893c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009824:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009838:	2b80      	cmp	r3, #128	; 0x80
 800983a:	d109      	bne.n	8009850 <UART_DMAError+0x40>
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b21      	cmp	r3, #33	; 0x21
 8009840:	d106      	bne.n	8009850 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2200      	movs	r2, #0
 8009846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800984a:	6978      	ldr	r0, [r7, #20]
 800984c:	f7ff ff59 	bl	8009702 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b40      	cmp	r3, #64	; 0x40
 800985c:	d109      	bne.n	8009872 <UART_DMAError+0x62>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b22      	cmp	r3, #34	; 0x22
 8009862:	d106      	bne.n	8009872 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2200      	movs	r2, #0
 8009868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	f7ff ff67 	bl	8009740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009878:	f043 0210 	orr.w	r2, r3, #16
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009882:	6978      	ldr	r0, [r7, #20]
 8009884:	f7f7 fc14 	bl	80010b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009888:	bf00      	nop
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7f7 fbfe 	bl	80010b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff f820 	bl	8008928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_UARTEx_EnableFifoMode+0x16>
 800993e:	2302      	movs	r3, #2
 8009940:	e02b      	b.n	800999a <HAL_UARTEx_EnableFifoMode+0x6e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2224      	movs	r2, #36	; 0x24
 800994e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0201 	bic.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009978:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f88a 	bl	8009a9c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e02d      	b.n	8009a16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2224      	movs	r2, #36	; 0x24
 80099c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0201 	bic.w	r2, r2, #1
 80099e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f850 	bl	8009a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a32:	2302      	movs	r3, #2
 8009a34:	e02d      	b.n	8009a92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2224      	movs	r2, #36	; 0x24
 8009a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0201 	bic.w	r2, r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f812 	bl	8009a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d108      	bne.n	8009abe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009abc:	e031      	b.n	8009b22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009abe:	2310      	movs	r3, #16
 8009ac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ac2:	2310      	movs	r3, #16
 8009ac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	0e5b      	lsrs	r3, r3, #25
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	0f5b      	lsrs	r3, r3, #29
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	7b3a      	ldrb	r2, [r7, #12]
 8009aea:	4911      	ldr	r1, [pc, #68]	; (8009b30 <UARTEx_SetNbDataToProcess+0x94>)
 8009aec:	5c8a      	ldrb	r2, [r1, r2]
 8009aee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009af2:	7b3a      	ldrb	r2, [r7, #12]
 8009af4:	490f      	ldr	r1, [pc, #60]	; (8009b34 <UARTEx_SetNbDataToProcess+0x98>)
 8009af6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	7b7a      	ldrb	r2, [r7, #13]
 8009b08:	4909      	ldr	r1, [pc, #36]	; (8009b30 <UARTEx_SetNbDataToProcess+0x94>)
 8009b0a:	5c8a      	ldrb	r2, [r1, r2]
 8009b0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b10:	7b7a      	ldrb	r2, [r7, #13]
 8009b12:	4908      	ldr	r1, [pc, #32]	; (8009b34 <UARTEx_SetNbDataToProcess+0x98>)
 8009b14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b22:	bf00      	nop
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	08009be4 	.word	0x08009be4
 8009b34:	08009bec 	.word	0x08009bec

08009b38 <__libc_init_array>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	4d0d      	ldr	r5, [pc, #52]	; (8009b70 <__libc_init_array+0x38>)
 8009b3c:	4c0d      	ldr	r4, [pc, #52]	; (8009b74 <__libc_init_array+0x3c>)
 8009b3e:	1b64      	subs	r4, r4, r5
 8009b40:	10a4      	asrs	r4, r4, #2
 8009b42:	2600      	movs	r6, #0
 8009b44:	42a6      	cmp	r6, r4
 8009b46:	d109      	bne.n	8009b5c <__libc_init_array+0x24>
 8009b48:	4d0b      	ldr	r5, [pc, #44]	; (8009b78 <__libc_init_array+0x40>)
 8009b4a:	4c0c      	ldr	r4, [pc, #48]	; (8009b7c <__libc_init_array+0x44>)
 8009b4c:	f000 f820 	bl	8009b90 <_init>
 8009b50:	1b64      	subs	r4, r4, r5
 8009b52:	10a4      	asrs	r4, r4, #2
 8009b54:	2600      	movs	r6, #0
 8009b56:	42a6      	cmp	r6, r4
 8009b58:	d105      	bne.n	8009b66 <__libc_init_array+0x2e>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b60:	4798      	blx	r3
 8009b62:	3601      	adds	r6, #1
 8009b64:	e7ee      	b.n	8009b44 <__libc_init_array+0xc>
 8009b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6a:	4798      	blx	r3
 8009b6c:	3601      	adds	r6, #1
 8009b6e:	e7f2      	b.n	8009b56 <__libc_init_array+0x1e>
 8009b70:	08009bfc 	.word	0x08009bfc
 8009b74:	08009bfc 	.word	0x08009bfc
 8009b78:	08009bfc 	.word	0x08009bfc
 8009b7c:	08009c00 	.word	0x08009c00

08009b80 <memset>:
 8009b80:	4402      	add	r2, r0
 8009b82:	4603      	mov	r3, r0
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d100      	bne.n	8009b8a <memset+0xa>
 8009b88:	4770      	bx	lr
 8009b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8e:	e7f9      	b.n	8009b84 <memset+0x4>

08009b90 <_init>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr

08009b9c <_fini>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr
