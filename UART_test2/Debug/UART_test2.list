
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d080  24000040  08009a44  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  2400d0c0  08009a44  0002d0c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001db9c  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ff7  00000000  00000000  0003dbf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc8  00000000  00000000  00040bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf0  00000000  00000000  000419b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374f9  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001305e  00000000  00000000  00079ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f78b  00000000  00000000  0008cbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec38a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e4  00000000  00000000  001ec3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080099a8 	.word	0x080099a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	080099a8 	.word	0x080099a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	817b      	strh	r3, [r7, #10]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a9b      	ldr	r2, [pc, #620]	; (8000870 <main+0x2a0>)
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	3301      	adds	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <main+0x2a4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b91      	ldr	r3, [pc, #580]	; (8000874 <main+0x2a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <main+0x2a4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a8b      	ldr	r2, [pc, #556]	; (8000874 <main+0x2a4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fa42 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 fa28 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fb9e 	bl	8000da4 <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 fafe 	bl	8001c68 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fb5a 	bl	8000d24 <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 fafe 	bl	8000c70 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 faa4 	bl	8000bc0 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f8ce 	bl	800181c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fac1 	bl	8001c08 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b7c      	ldr	r3, [pc, #496]	; (8000878 <main+0x2a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b7a      	ldr	r3, [pc, #488]	; (8000878 <main+0x2a8>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 faac 	bl	8001bf0 <HAL_GetTick>
 8000698:	6038      	str	r0, [r7, #0]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	e030      	b.n	8000702 <main+0x132>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4873      	ldr	r0, [pc, #460]	; (800087c <main+0x2ac>)
 80006ae:	f008 feb4 	bl	800941a <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e1e6      	b.n	8000a8a <main+0x4ba>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <main+0x2a0>)
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b6d      	ldr	r3, [pc, #436]	; (800087c <main+0x2ac>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4868      	ldr	r0, [pc, #416]	; (800087c <main+0x2ac>)
 80006dc:	f008 fe9d 	bl	800941a <UART_WaitOnFlagUntilTimeout>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x11a>
      {
        return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e1cf      	b.n	8000a8a <main+0x4ba>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ea:	4a61      	ldr	r2, [pc, #388]	; (8000870 <main+0x2a0>)
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b61      	ldr	r3, [pc, #388]	; (800087c <main+0x2ac>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	3301      	adds	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000708:	d3ca      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4859      	ldr	r0, [pc, #356]	; (800087c <main+0x2ac>)
 8000718:	f008 fe7f 	bl	800941a <UART_WaitOnFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x156>
  {
    return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e1b1      	b.n	8000a8a <main+0x4ba>
  }
  BSP_LED_Off(LED1);
 8000726:	2000      	movs	r0, #0
 8000728:	f001 f84e 	bl	80017c8 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 800072c:	e005      	b.n	800073a <main+0x16a>
  {
    BSP_LED_Toggle(LED2);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f874 	bl	800181c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fa67 	bl	8001c08 <HAL_Delay>
  while(UserButtonStatus == 0)
 800073a:	4b4f      	ldr	r3, [pc, #316]	; (8000878 <main+0x2a8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f5      	beq.n	800072e <main+0x15e>
  }
  UserButtonStatus = 0;
 8000742:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <main+0x2a8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <main+0x2b0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f83a 	bl	80017c8 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000754:	2001      	movs	r0, #1
 8000756:	f001 f837 	bl	80017c8 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075a:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <main+0x2b4>)
 800075c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000760:	2b01      	cmp	r3, #1
 8000762:	d101      	bne.n	8000768 <main+0x198>
 8000764:	2302      	movs	r3, #2
 8000766:	e190      	b.n	8000a8a <main+0x4ba>
 8000768:	4b46      	ldr	r3, [pc, #280]	; (8000884 <main+0x2b4>)
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <main+0x2b4>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000778:	d107      	bne.n	800078a <main+0x1ba>
    {
      SPI_1LINE_RX(&hspi1);
 800077a:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x2b4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <main+0x2b4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000788:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <main+0x2b4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <main+0x2b4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000798:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <main+0x2b4>)
 800079c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800079e:	4a3a      	ldr	r2, [pc, #232]	; (8000888 <main+0x2b8>)
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <main+0x2b4>)
 80007a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a6:	4a39      	ldr	r2, [pc, #228]	; (800088c <main+0x2bc>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <main+0x2c0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <main+0x2c0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0218 	orr.w	r2, r2, #24
 80007b8:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <main+0x2b4>)
 80007bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x2b4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3330      	adds	r3, #48	; 0x30
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <main+0x2c4>)
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	f001 fefb 	bl	80025c4 <HAL_DMA_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00d      	beq.n	80007f0 <main+0x220>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <main+0x2b4>)
 80007d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <main+0x2b4>)
 80007e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0x2b4>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007ec:	f000 fc01 	bl	8000ff2 <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <main+0x2b4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6859      	ldr	r1, [r3, #4]
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x2b4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <main+0x2c8>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <main+0x2b4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x2b4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800080e:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <main+0x2b4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <main+0x2b4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800081e:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <main+0x2b4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x2b4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x2b4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800083e:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000840:	e002      	b.n	8000848 <main+0x278>
  {
	    BSP_LED_Toggle(LED3);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 ffea 	bl	800181c <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <main+0x2cc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d1f8      	bne.n	8000842 <main+0x272>
  }
  wTransferState = TRANSFER_WAIT;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <main+0x2cc>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  int j = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  aTxBuffer[0] = aRxBuffer[0];
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <main+0x2c4>)
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <main+0x2a0>)
 8000860:	801a      	strh	r2, [r3, #0]
  for( int i = 1; i < txCount; ++i){
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	e03f      	b.n	80008e8 <main+0x318>
	  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	e02e      	b.n	80008cc <main+0x2fc>
 800086e:	bf00      	nop
 8000870:	24000080 	.word	0x24000080
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	24000060 	.word	0x24000060
 800087c:	2400c90c 	.word	0x2400c90c
 8000880:	2400005c 	.word	0x2400005c
 8000884:	2400cf24 	.word	0x2400cf24
 8000888:	08000f59 	.word	0x08000f59
 800088c:	08000f79 	.word	0x08000f79
 8000890:	2400cfac 	.word	0x2400cfac
 8000894:	24000880 	.word	0x24000880
 8000898:	ffff0000 	.word	0xffff0000
 800089c:	2400c880 	.word	0x2400c880
		  yi[j] = aRxBuffer[j] * 1.0;
 80008a0:	4a7c      	ldr	r2, [pc, #496]	; (8000a94 <main+0x4c4>)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b4:	4a78      	ldr	r2, [pc, #480]	; (8000a98 <main+0x4c8>)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	edc3 7a00 	vstr	s15, [r3]
	  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	3301      	adds	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	3301      	adds	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	dde6      	ble.n	80008a0 <main+0x2d0>
	  }
	  aTxBuffer[i] = aRxBuffer[j];
 80008d2:	4a70      	ldr	r2, [pc, #448]	; (8000a94 <main+0x4c4>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008da:	4a70      	ldr	r2, [pc, #448]	; (8000a9c <main+0x4cc>)
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 1; i < txCount; ++i){
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	3301      	adds	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	6a3a      	ldr	r2, [r7, #32]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbbb      	blt.n	8000868 <main+0x298>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f4:	4969      	ldr	r1, [pc, #420]	; (8000a9c <main+0x4cc>)
 80008f6:	486a      	ldr	r0, [pc, #424]	; (8000aa0 <main+0x4d0>)
 80008f8:	f007 fbf2 	bl	80080e0 <HAL_UART_Transmit_DMA>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <main+0x336>
  {
    Error_Handler();
 8000902:	f000 fb76 	bl	8000ff2 <Error_Handler>
  }
  HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000906:	2027      	movs	r0, #39	; 0x27
 8000908:	f001 fae5 	bl	8001ed6 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 800090c:	200c      	movs	r0, #12
 800090e:	f001 fae2 	bl	8001ed6 <HAL_NVIC_DisableIRQ>
//  CLEAR_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME ));
  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000912:	4b64      	ldr	r3, [pc, #400]	; (8000aa4 <main+0x4d4>)
 8000914:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000918:	609a      	str	r2, [r3, #8]
  BSP_LED_Off(LED3);
 800091a:	2002      	movs	r0, #2
 800091c:	f000 ff54 	bl	80017c8 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000920:	bf00      	nop
 8000922:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <main+0x4d8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d1fb      	bne.n	8000922 <main+0x352>
	  wTransferState = TRANSFER_WAIT;
 800092a:	4b5f      	ldr	r3, [pc, #380]	; (8000aa8 <main+0x4d8>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
	  j = rxOffset;
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[j];
 8000934:	4a57      	ldr	r2, [pc, #348]	; (8000a94 <main+0x4c4>)
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <main+0x4cc>)
 800093e:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i ){
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	e026      	b.n	8000994 <main+0x3c4>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e015      	b.n	8000978 <main+0x3a8>
			  yi[j] = aRxBuffer[j] * 1.0;
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <main+0x4c4>)
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800095c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000960:	4a4d      	ldr	r2, [pc, #308]	; (8000a98 <main+0x4c8>)
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	3301      	adds	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b03      	cmp	r3, #3
 800097c:	dde6      	ble.n	800094c <main+0x37c>
		  }
//		  yi[j] = aRxBuffer[j] * 1.0;
//		  aTxBuffer[i] = (uint16_t)yi[j];
		  aTxBuffer[i] = aRxBuffer[j];
 800097e:	4a45      	ldr	r2, [pc, #276]	; (8000a94 <main+0x4c4>)
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000986:	4a45      	ldr	r2, [pc, #276]	; (8000a9c <main+0x4cc>)
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i ){
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	3301      	adds	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbd4      	blt.n	8000946 <main+0x376>
	  }
	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 800099c:	bf00      	nop
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <main+0x4dc>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a6:	2b40      	cmp	r3, #64	; 0x40
 80009a8:	d1f9      	bne.n	800099e <main+0x3ce>
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80009aa:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <main+0x4d4>)
 80009ac:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009b0:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_SxCR_EN));
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <main+0x4e0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <main+0x4e0>)
 80009b8:	f043 0317 	orr.w	r3, r3, #23
 80009bc:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->ICR, UART_CLEAR_TCF);
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <main+0x4dc>)
 80009c0:	6a1b      	ldr	r3, [r3, #32]
 80009c2:	4a3a      	ldr	r2, [pc, #232]	; (8000aac <main+0x4dc>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6213      	str	r3, [r2, #32]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <main+0x4dc>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4a37      	ldr	r2, [pc, #220]	; (8000aac <main+0x4dc>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6093      	str	r3, [r2, #8]

	  while (wTransferState != TRANSFER_H_COMPLETE) {}
 80009d6:	bf00      	nop
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <main+0x4d8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d1fb      	bne.n	80009d8 <main+0x408>
	  wTransferState = TRANSFER_WAIT;
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <main+0x4d8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
	  j = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[0];
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <main+0x4c4>)
 80009ec:	881a      	ldrh	r2, [r3, #0]
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <main+0x4cc>)
 80009f0:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i){
 80009f2:	2301      	movs	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	e026      	b.n	8000a46 <main+0x476>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e015      	b.n	8000a2a <main+0x45a>
			  yi[j] = aRxBuffer[j] * 1.0;
 80009fe:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <main+0x4c4>)
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <main+0x4c8>)
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	3301      	adds	r3, #1
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	dde6      	ble.n	80009fe <main+0x42e>
		  }
		  aTxBuffer[i] = aRxBuffer[j];
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <main+0x4c4>)
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <main+0x4cc>)
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i){
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	3301      	adds	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dbd4      	blt.n	80009f8 <main+0x428>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000a4e:	bf00      	nop
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <main+0x4dc>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a58:	2b40      	cmp	r3, #64	; 0x40
 8000a5a:	d1f9      	bne.n	8000a50 <main+0x480>
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <main+0x4d4>)
 8000a5e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a62:	609a      	str	r2, [r3, #8]
	  /*##-2- Start the transmission process #####################################*/
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_SxCR_EN));
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <main+0x4e0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <main+0x4e0>)
 8000a6a:	f043 0317 	orr.w	r3, r3, #23
 8000a6e:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->ICR, UART_CLEAR_TCF);
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <main+0x4dc>)
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <main+0x4dc>)
 8000a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7a:	6213      	str	r3, [r2, #32]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <main+0x4dc>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <main+0x4dc>)
 8000a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a86:	6093      	str	r3, [r2, #8]
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000a88:	e74a      	b.n	8000920 <main+0x350>
  }
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3730      	adds	r7, #48	; 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	24000880 	.word	0x24000880
 8000a98:	24004880 	.word	0x24004880
 8000a9c:	24000080 	.word	0x24000080
 8000aa0:	2400c90c 	.word	0x2400c90c
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	2400c880 	.word	0x2400c880
 8000aac:	40004800 	.word	0x40004800
 8000ab0:	40020028 	.word	0x40020028

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	; 0x70
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	224c      	movs	r2, #76	; 0x4c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 ff68 	bl	8009998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f008 ff62 	bl	8009998 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f004 fba5 	bl	8005224 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <SystemClock_Config+0x100>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <SystemClock_Config+0x100>)
 8000ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <SystemClock_Config+0x100>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <SystemClock_Config+0x104>)
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <SystemClock_Config+0x104>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <SystemClock_Config+0x104>)
 8000b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0c:	bf00      	nop
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <SystemClock_Config+0x100>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1a:	d1f8      	bne.n	8000b0e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <SystemClock_Config+0x108>)
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b20:	f023 0303 	bic.w	r3, r3, #3
 8000b24:	4a25      	ldr	r2, [pc, #148]	; (8000bbc <SystemClock_Config+0x108>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b2c:	2321      	movs	r3, #33	; 0x21
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b36:	2301      	movs	r3, #1
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000b46:	2373      	movs	r3, #115	; 0x73
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b56:	230c      	movs	r3, #12
 8000b58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fb96 	bl	8005298 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b72:	f000 fa3e 	bl	8000ff2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	233f      	movs	r3, #63	; 0x3f
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b82:	2308      	movs	r3, #8
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 ff8b 	bl	8005ab8 <HAL_RCC_ClockConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000ba8:	f000 fa23 	bl	8000ff2 <Error_Handler>
  }


}
 8000bac:	bf00      	nop
 8000bae:	3770      	adds	r7, #112	; 0x70
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58024800 	.word	0x58024800
 8000bb8:	58000400 	.word	0x58000400
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <MX_SPI1_Init+0xac>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bd4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bd8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bdc:	220d      	movs	r2, #13
 8000bde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000be6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000c54:	f006 fe1e 	bl	8007894 <HAL_SPI_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c5e:	f000 f9c8 	bl	8000ff2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2400cf24 	.word	0x2400cf24
 8000c6c:	40013000 	.word	0x40013000

08000c70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c76:	4a29      	ldr	r2, [pc, #164]	; (8000d1c <MX_USART3_UART_Init+0xac>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <MX_USART3_UART_Init+0xb0>)
 8000c7e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c94:	220c      	movs	r2, #12
 8000c96:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbe:	4816      	ldr	r0, [pc, #88]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000cc0:	f007 f9bd 	bl	800803e <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000cca:	f000 f992 	bl	8000ff2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000cd2:	f008 fd72 	bl	80097ba <HAL_UARTEx_SetTxFifoThreshold>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000cdc:	f000 f989 	bl	8000ff2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000ce4:	f008 fda7 	bl	8009836 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000cee:	f000 f980 	bl	8000ff2 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_USART3_UART_Init+0xa8>)
 8000cf4:	f008 fd26 	bl	8009744 <HAL_UARTEx_EnableFifoMode>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000cfe:	f000 f978 	bl	8000ff2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2100      	movs	r1, #0
 8000d06:	2027      	movs	r0, #39	; 0x27
 8000d08:	f001 f8bd 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d0c:	2027      	movs	r0, #39	; 0x27
 8000d0e:	f001 f8d4 	bl	8001eba <HAL_NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2400c90c 	.word	0x2400c90c
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	00b6c7c0 	.word	0x00b6c7c0

08000d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_DMA_Init+0x7c>)
 8000d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <MX_DMA_Init+0x7c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_DMA_Init+0x7c>)
 8000d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_DMA_Init+0x7c>)
 8000d4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <MX_DMA_Init+0x7c>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_DMA_Init+0x7c>)
 8000d5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2100      	movs	r1, #0
 8000d6a:	200b      	movs	r0, #11
 8000d6c:	f001 f88b 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d70:	200b      	movs	r0, #11
 8000d72:	f001 f8a2 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200c      	movs	r0, #12
 8000d7c:	f001 f883 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d80:	200c      	movs	r0, #12
 8000d82:	f001 f89a 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2038      	movs	r0, #56	; 0x38
 8000d8c:	f001 f87b 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d90:	2038      	movs	r0, #56	; 0x38
 8000d92:	f001 f892 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	58024400 	.word	0x58024400

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a55      	ldr	r2, [pc, #340]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a4e      	ldr	r2, [pc, #312]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a46      	ldr	r2, [pc, #280]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e92:	4822      	ldr	r0, [pc, #136]	; (8000f1c <MX_GPIO_Init+0x178>)
 8000e94:	f004 f978 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4820      	ldr	r0, [pc, #128]	; (8000f20 <MX_GPIO_Init+0x17c>)
 8000e9e:	f004 f973 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <MX_GPIO_Init+0x180>)
 8000eb8:	f003 ffb6 	bl	8004e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ebc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4811      	ldr	r0, [pc, #68]	; (8000f1c <MX_GPIO_Init+0x178>)
 8000ed6:	f003 ffa7 	bl	8004e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0x17c>)
 8000ef2:	f003 ff99 	bl	8004e28 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 fbc6 	bl	8001688 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f000 fbc3 	bl	8001688 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f000 fbc0 	bl	8001688 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 fcb0 	bl	8001870 <BSP_PB_Init>
}
 8000f10:	bf00      	nop
 8000f12:	3730      	adds	r7, #48	; 0x30
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020400 	.word	0x58020400
 8000f20:	58021000 	.word	0x58021000
 8000f24:	58020800 	.word	0x58020800

08000f28 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f38:	d105      	bne.n	8000f46 <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f44:	6013      	str	r3, [r2, #0]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	24000060 	.word	0x24000060

08000f58 <tx_complete>:
//  BSP_LED_On(LED1);
//  wTransferState = TRANSFER_COMPLETE;
//}

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_COMPLETE;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <tx_complete+0x1c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2400c880 	.word	0x2400c880

08000f78 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_H_COMPLETE;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <tx_h_complete+0x1c>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2400c880 	.word	0x2400c880

08000f98 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_SPI_ErrorCallback+0x1c>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2400c880 	.word	0x2400c880

08000fb8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_UART_TxCpltCallback+0x1c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	2400005c 	.word	0x2400005c

08000fd8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f000 fbc7 	bl	8001774 <BSP_LED_On>
  Error_Handler();
 8000fe6:	f000 f804 	bl	8000ff2 <Error_Handler>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff6:	b672      	cpsid	i
}
 8000ff8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f000 fc0e 	bl	800181c <BSP_LED_Toggle>
	    HAL_Delay(100);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f000 fe01 	bl	8001c08 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8001006:	e7f8      	b.n	8000ffa <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_MspInit+0x30>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x30>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x30>)
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	58024400 	.word	0x58024400

0800103c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0bc      	sub	sp, #240	; 0xf0
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	22bc      	movs	r2, #188	; 0xbc
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f008 fc9b 	bl	8009998 <memset>
  if(hspi->Instance==SPI1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4aa0      	ldr	r2, [pc, #640]	; (80012e8 <HAL_SPI_MspInit+0x2ac>)
 8001068:	4293      	cmp	r3, r2
 800106a:	f040 8096 	bne.w	800119a <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001072:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800107a:	2304      	movs	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800107e:	f240 1317 	movw	r3, #279	; 0x117
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001084:	2308      	movs	r3, #8
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001088:	2302      	movs	r3, #2
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 800108c:	2302      	movs	r3, #2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001094:	2300      	movs	r3, #0
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 f895 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 80010ac:	f7ff ffa1 	bl	8000ff2 <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 80010b0:	4b8e      	ldr	r3, [pc, #568]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80010b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010b6:	4a8d      	ldr	r2, [pc, #564]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80010b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010c0:	4b8a      	ldr	r3, [pc, #552]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80010c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b87      	ldr	r3, [pc, #540]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	4a85      	ldr	r2, [pc, #532]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010de:	4b83      	ldr	r3, [pc, #524]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80010ec:	f248 0360 	movw	r3, #32864	; 0x8060
 80010f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001106:	2305      	movs	r3, #5
 8001108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001110:	4619      	mov	r1, r3
 8001112:	4877      	ldr	r0, [pc, #476]	; (80012f0 <HAL_SPI_MspInit+0x2b4>)
 8001114:	f003 fe88 	bl	8004e28 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 8001118:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 800111a:	4a77      	ldr	r2, [pc, #476]	; (80012f8 <HAL_SPI_MspInit+0x2bc>)
 800111c:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800111e:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001120:	2225      	movs	r2, #37	; 0x25
 8001122:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001124:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b72      	ldr	r3, [pc, #456]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001136:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001138:	4b6e      	ldr	r3, [pc, #440]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 800113a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113e:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001140:	4b6c      	ldr	r3, [pc, #432]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001146:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001150:	4b68      	ldr	r3, [pc, #416]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001158:	2204      	movs	r2, #4
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800115c:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001162:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001168:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 800116a:	2200      	movs	r2, #0
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800116e:	4861      	ldr	r0, [pc, #388]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001170:	f000 fecc 	bl	8001f0c <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 800117a:	f7ff ff3a 	bl	8000ff2 <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a5c      	ldr	r2, [pc, #368]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001182:	67da      	str	r2, [r3, #124]	; 0x7c
 8001184:	4a5b      	ldr	r2, [pc, #364]	; (80012f4 <HAL_SPI_MspInit+0x2b8>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2023      	movs	r0, #35	; 0x23
 8001190:	f000 fe79 	bl	8001e86 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001194:	2023      	movs	r0, #35	; 0x23
 8001196:	f000 fe90 	bl	8001eba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_SPI_MspInit+0x2c0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	f040 809d 	bne.w	80012e0 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80011b2:	2304      	movs	r3, #4
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80011b6:	f240 1317 	movw	r3, #279	; 0x117
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80011bc:	2308      	movs	r3, #8
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80011c0:	2302      	movs	r3, #2
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80011c4:	2302      	movs	r3, #2
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 fff9 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80011e4:	f7ff ff05 	bl	8000ff2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e8:	4b40      	ldr	r3, [pc, #256]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80011ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ee:	4a3f      	ldr	r2, [pc, #252]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 80011fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a37      	ldr	r2, [pc, #220]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a30      	ldr	r2, [pc, #192]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_SPI_MspInit+0x2b0>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001260:	230c      	movs	r3, #12
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001278:	2305      	movs	r3, #5
 800127a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001282:	4619      	mov	r1, r3
 8001284:	481e      	ldr	r0, [pc, #120]	; (8001300 <HAL_SPI_MspInit+0x2c4>)
 8001286:	f003 fdcf 	bl	8004e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a4:	2305      	movs	r3, #5
 80012a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ae:	4619      	mov	r1, r3
 80012b0:	4814      	ldr	r0, [pc, #80]	; (8001304 <HAL_SPI_MspInit+0x2c8>)
 80012b2:	f003 fdb9 	bl	8004e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012b6:	2308      	movs	r3, #8
 80012b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ce:	2305      	movs	r3, #5
 80012d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012d8:	4619      	mov	r1, r3
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_SPI_MspInit+0x2cc>)
 80012dc:	f003 fda4 	bl	8004e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	37f0      	adds	r7, #240	; 0xf0
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013000 	.word	0x40013000
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020000 	.word	0x58020000
 80012f4:	2400cfac 	.word	0x2400cfac
 80012f8:	40020410 	.word	0x40020410
 80012fc:	40003800 	.word	0x40003800
 8001300:	58020800 	.word	0x58020800
 8001304:	58020400 	.word	0x58020400
 8001308:	58020c00 	.word	0x58020c00

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ba      	sub	sp, #232	; 0xe8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	22bc      	movs	r2, #188	; 0xbc
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f008 fb33 	bl	8009998 <memset>
  if(huart->Instance==USART1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a94      	ldr	r2, [pc, #592]	; (8001588 <HAL_UART_MspInit+0x27c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	f040 8098 	bne.w	800146e <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001342:	2304      	movs	r3, #4
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001346:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 800134c:	2309      	movs	r3, #9
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001350:	2308      	movs	r3, #8
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001354:	2302      	movs	r3, #2
 8001356:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135c:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800135e:	2300      	movs	r3, #0
 8001360:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001366:	2310      	movs	r3, #16
 8001368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f004 ff2d 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 800137c:	f7ff fe39 	bl	8000ff2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	4b82      	ldr	r3, [pc, #520]	; (800158c <HAL_UART_MspInit+0x280>)
 8001382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001386:	4a81      	ldr	r2, [pc, #516]	; (800158c <HAL_UART_MspInit+0x280>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <HAL_UART_MspInit+0x280>)
 8001392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b7b      	ldr	r3, [pc, #492]	; (800158c <HAL_UART_MspInit+0x280>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	4a79      	ldr	r2, [pc, #484]	; (800158c <HAL_UART_MspInit+0x280>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <HAL_UART_MspInit+0x280>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013d6:	2304      	movs	r3, #4
 80013d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e0:	4619      	mov	r1, r3
 80013e2:	486b      	ldr	r0, [pc, #428]	; (8001590 <HAL_UART_MspInit+0x284>)
 80013e4:	f003 fd20 	bl	8004e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e8:	2340      	movs	r3, #64	; 0x40
 80013ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800140a:	4619      	mov	r1, r3
 800140c:	4860      	ldr	r0, [pc, #384]	; (8001590 <HAL_UART_MspInit+0x284>)
 800140e:	f003 fd0b 	bl	8004e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001412:	4b60      	ldr	r3, [pc, #384]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001414:	4a60      	ldr	r2, [pc, #384]	; (8001598 <HAL_UART_MspInit+0x28c>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001418:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_UART_MspInit+0x288>)
 800141a:	222a      	movs	r2, #42	; 0x2a
 800141c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <HAL_UART_MspInit+0x288>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <HAL_UART_MspInit+0x288>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_UART_MspInit+0x288>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001450:	4850      	ldr	r0, [pc, #320]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001452:	f000 fd5b 	bl	8001f0c <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 800145c:	f7ff fdc9 	bl	8000ff2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4c      	ldr	r2, [pc, #304]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001464:	679a      	str	r2, [r3, #120]	; 0x78
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_UART_MspInit+0x288>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800146c:	e088      	b.n	8001580 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a4a      	ldr	r2, [pc, #296]	; (800159c <HAL_UART_MspInit+0x290>)
 8001474:	4293      	cmp	r3, r2
 8001476:	f040 8083 	bne.w	8001580 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800147e:	2304      	movs	r3, #4
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001482:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001488:	2309      	movs	r3, #9
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 800148c:	2308      	movs	r3, #8
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001490:	2302      	movs	r3, #2
 8001492:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001498:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800149a:	2300      	movs	r3, #0
 800149c:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fe8f 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 80014b8:	f7ff fd9b 	bl	8000ff2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <HAL_UART_MspInit+0x280>)
 80014be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_UART_MspInit+0x280>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_UART_MspInit+0x280>)
 80014ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_UART_MspInit+0x280>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <HAL_UART_MspInit+0x280>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_UART_MspInit+0x280>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001512:	2307      	movs	r3, #7
 8001514:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800151c:	4619      	mov	r1, r3
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <HAL_UART_MspInit+0x294>)
 8001520:	f003 fc82 	bl	8004e28 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001526:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <HAL_UART_MspInit+0x29c>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_UART_MspInit+0x298>)
 800152c:	222e      	movs	r2, #46	; 0x2e
 800152e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x298>)
 800153e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001542:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_UART_MspInit+0x298>)
 800154c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001550:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0x298>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001566:	f000 fcd1 	bl	8001f0c <HAL_DMA_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001570:	f7ff fd3f 	bl	8000ff2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_UART_MspInit+0x298>)
 8001578:	679a      	str	r2, [r3, #120]	; 0x78
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_UART_MspInit+0x298>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001580:	bf00      	nop
 8001582:	37e8      	adds	r7, #232	; 0xe8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40011000 	.word	0x40011000
 800158c:	58024400 	.word	0x58024400
 8001590:	58020400 	.word	0x58020400
 8001594:	2400ce1c 	.word	0x2400ce1c
 8001598:	40020010 	.word	0x40020010
 800159c:	40004800 	.word	0x40004800
 80015a0:	58020c00 	.word	0x58020c00
 80015a4:	2400cda4 	.word	0x2400cda4
 80015a8:	40020028 	.word	0x40020028

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 fae6 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Stream0_IRQHandler+0x10>)
 8001606:	f002 f8c9 	bl	800379c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2400ce1c 	.word	0x2400ce1c

08001614 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001618:	2002      	movs	r0, #2
 800161a:	f000 f8ab 	bl	8001774 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_usart3_tx);
	DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <DMA1_Stream1_IRQHandler+0x18>)
 8001620:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001624:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020000 	.word	0x40020000

08001630 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED1);
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f89d 	bl	8001774 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA2_Stream0_IRQHandler+0x14>)
 800163c:	f002 f8ae 	bl	800379c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2400cfac 	.word	0x2400cfac

08001648 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800164c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001650:	f003 fdcd 	bl	80051ee <HAL_GPIO_EXTI_IRQHandler>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 800165c:	2002      	movs	r0, #2
 800165e:	f000 f889 	bl	8001774 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <USART3_IRQHandler+0x14>)
 8001664:	f006 fdbc 	bl	80081e0 <HAL_UART_IRQHandler>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2400c90c 	.word	0x2400c90c

08001670 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	  BSP_LED_On(LED3);
 8001674:	2002      	movs	r0, #2
 8001676:	f000 f87d 	bl	8001774 <BSP_LED_On>
  HAL_SPI_IRQHandler(&hspi1);
 800167a:	4802      	ldr	r0, [pc, #8]	; (8001684 <SPI1_IRQHandler+0x14>)
 800167c:	f006 fa0c 	bl	8007a98 <HAL_SPI_IRQHandler>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2400cf24 	.word	0x2400cf24

08001688 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d009      	beq.n	80016b0 <BSP_LED_Init+0x28>
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d006      	beq.n	80016b0 <BSP_LED_Init+0x28>
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d003      	beq.n	80016b0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016a8:	f06f 0301 	mvn.w	r3, #1
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	e055      	b.n	800175c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <BSP_LED_Init+0xe0>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <BSP_LED_Init+0xe0>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <BSP_LED_Init+0xe0>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	e021      	b.n	800171a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10f      	bne.n	80016fc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <BSP_LED_Init+0xe0>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	4a21      	ldr	r2, [pc, #132]	; (8001768 <BSP_LED_Init+0xe0>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <BSP_LED_Init+0xe0>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	e00e      	b.n	800171a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <BSP_LED_Init+0xe0>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	4a19      	ldr	r2, [pc, #100]	; (8001768 <BSP_LED_Init+0xe0>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <BSP_LED_Init+0xe0>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <BSP_LED_Init+0xe4>)
 800171e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001722:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <BSP_LED_Init+0xe8>)
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	f107 0218 	add.w	r2, r7, #24
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fb72 	bl	8004e28 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <BSP_LED_Init+0xe8>)
 8001748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <BSP_LED_Init+0xe4>)
 8001750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	f003 fd16 	bl	8005188 <HAL_GPIO_WritePin>
  }

  return ret;
 800175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800175e:	4618      	mov	r0, r3
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	58024400 	.word	0x58024400
 800176c:	080099c0 	.word	0x080099c0
 8001770:	24000000 	.word	0x24000000

08001774 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <BSP_LED_On+0x28>
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d006      	beq.n	800179c <BSP_LED_On+0x28>
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d003      	beq.n	800179c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001794:	f06f 0301 	mvn.w	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e00b      	b.n	80017b4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <BSP_LED_On+0x4c>)
 80017a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <BSP_LED_On+0x50>)
 80017a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4619      	mov	r1, r3
 80017b0:	f003 fcea 	bl	8005188 <HAL_GPIO_WritePin>
  }

  return ret;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24000000 	.word	0x24000000
 80017c4:	080099c0 	.word	0x080099c0

080017c8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <BSP_LED_Off+0x28>
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d006      	beq.n	80017f0 <BSP_LED_Off+0x28>
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d003      	beq.n	80017f0 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017e8:	f06f 0301 	mvn.w	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e00b      	b.n	8001808 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <BSP_LED_Off+0x4c>)
 80017f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <BSP_LED_Off+0x50>)
 80017fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	f003 fcc0 	bl	8005188 <HAL_GPIO_WritePin>
  }

  return ret;
 8001808:	68fb      	ldr	r3, [r7, #12]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24000000 	.word	0x24000000
 8001818:	080099c0 	.word	0x080099c0

0800181c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <BSP_LED_Toggle+0x28>
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d006      	beq.n	8001844 <BSP_LED_Toggle+0x28>
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d003      	beq.n	8001844 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800183c:	f06f 0301 	mvn.w	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e00b      	b.n	800185c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <BSP_LED_Toggle+0x4c>)
 8001848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	4907      	ldr	r1, [pc, #28]	; (800186c <BSP_LED_Toggle+0x50>)
 8001850:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f003 fcaf 	bl	80051ba <HAL_GPIO_TogglePin>
  }

  return ret;
 800185c:	68fb      	ldr	r3, [r7, #12]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000000 	.word	0x24000000
 800186c:	080099c0 	.word	0x080099c0

08001870 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <BSP_PB_Init+0xc8>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <BSP_PB_Init+0xc8>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <BSP_PB_Init+0xc8>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800189e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018a4:	2302      	movs	r3, #2
 80018a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4a20      	ldr	r2, [pc, #128]	; (800193c <BSP_PB_Init+0xcc>)
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	f107 020c 	add.w	r2, r7, #12
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 faaf 	bl	8004e28 <HAL_GPIO_Init>
 80018ca:	e030      	b.n	800192e <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <BSP_PB_Init+0xd0>)
 80018ce:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4a1a      	ldr	r2, [pc, #104]	; (800193c <BSP_PB_Init+0xcc>)
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 faa2 	bl	8004e28 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4a16      	ldr	r2, [pc, #88]	; (8001944 <BSP_PB_Init+0xd4>)
 80018ea:	441a      	add	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4916      	ldr	r1, [pc, #88]	; (8001948 <BSP_PB_Init+0xd8>)
 80018f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f003 fa81 	bl	8004dfe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <BSP_PB_Init+0xd4>)
 8001902:	1898      	adds	r0, r3, r2
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <BSP_PB_Init+0xdc>)
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	461a      	mov	r2, r3
 800190e:	2100      	movs	r1, #0
 8001910:	f003 fa56 	bl	8004dc0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001914:	2028      	movs	r0, #40	; 0x28
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <BSP_PB_Init+0xe0>)
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	f000 fab0 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001926:	2328      	movs	r3, #40	; 0x28
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fac6 	bl	8001eba <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58024400 	.word	0x58024400
 800193c:	2400000c 	.word	0x2400000c
 8001940:	11110000 	.word	0x11110000
 8001944:	2400d024 	.word	0x2400d024
 8001948:	080099c8 	.word	0x080099c8
 800194c:	24000010 	.word	0x24000010
 8001950:	24000014 	.word	0x24000014

08001954 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fff0 	bl	8001954 <BSP_PB_Callback>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <SystemInit+0xec>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <SystemInit+0xec>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <SystemInit+0xf0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	2b06      	cmp	r3, #6
 8001996:	d807      	bhi.n	80019a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <SystemInit+0xf0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 030f 	bic.w	r3, r3, #15
 80019a0:	4a31      	ldr	r2, [pc, #196]	; (8001a68 <SystemInit+0xf0>)
 80019a2:	f043 0307 	orr.w	r3, r3, #7
 80019a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019a8:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <SystemInit+0xf4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <SystemInit+0xf4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <SystemInit+0xf4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <SystemInit+0xf4>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	492b      	ldr	r1, [pc, #172]	; (8001a6c <SystemInit+0xf4>)
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <SystemInit+0xf8>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <SystemInit+0xf0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <SystemInit+0xf0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 030f 	bic.w	r3, r3, #15
 80019da:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <SystemInit+0xf0>)
 80019dc:	f043 0307 	orr.w	r3, r3, #7
 80019e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <SystemInit+0xf4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <SystemInit+0xf4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <SystemInit+0xf4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <SystemInit+0xf4>)
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <SystemInit+0xfc>)
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <SystemInit+0xf4>)
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <SystemInit+0x100>)
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <SystemInit+0xf4>)
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <SystemInit+0x104>)
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <SystemInit+0xf4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <SystemInit+0xf4>)
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <SystemInit+0x104>)
 8001a10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <SystemInit+0xf4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <SystemInit+0xf4>)
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <SystemInit+0x104>)
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <SystemInit+0xf4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <SystemInit+0xf4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <SystemInit+0xf4>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <SystemInit+0xf4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <SystemInit+0x108>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <SystemInit+0x10c>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a42:	d202      	bcs.n	8001a4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <SystemInit+0x110>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <SystemInit+0x114>)
 8001a4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SystemInit+0xec>)
 8001a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00
 8001a68:	52002000 	.word	0x52002000
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a74:	02020200 	.word	0x02020200
 8001a78:	01ff0000 	.word	0x01ff0000
 8001a7c:	01010280 	.word	0x01010280
 8001a80:	5c001000 	.word	0x5c001000
 8001a84:	ffff0000 	.word	0xffff0000
 8001a88:	51008108 	.word	0x51008108
 8001a8c:	52004000 	.word	0x52004000

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a94:	f7ff ff70 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	; (8001adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f007 ff47 	bl	8009950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7fe fd85 	bl	80005d0 <main>
  bx  lr
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001acc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ad0:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001ad4:	08009a1c 	.word	0x08009a1c
  ldr r2, =_sbss
 8001ad8:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001adc:	2400d0c0 	.word	0x2400d0c0

08001ae0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC3_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f000 f9c0 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af0:	f004 f998 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_Init+0x68>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	4913      	ldr	r1, [pc, #76]	; (8001b50 <HAL_Init+0x6c>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_Init+0x68>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_Init+0x6c>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_Init+0x70>)
 8001b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_Init+0x74>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 f814 	bl	8001b5c <HAL_InitTick>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e002      	b.n	8001b44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3e:	f7ff fa63 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	080099cc 	.word	0x080099cc
 8001b54:	2400001c 	.word	0x2400001c
 8001b58:	24000018 	.word	0x24000018

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_InitTick+0x60>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e021      	b.n	8001bb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_InitTick+0x64>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_InitTick+0x60>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f9b3 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f96f 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <HAL_InitTick+0x68>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	24000024 	.word	0x24000024
 8001bc0:	24000018 	.word	0x24000018
 8001bc4:	24000020 	.word	0x24000020

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	24000024 	.word	0x24000024
 8001bec:	2400d0bc 	.word	0x2400d0bc

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2400d0bc 	.word	0x2400d0bc

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24000024 	.word	0x24000024

08001c50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetREVID+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1b      	lsrs	r3, r3, #16
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	5c001000 	.word	0x5c001000

08001c68 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_EnableCompensationCell+0x1c>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_EnableCompensationCell+0x1c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	58000400 	.word	0x58000400

08001c88 <__NVIC_SetPriorityGrouping>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	05fa0000 	.word	0x05fa0000

08001cd0 <__NVIC_GetPriorityGrouping>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_DisableIRQ>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db12      	blt.n	8001d60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	490a      	ldr	r1, [pc, #40]	; (8001d6c <__NVIC_DisableIRQ+0x44>)
 8001d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	3320      	adds	r3, #32
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d54:	f3bf 8f4f 	dsb	sy
}
 8001d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d5a:	f3bf 8f6f 	isb	sy
}
 8001d5e:	bf00      	nop
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff05 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff1c 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff0f 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff1f 	bl	8001d28 <__NVIC_DisableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff96 	bl	8001e2c <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff fe6c 	bl	8001bf0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e316      	b.n	8002552 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_DMA_Init+0x1b8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_DMA_Init+0x1bc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d045      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a63      	ldr	r2, [pc, #396]	; (80020cc <HAL_DMA_Init+0x1c0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d040      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a62      	ldr	r2, [pc, #392]	; (80020d0 <HAL_DMA_Init+0x1c4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_DMA_Init+0x1c8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d036      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a5f      	ldr	r2, [pc, #380]	; (80020d8 <HAL_DMA_Init+0x1cc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d031      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_DMA_Init+0x1d0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02c      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	; (80020e0 <HAL_DMA_Init+0x1d4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d027      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_DMA_Init+0x1d8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a59      	ldr	r2, [pc, #356]	; (80020e8 <HAL_DMA_Init+0x1dc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01d      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_DMA_Init+0x1e0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a56      	ldr	r2, [pc, #344]	; (80020f0 <HAL_DMA_Init+0x1e4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_DMA_Init+0x1e8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_DMA_Init+0x1ec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_DMA_Init+0x1f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_DMA_Init+0xb8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a50      	ldr	r2, [pc, #320]	; (8002100 <HAL_DMA_Init+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Init+0xbc>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_Init+0xbe>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 813b 	beq.w	8002246 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a37      	ldr	r2, [pc, #220]	; (80020c4 <HAL_DMA_Init+0x1b8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04a      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a36      	ldr	r2, [pc, #216]	; (80020c8 <HAL_DMA_Init+0x1bc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d045      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_DMA_Init+0x1c0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d040      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <HAL_DMA_Init+0x1c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d03b      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_DMA_Init+0x1c8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d036      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <HAL_DMA_Init+0x1cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d031      	beq.n	8002080 <HAL_DMA_Init+0x174>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_DMA_Init+0x1d0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02c      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <HAL_DMA_Init+0x1d4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d027      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_DMA_Init+0x1d8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d022      	beq.n	8002080 <HAL_DMA_Init+0x174>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_DMA_Init+0x1dc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d01d      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_DMA_Init+0x1e0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d018      	beq.n	8002080 <HAL_DMA_Init+0x174>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_DMA_Init+0x1e4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_DMA_Init+0x1e8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_DMA_Init+0x1ec>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_DMA_Init+0x174>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <HAL_DMA_Init+0x1f0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Init+0x174>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_DMA_Init+0x1f4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <HAL_DMA_Init+0x186>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e007      	b.n	80020a2 <HAL_DMA_Init+0x196>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020a2:	e02f      	b.n	8002104 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a4:	f7ff fda4 	bl	8001bf0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d928      	bls.n	8002104 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e246      	b.n	8002552 <HAL_DMA_Init+0x646>
 80020c4:	40020010 	.word	0x40020010
 80020c8:	40020028 	.word	0x40020028
 80020cc:	40020040 	.word	0x40020040
 80020d0:	40020058 	.word	0x40020058
 80020d4:	40020070 	.word	0x40020070
 80020d8:	40020088 	.word	0x40020088
 80020dc:	400200a0 	.word	0x400200a0
 80020e0:	400200b8 	.word	0x400200b8
 80020e4:	40020410 	.word	0x40020410
 80020e8:	40020428 	.word	0x40020428
 80020ec:	40020440 	.word	0x40020440
 80020f0:	40020458 	.word	0x40020458
 80020f4:	40020470 	.word	0x40020470
 80020f8:	40020488 	.word	0x40020488
 80020fc:	400204a0 	.word	0x400204a0
 8002100:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1c8      	bne.n	80020a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <HAL_DMA_Init+0x420>)
 800211e:	4013      	ands	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800212a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2b04      	cmp	r3, #4
 8002156:	d107      	bne.n	8002168 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4313      	orrs	r3, r2
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002168:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_DMA_Init+0x424>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b71      	ldr	r3, [pc, #452]	; (8002334 <HAL_DMA_Init+0x428>)
 800216e:	4013      	ands	r3, r2
 8002170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002174:	d328      	bcc.n	80021c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b28      	cmp	r3, #40	; 0x28
 800217c:	d903      	bls.n	8002186 <HAL_DMA_Init+0x27a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b2e      	cmp	r3, #46	; 0x2e
 8002184:	d917      	bls.n	80021b6 <HAL_DMA_Init+0x2aa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b3e      	cmp	r3, #62	; 0x3e
 800218c:	d903      	bls.n	8002196 <HAL_DMA_Init+0x28a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b42      	cmp	r3, #66	; 0x42
 8002194:	d90f      	bls.n	80021b6 <HAL_DMA_Init+0x2aa>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b46      	cmp	r3, #70	; 0x46
 800219c:	d903      	bls.n	80021a6 <HAL_DMA_Init+0x29a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b48      	cmp	r3, #72	; 0x48
 80021a4:	d907      	bls.n	80021b6 <HAL_DMA_Init+0x2aa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b4e      	cmp	r3, #78	; 0x4e
 80021ac:	d905      	bls.n	80021ba <HAL_DMA_Init+0x2ae>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b52      	cmp	r3, #82	; 0x52
 80021b4:	d801      	bhi.n	80021ba <HAL_DMA_Init+0x2ae>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_DMA_Init+0x2b0>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0307 	bic.w	r3, r3, #7
 80021de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d117      	bne.n	8002222 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00e      	beq.n	8002222 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f002 fc51 	bl	8004aac <DMA_CheckFifoParam>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e197      	b.n	8002552 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f002 fb8c 	bl	8004948 <DMA_CalcBaseAndBitshift>
 8002230:	4603      	mov	r3, r0
 8002232:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	223f      	movs	r2, #63	; 0x3f
 800223e:	409a      	lsls	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e0cd      	b.n	80023e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <HAL_DMA_Init+0x42c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a39      	ldr	r2, [pc, #228]	; (800233c <HAL_DMA_Init+0x430>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01d      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a38      	ldr	r2, [pc, #224]	; (8002340 <HAL_DMA_Init+0x434>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d018      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a36      	ldr	r2, [pc, #216]	; (8002344 <HAL_DMA_Init+0x438>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a35      	ldr	r2, [pc, #212]	; (8002348 <HAL_DMA_Init+0x43c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00e      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a33      	ldr	r2, [pc, #204]	; (800234c <HAL_DMA_Init+0x440>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a32      	ldr	r2, [pc, #200]	; (8002350 <HAL_DMA_Init+0x444>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Init+0x38a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <HAL_DMA_Init+0x448>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_DMA_Init+0x38e>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_DMA_Init+0x390>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8097 	beq.w	80023d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_DMA_Init+0x42c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d021      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_DMA_Init+0x430>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01c      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <HAL_DMA_Init+0x434>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d017      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_DMA_Init+0x438>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d012      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_DMA_Init+0x43c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_DMA_Init+0x440>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d008      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_DMA_Init+0x444>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_Init+0x3e4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_DMA_Init+0x448>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_DMA_Init+0x44c>)
 800230e:	4013      	ands	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d020      	beq.n	800235c <HAL_DMA_Init+0x450>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b80      	cmp	r3, #128	; 0x80
 8002320:	d102      	bne.n	8002328 <HAL_DMA_Init+0x41c>
 8002322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002326:	e01a      	b.n	800235e <HAL_DMA_Init+0x452>
 8002328:	2300      	movs	r3, #0
 800232a:	e018      	b.n	800235e <HAL_DMA_Init+0x452>
 800232c:	fe10803f 	.word	0xfe10803f
 8002330:	5c001000 	.word	0x5c001000
 8002334:	ffff0000 	.word	0xffff0000
 8002338:	58025408 	.word	0x58025408
 800233c:	5802541c 	.word	0x5802541c
 8002340:	58025430 	.word	0x58025430
 8002344:	58025444 	.word	0x58025444
 8002348:	58025458 	.word	0x58025458
 800234c:	5802546c 	.word	0x5802546c
 8002350:	58025480 	.word	0x58025480
 8002354:	58025494 	.word	0x58025494
 8002358:	fffe000f 	.word	0xfffe000f
 800235c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800236c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800237c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800238c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b6e      	ldr	r3, [pc, #440]	; (800255c <HAL_DMA_Init+0x650>)
 80023a4:	4413      	add	r3, r2
 80023a6:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_DMA_Init+0x654>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f002 fac7 	bl	8004948 <DMA_CalcBaseAndBitshift>
 80023ba:	4603      	mov	r3, r0
 80023bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2201      	movs	r2, #1
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e008      	b.n	80023e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0b7      	b.n	8002552 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_DMA_Init+0x658>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d072      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_DMA_Init+0x65c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d06d      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5c      	ldr	r2, [pc, #368]	; (800256c <HAL_DMA_Init+0x660>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d068      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_DMA_Init+0x664>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d063      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a59      	ldr	r2, [pc, #356]	; (8002574 <HAL_DMA_Init+0x668>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d05e      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_DMA_Init+0x66c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d059      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_DMA_Init+0x670>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d054      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a54      	ldr	r2, [pc, #336]	; (8002580 <HAL_DMA_Init+0x674>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04f      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a53      	ldr	r2, [pc, #332]	; (8002584 <HAL_DMA_Init+0x678>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04a      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a51      	ldr	r2, [pc, #324]	; (8002588 <HAL_DMA_Init+0x67c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d045      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a50      	ldr	r2, [pc, #320]	; (800258c <HAL_DMA_Init+0x680>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d040      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_DMA_Init+0x684>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d03b      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <HAL_DMA_Init+0x688>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d036      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_DMA_Init+0x68c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d031      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4a      	ldr	r2, [pc, #296]	; (800259c <HAL_DMA_Init+0x690>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d02c      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_DMA_Init+0x694>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d027      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_DMA_Init+0x698>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a45      	ldr	r2, [pc, #276]	; (80025a8 <HAL_DMA_Init+0x69c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01d      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a44      	ldr	r2, [pc, #272]	; (80025ac <HAL_DMA_Init+0x6a0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <HAL_DMA_Init+0x6a4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a41      	ldr	r2, [pc, #260]	; (80025b4 <HAL_DMA_Init+0x6a8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <HAL_DMA_Init+0x6ac>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a3e      	ldr	r2, [pc, #248]	; (80025bc <HAL_DMA_Init+0x6b0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_DMA_Init+0x5c6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3c      	ldr	r2, [pc, #240]	; (80025c0 <HAL_DMA_Init+0x6b4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Init+0x5ca>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_Init+0x5cc>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d032      	beq.n	8002542 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f002 fb61 	bl	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b80      	cmp	r3, #128	; 0x80
 80024e8:	d102      	bne.n	80024f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002504:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_DMA_Init+0x624>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d80c      	bhi.n	8002530 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f002 fbde 	bl	8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e008      	b.n	8002542 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	a7fdabf8 	.word	0xa7fdabf8
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	40020010 	.word	0x40020010
 8002568:	40020028 	.word	0x40020028
 800256c:	40020040 	.word	0x40020040
 8002570:	40020058 	.word	0x40020058
 8002574:	40020070 	.word	0x40020070
 8002578:	40020088 	.word	0x40020088
 800257c:	400200a0 	.word	0x400200a0
 8002580:	400200b8 	.word	0x400200b8
 8002584:	40020410 	.word	0x40020410
 8002588:	40020428 	.word	0x40020428
 800258c:	40020440 	.word	0x40020440
 8002590:	40020458 	.word	0x40020458
 8002594:	40020470 	.word	0x40020470
 8002598:	40020488 	.word	0x40020488
 800259c:	400204a0 	.word	0x400204a0
 80025a0:	400204b8 	.word	0x400204b8
 80025a4:	58025408 	.word	0x58025408
 80025a8:	5802541c 	.word	0x5802541c
 80025ac:	58025430 	.word	0x58025430
 80025b0:	58025444 	.word	0x58025444
 80025b4:	58025458 	.word	0x58025458
 80025b8:	5802546c 	.word	0x5802546c
 80025bc:	58025480 	.word	0x58025480
 80025c0:	58025494 	.word	0x58025494

080025c4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ec      	b.n	80027ba <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Start+0x2a>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0e5      	b.n	80027ba <HAL_DMA_Start+0x1f6>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 80d0 	bne.w	80027a4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6b      	ldr	r2, [pc, #428]	; (80027c4 <HAL_DMA_Start+0x200>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04a      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a69      	ldr	r2, [pc, #420]	; (80027c8 <HAL_DMA_Start+0x204>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d045      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a68      	ldr	r2, [pc, #416]	; (80027cc <HAL_DMA_Start+0x208>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d040      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a66      	ldr	r2, [pc, #408]	; (80027d0 <HAL_DMA_Start+0x20c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d03b      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a65      	ldr	r2, [pc, #404]	; (80027d4 <HAL_DMA_Start+0x210>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d036      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a63      	ldr	r2, [pc, #396]	; (80027d8 <HAL_DMA_Start+0x214>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a62      	ldr	r2, [pc, #392]	; (80027dc <HAL_DMA_Start+0x218>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d02c      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a60      	ldr	r2, [pc, #384]	; (80027e0 <HAL_DMA_Start+0x21c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d027      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5f      	ldr	r2, [pc, #380]	; (80027e4 <HAL_DMA_Start+0x220>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <HAL_DMA_Start+0x224>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01d      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a5c      	ldr	r2, [pc, #368]	; (80027ec <HAL_DMA_Start+0x228>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <HAL_DMA_Start+0x22c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a59      	ldr	r2, [pc, #356]	; (80027f4 <HAL_DMA_Start+0x230>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00e      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_DMA_Start+0x234>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a56      	ldr	r2, [pc, #344]	; (80027fc <HAL_DMA_Start+0x238>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_DMA_Start+0xee>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_DMA_Start+0x23c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <HAL_DMA_Start+0x100>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e007      	b.n	80026d4 <HAL_DMA_Start+0x110>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 ff88 	bl	80045f0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a37      	ldr	r2, [pc, #220]	; (80027c4 <HAL_DMA_Start+0x200>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04a      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <HAL_DMA_Start+0x204>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d045      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a34      	ldr	r2, [pc, #208]	; (80027cc <HAL_DMA_Start+0x208>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d040      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <HAL_DMA_Start+0x20c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d03b      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_DMA_Start+0x210>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d036      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <HAL_DMA_Start+0x214>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d031      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2e      	ldr	r2, [pc, #184]	; (80027dc <HAL_DMA_Start+0x218>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02c      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2d      	ldr	r2, [pc, #180]	; (80027e0 <HAL_DMA_Start+0x21c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d027      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_DMA_Start+0x220>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d022      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <HAL_DMA_Start+0x224>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d01d      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a28      	ldr	r2, [pc, #160]	; (80027ec <HAL_DMA_Start+0x228>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d018      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_DMA_Start+0x22c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <HAL_DMA_Start+0x230>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <HAL_DMA_Start+0x234>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <HAL_DMA_Start+0x238>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_DMA_Start+0x1bc>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_DMA_Start+0x23c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d108      	bne.n	8002792 <HAL_DMA_Start+0x1ce>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e012      	b.n	80027b8 <HAL_DMA_Start+0x1f4>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e009      	b.n	80027b8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40020010 	.word	0x40020010
 80027c8:	40020028 	.word	0x40020028
 80027cc:	40020040 	.word	0x40020040
 80027d0:	40020058 	.word	0x40020058
 80027d4:	40020070 	.word	0x40020070
 80027d8:	40020088 	.word	0x40020088
 80027dc:	400200a0 	.word	0x400200a0
 80027e0:	400200b8 	.word	0x400200b8
 80027e4:	40020410 	.word	0x40020410
 80027e8:	40020428 	.word	0x40020428
 80027ec:	40020440 	.word	0x40020440
 80027f0:	40020458 	.word	0x40020458
 80027f4:	40020470 	.word	0x40020470
 80027f8:	40020488 	.word	0x40020488
 80027fc:	400204a0 	.word	0x400204a0
 8002800:	400204b8 	.word	0x400204b8

08002804 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e226      	b.n	8002c6e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_DMA_Start_IT+0x2a>
 800282a:	2302      	movs	r3, #2
 800282c:	e21f      	b.n	8002c6e <HAL_DMA_Start_IT+0x46a>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 820a 	bne.w	8002c58 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <HAL_DMA_Start_IT+0x1f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04a      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a66      	ldr	r2, [pc, #408]	; (80029fc <HAL_DMA_Start_IT+0x1f8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d045      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_DMA_Start_IT+0x1fc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a63      	ldr	r2, [pc, #396]	; (8002a04 <HAL_DMA_Start_IT+0x200>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d03b      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a62      	ldr	r2, [pc, #392]	; (8002a08 <HAL_DMA_Start_IT+0x204>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d036      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a60      	ldr	r2, [pc, #384]	; (8002a0c <HAL_DMA_Start_IT+0x208>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d031      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5f      	ldr	r2, [pc, #380]	; (8002a10 <HAL_DMA_Start_IT+0x20c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d02c      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <HAL_DMA_Start_IT+0x210>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d027      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <HAL_DMA_Start_IT+0x214>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5a      	ldr	r2, [pc, #360]	; (8002a1c <HAL_DMA_Start_IT+0x218>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	; (8002a20 <HAL_DMA_Start_IT+0x21c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d018      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a57      	ldr	r2, [pc, #348]	; (8002a24 <HAL_DMA_Start_IT+0x220>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_DMA_Start_IT+0x224>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a54      	ldr	r2, [pc, #336]	; (8002a2c <HAL_DMA_Start_IT+0x228>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a53      	ldr	r2, [pc, #332]	; (8002a30 <HAL_DMA_Start_IT+0x22c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Start_IT+0xee>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <HAL_DMA_Start_IT+0x230>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d108      	bne.n	8002904 <HAL_DMA_Start_IT+0x100>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e007      	b.n	8002914 <HAL_DMA_Start_IT+0x110>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f001 fe68 	bl	80045f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <HAL_DMA_Start_IT+0x1f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d04a      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a33      	ldr	r2, [pc, #204]	; (80029fc <HAL_DMA_Start_IT+0x1f8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d045      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a31      	ldr	r2, [pc, #196]	; (8002a00 <HAL_DMA_Start_IT+0x1fc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d040      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_DMA_Start_IT+0x200>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d03b      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2e      	ldr	r2, [pc, #184]	; (8002a08 <HAL_DMA_Start_IT+0x204>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d036      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2d      	ldr	r2, [pc, #180]	; (8002a0c <HAL_DMA_Start_IT+0x208>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <HAL_DMA_Start_IT+0x20c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02c      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_DMA_Start_IT+0x210>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d027      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_DMA_Start_IT+0x214>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d022      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_DMA_Start_IT+0x218>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01d      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <HAL_DMA_Start_IT+0x21c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d018      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a24      	ldr	r2, [pc, #144]	; (8002a24 <HAL_DMA_Start_IT+0x220>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <HAL_DMA_Start_IT+0x224>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00e      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <HAL_DMA_Start_IT+0x228>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_DMA_Start_IT+0x22c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_Start_IT+0x1bc>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_DMA_Start_IT+0x230>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_DMA_Start_IT+0x1c0>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_DMA_Start_IT+0x1c2>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d036      	beq.n	8002a38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 021e 	bic.w	r2, r3, #30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0216 	orr.w	r2, r2, #22
 80029dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03e      	beq.n	8002a64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0208 	orr.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e035      	b.n	8002a64 <HAL_DMA_Start_IT+0x260>
 80029f8:	40020010 	.word	0x40020010
 80029fc:	40020028 	.word	0x40020028
 8002a00:	40020040 	.word	0x40020040
 8002a04:	40020058 	.word	0x40020058
 8002a08:	40020070 	.word	0x40020070
 8002a0c:	40020088 	.word	0x40020088
 8002a10:	400200a0 	.word	0x400200a0
 8002a14:	400200b8 	.word	0x400200b8
 8002a18:	40020410 	.word	0x40020410
 8002a1c:	40020428 	.word	0x40020428
 8002a20:	40020440 	.word	0x40020440
 8002a24:	40020458 	.word	0x40020458
 8002a28:	40020470 	.word	0x40020470
 8002a2c:	40020488 	.word	0x40020488
 8002a30:	400204a0 	.word	0x400204a0
 8002a34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 020e 	bic.w	r2, r3, #14
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 020a 	orr.w	r2, r2, #10
 8002a4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0204 	orr.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a83      	ldr	r2, [pc, #524]	; (8002c78 <HAL_DMA_Start_IT+0x474>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d072      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a82      	ldr	r2, [pc, #520]	; (8002c7c <HAL_DMA_Start_IT+0x478>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d06d      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_DMA_Start_IT+0x47c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d068      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7f      	ldr	r2, [pc, #508]	; (8002c84 <HAL_DMA_Start_IT+0x480>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d063      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7d      	ldr	r2, [pc, #500]	; (8002c88 <HAL_DMA_Start_IT+0x484>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d05e      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7c      	ldr	r2, [pc, #496]	; (8002c8c <HAL_DMA_Start_IT+0x488>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d059      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_DMA_Start_IT+0x48c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d054      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a79      	ldr	r2, [pc, #484]	; (8002c94 <HAL_DMA_Start_IT+0x490>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d04f      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_DMA_Start_IT+0x494>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d04a      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a76      	ldr	r2, [pc, #472]	; (8002c9c <HAL_DMA_Start_IT+0x498>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d045      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a74      	ldr	r2, [pc, #464]	; (8002ca0 <HAL_DMA_Start_IT+0x49c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d040      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a73      	ldr	r2, [pc, #460]	; (8002ca4 <HAL_DMA_Start_IT+0x4a0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d03b      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a71      	ldr	r2, [pc, #452]	; (8002ca8 <HAL_DMA_Start_IT+0x4a4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d036      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a70      	ldr	r2, [pc, #448]	; (8002cac <HAL_DMA_Start_IT+0x4a8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d031      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6e      	ldr	r2, [pc, #440]	; (8002cb0 <HAL_DMA_Start_IT+0x4ac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02c      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6d      	ldr	r2, [pc, #436]	; (8002cb4 <HAL_DMA_Start_IT+0x4b0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d027      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6b      	ldr	r2, [pc, #428]	; (8002cb8 <HAL_DMA_Start_IT+0x4b4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d022      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6a      	ldr	r2, [pc, #424]	; (8002cbc <HAL_DMA_Start_IT+0x4b8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01d      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a68      	ldr	r2, [pc, #416]	; (8002cc0 <HAL_DMA_Start_IT+0x4bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a67      	ldr	r2, [pc, #412]	; (8002cc4 <HAL_DMA_Start_IT+0x4c0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a65      	ldr	r2, [pc, #404]	; (8002cc8 <HAL_DMA_Start_IT+0x4c4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a64      	ldr	r2, [pc, #400]	; (8002ccc <HAL_DMA_Start_IT+0x4c8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <HAL_DMA_Start_IT+0x4cc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_DMA_Start_IT+0x350>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a61      	ldr	r2, [pc, #388]	; (8002cd4 <HAL_DMA_Start_IT+0x4d0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA_Start_IT+0x354>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_DMA_Start_IT+0x356>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a37      	ldr	r2, [pc, #220]	; (8002c78 <HAL_DMA_Start_IT+0x474>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d04a      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <HAL_DMA_Start_IT+0x478>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d045      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <HAL_DMA_Start_IT+0x47c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a33      	ldr	r2, [pc, #204]	; (8002c84 <HAL_DMA_Start_IT+0x480>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d03b      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a31      	ldr	r2, [pc, #196]	; (8002c88 <HAL_DMA_Start_IT+0x484>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d036      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <HAL_DMA_Start_IT+0x488>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d031      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <HAL_DMA_Start_IT+0x48c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02c      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_DMA_Start_IT+0x490>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d027      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_DMA_Start_IT+0x494>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <HAL_DMA_Start_IT+0x498>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01d      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <HAL_DMA_Start_IT+0x49c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_DMA_Start_IT+0x4a0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <HAL_DMA_Start_IT+0x4a4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a24      	ldr	r2, [pc, #144]	; (8002cac <HAL_DMA_Start_IT+0x4a8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <HAL_DMA_Start_IT+0x4ac>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_Start_IT+0x430>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a21      	ldr	r2, [pc, #132]	; (8002cb4 <HAL_DMA_Start_IT+0x4b0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <HAL_DMA_Start_IT+0x442>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e012      	b.n	8002c6c <HAL_DMA_Start_IT+0x468>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e009      	b.n	8002c6c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40020010 	.word	0x40020010
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	40020040 	.word	0x40020040
 8002c84:	40020058 	.word	0x40020058
 8002c88:	40020070 	.word	0x40020070
 8002c8c:	40020088 	.word	0x40020088
 8002c90:	400200a0 	.word	0x400200a0
 8002c94:	400200b8 	.word	0x400200b8
 8002c98:	40020410 	.word	0x40020410
 8002c9c:	40020428 	.word	0x40020428
 8002ca0:	40020440 	.word	0x40020440
 8002ca4:	40020458 	.word	0x40020458
 8002ca8:	40020470 	.word	0x40020470
 8002cac:	40020488 	.word	0x40020488
 8002cb0:	400204a0 	.word	0x400204a0
 8002cb4:	400204b8 	.word	0x400204b8
 8002cb8:	58025408 	.word	0x58025408
 8002cbc:	5802541c 	.word	0x5802541c
 8002cc0:	58025430 	.word	0x58025430
 8002cc4:	58025444 	.word	0x58025444
 8002cc8:	58025458 	.word	0x58025458
 8002ccc:	5802546c 	.word	0x5802546c
 8002cd0:	58025480 	.word	0x58025480
 8002cd4:	58025494 	.word	0x58025494

08002cd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7fe ff86 	bl	8001bf0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e2dc      	b.n	80032aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d008      	beq.n	8002d0e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e2cd      	b.n	80032aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a76      	ldr	r2, [pc, #472]	; (8002eec <HAL_DMA_Abort+0x214>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04a      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a74      	ldr	r2, [pc, #464]	; (8002ef0 <HAL_DMA_Abort+0x218>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d045      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a73      	ldr	r2, [pc, #460]	; (8002ef4 <HAL_DMA_Abort+0x21c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d040      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a71      	ldr	r2, [pc, #452]	; (8002ef8 <HAL_DMA_Abort+0x220>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d03b      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a70      	ldr	r2, [pc, #448]	; (8002efc <HAL_DMA_Abort+0x224>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d036      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_DMA_Abort+0x228>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <HAL_DMA_Abort+0x22c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02c      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a6b      	ldr	r2, [pc, #428]	; (8002f08 <HAL_DMA_Abort+0x230>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d027      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6a      	ldr	r2, [pc, #424]	; (8002f0c <HAL_DMA_Abort+0x234>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a68      	ldr	r2, [pc, #416]	; (8002f10 <HAL_DMA_Abort+0x238>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a67      	ldr	r2, [pc, #412]	; (8002f14 <HAL_DMA_Abort+0x23c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_DMA_Abort+0x240>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a64      	ldr	r2, [pc, #400]	; (8002f1c <HAL_DMA_Abort+0x244>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a62      	ldr	r2, [pc, #392]	; (8002f20 <HAL_DMA_Abort+0x248>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a61      	ldr	r2, [pc, #388]	; (8002f24 <HAL_DMA_Abort+0x24c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_Abort+0xd6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5f      	ldr	r2, [pc, #380]	; (8002f28 <HAL_DMA_Abort+0x250>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_DMA_Abort+0xda>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_DMA_Abort+0xdc>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 021e 	bic.w	r2, r2, #30
 8002dc6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e00a      	b.n	8002df6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 020e 	bic.w	r2, r2, #14
 8002dee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	; (8002eec <HAL_DMA_Abort+0x214>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d072      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <HAL_DMA_Abort+0x218>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d06d      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <HAL_DMA_Abort+0x21c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d068      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <HAL_DMA_Abort+0x220>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d063      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a36      	ldr	r2, [pc, #216]	; (8002efc <HAL_DMA_Abort+0x224>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d05e      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_DMA_Abort+0x228>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d059      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a33      	ldr	r2, [pc, #204]	; (8002f04 <HAL_DMA_Abort+0x22c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d054      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a31      	ldr	r2, [pc, #196]	; (8002f08 <HAL_DMA_Abort+0x230>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d04f      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a30      	ldr	r2, [pc, #192]	; (8002f0c <HAL_DMA_Abort+0x234>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d04a      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <HAL_DMA_Abort+0x238>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d045      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_DMA_Abort+0x23c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d040      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_DMA_Abort+0x240>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d03b      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <HAL_DMA_Abort+0x244>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d036      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_DMA_Abort+0x248>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d031      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <HAL_DMA_Abort+0x24c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02c      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <HAL_DMA_Abort+0x250>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d027      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <HAL_DMA_Abort+0x254>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_DMA_Abort+0x258>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_DMA_Abort+0x25c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <HAL_DMA_Abort+0x260>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_DMA_Abort+0x264>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_DMA_Abort+0x268>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_DMA_Abort+0x26c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort+0x20e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_DMA_Abort+0x270>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d132      	bne.n	8002f4c <HAL_DMA_Abort+0x274>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e031      	b.n	8002f4e <HAL_DMA_Abort+0x276>
 8002eea:	bf00      	nop
 8002eec:	40020010 	.word	0x40020010
 8002ef0:	40020028 	.word	0x40020028
 8002ef4:	40020040 	.word	0x40020040
 8002ef8:	40020058 	.word	0x40020058
 8002efc:	40020070 	.word	0x40020070
 8002f00:	40020088 	.word	0x40020088
 8002f04:	400200a0 	.word	0x400200a0
 8002f08:	400200b8 	.word	0x400200b8
 8002f0c:	40020410 	.word	0x40020410
 8002f10:	40020428 	.word	0x40020428
 8002f14:	40020440 	.word	0x40020440
 8002f18:	40020458 	.word	0x40020458
 8002f1c:	40020470 	.word	0x40020470
 8002f20:	40020488 	.word	0x40020488
 8002f24:	400204a0 	.word	0x400204a0
 8002f28:	400204b8 	.word	0x400204b8
 8002f2c:	58025408 	.word	0x58025408
 8002f30:	5802541c 	.word	0x5802541c
 8002f34:	58025430 	.word	0x58025430
 8002f38:	58025444 	.word	0x58025444
 8002f3c:	58025458 	.word	0x58025458
 8002f40:	5802546c 	.word	0x5802546c
 8002f44:	58025480 	.word	0x58025480
 8002f48:	58025494 	.word	0x58025494
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6d      	ldr	r2, [pc, #436]	; (800311c <HAL_DMA_Abort+0x444>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04a      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6b      	ldr	r2, [pc, #428]	; (8003120 <HAL_DMA_Abort+0x448>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d045      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6a      	ldr	r2, [pc, #424]	; (8003124 <HAL_DMA_Abort+0x44c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d040      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a68      	ldr	r2, [pc, #416]	; (8003128 <HAL_DMA_Abort+0x450>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03b      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a67      	ldr	r2, [pc, #412]	; (800312c <HAL_DMA_Abort+0x454>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d036      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_DMA_Abort+0x458>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a64      	ldr	r2, [pc, #400]	; (8003134 <HAL_DMA_Abort+0x45c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02c      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a62      	ldr	r2, [pc, #392]	; (8003138 <HAL_DMA_Abort+0x460>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d027      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a61      	ldr	r2, [pc, #388]	; (800313c <HAL_DMA_Abort+0x464>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5f      	ldr	r2, [pc, #380]	; (8003140 <HAL_DMA_Abort+0x468>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5e      	ldr	r2, [pc, #376]	; (8003144 <HAL_DMA_Abort+0x46c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5c      	ldr	r2, [pc, #368]	; (8003148 <HAL_DMA_Abort+0x470>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5b      	ldr	r2, [pc, #364]	; (800314c <HAL_DMA_Abort+0x474>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a59      	ldr	r2, [pc, #356]	; (8003150 <HAL_DMA_Abort+0x478>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_DMA_Abort+0x47c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Abort+0x32a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a56      	ldr	r2, [pc, #344]	; (8003158 <HAL_DMA_Abort+0x480>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d108      	bne.n	8003014 <HAL_DMA_Abort+0x33c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e007      	b.n	8003024 <HAL_DMA_Abort+0x34c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003024:	e013      	b.n	800304e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003026:	f7fe fde3 	bl	8001bf0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b05      	cmp	r3, #5
 8003032:	d90c      	bls.n	800304e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e12d      	b.n	80032aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e5      	bne.n	8003026 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2f      	ldr	r2, [pc, #188]	; (800311c <HAL_DMA_Abort+0x444>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d04a      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_DMA_Abort+0x448>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d045      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <HAL_DMA_Abort+0x44c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d040      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <HAL_DMA_Abort+0x450>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d03b      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_DMA_Abort+0x454>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d036      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <HAL_DMA_Abort+0x458>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a26      	ldr	r2, [pc, #152]	; (8003134 <HAL_DMA_Abort+0x45c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d02c      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a24      	ldr	r2, [pc, #144]	; (8003138 <HAL_DMA_Abort+0x460>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d027      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a23      	ldr	r2, [pc, #140]	; (800313c <HAL_DMA_Abort+0x464>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <HAL_DMA_Abort+0x468>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01d      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a20      	ldr	r2, [pc, #128]	; (8003144 <HAL_DMA_Abort+0x46c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d018      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_DMA_Abort+0x470>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_DMA_Abort+0x474>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00e      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_DMA_Abort+0x478>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_DMA_Abort+0x47c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_DMA_Abort+0x422>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_DMA_Abort+0x480>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_DMA_Abort+0x426>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_DMA_Abort+0x428>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02b      	beq.n	800315c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	223f      	movs	r2, #63	; 0x3f
 8003114:	409a      	lsls	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	e02a      	b.n	8003172 <HAL_DMA_Abort+0x49a>
 800311c:	40020010 	.word	0x40020010
 8003120:	40020028 	.word	0x40020028
 8003124:	40020040 	.word	0x40020040
 8003128:	40020058 	.word	0x40020058
 800312c:	40020070 	.word	0x40020070
 8003130:	40020088 	.word	0x40020088
 8003134:	400200a0 	.word	0x400200a0
 8003138:	400200b8 	.word	0x400200b8
 800313c:	40020410 	.word	0x40020410
 8003140:	40020428 	.word	0x40020428
 8003144:	40020440 	.word	0x40020440
 8003148:	40020458 	.word	0x40020458
 800314c:	40020470 	.word	0x40020470
 8003150:	40020488 	.word	0x40020488
 8003154:	400204a0 	.word	0x400204a0
 8003158:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4f      	ldr	r2, [pc, #316]	; (80032b4 <HAL_DMA_Abort+0x5dc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d072      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_DMA_Abort+0x5e0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d06d      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4c      	ldr	r2, [pc, #304]	; (80032bc <HAL_DMA_Abort+0x5e4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d068      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <HAL_DMA_Abort+0x5e8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d063      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a49      	ldr	r2, [pc, #292]	; (80032c4 <HAL_DMA_Abort+0x5ec>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d05e      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a47      	ldr	r2, [pc, #284]	; (80032c8 <HAL_DMA_Abort+0x5f0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d059      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a46      	ldr	r2, [pc, #280]	; (80032cc <HAL_DMA_Abort+0x5f4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d054      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a44      	ldr	r2, [pc, #272]	; (80032d0 <HAL_DMA_Abort+0x5f8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d04f      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a43      	ldr	r2, [pc, #268]	; (80032d4 <HAL_DMA_Abort+0x5fc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d04a      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a41      	ldr	r2, [pc, #260]	; (80032d8 <HAL_DMA_Abort+0x600>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d045      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a40      	ldr	r2, [pc, #256]	; (80032dc <HAL_DMA_Abort+0x604>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d040      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3e      	ldr	r2, [pc, #248]	; (80032e0 <HAL_DMA_Abort+0x608>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d03b      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <HAL_DMA_Abort+0x60c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d036      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <HAL_DMA_Abort+0x610>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d031      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <HAL_DMA_Abort+0x614>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d02c      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <HAL_DMA_Abort+0x618>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d027      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a37      	ldr	r2, [pc, #220]	; (80032f4 <HAL_DMA_Abort+0x61c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <HAL_DMA_Abort+0x620>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01d      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a34      	ldr	r2, [pc, #208]	; (80032fc <HAL_DMA_Abort+0x624>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d018      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a32      	ldr	r2, [pc, #200]	; (8003300 <HAL_DMA_Abort+0x628>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a31      	ldr	r2, [pc, #196]	; (8003304 <HAL_DMA_Abort+0x62c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <HAL_DMA_Abort+0x630>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2e      	ldr	r2, [pc, #184]	; (800330c <HAL_DMA_Abort+0x634>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_Abort+0x58a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <HAL_DMA_Abort+0x638>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_DMA_Abort+0x58e>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_DMA_Abort+0x590>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003274:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800328c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003296:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40020010 	.word	0x40020010
 80032b8:	40020028 	.word	0x40020028
 80032bc:	40020040 	.word	0x40020040
 80032c0:	40020058 	.word	0x40020058
 80032c4:	40020070 	.word	0x40020070
 80032c8:	40020088 	.word	0x40020088
 80032cc:	400200a0 	.word	0x400200a0
 80032d0:	400200b8 	.word	0x400200b8
 80032d4:	40020410 	.word	0x40020410
 80032d8:	40020428 	.word	0x40020428
 80032dc:	40020440 	.word	0x40020440
 80032e0:	40020458 	.word	0x40020458
 80032e4:	40020470 	.word	0x40020470
 80032e8:	40020488 	.word	0x40020488
 80032ec:	400204a0 	.word	0x400204a0
 80032f0:	400204b8 	.word	0x400204b8
 80032f4:	58025408 	.word	0x58025408
 80032f8:	5802541c 	.word	0x5802541c
 80032fc:	58025430 	.word	0x58025430
 8003300:	58025444 	.word	0x58025444
 8003304:	58025458 	.word	0x58025458
 8003308:	5802546c 	.word	0x5802546c
 800330c:	58025480 	.word	0x58025480
 8003310:	58025494 	.word	0x58025494

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e205      	b.n	8003732 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d004      	beq.n	800333c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e1fa      	b.n	8003732 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a8c      	ldr	r2, [pc, #560]	; (8003574 <HAL_DMA_Abort_IT+0x260>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d04a      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a8b      	ldr	r2, [pc, #556]	; (8003578 <HAL_DMA_Abort_IT+0x264>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d045      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a89      	ldr	r2, [pc, #548]	; (800357c <HAL_DMA_Abort_IT+0x268>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d040      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a88      	ldr	r2, [pc, #544]	; (8003580 <HAL_DMA_Abort_IT+0x26c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d03b      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a86      	ldr	r2, [pc, #536]	; (8003584 <HAL_DMA_Abort_IT+0x270>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d036      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a85      	ldr	r2, [pc, #532]	; (8003588 <HAL_DMA_Abort_IT+0x274>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d031      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a83      	ldr	r2, [pc, #524]	; (800358c <HAL_DMA_Abort_IT+0x278>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d02c      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a82      	ldr	r2, [pc, #520]	; (8003590 <HAL_DMA_Abort_IT+0x27c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d027      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a80      	ldr	r2, [pc, #512]	; (8003594 <HAL_DMA_Abort_IT+0x280>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d022      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7f      	ldr	r2, [pc, #508]	; (8003598 <HAL_DMA_Abort_IT+0x284>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d01d      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_DMA_Abort_IT+0x288>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d018      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7c      	ldr	r2, [pc, #496]	; (80035a0 <HAL_DMA_Abort_IT+0x28c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_DMA_Abort_IT+0x290>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00e      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a79      	ldr	r2, [pc, #484]	; (80035a8 <HAL_DMA_Abort_IT+0x294>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a77      	ldr	r2, [pc, #476]	; (80035ac <HAL_DMA_Abort_IT+0x298>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a76      	ldr	r2, [pc, #472]	; (80035b0 <HAL_DMA_Abort_IT+0x29c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_DMA_Abort_IT+0xcc>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_DMA_Abort_IT+0xce>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d065      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2204      	movs	r2, #4
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a60      	ldr	r2, [pc, #384]	; (8003574 <HAL_DMA_Abort_IT+0x260>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d04a      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_DMA_Abort_IT+0x264>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d045      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_DMA_Abort_IT+0x268>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d040      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5b      	ldr	r2, [pc, #364]	; (8003580 <HAL_DMA_Abort_IT+0x26c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d03b      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_DMA_Abort_IT+0x270>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d036      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_DMA_Abort_IT+0x274>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d031      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a57      	ldr	r2, [pc, #348]	; (800358c <HAL_DMA_Abort_IT+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d02c      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a55      	ldr	r2, [pc, #340]	; (8003590 <HAL_DMA_Abort_IT+0x27c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d027      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a54      	ldr	r2, [pc, #336]	; (8003594 <HAL_DMA_Abort_IT+0x280>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_DMA_Abort_IT+0x284>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a51      	ldr	r2, [pc, #324]	; (800359c <HAL_DMA_Abort_IT+0x288>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d018      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a4f      	ldr	r2, [pc, #316]	; (80035a0 <HAL_DMA_Abort_IT+0x28c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4e      	ldr	r2, [pc, #312]	; (80035a4 <HAL_DMA_Abort_IT+0x290>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a4c      	ldr	r2, [pc, #304]	; (80035a8 <HAL_DMA_Abort_IT+0x294>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_DMA_Abort_IT+0x298>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_DMA_Abort_IT+0x17a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a49      	ldr	r2, [pc, #292]	; (80035b0 <HAL_DMA_Abort_IT+0x29c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d108      	bne.n	80034a0 <HAL_DMA_Abort_IT+0x18c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e147      	b.n	8003730 <HAL_DMA_Abort_IT+0x41c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e13e      	b.n	8003730 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020e 	bic.w	r2, r2, #14
 80034c0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2b      	ldr	r2, [pc, #172]	; (8003574 <HAL_DMA_Abort_IT+0x260>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04a      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a29      	ldr	r2, [pc, #164]	; (8003578 <HAL_DMA_Abort_IT+0x264>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d045      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a28      	ldr	r2, [pc, #160]	; (800357c <HAL_DMA_Abort_IT+0x268>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <HAL_DMA_Abort_IT+0x26c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03b      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a25      	ldr	r2, [pc, #148]	; (8003584 <HAL_DMA_Abort_IT+0x270>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d036      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <HAL_DMA_Abort_IT+0x274>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a22      	ldr	r2, [pc, #136]	; (800358c <HAL_DMA_Abort_IT+0x278>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02c      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <HAL_DMA_Abort_IT+0x27c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d027      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <HAL_DMA_Abort_IT+0x280>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_DMA_Abort_IT+0x284>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_DMA_Abort_IT+0x288>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <HAL_DMA_Abort_IT+0x28c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <HAL_DMA_Abort_IT+0x290>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <HAL_DMA_Abort_IT+0x294>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_DMA_Abort_IT+0x298>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_DMA_Abort_IT+0x24e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <HAL_DMA_Abort_IT+0x29c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d128      	bne.n	80035b4 <HAL_DMA_Abort_IT+0x2a0>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e027      	b.n	80035c4 <HAL_DMA_Abort_IT+0x2b0>
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5c      	ldr	r2, [pc, #368]	; (800373c <HAL_DMA_Abort_IT+0x428>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d072      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5b      	ldr	r2, [pc, #364]	; (8003740 <HAL_DMA_Abort_IT+0x42c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d06d      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a59      	ldr	r2, [pc, #356]	; (8003744 <HAL_DMA_Abort_IT+0x430>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d068      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_DMA_Abort_IT+0x434>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d063      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a56      	ldr	r2, [pc, #344]	; (800374c <HAL_DMA_Abort_IT+0x438>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d05e      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a55      	ldr	r2, [pc, #340]	; (8003750 <HAL_DMA_Abort_IT+0x43c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d059      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a53      	ldr	r2, [pc, #332]	; (8003754 <HAL_DMA_Abort_IT+0x440>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d054      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_DMA_Abort_IT+0x444>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04f      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a50      	ldr	r2, [pc, #320]	; (800375c <HAL_DMA_Abort_IT+0x448>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d04a      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a4f      	ldr	r2, [pc, #316]	; (8003760 <HAL_DMA_Abort_IT+0x44c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d045      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a4d      	ldr	r2, [pc, #308]	; (8003764 <HAL_DMA_Abort_IT+0x450>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d040      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a4c      	ldr	r2, [pc, #304]	; (8003768 <HAL_DMA_Abort_IT+0x454>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d03b      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a4a      	ldr	r2, [pc, #296]	; (800376c <HAL_DMA_Abort_IT+0x458>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d036      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a49      	ldr	r2, [pc, #292]	; (8003770 <HAL_DMA_Abort_IT+0x45c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d031      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a47      	ldr	r2, [pc, #284]	; (8003774 <HAL_DMA_Abort_IT+0x460>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d02c      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a46      	ldr	r2, [pc, #280]	; (8003778 <HAL_DMA_Abort_IT+0x464>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d027      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a44      	ldr	r2, [pc, #272]	; (800377c <HAL_DMA_Abort_IT+0x468>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d022      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a43      	ldr	r2, [pc, #268]	; (8003780 <HAL_DMA_Abort_IT+0x46c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01d      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a41      	ldr	r2, [pc, #260]	; (8003784 <HAL_DMA_Abort_IT+0x470>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a40      	ldr	r2, [pc, #256]	; (8003788 <HAL_DMA_Abort_IT+0x474>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a3e      	ldr	r2, [pc, #248]	; (800378c <HAL_DMA_Abort_IT+0x478>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a3d      	ldr	r2, [pc, #244]	; (8003790 <HAL_DMA_Abort_IT+0x47c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <HAL_DMA_Abort_IT+0x480>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x3a0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_DMA_Abort_IT+0x484>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_DMA_Abort_IT+0x3a4>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_DMA_Abort_IT+0x3a6>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d028      	beq.n	8003710 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003704:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800370e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40020010 	.word	0x40020010
 8003740:	40020028 	.word	0x40020028
 8003744:	40020040 	.word	0x40020040
 8003748:	40020058 	.word	0x40020058
 800374c:	40020070 	.word	0x40020070
 8003750:	40020088 	.word	0x40020088
 8003754:	400200a0 	.word	0x400200a0
 8003758:	400200b8 	.word	0x400200b8
 800375c:	40020410 	.word	0x40020410
 8003760:	40020428 	.word	0x40020428
 8003764:	40020440 	.word	0x40020440
 8003768:	40020458 	.word	0x40020458
 800376c:	40020470 	.word	0x40020470
 8003770:	40020488 	.word	0x40020488
 8003774:	400204a0 	.word	0x400204a0
 8003778:	400204b8 	.word	0x400204b8
 800377c:	58025408 	.word	0x58025408
 8003780:	5802541c 	.word	0x5802541c
 8003784:	58025430 	.word	0x58025430
 8003788:	58025444 	.word	0x58025444
 800378c:	58025458 	.word	0x58025458
 8003790:	5802546c 	.word	0x5802546c
 8003794:	58025480 	.word	0x58025480
 8003798:	58025494 	.word	0x58025494

0800379c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037a8:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_DMA_IRQHandler+0x1ac>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a67      	ldr	r2, [pc, #412]	; (800394c <HAL_DMA_IRQHandler+0x1b0>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5f      	ldr	r2, [pc, #380]	; (8003950 <HAL_DMA_IRQHandler+0x1b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d04a      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5d      	ldr	r2, [pc, #372]	; (8003954 <HAL_DMA_IRQHandler+0x1b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d045      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a5c      	ldr	r2, [pc, #368]	; (8003958 <HAL_DMA_IRQHandler+0x1bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d040      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a5a      	ldr	r2, [pc, #360]	; (800395c <HAL_DMA_IRQHandler+0x1c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d03b      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_DMA_IRQHandler+0x1c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d036      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_DMA_IRQHandler+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d031      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a56      	ldr	r2, [pc, #344]	; (8003968 <HAL_DMA_IRQHandler+0x1cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d02c      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a54      	ldr	r2, [pc, #336]	; (800396c <HAL_DMA_IRQHandler+0x1d0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d027      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a53      	ldr	r2, [pc, #332]	; (8003970 <HAL_DMA_IRQHandler+0x1d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a51      	ldr	r2, [pc, #324]	; (8003974 <HAL_DMA_IRQHandler+0x1d8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01d      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a50      	ldr	r2, [pc, #320]	; (8003978 <HAL_DMA_IRQHandler+0x1dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a4e      	ldr	r2, [pc, #312]	; (800397c <HAL_DMA_IRQHandler+0x1e0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a4d      	ldr	r2, [pc, #308]	; (8003980 <HAL_DMA_IRQHandler+0x1e4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_DMA_IRQHandler+0x1e8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a4a      	ldr	r2, [pc, #296]	; (8003988 <HAL_DMA_IRQHandler+0x1ec>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_DMA_IRQHandler+0xd2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a48      	ldr	r2, [pc, #288]	; (800398c <HAL_DMA_IRQHandler+0x1f0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_DMA_IRQHandler+0xd6>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_DMA_IRQHandler+0xd8>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 842b 	beq.w	80040d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2208      	movs	r2, #8
 8003884:	409a      	lsls	r2, r3
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a2 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <HAL_DMA_IRQHandler+0x1b4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04a      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <HAL_DMA_IRQHandler+0x1b8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d045      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	; (8003958 <HAL_DMA_IRQHandler+0x1bc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d040      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	; (800395c <HAL_DMA_IRQHandler+0x1c0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d03b      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a28      	ldr	r2, [pc, #160]	; (8003960 <HAL_DMA_IRQHandler+0x1c4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d036      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_DMA_IRQHandler+0x1c8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d031      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <HAL_DMA_IRQHandler+0x1cc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02c      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a24      	ldr	r2, [pc, #144]	; (800396c <HAL_DMA_IRQHandler+0x1d0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d027      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <HAL_DMA_IRQHandler+0x1d4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	; (8003974 <HAL_DMA_IRQHandler+0x1d8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <HAL_DMA_IRQHandler+0x1dc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1e      	ldr	r2, [pc, #120]	; (800397c <HAL_DMA_IRQHandler+0x1e0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_DMA_IRQHandler+0x1e4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_DMA_IRQHandler+0x1e8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_DMA_IRQHandler+0x1ec>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_DMA_IRQHandler+0x194>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_DMA_IRQHandler+0x1f0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d12f      	bne.n	8003990 <HAL_DMA_IRQHandler+0x1f4>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e02e      	b.n	80039a4 <HAL_DMA_IRQHandler+0x208>
 8003946:	bf00      	nop
 8003948:	24000018 	.word	0x24000018
 800394c:	1b4e81b5 	.word	0x1b4e81b5
 8003950:	40020010 	.word	0x40020010
 8003954:	40020028 	.word	0x40020028
 8003958:	40020040 	.word	0x40020040
 800395c:	40020058 	.word	0x40020058
 8003960:	40020070 	.word	0x40020070
 8003964:	40020088 	.word	0x40020088
 8003968:	400200a0 	.word	0x400200a0
 800396c:	400200b8 	.word	0x400200b8
 8003970:	40020410 	.word	0x40020410
 8003974:	40020428 	.word	0x40020428
 8003978:	40020440 	.word	0x40020440
 800397c:	40020458 	.word	0x40020458
 8003980:	40020470 	.word	0x40020470
 8003984:	40020488 	.word	0x40020488
 8003988:	400204a0 	.word	0x400204a0
 800398c:	400204b8 	.word	0x400204b8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2208      	movs	r2, #8
 80039c2:	409a      	lsls	r2, r3
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06e      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a69      	ldr	r2, [pc, #420]	; (8003b94 <HAL_DMA_IRQHandler+0x3f8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a67      	ldr	r2, [pc, #412]	; (8003b98 <HAL_DMA_IRQHandler+0x3fc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a66      	ldr	r2, [pc, #408]	; (8003b9c <HAL_DMA_IRQHandler+0x400>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a64      	ldr	r2, [pc, #400]	; (8003ba0 <HAL_DMA_IRQHandler+0x404>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a63      	ldr	r2, [pc, #396]	; (8003ba4 <HAL_DMA_IRQHandler+0x408>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a61      	ldr	r2, [pc, #388]	; (8003ba8 <HAL_DMA_IRQHandler+0x40c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a60      	ldr	r2, [pc, #384]	; (8003bac <HAL_DMA_IRQHandler+0x410>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5e      	ldr	r2, [pc, #376]	; (8003bb0 <HAL_DMA_IRQHandler+0x414>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <HAL_DMA_IRQHandler+0x418>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5b      	ldr	r2, [pc, #364]	; (8003bb8 <HAL_DMA_IRQHandler+0x41c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_DMA_IRQHandler+0x420>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_DMA_IRQHandler+0x424>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a57      	ldr	r2, [pc, #348]	; (8003bc4 <HAL_DMA_IRQHandler+0x428>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a55      	ldr	r2, [pc, #340]	; (8003bc8 <HAL_DMA_IRQHandler+0x42c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a54      	ldr	r2, [pc, #336]	; (8003bcc <HAL_DMA_IRQHandler+0x430>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2ee>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_DMA_IRQHandler+0x434>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10a      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x304>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e003      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x30c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0202 	orr.w	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 808f 	beq.w	8003bfc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <HAL_DMA_IRQHandler+0x3f8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d04a      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <HAL_DMA_IRQHandler+0x3fc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d045      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <HAL_DMA_IRQHandler+0x400>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d040      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <HAL_DMA_IRQHandler+0x404>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d03b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <HAL_DMA_IRQHandler+0x408>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d036      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <HAL_DMA_IRQHandler+0x40c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d031      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	; (8003bac <HAL_DMA_IRQHandler+0x410>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d02c      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <HAL_DMA_IRQHandler+0x414>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d027      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a20      	ldr	r2, [pc, #128]	; (8003bb4 <HAL_DMA_IRQHandler+0x418>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <HAL_DMA_IRQHandler+0x41c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <HAL_DMA_IRQHandler+0x420>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <HAL_DMA_IRQHandler+0x424>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <HAL_DMA_IRQHandler+0x428>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_DMA_IRQHandler+0x42c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_DMA_IRQHandler+0x430>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3e2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <HAL_DMA_IRQHandler+0x434>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d12a      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x438>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e023      	b.n	8003bdc <HAL_DMA_IRQHandler+0x440>
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	40020058 	.word	0x40020058
 8003ba4:	40020070 	.word	0x40020070
 8003ba8:	40020088 	.word	0x40020088
 8003bac:	400200a0 	.word	0x400200a0
 8003bb0:	400200b8 	.word	0x400200b8
 8003bb4:	40020410 	.word	0x40020410
 8003bb8:	40020428 	.word	0x40020428
 8003bbc:	40020440 	.word	0x40020440
 8003bc0:	40020458 	.word	0x40020458
 8003bc4:	40020470 	.word	0x40020470
 8003bc8:	40020488 	.word	0x40020488
 8003bcc:	400204a0 	.word	0x400204a0
 8003bd0:	400204b8 	.word	0x400204b8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2204      	movs	r2, #4
 8003bea:	409a      	lsls	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2210      	movs	r2, #16
 8003c06:	409a      	lsls	r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a6 	beq.w	8003d5e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a85      	ldr	r2, [pc, #532]	; (8003e2c <HAL_DMA_IRQHandler+0x690>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d04a      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a83      	ldr	r2, [pc, #524]	; (8003e30 <HAL_DMA_IRQHandler+0x694>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d045      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a82      	ldr	r2, [pc, #520]	; (8003e34 <HAL_DMA_IRQHandler+0x698>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d040      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a80      	ldr	r2, [pc, #512]	; (8003e38 <HAL_DMA_IRQHandler+0x69c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d03b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7f      	ldr	r2, [pc, #508]	; (8003e3c <HAL_DMA_IRQHandler+0x6a0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d036      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a7d      	ldr	r2, [pc, #500]	; (8003e40 <HAL_DMA_IRQHandler+0x6a4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d031      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <HAL_DMA_IRQHandler+0x6a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d02c      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7a      	ldr	r2, [pc, #488]	; (8003e48 <HAL_DMA_IRQHandler+0x6ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d027      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a79      	ldr	r2, [pc, #484]	; (8003e4c <HAL_DMA_IRQHandler+0x6b0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_DMA_IRQHandler+0x6b4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a76      	ldr	r2, [pc, #472]	; (8003e54 <HAL_DMA_IRQHandler+0x6b8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a74      	ldr	r2, [pc, #464]	; (8003e58 <HAL_DMA_IRQHandler+0x6bc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a73      	ldr	r2, [pc, #460]	; (8003e5c <HAL_DMA_IRQHandler+0x6c0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a71      	ldr	r2, [pc, #452]	; (8003e60 <HAL_DMA_IRQHandler+0x6c4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a70      	ldr	r2, [pc, #448]	; (8003e64 <HAL_DMA_IRQHandler+0x6c8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x516>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_DMA_IRQHandler+0x6cc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x52c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e009      	b.n	8003cdc <HAL_DMA_IRQHandler+0x540>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d03e      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2210      	movs	r2, #16
 8003cea:	409a      	lsls	r2, r3
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d024      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	e01f      	b.n	8003d5e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01b      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	e016      	b.n	8003d5e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0208 	bic.w	r2, r2, #8
 8003d4c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2220      	movs	r2, #32
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8110 	beq.w	8003f94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_DMA_IRQHandler+0x690>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04a      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HAL_DMA_IRQHandler+0x694>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d045      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <HAL_DMA_IRQHandler+0x698>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d040      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <HAL_DMA_IRQHandler+0x69c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d03b      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <HAL_DMA_IRQHandler+0x6a0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d036      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <HAL_DMA_IRQHandler+0x6a4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_DMA_IRQHandler+0x6a8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02c      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <HAL_DMA_IRQHandler+0x6ac>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <HAL_DMA_IRQHandler+0x6b0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <HAL_DMA_IRQHandler+0x6b4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_DMA_IRQHandler+0x6b8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <HAL_DMA_IRQHandler+0x6bc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_DMA_IRQHandler+0x6c0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <HAL_DMA_IRQHandler+0x6c4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_DMA_IRQHandler+0x6c8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x678>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_DMA_IRQHandler+0x6cc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d12b      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x6d0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e02a      	b.n	8003e80 <HAL_DMA_IRQHandler+0x6e4>
 8003e2a:	bf00      	nop
 8003e2c:	40020010 	.word	0x40020010
 8003e30:	40020028 	.word	0x40020028
 8003e34:	40020040 	.word	0x40020040
 8003e38:	40020058 	.word	0x40020058
 8003e3c:	40020070 	.word	0x40020070
 8003e40:	40020088 	.word	0x40020088
 8003e44:	400200a0 	.word	0x400200a0
 8003e48:	400200b8 	.word	0x400200b8
 8003e4c:	40020410 	.word	0x40020410
 8003e50:	40020428 	.word	0x40020428
 8003e54:	40020440 	.word	0x40020440
 8003e58:	40020458 	.word	0x40020458
 8003e5c:	40020470 	.word	0x40020470
 8003e60:	40020488 	.word	0x40020488
 8003e64:	400204a0 	.word	0x400204a0
 8003e68:	400204b8 	.word	0x400204b8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8087 	beq.w	8003f94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2220      	movs	r2, #32
 8003e90:	409a      	lsls	r2, r3
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d139      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0216 	bic.w	r2, r2, #22
 8003eb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x736>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	223f      	movs	r2, #63	; 0x3f
 8003eec:	409a      	lsls	r2, r3
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 834a 	beq.w	80045a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
          }
          return;
 8003f14:	e344      	b.n	80045a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d018      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d02c      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
 8003f42:	e027      	b.n	8003f94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d023      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
 8003f54:	e01e      	b.n	8003f94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10f      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0210 	bic.w	r2, r2, #16
 8003f72:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8306 	beq.w	80045aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8088 	beq.w	80040bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2204      	movs	r2, #4
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7a      	ldr	r2, [pc, #488]	; (80041a4 <HAL_DMA_IRQHandler+0xa08>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d04a      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	; (80041a8 <HAL_DMA_IRQHandler+0xa0c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d045      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	; (80041ac <HAL_DMA_IRQHandler+0xa10>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d040      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a76      	ldr	r2, [pc, #472]	; (80041b0 <HAL_DMA_IRQHandler+0xa14>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d03b      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	; (80041b4 <HAL_DMA_IRQHandler+0xa18>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d036      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <HAL_DMA_IRQHandler+0xa1c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d031      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a71      	ldr	r2, [pc, #452]	; (80041bc <HAL_DMA_IRQHandler+0xa20>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02c      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a70      	ldr	r2, [pc, #448]	; (80041c0 <HAL_DMA_IRQHandler+0xa24>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d027      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <HAL_DMA_IRQHandler+0xa28>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d022      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6d      	ldr	r2, [pc, #436]	; (80041c8 <HAL_DMA_IRQHandler+0xa2c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d01d      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6b      	ldr	r2, [pc, #428]	; (80041cc <HAL_DMA_IRQHandler+0xa30>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d018      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <HAL_DMA_IRQHandler+0xa34>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d013      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a68      	ldr	r2, [pc, #416]	; (80041d4 <HAL_DMA_IRQHandler+0xa38>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00e      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a67      	ldr	r2, [pc, #412]	; (80041d8 <HAL_DMA_IRQHandler+0xa3c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d009      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a65      	ldr	r2, [pc, #404]	; (80041dc <HAL_DMA_IRQHandler+0xa40>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_DMA_IRQHandler+0x8b8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a64      	ldr	r2, [pc, #400]	; (80041e0 <HAL_DMA_IRQHandler+0xa44>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d108      	bne.n	8004066 <HAL_DMA_IRQHandler+0x8ca>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e007      	b.n	8004076 <HAL_DMA_IRQHandler+0x8da>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	429a      	cmp	r2, r3
 8004080:	d307      	bcc.n	8004092 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f2      	bne.n	8004076 <HAL_DMA_IRQHandler+0x8da>
 8004090:	e000      	b.n	8004094 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004092:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2203      	movs	r2, #3
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040b2:	e003      	b.n	80040bc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8272 	beq.w	80045aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
 80040ce:	e26c      	b.n	80045aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a43      	ldr	r2, [pc, #268]	; (80041e4 <HAL_DMA_IRQHandler+0xa48>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d022      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <HAL_DMA_IRQHandler+0xa4c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01d      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a40      	ldr	r2, [pc, #256]	; (80041ec <HAL_DMA_IRQHandler+0xa50>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d018      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <HAL_DMA_IRQHandler+0xa54>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3d      	ldr	r2, [pc, #244]	; (80041f4 <HAL_DMA_IRQHandler+0xa58>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <HAL_DMA_IRQHandler+0xa5c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a3a      	ldr	r2, [pc, #232]	; (80041fc <HAL_DMA_IRQHandler+0xa60>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_DMA_IRQHandler+0x984>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a39      	ldr	r2, [pc, #228]	; (8004200 <HAL_DMA_IRQHandler+0xa64>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <HAL_DMA_IRQHandler+0x988>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_DMA_IRQHandler+0x98a>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 823f 	beq.w	80045aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2204      	movs	r2, #4
 800413e:	409a      	lsls	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80cd 	beq.w	80042e4 <HAL_DMA_IRQHandler+0xb48>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80c7 	beq.w	80042e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2204      	movs	r2, #4
 8004160:	409a      	lsls	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d049      	beq.n	8004204 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 8210 	beq.w	80045a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800418c:	e20a      	b.n	80045a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8206 	beq.w	80045a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a0:	e200      	b.n	80045a4 <HAL_DMA_IRQHandler+0xe08>
 80041a2:	bf00      	nop
 80041a4:	40020010 	.word	0x40020010
 80041a8:	40020028 	.word	0x40020028
 80041ac:	40020040 	.word	0x40020040
 80041b0:	40020058 	.word	0x40020058
 80041b4:	40020070 	.word	0x40020070
 80041b8:	40020088 	.word	0x40020088
 80041bc:	400200a0 	.word	0x400200a0
 80041c0:	400200b8 	.word	0x400200b8
 80041c4:	40020410 	.word	0x40020410
 80041c8:	40020428 	.word	0x40020428
 80041cc:	40020440 	.word	0x40020440
 80041d0:	40020458 	.word	0x40020458
 80041d4:	40020470 	.word	0x40020470
 80041d8:	40020488 	.word	0x40020488
 80041dc:	400204a0 	.word	0x400204a0
 80041e0:	400204b8 	.word	0x400204b8
 80041e4:	58025408 	.word	0x58025408
 80041e8:	5802541c 	.word	0x5802541c
 80041ec:	58025430 	.word	0x58025430
 80041f0:	58025444 	.word	0x58025444
 80041f4:	58025458 	.word	0x58025458
 80041f8:	5802546c 	.word	0x5802546c
 80041fc:	58025480 	.word	0x58025480
 8004200:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d160      	bne.n	80042d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a8c      	ldr	r2, [pc, #560]	; (8004444 <HAL_DMA_IRQHandler+0xca8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04a      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a8a      	ldr	r2, [pc, #552]	; (8004448 <HAL_DMA_IRQHandler+0xcac>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d045      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a89      	ldr	r2, [pc, #548]	; (800444c <HAL_DMA_IRQHandler+0xcb0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a87      	ldr	r2, [pc, #540]	; (8004450 <HAL_DMA_IRQHandler+0xcb4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d03b      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a86      	ldr	r2, [pc, #536]	; (8004454 <HAL_DMA_IRQHandler+0xcb8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d036      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a84      	ldr	r2, [pc, #528]	; (8004458 <HAL_DMA_IRQHandler+0xcbc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a83      	ldr	r2, [pc, #524]	; (800445c <HAL_DMA_IRQHandler+0xcc0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d02c      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a81      	ldr	r2, [pc, #516]	; (8004460 <HAL_DMA_IRQHandler+0xcc4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d027      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a80      	ldr	r2, [pc, #512]	; (8004464 <HAL_DMA_IRQHandler+0xcc8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a7e      	ldr	r2, [pc, #504]	; (8004468 <HAL_DMA_IRQHandler+0xccc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7d      	ldr	r2, [pc, #500]	; (800446c <HAL_DMA_IRQHandler+0xcd0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7b      	ldr	r2, [pc, #492]	; (8004470 <HAL_DMA_IRQHandler+0xcd4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a7a      	ldr	r2, [pc, #488]	; (8004474 <HAL_DMA_IRQHandler+0xcd8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a78      	ldr	r2, [pc, #480]	; (8004478 <HAL_DMA_IRQHandler+0xcdc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a77      	ldr	r2, [pc, #476]	; (800447c <HAL_DMA_IRQHandler+0xce0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_DMA_IRQHandler+0xb12>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a75      	ldr	r2, [pc, #468]	; (8004480 <HAL_DMA_IRQHandler+0xce4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <HAL_DMA_IRQHandler+0xb24>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0208 	bic.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e007      	b.n	80042d0 <HAL_DMA_IRQHandler+0xb34>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8165 	beq.w	80045a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e2:	e15f      	b.n	80045a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2202      	movs	r2, #2
 80042ee:	409a      	lsls	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80c5 	beq.w	8004484 <HAL_DMA_IRQHandler+0xce8>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80bf 	beq.w	8004484 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2202      	movs	r2, #2
 8004310:	409a      	lsls	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d018      	beq.n	8004352 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 813a 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433c:	e134      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8130 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004350:	e12a      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d168      	bne.n	800442e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a38      	ldr	r2, [pc, #224]	; (8004444 <HAL_DMA_IRQHandler+0xca8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d04a      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a37      	ldr	r2, [pc, #220]	; (8004448 <HAL_DMA_IRQHandler+0xcac>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d045      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a35      	ldr	r2, [pc, #212]	; (800444c <HAL_DMA_IRQHandler+0xcb0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d040      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a34      	ldr	r2, [pc, #208]	; (8004450 <HAL_DMA_IRQHandler+0xcb4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d03b      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a32      	ldr	r2, [pc, #200]	; (8004454 <HAL_DMA_IRQHandler+0xcb8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d036      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_DMA_IRQHandler+0xcbc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d031      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2f      	ldr	r2, [pc, #188]	; (800445c <HAL_DMA_IRQHandler+0xcc0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02c      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2e      	ldr	r2, [pc, #184]	; (8004460 <HAL_DMA_IRQHandler+0xcc4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d027      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2c      	ldr	r2, [pc, #176]	; (8004464 <HAL_DMA_IRQHandler+0xcc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d022      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <HAL_DMA_IRQHandler+0xccc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d01d      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a29      	ldr	r2, [pc, #164]	; (800446c <HAL_DMA_IRQHandler+0xcd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d018      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a28      	ldr	r2, [pc, #160]	; (8004470 <HAL_DMA_IRQHandler+0xcd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <HAL_DMA_IRQHandler+0xcd8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a25      	ldr	r2, [pc, #148]	; (8004478 <HAL_DMA_IRQHandler+0xcdc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a23      	ldr	r2, [pc, #140]	; (800447c <HAL_DMA_IRQHandler+0xce0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_DMA_IRQHandler+0xc60>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a22      	ldr	r2, [pc, #136]	; (8004480 <HAL_DMA_IRQHandler+0xce4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d108      	bne.n	800440e <HAL_DMA_IRQHandler+0xc72>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0214 	bic.w	r2, r2, #20
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e007      	b.n	800441e <HAL_DMA_IRQHandler+0xc82>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 020a 	bic.w	r2, r2, #10
 800441c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80b8 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004440:	e0b2      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe0c>
 8004442:	bf00      	nop
 8004444:	40020010 	.word	0x40020010
 8004448:	40020028 	.word	0x40020028
 800444c:	40020040 	.word	0x40020040
 8004450:	40020058 	.word	0x40020058
 8004454:	40020070 	.word	0x40020070
 8004458:	40020088 	.word	0x40020088
 800445c:	400200a0 	.word	0x400200a0
 8004460:	400200b8 	.word	0x400200b8
 8004464:	40020410 	.word	0x40020410
 8004468:	40020428 	.word	0x40020428
 800446c:	40020440 	.word	0x40020440
 8004470:	40020458 	.word	0x40020458
 8004474:	40020470 	.word	0x40020470
 8004478:	40020488 	.word	0x40020488
 800447c:	400204a0 	.word	0x400204a0
 8004480:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2208      	movs	r2, #8
 800448e:	409a      	lsls	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8088 	beq.w	80045aa <HAL_DMA_IRQHandler+0xe0e>
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8082 	beq.w	80045aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a41      	ldr	r2, [pc, #260]	; (80045b0 <HAL_DMA_IRQHandler+0xe14>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04a      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3f      	ldr	r2, [pc, #252]	; (80045b4 <HAL_DMA_IRQHandler+0xe18>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d045      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3e      	ldr	r2, [pc, #248]	; (80045b8 <HAL_DMA_IRQHandler+0xe1c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d040      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <HAL_DMA_IRQHandler+0xe20>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <HAL_DMA_IRQHandler+0xe24>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d036      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a39      	ldr	r2, [pc, #228]	; (80045c4 <HAL_DMA_IRQHandler+0xe28>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d031      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <HAL_DMA_IRQHandler+0xe2c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d02c      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a36      	ldr	r2, [pc, #216]	; (80045cc <HAL_DMA_IRQHandler+0xe30>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a35      	ldr	r2, [pc, #212]	; (80045d0 <HAL_DMA_IRQHandler+0xe34>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a33      	ldr	r2, [pc, #204]	; (80045d4 <HAL_DMA_IRQHandler+0xe38>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a32      	ldr	r2, [pc, #200]	; (80045d8 <HAL_DMA_IRQHandler+0xe3c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <HAL_DMA_IRQHandler+0xe40>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <HAL_DMA_IRQHandler+0xe44>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <HAL_DMA_IRQHandler+0xe48>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <HAL_DMA_IRQHandler+0xe4c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_DMA_IRQHandler+0xdaa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2a      	ldr	r2, [pc, #168]	; (80045ec <HAL_DMA_IRQHandler+0xe50>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <HAL_DMA_IRQHandler+0xdbc>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 021c 	bic.w	r2, r2, #28
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e007      	b.n	8004568 <HAL_DMA_IRQHandler+0xdcc>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 020e 	bic.w	r2, r2, #14
 8004566:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	2201      	movs	r2, #1
 8004572:	409a      	lsls	r2, r3
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
 800459e:	e004      	b.n	80045aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045a0:	bf00      	nop
 80045a2:	e002      	b.n	80045aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40020010 	.word	0x40020010
 80045b4:	40020028 	.word	0x40020028
 80045b8:	40020040 	.word	0x40020040
 80045bc:	40020058 	.word	0x40020058
 80045c0:	40020070 	.word	0x40020070
 80045c4:	40020088 	.word	0x40020088
 80045c8:	400200a0 	.word	0x400200a0
 80045cc:	400200b8 	.word	0x400200b8
 80045d0:	40020410 	.word	0x40020410
 80045d4:	40020428 	.word	0x40020428
 80045d8:	40020440 	.word	0x40020440
 80045dc:	40020458 	.word	0x40020458
 80045e0:	40020470 	.word	0x40020470
 80045e4:	40020488 	.word	0x40020488
 80045e8:	400204a0 	.word	0x400204a0
 80045ec:	400204b8 	.word	0x400204b8

080045f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a84      	ldr	r2, [pc, #528]	; (8004820 <DMA_SetConfig+0x230>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d072      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a82      	ldr	r2, [pc, #520]	; (8004824 <DMA_SetConfig+0x234>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d06d      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a81      	ldr	r2, [pc, #516]	; (8004828 <DMA_SetConfig+0x238>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d068      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a7f      	ldr	r2, [pc, #508]	; (800482c <DMA_SetConfig+0x23c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d063      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7e      	ldr	r2, [pc, #504]	; (8004830 <DMA_SetConfig+0x240>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d05e      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7c      	ldr	r2, [pc, #496]	; (8004834 <DMA_SetConfig+0x244>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d059      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7b      	ldr	r2, [pc, #492]	; (8004838 <DMA_SetConfig+0x248>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d054      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a79      	ldr	r2, [pc, #484]	; (800483c <DMA_SetConfig+0x24c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d04f      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a78      	ldr	r2, [pc, #480]	; (8004840 <DMA_SetConfig+0x250>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d04a      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a76      	ldr	r2, [pc, #472]	; (8004844 <DMA_SetConfig+0x254>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d045      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a75      	ldr	r2, [pc, #468]	; (8004848 <DMA_SetConfig+0x258>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d040      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a73      	ldr	r2, [pc, #460]	; (800484c <DMA_SetConfig+0x25c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d03b      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a72      	ldr	r2, [pc, #456]	; (8004850 <DMA_SetConfig+0x260>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d036      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a70      	ldr	r2, [pc, #448]	; (8004854 <DMA_SetConfig+0x264>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d031      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6f      	ldr	r2, [pc, #444]	; (8004858 <DMA_SetConfig+0x268>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d02c      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a6d      	ldr	r2, [pc, #436]	; (800485c <DMA_SetConfig+0x26c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d027      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6c      	ldr	r2, [pc, #432]	; (8004860 <DMA_SetConfig+0x270>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d022      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <DMA_SetConfig+0x274>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a69      	ldr	r2, [pc, #420]	; (8004868 <DMA_SetConfig+0x278>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a67      	ldr	r2, [pc, #412]	; (800486c <DMA_SetConfig+0x27c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a66      	ldr	r2, [pc, #408]	; (8004870 <DMA_SetConfig+0x280>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a64      	ldr	r2, [pc, #400]	; (8004874 <DMA_SetConfig+0x284>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a63      	ldr	r2, [pc, #396]	; (8004878 <DMA_SetConfig+0x288>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a61      	ldr	r2, [pc, #388]	; (800487c <DMA_SetConfig+0x28c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <DMA_SetConfig+0x10e>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <DMA_SetConfig+0x110>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800470c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800471e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a3e      	ldr	r2, [pc, #248]	; (8004820 <DMA_SetConfig+0x230>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04a      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3d      	ldr	r2, [pc, #244]	; (8004824 <DMA_SetConfig+0x234>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d045      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3b      	ldr	r2, [pc, #236]	; (8004828 <DMA_SetConfig+0x238>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d040      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3a      	ldr	r2, [pc, #232]	; (800482c <DMA_SetConfig+0x23c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d03b      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a38      	ldr	r2, [pc, #224]	; (8004830 <DMA_SetConfig+0x240>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d036      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <DMA_SetConfig+0x244>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d031      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a35      	ldr	r2, [pc, #212]	; (8004838 <DMA_SetConfig+0x248>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d02c      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a34      	ldr	r2, [pc, #208]	; (800483c <DMA_SetConfig+0x24c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d027      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a32      	ldr	r2, [pc, #200]	; (8004840 <DMA_SetConfig+0x250>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a31      	ldr	r2, [pc, #196]	; (8004844 <DMA_SetConfig+0x254>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d01d      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <DMA_SetConfig+0x258>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2e      	ldr	r2, [pc, #184]	; (800484c <DMA_SetConfig+0x25c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2c      	ldr	r2, [pc, #176]	; (8004850 <DMA_SetConfig+0x260>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2b      	ldr	r2, [pc, #172]	; (8004854 <DMA_SetConfig+0x264>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a29      	ldr	r2, [pc, #164]	; (8004858 <DMA_SetConfig+0x268>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a28      	ldr	r2, [pc, #160]	; (800485c <DMA_SetConfig+0x26c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <DMA_SetConfig+0x1d4>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <DMA_SetConfig+0x1d6>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d05a      	beq.n	8004880 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	223f      	movs	r2, #63	; 0x3f
 80047d4:	409a      	lsls	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d108      	bne.n	800480c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800480a:	e087      	b.n	800491c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
}
 800481c:	e07e      	b.n	800491c <DMA_SetConfig+0x32c>
 800481e:	bf00      	nop
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8
 8004860:	58025408 	.word	0x58025408
 8004864:	5802541c 	.word	0x5802541c
 8004868:	58025430 	.word	0x58025430
 800486c:	58025444 	.word	0x58025444
 8004870:	58025458 	.word	0x58025458
 8004874:	5802546c 	.word	0x5802546c
 8004878:	58025480 	.word	0x58025480
 800487c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <DMA_SetConfig+0x338>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d022      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a27      	ldr	r2, [pc, #156]	; (800492c <DMA_SetConfig+0x33c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01d      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <DMA_SetConfig+0x340>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a24      	ldr	r2, [pc, #144]	; (8004934 <DMA_SetConfig+0x344>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a22      	ldr	r2, [pc, #136]	; (8004938 <DMA_SetConfig+0x348>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a21      	ldr	r2, [pc, #132]	; (800493c <DMA_SetConfig+0x34c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <DMA_SetConfig+0x350>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <DMA_SetConfig+0x2e0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <DMA_SetConfig+0x354>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d101      	bne.n	80048d4 <DMA_SetConfig+0x2e4>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <DMA_SetConfig+0x2e6>
 80048d4:	2300      	movs	r3, #0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2201      	movs	r2, #1
 80048e4:	409a      	lsls	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d108      	bne.n	800490c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	60da      	str	r2, [r3, #12]
}
 800490a:	e007      	b.n	800491c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	58025408 	.word	0x58025408
 800492c:	5802541c 	.word	0x5802541c
 8004930:	58025430 	.word	0x58025430
 8004934:	58025444 	.word	0x58025444
 8004938:	58025458 	.word	0x58025458
 800493c:	5802546c 	.word	0x5802546c
 8004940:	58025480 	.word	0x58025480
 8004944:	58025494 	.word	0x58025494

08004948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a42      	ldr	r2, [pc, #264]	; (8004a60 <DMA_CalcBaseAndBitshift+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d04a      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a41      	ldr	r2, [pc, #260]	; (8004a64 <DMA_CalcBaseAndBitshift+0x11c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d045      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a3f      	ldr	r2, [pc, #252]	; (8004a68 <DMA_CalcBaseAndBitshift+0x120>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d040      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a3e      	ldr	r2, [pc, #248]	; (8004a6c <DMA_CalcBaseAndBitshift+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d03b      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <DMA_CalcBaseAndBitshift+0x128>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d036      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <DMA_CalcBaseAndBitshift+0x12c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d031      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a39      	ldr	r2, [pc, #228]	; (8004a78 <DMA_CalcBaseAndBitshift+0x130>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02c      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <DMA_CalcBaseAndBitshift+0x134>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d027      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <DMA_CalcBaseAndBitshift+0x138>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a35      	ldr	r2, [pc, #212]	; (8004a84 <DMA_CalcBaseAndBitshift+0x13c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a33      	ldr	r2, [pc, #204]	; (8004a88 <DMA_CalcBaseAndBitshift+0x140>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a32      	ldr	r2, [pc, #200]	; (8004a8c <DMA_CalcBaseAndBitshift+0x144>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <DMA_CalcBaseAndBitshift+0x148>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <DMA_CalcBaseAndBitshift+0x14c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2d      	ldr	r2, [pc, #180]	; (8004a98 <DMA_CalcBaseAndBitshift+0x150>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2c      	ldr	r2, [pc, #176]	; (8004a9c <DMA_CalcBaseAndBitshift+0x154>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <DMA_CalcBaseAndBitshift+0xac>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <DMA_CalcBaseAndBitshift+0xae>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d024      	beq.n	8004a44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	3b10      	subs	r3, #16
 8004a02:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x158>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	4a24      	ldr	r2, [pc, #144]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	461a      	mov	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d908      	bls.n	8004a34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	4b1f      	ldr	r3, [pc, #124]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	659a      	str	r2, [r3, #88]	; 0x58
 8004a32:	e00d      	b.n	8004a50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
 8004a42:	e005      	b.n	8004a50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40020010 	.word	0x40020010
 8004a64:	40020028 	.word	0x40020028
 8004a68:	40020040 	.word	0x40020040
 8004a6c:	40020058 	.word	0x40020058
 8004a70:	40020070 	.word	0x40020070
 8004a74:	40020088 	.word	0x40020088
 8004a78:	400200a0 	.word	0x400200a0
 8004a7c:	400200b8 	.word	0x400200b8
 8004a80:	40020410 	.word	0x40020410
 8004a84:	40020428 	.word	0x40020428
 8004a88:	40020440 	.word	0x40020440
 8004a8c:	40020458 	.word	0x40020458
 8004a90:	40020470 	.word	0x40020470
 8004a94:	40020488 	.word	0x40020488
 8004a98:	400204a0 	.word	0x400204a0
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	aaaaaaab 	.word	0xaaaaaaab
 8004aa4:	080099dc 	.word	0x080099dc
 8004aa8:	fffffc00 	.word	0xfffffc00

08004aac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d120      	bne.n	8004b02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d858      	bhi.n	8004b7a <DMA_CheckFifoParam+0xce>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <DMA_CheckFifoParam+0x24>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af3 	.word	0x08004af3
 8004ad8:	08004ae1 	.word	0x08004ae1
 8004adc:	08004b7b 	.word	0x08004b7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d048      	beq.n	8004b7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af0:	e045      	b.n	8004b7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004afa:	d142      	bne.n	8004b82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b00:	e03f      	b.n	8004b82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	d123      	bne.n	8004b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d838      	bhi.n	8004b86 <DMA_CheckFifoParam+0xda>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <DMA_CheckFifoParam+0x70>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b33 	.word	0x08004b33
 8004b24:	08004b2d 	.word	0x08004b2d
 8004b28:	08004b45 	.word	0x08004b45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b30:	e030      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d025      	beq.n	8004b8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b42:	e022      	b.n	8004b8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4c:	d11f      	bne.n	8004b8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b52:	e01c      	b.n	8004b8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d902      	bls.n	8004b62 <DMA_CheckFifoParam+0xb6>
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b60:	e018      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
        break;
 8004b66:	e015      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
    break;
 8004b78:	e00b      	b.n	8004b92 <DMA_CheckFifoParam+0xe6>
        break;
 8004b7a:	bf00      	nop
 8004b7c:	e00a      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e008      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b82:	bf00      	nop
 8004b84:	e006      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
    break;
 8004b92:	bf00      	nop
    }
  }

  return status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a33      	ldr	r2, [pc, #204]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b08      	subs	r3, #8
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2201      	movs	r2, #1
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c40:	e024      	b.n	8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	3b10      	subs	r3, #16
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d806      	bhi.n	8004c6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d902      	bls.n	8004c6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3308      	adds	r3, #8
 8004c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	58025408 	.word	0x58025408
 8004c9c:	5802541c 	.word	0x5802541c
 8004ca0:	58025430 	.word	0x58025430
 8004ca4:	58025444 	.word	0x58025444
 8004ca8:	58025458 	.word	0x58025458
 8004cac:	5802546c 	.word	0x5802546c
 8004cb0:	58025480 	.word	0x58025480
 8004cb4:	58025494 	.word	0x58025494
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	16009600 	.word	0x16009600
 8004cc0:	58025880 	.word	0x58025880
 8004cc4:	aaaaaaab 	.word	0xaaaaaaab
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	4002040f 	.word	0x4002040f
 8004cd0:	10008200 	.word	0x10008200
 8004cd4:	40020880 	.word	0x40020880

08004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d04a      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d847      	bhi.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d022      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d018      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d60:	671a      	str	r2, [r3, #112]	; 0x70
 8004d62:	e009      	b.n	8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d76:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	58025408 	.word	0x58025408
 8004d94:	5802541c 	.word	0x5802541c
 8004d98:	58025430 	.word	0x58025430
 8004d9c:	58025444 	.word	0x58025444
 8004da0:	58025458 	.word	0x58025458
 8004da4:	5802546c 	.word	0x5802546c
 8004da8:	58025480 	.word	0x58025480
 8004dac:	58025494 	.word	0x58025494
 8004db0:	1600963f 	.word	0x1600963f
 8004db4:	58025940 	.word	0x58025940
 8004db8:	1000823f 	.word	0x1000823f
 8004dbc:	40020940 	.word	0x40020940

08004dc0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e00a      	b.n	8004df2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004ddc:	7afb      	ldrb	r3, [r7, #11]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	605a      	str	r2, [r3, #4]
      break;
 8004de8:	e002      	b.n	8004df0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
      break;
 8004dee:	bf00      	nop
  }

  return status;
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e003      	b.n	8004e1a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e18:	2300      	movs	r3, #0
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e36:	4b89      	ldr	r3, [pc, #548]	; (800505c <HAL_GPIO_Init+0x234>)
 8004e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e3a:	e194      	b.n	8005166 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	2101      	movs	r1, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8186 	beq.w	8005160 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00b      	beq.n	8004e74 <HAL_GPIO_Init+0x4c>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d007      	beq.n	8004e74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e68:	2b11      	cmp	r3, #17
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b12      	cmp	r3, #18
 8004e72:	d130      	bne.n	8004ed6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eaa:	2201      	movs	r2, #1
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 0201 	and.w	r2, r3, #1
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_Init+0xee>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b12      	cmp	r3, #18
 8004f14:	d123      	bne.n	8004f5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	220f      	movs	r2, #15
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	08da      	lsrs	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3208      	adds	r2, #8
 8004f58:	69b9      	ldr	r1, [r7, #24]
 8004f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	2203      	movs	r2, #3
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0203 	and.w	r2, r3, #3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80e0 	beq.w	8005160 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa0:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <HAL_GPIO_Init+0x238>)
 8004fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fa6:	4a2e      	ldr	r2, [pc, #184]	; (8005060 <HAL_GPIO_Init+0x238>)
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_GPIO_Init+0x238>)
 8004fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fbe:	4a29      	ldr	r2, [pc, #164]	; (8005064 <HAL_GPIO_Init+0x23c>)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	220f      	movs	r2, #15
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <HAL_GPIO_Init+0x240>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d052      	beq.n	8005090 <HAL_GPIO_Init+0x268>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_GPIO_Init+0x244>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d031      	beq.n	8005056 <HAL_GPIO_Init+0x22e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_GPIO_Init+0x248>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d02b      	beq.n	8005052 <HAL_GPIO_Init+0x22a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <HAL_GPIO_Init+0x24c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d025      	beq.n	800504e <HAL_GPIO_Init+0x226>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <HAL_GPIO_Init+0x250>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01f      	beq.n	800504a <HAL_GPIO_Init+0x222>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1b      	ldr	r2, [pc, #108]	; (800507c <HAL_GPIO_Init+0x254>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d019      	beq.n	8005046 <HAL_GPIO_Init+0x21e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <HAL_GPIO_Init+0x258>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_GPIO_Init+0x21a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_GPIO_Init+0x25c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00d      	beq.n	800503e <HAL_GPIO_Init+0x216>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_GPIO_Init+0x260>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <HAL_GPIO_Init+0x212>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a17      	ldr	r2, [pc, #92]	; (800508c <HAL_GPIO_Init+0x264>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d101      	bne.n	8005036 <HAL_GPIO_Init+0x20e>
 8005032:	2309      	movs	r3, #9
 8005034:	e02d      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 8005036:	230a      	movs	r3, #10
 8005038:	e02b      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 800503a:	2308      	movs	r3, #8
 800503c:	e029      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 800503e:	2307      	movs	r3, #7
 8005040:	e027      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 8005042:	2306      	movs	r3, #6
 8005044:	e025      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 8005046:	2305      	movs	r3, #5
 8005048:	e023      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 800504a:	2304      	movs	r3, #4
 800504c:	e021      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 800504e:	2303      	movs	r3, #3
 8005050:	e01f      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 8005052:	2302      	movs	r3, #2
 8005054:	e01d      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 8005056:	2301      	movs	r3, #1
 8005058:	e01b      	b.n	8005092 <HAL_GPIO_Init+0x26a>
 800505a:	bf00      	nop
 800505c:	58000080 	.word	0x58000080
 8005060:	58024400 	.word	0x58024400
 8005064:	58000400 	.word	0x58000400
 8005068:	58020000 	.word	0x58020000
 800506c:	58020400 	.word	0x58020400
 8005070:	58020800 	.word	0x58020800
 8005074:	58020c00 	.word	0x58020c00
 8005078:	58021000 	.word	0x58021000
 800507c:	58021400 	.word	0x58021400
 8005080:	58021800 	.word	0x58021800
 8005084:	58021c00 	.word	0x58021c00
 8005088:	58022000 	.word	0x58022000
 800508c:	58022400 	.word	0x58022400
 8005090:	2300      	movs	r3, #0
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	f002 0203 	and.w	r2, r2, #3
 8005098:	0092      	lsls	r2, r2, #2
 800509a:	4093      	lsls	r3, r2
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a2:	4938      	ldr	r1, [pc, #224]	; (8005184 <HAL_GPIO_Init+0x35c>)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	3302      	adds	r3, #2
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4013      	ands	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800512a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f ae63 	bne.w	8004e3c <HAL_GPIO_Init+0x14>
  }
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	3724      	adds	r7, #36	; 0x24
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	58000400 	.word	0x58000400

08005188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
 8005194:	4613      	mov	r3, r2
 8005196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005198:	787b      	ldrb	r3, [r7, #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051a4:	e003      	b.n	80051ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	041a      	lsls	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	619a      	str	r2, [r3, #24]
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	041a      	lsls	r2, r3, #16
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	400b      	ands	r3, r1
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	619a      	str	r2, [r3, #24]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	4603      	mov	r3, r0
 80051f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb fe87 	bl	8000f28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_PWREx_ConfigSupply+0x70>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d00a      	beq.n	800524e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <HAL_PWREx_ConfigSupply+0x70>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e01f      	b.n	800528a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e01d      	b.n	800528a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_PWREx_ConfigSupply+0x70>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f023 0207 	bic.w	r2, r3, #7
 8005256:	490f      	ldr	r1, [pc, #60]	; (8005294 <HAL_PWREx_ConfigSupply+0x70>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4313      	orrs	r3, r2
 800525c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800525e:	f7fc fcc7 	bl	8001bf0 <HAL_GetTick>
 8005262:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005264:	e009      	b.n	800527a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005266:	f7fc fcc3 	bl	8001bf0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005274:	d901      	bls.n	800527a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e007      	b.n	800528a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_PWREx_ConfigSupply+0x70>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	d1ee      	bne.n	8005266 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	58024800 	.word	0x58024800

08005298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e3ff      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8087 	beq.w	80053c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b8:	4b99      	ldr	r3, [pc, #612]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052c2:	4b97      	ldr	r3, [pc, #604]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d007      	beq.n	80052de <HAL_RCC_OscConfig+0x46>
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b18      	cmp	r3, #24
 80052d2:	d110      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5e>
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d10b      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052de:	4b90      	ldr	r3, [pc, #576]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d06c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x12c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d168      	bne.n	80053c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e3d9      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x76>
 8005300:	4b87      	ldr	r3, [pc, #540]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a86      	ldr	r2, [pc, #536]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e02e      	b.n	800536c <HAL_RCC_OscConfig+0xd4>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x98>
 8005316:	4b82      	ldr	r3, [pc, #520]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a81      	ldr	r2, [pc, #516]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a7e      	ldr	r2, [pc, #504]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e01d      	b.n	800536c <HAL_RCC_OscConfig+0xd4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005338:	d10c      	bne.n	8005354 <HAL_RCC_OscConfig+0xbc>
 800533a:	4b79      	ldr	r3, [pc, #484]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a78      	ldr	r2, [pc, #480]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e00b      	b.n	800536c <HAL_RCC_OscConfig+0xd4>
 8005354:	4b72      	ldr	r3, [pc, #456]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a71      	ldr	r2, [pc, #452]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800535a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6e      	ldr	r2, [pc, #440]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc fc3c 	bl	8001bf0 <HAL_GetTick>
 8005378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537c:	f7fc fc38 	bl	8001bf0 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e38d      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538e:	4b64      	ldr	r3, [pc, #400]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0xe4>
 800539a:	e014      	b.n	80053c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fc fc28 	bl	8001bf0 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fc fc24 	bl	8001bf0 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e379      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b6:	4b5a      	ldr	r3, [pc, #360]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x10c>
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80ae 	beq.w	8005530 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d4:	4b52      	ldr	r3, [pc, #328]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053de:	4b50      	ldr	r3, [pc, #320]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_RCC_OscConfig+0x162>
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	2b18      	cmp	r3, #24
 80053ee:	d13a      	bne.n	8005466 <HAL_RCC_OscConfig+0x1ce>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d135      	bne.n	8005466 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x17a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e34b      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005412:	f7fc fc1d 	bl	8001c50 <HAL_GetREVID>
 8005416:	4603      	mov	r3, r0
 8005418:	f241 0203 	movw	r2, #4099	; 0x1003
 800541c:	4293      	cmp	r3, r2
 800541e:	d817      	bhi.n	8005450 <HAL_RCC_OscConfig+0x1b8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d108      	bne.n	800543a <HAL_RCC_OscConfig+0x1a2>
 8005428:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005430:	4a3b      	ldr	r2, [pc, #236]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005436:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005438:	e07a      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	031b      	lsls	r3, r3, #12
 8005448:	4935      	ldr	r1, [pc, #212]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800544a:	4313      	orrs	r3, r2
 800544c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544e:	e06f      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	4930      	ldr	r1, [pc, #192]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005464:	e064      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d045      	beq.n	80054fa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0219 	bic.w	r2, r3, #25
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4929      	ldr	r1, [pc, #164]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc fbb6 	bl	8001bf0 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005488:	f7fc fbb2 	bl	8001bf0 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e307      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549a:	4b21      	ldr	r3, [pc, #132]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	f7fc fbd3 	bl	8001c50 <HAL_GetREVID>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d817      	bhi.n	80054e4 <HAL_RCC_OscConfig+0x24c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d108      	bne.n	80054ce <HAL_RCC_OscConfig+0x236>
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054c4:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ca:	6053      	str	r3, [r2, #4]
 80054cc:	e030      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	031b      	lsls	r3, r3, #12
 80054dc:	4910      	ldr	r1, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	604b      	str	r3, [r1, #4]
 80054e2:	e025      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
 80054e4:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	490b      	ldr	r1, [pc, #44]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	e01a      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fc fb73 	bl	8001bf0 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800550c:	e00a      	b.n	8005524 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550e:	f7fc fb6f 	bl	8001bf0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d903      	bls.n	8005524 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e2c4      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
 8005520:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005524:	4ba4      	ldr	r3, [pc, #656]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ee      	bne.n	800550e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a9 	beq.w	8005690 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553e:	4b9e      	ldr	r3, [pc, #632]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005548:	4b9b      	ldr	r3, [pc, #620]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d007      	beq.n	8005564 <HAL_RCC_OscConfig+0x2cc>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b18      	cmp	r3, #24
 8005558:	d13a      	bne.n	80055d0 <HAL_RCC_OscConfig+0x338>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d135      	bne.n	80055d0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005564:	4b94      	ldr	r3, [pc, #592]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_OscConfig+0x2e4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d001      	beq.n	800557c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e296      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800557c:	f7fc fb68 	bl	8001c50 <HAL_GetREVID>
 8005580:	4603      	mov	r3, r0
 8005582:	f241 0203 	movw	r2, #4099	; 0x1003
 8005586:	4293      	cmp	r3, r2
 8005588:	d817      	bhi.n	80055ba <HAL_RCC_OscConfig+0x322>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	2b20      	cmp	r3, #32
 8005590:	d108      	bne.n	80055a4 <HAL_RCC_OscConfig+0x30c>
 8005592:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800559a:	4a87      	ldr	r2, [pc, #540]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800559c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055a2:	e075      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055a4:	4b84      	ldr	r3, [pc, #528]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	069b      	lsls	r3, r3, #26
 80055b2:	4981      	ldr	r1, [pc, #516]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b8:	e06a      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ba:	4b7f      	ldr	r3, [pc, #508]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	497b      	ldr	r1, [pc, #492]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ce:	e05f      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d042      	beq.n	800565e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055d8:	4b77      	ldr	r3, [pc, #476]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a76      	ldr	r2, [pc, #472]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fc fb04 	bl	8001bf0 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055ec:	f7fc fb00 	bl	8001bf0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e255      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055fe:	4b6e      	ldr	r3, [pc, #440]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800560a:	f7fc fb21 	bl	8001c50 <HAL_GetREVID>
 800560e:	4603      	mov	r3, r0
 8005610:	f241 0203 	movw	r2, #4099	; 0x1003
 8005614:	4293      	cmp	r3, r2
 8005616:	d817      	bhi.n	8005648 <HAL_RCC_OscConfig+0x3b0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	2b20      	cmp	r3, #32
 800561e:	d108      	bne.n	8005632 <HAL_RCC_OscConfig+0x39a>
 8005620:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005628:	4a63      	ldr	r2, [pc, #396]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800562a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562e:	6053      	str	r3, [r2, #4]
 8005630:	e02e      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
 8005632:	4b61      	ldr	r3, [pc, #388]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	069b      	lsls	r3, r3, #26
 8005640:	495d      	ldr	r1, [pc, #372]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
 8005646:	e023      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
 8005648:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	4958      	ldr	r1, [pc, #352]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005658:	4313      	orrs	r3, r2
 800565a:	60cb      	str	r3, [r1, #12]
 800565c:	e018      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800565e:	4b56      	ldr	r3, [pc, #344]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a55      	ldr	r2, [pc, #340]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fc fac1 	bl	8001bf0 <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005672:	f7fc fabd 	bl	8001bf0 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e212      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005684:	4b4c      	ldr	r3, [pc, #304]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d036      	beq.n	800570a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a4:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a8:	4a43      	ldr	r2, [pc, #268]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fc fa9e 	bl	8001bf0 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fc fa9a 	bl	8001bf0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1ef      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x420>
 80056d6:	e018      	b.n	800570a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d8:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fc fa84 	bl	8001bf0 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ec:	f7fc fa80 	bl	8001bf0 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1d5      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d036      	beq.n	8005784 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d019      	beq.n	8005752 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005728:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800572a:	f7fc fa61 	bl	8001bf0 <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005732:	f7fc fa5d 	bl	8001bf0 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1b2      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x49a>
 8005750:	e018      	b.n	8005784 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005752:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800575e:	f7fc fa47 	bl	8001bf0 <HAL_GetTick>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005766:	f7fc fa43 	bl	8001bf0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e198      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8085 	beq.w	800589c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_RCC_OscConfig+0x524>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <HAL_RCC_OscConfig+0x524>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800579e:	f7fc fa27 	bl	8001bf0 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057a4:	e00c      	b.n	80057c0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a6:	f7fc fa23 	bl	8001bf0 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b64      	cmp	r3, #100	; 0x64
 80057b2:	d905      	bls.n	80057c0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e178      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
 80057b8:	58024400 	.word	0x58024400
 80057bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c0:	4b96      	ldr	r3, [pc, #600]	; (8005a1c <HAL_RCC_OscConfig+0x784>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ec      	beq.n	80057a6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x54a>
 80057d4:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a91      	ldr	r2, [pc, #580]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
 80057e0:	e02d      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x56c>
 80057ea:	4b8d      	ldr	r3, [pc, #564]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a8c      	ldr	r2, [pc, #560]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a89      	ldr	r2, [pc, #548]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
 8005802:	e01c      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b05      	cmp	r3, #5
 800580a:	d10c      	bne.n	8005826 <HAL_RCC_OscConfig+0x58e>
 800580c:	4b84      	ldr	r3, [pc, #528]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a83      	ldr	r2, [pc, #524]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005812:	f043 0304 	orr.w	r3, r3, #4
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
 8005818:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	e00b      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
 8005826:	4b7e      	ldr	r3, [pc, #504]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	4a7d      	ldr	r2, [pc, #500]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
 8005832:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a7a      	ldr	r2, [pc, #488]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d015      	beq.n	8005872 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fc f9d3 	bl	8001bf0 <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fc f9cf 	bl	8001bf0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	; 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e122      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005864:	4b6e      	ldr	r3, [pc, #440]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ee      	beq.n	800584e <HAL_RCC_OscConfig+0x5b6>
 8005870:	e014      	b.n	800589c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fc f9bd 	bl	8001bf0 <HAL_GetTick>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005878:	e00a      	b.n	8005890 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fc f9b9 	bl	8001bf0 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e10c      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005890:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ee      	bne.n	800587a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8101 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058a6:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ae:	2b18      	cmp	r3, #24
 80058b0:	f000 80bc 	beq.w	8005a2c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f040 8095 	bne.w	80059e8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058be:	4b58      	ldr	r3, [pc, #352]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a57      	ldr	r2, [pc, #348]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fc f991 	bl	8001bf0 <HAL_GetTick>
 80058ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fc f98d 	bl	8001bf0 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0e2      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e4:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f0:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f4:	4b4b      	ldr	r3, [pc, #300]	; (8005a24 <HAL_RCC_OscConfig+0x78c>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005900:	0112      	lsls	r2, r2, #4
 8005902:	430a      	orrs	r2, r1
 8005904:	4946      	ldr	r1, [pc, #280]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005906:	4313      	orrs	r3, r2
 8005908:	628b      	str	r3, [r1, #40]	; 0x28
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	3b01      	subs	r3, #1
 8005910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	3b01      	subs	r3, #1
 800591a:	025b      	lsls	r3, r3, #9
 800591c:	b29b      	uxth	r3, r3
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	3b01      	subs	r3, #1
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	3b01      	subs	r3, #1
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800593a:	4939      	ldr	r1, [pc, #228]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800593c:	4313      	orrs	r3, r2
 800593e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005940:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a36      	ldr	r2, [pc, #216]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800594c:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800594e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005950:	4b35      	ldr	r3, [pc, #212]	; (8005a28 <HAL_RCC_OscConfig+0x790>)
 8005952:	4013      	ands	r3, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005958:	00d2      	lsls	r2, r2, #3
 800595a:	4931      	ldr	r1, [pc, #196]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800595c:	4313      	orrs	r3, r2
 800595e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f023 020c 	bic.w	r2, r3, #12
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	492c      	ldr	r1, [pc, #176]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800596e:	4313      	orrs	r3, r2
 8005970:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005972:	4b2b      	ldr	r3, [pc, #172]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	f023 0202 	bic.w	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	4928      	ldr	r1, [pc, #160]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005980:	4313      	orrs	r3, r2
 8005982:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800598a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fc f916 	bl	8001bf0 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fc f912 	bl	8001bf0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e067      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x730>
 80059e6:	e05f      	b.n	8005aa8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fc f8fc 	bl	8001bf0 <HAL_GetTick>
 80059f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fc f8f8 	bl	8001bf0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e04d      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x764>
 8005a1a:	e045      	b.n	8005aa8 <HAL_RCC_OscConfig+0x810>
 8005a1c:	58024800 	.word	0x58024800
 8005a20:	58024400 	.word	0x58024400
 8005a24:	fffffc0c 	.word	0xfffffc0c
 8005a28:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a2c:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <HAL_RCC_OscConfig+0x81c>)
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <HAL_RCC_OscConfig+0x81c>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d031      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f003 0203 	and.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d12a      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d122      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d11a      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	0a5b      	lsrs	r3, r3, #9
 8005a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d111      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d108      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	0e1b      	lsrs	r3, r3, #24
 8005a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3730      	adds	r7, #48	; 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400

08005ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e19c      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005acc:	4b8a      	ldr	r3, [pc, #552]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d910      	bls.n	8005afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b87      	ldr	r3, [pc, #540]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 020f 	bic.w	r2, r3, #15
 8005ae2:	4985      	ldr	r1, [pc, #532]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b83      	ldr	r3, [pc, #524]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e184      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d908      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b18:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	4975      	ldr	r1, [pc, #468]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d010      	beq.n	8005b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	4b70      	ldr	r3, [pc, #448]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d908      	bls.n	8005b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b46:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	496a      	ldr	r1, [pc, #424]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	4b64      	ldr	r3, [pc, #400]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d908      	bls.n	8005b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b74:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	495e      	ldr	r1, [pc, #376]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d908      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ba2:	4b56      	ldr	r3, [pc, #344]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4953      	ldr	r1, [pc, #332]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d908      	bls.n	8005be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd0:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f023 020f 	bic.w	r2, r3, #15
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4947      	ldr	r1, [pc, #284]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d055      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4940      	ldr	r1, [pc, #256]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c08:	4b3c      	ldr	r3, [pc, #240]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d121      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0f6      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d115      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0ea      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c38:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0de      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c48:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0d6      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c58:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f023 0207 	bic.w	r2, r3, #7
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4925      	ldr	r1, [pc, #148]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6a:	f7fb ffc1 	bl	8001bf0 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c72:	f7fb ffbd 	bl	8001bf0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e0be      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d1eb      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d010      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d208      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f023 020f 	bic.w	r2, r3, #15
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	490e      	ldr	r1, [pc, #56]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d214      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e086      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
 8005cf8:	52002000 	.word	0x52002000
 8005cfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d010      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d208      	bcs.n	8005d2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d1c:	4b3c      	ldr	r3, [pc, #240]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	4939      	ldr	r1, [pc, #228]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d010      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d208      	bcs.n	8005d5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	492e      	ldr	r1, [pc, #184]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d010      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d208      	bcs.n	8005d8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4922      	ldr	r1, [pc, #136]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d010      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d208      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4917      	ldr	r1, [pc, #92]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005db8:	f000 f834 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	4912      	ldr	r1, [pc, #72]	; (8005e14 <HAL_RCC_ClockConfig+0x35c>)
 8005dca:	5ccb      	ldrb	r3, [r1, r3]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	4a0d      	ldr	r2, [pc, #52]	; (8005e14 <HAL_RCC_ClockConfig+0x35c>)
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <HAL_RCC_ClockConfig+0x360>)
 8005dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <HAL_RCC_ClockConfig+0x364>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <HAL_RCC_ClockConfig+0x368>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fb feae 	bl	8001b5c <HAL_InitTick>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	080099cc 	.word	0x080099cc
 8005e18:	2400001c 	.word	0x2400001c
 8005e1c:	24000018 	.word	0x24000018
 8005e20:	24000020 	.word	0x24000020

08005e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2a:	4bb3      	ldr	r3, [pc, #716]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e32:	2b18      	cmp	r3, #24
 8005e34:	f200 8155 	bhi.w	80060e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005ea5 	.word	0x08005ea5
 8005e44:	080060e3 	.word	0x080060e3
 8005e48:	080060e3 	.word	0x080060e3
 8005e4c:	080060e3 	.word	0x080060e3
 8005e50:	080060e3 	.word	0x080060e3
 8005e54:	080060e3 	.word	0x080060e3
 8005e58:	080060e3 	.word	0x080060e3
 8005e5c:	080060e3 	.word	0x080060e3
 8005e60:	08005ecb 	.word	0x08005ecb
 8005e64:	080060e3 	.word	0x080060e3
 8005e68:	080060e3 	.word	0x080060e3
 8005e6c:	080060e3 	.word	0x080060e3
 8005e70:	080060e3 	.word	0x080060e3
 8005e74:	080060e3 	.word	0x080060e3
 8005e78:	080060e3 	.word	0x080060e3
 8005e7c:	080060e3 	.word	0x080060e3
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	080060e3 	.word	0x080060e3
 8005e88:	080060e3 	.word	0x080060e3
 8005e8c:	080060e3 	.word	0x080060e3
 8005e90:	080060e3 	.word	0x080060e3
 8005e94:	080060e3 	.word	0x080060e3
 8005e98:	080060e3 	.word	0x080060e3
 8005e9c:	080060e3 	.word	0x080060e3
 8005ea0:	08005ed7 	.word	0x08005ed7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea4:	4b94      	ldr	r3, [pc, #592]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eb0:	4b91      	ldr	r3, [pc, #580]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	08db      	lsrs	r3, r3, #3
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	4a90      	ldr	r2, [pc, #576]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ec2:	e111      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ec4:	4b8d      	ldr	r3, [pc, #564]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ec6:	61bb      	str	r3, [r7, #24]
    break;
 8005ec8:	e10e      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005eca:	4b8d      	ldr	r3, [pc, #564]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ecc:	61bb      	str	r3, [r7, #24]
    break;
 8005ece:	e10b      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ed0:	4b8c      	ldr	r3, [pc, #560]	; (8006104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ed2:	61bb      	str	r3, [r7, #24]
    break;
 8005ed4:	e108      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ed6:	4b88      	ldr	r3, [pc, #544]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ee0:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005eec:	4b82      	ldr	r3, [pc, #520]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ef6:	4b80      	ldr	r3, [pc, #512]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	08db      	lsrs	r3, r3, #3
 8005efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80e1 	beq.w	80060dc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	f000 8083 	beq.w	8006028 <HAL_RCC_GetSysClockFreq+0x204>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	f200 80a1 	bhi.w	800606c <HAL_RCC_GetSysClockFreq+0x248>
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x114>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d056      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f36:	e099      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f38:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02d      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f44:	4b6c      	ldr	r3, [pc, #432]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	08db      	lsrs	r3, r3, #3
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	4a6b      	ldr	r2, [pc, #428]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
 8005f54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b62      	ldr	r3, [pc, #392]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f9e:	e087      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800610c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b51      	ldr	r3, [pc, #324]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe2:	e065      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a02 	vldr	s12, [r7, #8]
 800600a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006026:	e043      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a02 	vldr	s12, [r7, #8]
 800604e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	e021      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006092:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	0a5b      	lsrs	r3, r3, #9
 80060b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ba:	3301      	adds	r3, #1
 80060bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d4:	ee17 3a90 	vmov	r3, s15
 80060d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060da:	e005      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	61bb      	str	r3, [r7, #24]
    break;
 80060e0:	e002      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060e4:	61bb      	str	r3, [r7, #24]
    break;
 80060e6:	bf00      	nop
  }

  return sysclockfreq;
 80060e8:	69bb      	ldr	r3, [r7, #24]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3724      	adds	r7, #36	; 0x24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	58024400 	.word	0x58024400
 80060fc:	03d09000 	.word	0x03d09000
 8006100:	003d0900 	.word	0x003d0900
 8006104:	007f2815 	.word	0x007f2815
 8006108:	46000000 	.word	0x46000000
 800610c:	4c742400 	.word	0x4c742400
 8006110:	4a742400 	.word	0x4a742400
 8006114:	4afe502a 	.word	0x4afe502a

08006118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800611e:	f7ff fe81 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b10      	ldr	r3, [pc, #64]	; (8006168 <HAL_RCC_GetHCLKFreq+0x50>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490f      	ldr	r1, [pc, #60]	; (800616c <HAL_RCC_GetHCLKFreq+0x54>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_RCC_GetHCLKFreq+0x50>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	4a09      	ldr	r2, [pc, #36]	; (800616c <HAL_RCC_GetHCLKFreq+0x54>)
 8006146:	5cd3      	ldrb	r3, [r2, r3]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	4a07      	ldr	r2, [pc, #28]	; (8006170 <HAL_RCC_GetHCLKFreq+0x58>)
 8006154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006156:	4a07      	ldr	r2, [pc, #28]	; (8006174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <HAL_RCC_GetHCLKFreq+0x58>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	58024400 	.word	0x58024400
 800616c:	080099cc 	.word	0x080099cc
 8006170:	2400001c 	.word	0x2400001c
 8006174:	24000018 	.word	0x24000018

08006178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800617c:	f7ff ffcc 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8006180:	4602      	mov	r2, r0
 8006182:	4b06      	ldr	r3, [pc, #24]	; (800619c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	091b      	lsrs	r3, r3, #4
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	4904      	ldr	r1, [pc, #16]	; (80061a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800618e:	5ccb      	ldrb	r3, [r1, r3]
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	58024400 	.word	0x58024400
 80061a0:	080099cc 	.word	0x080099cc

080061a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061a8:	f7ff ffb6 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 80061ac:	4602      	mov	r2, r0
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	4904      	ldr	r1, [pc, #16]	; (80061cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ba:	5ccb      	ldrb	r3, [r1, r3]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	58024400 	.word	0x58024400
 80061cc:	080099cc 	.word	0x080099cc

080061d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d8:	2300      	movs	r3, #0
 80061da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061dc:	2300      	movs	r3, #0
 80061de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d03f      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061f4:	d02a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061fa:	d824      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006200:	d018      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006206:	d81e      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800620c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006210:	d007      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006212:	e018      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006214:	4bab      	ldr	r3, [pc, #684]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4aaa      	ldr	r2, [pc, #680]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800621a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006220:	e015      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f9cf 	bl	80075cc <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006232:	e00c      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	2102      	movs	r1, #2
 800623a:	4618      	mov	r0, r3
 800623c:	f001 fa78 	bl	8007730 <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
      break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800624c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006254:	4b9b      	ldr	r3, [pc, #620]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006260:	4998      	ldr	r1, [pc, #608]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006262:	4313      	orrs	r3, r2
 8006264:	650b      	str	r3, [r1, #80]	; 0x50
 8006266:	e001      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d03d      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627c:	2b04      	cmp	r3, #4
 800627e:	d826      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	0800629d 	.word	0x0800629d
 800628c:	080062ab 	.word	0x080062ab
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062d5 	.word	0x080062d5
 8006298:	080062d5 	.word	0x080062d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629c:	4b89      	ldr	r3, [pc, #548]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4a88      	ldr	r2, [pc, #544]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062a8:	e015      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3304      	adds	r3, #4
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f98b 	bl	80075cc <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ba:	e00c      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3324      	adds	r3, #36	; 0x24
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fa34 	bl	8007730 <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062cc:	e003      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
      break;
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062dc:	4b79      	ldr	r3, [pc, #484]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	f023 0207 	bic.w	r2, r3, #7
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	4976      	ldr	r1, [pc, #472]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	650b      	str	r3, [r1, #80]	; 0x50
 80062ee:	e001      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d042      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006308:	d02b      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800630a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630e:	d825      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006310:	2bc0      	cmp	r3, #192	; 0xc0
 8006312:	d028      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006314:	2bc0      	cmp	r3, #192	; 0xc0
 8006316:	d821      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d016      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800631c:	2b80      	cmp	r3, #128	; 0x80
 800631e:	d81d      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d007      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006328:	e018      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632a:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	4a65      	ldr	r2, [pc, #404]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006336:	e017      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f001 f944 	bl	80075cc <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006348:	e00e      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3324      	adds	r3, #36	; 0x24
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f001 f9ed 	bl	8007730 <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800635a:	e005      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
      break;
 8006360:	e002      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800636e:	4b55      	ldr	r3, [pc, #340]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006372:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	4952      	ldr	r1, [pc, #328]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800637c:	4313      	orrs	r3, r2
 800637e:	650b      	str	r3, [r1, #80]	; 0x50
 8006380:	e001      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800638e:	2b00      	cmp	r3, #0
 8006390:	d049      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800639c:	d030      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800639e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063a2:	d82a      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063a8:	d02c      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80063aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063ae:	d824      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b4:	d018      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80063b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ba:	d81e      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063c4:	d007      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063c6:	e018      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	4a3d      	ldr	r2, [pc, #244]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063d4:	e017      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f8f5 	bl	80075cc <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063e6:	e00e      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3324      	adds	r3, #36	; 0x24
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 f99e 	bl	8007730 <RCCEx_PLL3_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063f8:	e005      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
      break;
 80063fe:	e002      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800640c:	4b2d      	ldr	r3, [pc, #180]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800641a:	492a      	ldr	r1, [pc, #168]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800641c:	4313      	orrs	r3, r2
 800641e:	658b      	str	r3, [r1, #88]	; 0x58
 8006420:	e001      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04c      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800643c:	d030      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800643e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006442:	d82a      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006444:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006448:	d02c      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800644a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800644e:	d824      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006454:	d018      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645a:	d81e      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006464:	d007      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006466:	e018      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006468:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800646e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006474:	e017      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3304      	adds	r3, #4
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f001 f8a5 	bl	80075cc <RCCEx_PLL2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006486:	e00e      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3324      	adds	r3, #36	; 0x24
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 f94e 	bl	8007730 <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006498:	e005      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
      break;
 800649e:	e002      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064a0:	bf00      	nop
 80064a2:	e000      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064ba:	4902      	ldr	r1, [pc, #8]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	658b      	str	r3, [r1, #88]	; 0x58
 80064c0:	e004      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d032      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	2b30      	cmp	r3, #48	; 0x30
 80064de:	d01c      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	d817      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d00c      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d813      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d016      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d10f      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f4:	4baf      	ldr	r3, [pc, #700]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	4aae      	ldr	r2, [pc, #696]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006500:	e00e      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	2102      	movs	r1, #2
 8006508:	4618      	mov	r0, r3
 800650a:	f001 f85f 	bl	80075cc <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006512:	e005      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	75fb      	strb	r3, [r7, #23]
      break;
 8006518:	e002      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800651a:	bf00      	nop
 800651c:	e000      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800651e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006526:	4ba3      	ldr	r3, [pc, #652]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006532:	49a0      	ldr	r1, [pc, #640]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006534:	4313      	orrs	r3, r2
 8006536:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006538:	e001      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d047      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006552:	d030      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006558:	d82a      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800655a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800655e:	d02c      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006564:	d824      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656a:	d018      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800656c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006570:	d81e      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	d007      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800657c:	e018      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657e:	4b8d      	ldr	r3, [pc, #564]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	4a8c      	ldr	r2, [pc, #560]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006588:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800658a:	e017      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	2100      	movs	r1, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f001 f81a 	bl	80075cc <RCCEx_PLL2_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800659c:	e00e      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3324      	adds	r3, #36	; 0x24
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 f8c3 	bl	8007730 <RCCEx_PLL3_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065ae:	e005      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	75fb      	strb	r3, [r7, #23]
      break;
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065b6:	bf00      	nop
 80065b8:	e000      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065c2:	4b7c      	ldr	r3, [pc, #496]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ce:	4979      	ldr	r1, [pc, #484]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	650b      	str	r3, [r1, #80]	; 0x50
 80065d4:	e001      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d049      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065ee:	d02e      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80065f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065f4:	d828      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065fa:	d02a      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80065fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006600:	d822      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006606:	d026      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800660c:	d81c      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800660e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006612:	d010      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006618:	d816      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01d      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800661e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006622:	d111      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	2101      	movs	r1, #1
 800662a:	4618      	mov	r0, r3
 800662c:	f000 ffce 	bl	80075cc <RCCEx_PLL2_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006634:	e012      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3324      	adds	r3, #36	; 0x24
 800663a:	2101      	movs	r1, #1
 800663c:	4618      	mov	r0, r3
 800663e:	f001 f877 	bl	8007730 <RCCEx_PLL3_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006646:	e009      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
      break;
 800664c:	e006      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800664e:	bf00      	nop
 8006650:	e004      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800665a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006662:	4b54      	ldr	r3, [pc, #336]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666e:	4951      	ldr	r1, [pc, #324]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006670:	4313      	orrs	r3, r2
 8006672:	650b      	str	r3, [r1, #80]	; 0x50
 8006674:	e001      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d04b      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800668c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006690:	d02e      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006696:	d828      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669c:	d02a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d822      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066a8:	d026      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066ae:	d81c      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b4:	d010      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ba:	d816      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80066c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c4:	d111      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2101      	movs	r1, #1
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 ff7d 	bl	80075cc <RCCEx_PLL2_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066d6:	e012      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3324      	adds	r3, #36	; 0x24
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 f826 	bl	8007730 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066e8:	e009      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
      break;
 80066ee:	e006      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066f0:	bf00      	nop
 80066f2:	e004      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066f4:	bf00      	nop
 80066f6:	e002      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006704:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006712:	4928      	ldr	r1, [pc, #160]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006714:	4313      	orrs	r3, r2
 8006716:	658b      	str	r3, [r1, #88]	; 0x58
 8006718:	e001      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02f      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800672e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006732:	d00e      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006738:	d814      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d015      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800673e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006742:	d10f      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a1a      	ldr	r2, [pc, #104]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800674a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006750:	e00c      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	2101      	movs	r1, #1
 8006758:	4618      	mov	r0, r3
 800675a:	f000 ff37 	bl	80075cc <RCCEx_PLL2_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006762:	e003      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
      break;
 8006768:	e000      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800676a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677e:	490d      	ldr	r1, [pc, #52]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006780:	4313      	orrs	r3, r2
 8006782:	650b      	str	r3, [r1, #80]	; 0x50
 8006784:	e001      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d033      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	2b03      	cmp	r3, #3
 800679c:	d81c      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067df 	.word	0x080067df
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067c7 	.word	0x080067c7
 80067b0:	080067df 	.word	0x080067df
 80067b4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b8:	4bb8      	ldr	r3, [pc, #736]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4ab7      	ldr	r2, [pc, #732]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067c4:	e00c      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3304      	adds	r3, #4
 80067ca:	2102      	movs	r1, #2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fefd 	bl	80075cc <RCCEx_PLL2_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067d6:	e003      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	e000      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067e6:	4bad      	ldr	r3, [pc, #692]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	f023 0203 	bic.w	r2, r3, #3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	49aa      	ldr	r1, [pc, #680]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067f8:	e001      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8086 	beq.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800680c:	4ba4      	ldr	r3, [pc, #656]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4aa3      	ldr	r2, [pc, #652]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006818:	f7fb f9ea 	bl	8001bf0 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800681e:	e009      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006820:	f7fb f9e6 	bl	8001bf0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b64      	cmp	r3, #100	; 0x64
 800682c:	d902      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	75fb      	strb	r3, [r7, #23]
        break;
 8006832:	e005      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006834:	4b9a      	ldr	r3, [pc, #616]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ef      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d166      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006846:	4b95      	ldr	r3, [pc, #596]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006850:	4053      	eors	r3, r2
 8006852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006856:	2b00      	cmp	r3, #0
 8006858:	d013      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800685a:	4b90      	ldr	r3, [pc, #576]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006864:	4b8d      	ldr	r3, [pc, #564]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	4a8c      	ldr	r2, [pc, #560]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800686a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006870:	4b8a      	ldr	r3, [pc, #552]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006874:	4a89      	ldr	r2, [pc, #548]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800687c:	4a87      	ldr	r2, [pc, #540]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688c:	d115      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688e:	f7fb f9af 	bl	8001bf0 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006894:	e00b      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006896:	f7fb f9ab 	bl	8001bf0 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d902      	bls.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	75fb      	strb	r3, [r7, #23]
            break;
 80068ac:	e005      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ae:	4b7b      	ldr	r3, [pc, #492]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0ed      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d126      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ce:	d10d      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80068d0:	4b72      	ldr	r3, [pc, #456]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068de:	0919      	lsrs	r1, r3, #4
 80068e0:	4b70      	ldr	r3, [pc, #448]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80068e2:	400b      	ands	r3, r1
 80068e4:	496d      	ldr	r1, [pc, #436]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	610b      	str	r3, [r1, #16]
 80068ea:	e005      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80068ec:	4b6b      	ldr	r3, [pc, #428]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	4a6a      	ldr	r2, [pc, #424]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068f6:	6113      	str	r3, [r2, #16]
 80068f8:	4b68      	ldr	r3, [pc, #416]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006906:	4965      	ldr	r1, [pc, #404]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006908:	4313      	orrs	r3, r2
 800690a:	670b      	str	r3, [r1, #112]	; 0x70
 800690c:	e004      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	75bb      	strb	r3, [r7, #22]
 8006912:	e001      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d07e      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006928:	2b28      	cmp	r3, #40	; 0x28
 800692a:	d867      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006a03 	.word	0x08006a03
 8006938:	080069fd 	.word	0x080069fd
 800693c:	080069fd 	.word	0x080069fd
 8006940:	080069fd 	.word	0x080069fd
 8006944:	080069fd 	.word	0x080069fd
 8006948:	080069fd 	.word	0x080069fd
 800694c:	080069fd 	.word	0x080069fd
 8006950:	080069fd 	.word	0x080069fd
 8006954:	080069d9 	.word	0x080069d9
 8006958:	080069fd 	.word	0x080069fd
 800695c:	080069fd 	.word	0x080069fd
 8006960:	080069fd 	.word	0x080069fd
 8006964:	080069fd 	.word	0x080069fd
 8006968:	080069fd 	.word	0x080069fd
 800696c:	080069fd 	.word	0x080069fd
 8006970:	080069fd 	.word	0x080069fd
 8006974:	080069eb 	.word	0x080069eb
 8006978:	080069fd 	.word	0x080069fd
 800697c:	080069fd 	.word	0x080069fd
 8006980:	080069fd 	.word	0x080069fd
 8006984:	080069fd 	.word	0x080069fd
 8006988:	080069fd 	.word	0x080069fd
 800698c:	080069fd 	.word	0x080069fd
 8006990:	080069fd 	.word	0x080069fd
 8006994:	08006a03 	.word	0x08006a03
 8006998:	080069fd 	.word	0x080069fd
 800699c:	080069fd 	.word	0x080069fd
 80069a0:	080069fd 	.word	0x080069fd
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	080069fd 	.word	0x080069fd
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	08006a03 	.word	0x08006a03
 80069b8:	080069fd 	.word	0x080069fd
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	080069fd 	.word	0x080069fd
 80069c4:	080069fd 	.word	0x080069fd
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	080069fd 	.word	0x080069fd
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a03 	.word	0x08006a03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	2101      	movs	r1, #1
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fdf4 	bl	80075cc <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069e8:	e00c      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3324      	adds	r3, #36	; 0x24
 80069ee:	2101      	movs	r1, #1
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fe9d 	bl	8007730 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069fa:	e003      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a16:	4921      	ldr	r1, [pc, #132]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8006a1c:	e001      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d03e      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d820      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a7f 	.word	0x08006a7f
 8006a40:	08006a55 	.word	0x08006a55
 8006a44:	08006a67 	.word	0x08006a67
 8006a48:	08006a7f 	.word	0x08006a7f
 8006a4c:	08006a7f 	.word	0x08006a7f
 8006a50:	08006a7f 	.word	0x08006a7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fdb6 	bl	80075cc <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a64:	e00c      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fe5f 	bl	8007730 <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d110      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f023 0207 	bic.w	r2, r3, #7
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a92:	4902      	ldr	r1, [pc, #8]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	654b      	str	r3, [r1, #84]	; 0x54
 8006a98:	e008      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	58024800 	.word	0x58024800
 8006aa4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d039      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d820      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b0b 	.word	0x08006b0b
 8006acc:	08006ae1 	.word	0x08006ae1
 8006ad0:	08006af3 	.word	0x08006af3
 8006ad4:	08006b0b 	.word	0x08006b0b
 8006ad8:	08006b0b 	.word	0x08006b0b
 8006adc:	08006b0b 	.word	0x08006b0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fd70 	bl	80075cc <RCCEx_PLL2_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006af0:	e00c      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3324      	adds	r3, #36	; 0x24
 8006af6:	2101      	movs	r1, #1
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fe19 	bl	8007730 <RCCEx_PLL3_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b02:	e003      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]
      break;
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b12:	4bb7      	ldr	r3, [pc, #732]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f023 0207 	bic.w	r2, r3, #7
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b20:	49b3      	ldr	r1, [pc, #716]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	658b      	str	r3, [r1, #88]	; 0x58
 8006b26:	e001      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04b      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b42:	d02e      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b48:	d828      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d02a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d822      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b5a:	d026      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b60:	d81c      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b66:	d010      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b6c:	d816      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01d      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b76:	d111      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fd24 	bl	80075cc <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b88:	e012      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3324      	adds	r3, #36	; 0x24
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fdcd 	bl	8007730 <RCCEx_PLL3_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b9a:	e009      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	e006      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e004      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e002      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bb6:	4b8e      	ldr	r3, [pc, #568]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc4:	498a      	ldr	r1, [pc, #552]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	654b      	str	r3, [r1, #84]	; 0x54
 8006bca:	e001      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d04b      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006be2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006be6:	d02e      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006be8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bec:	d828      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d02a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d822      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bfe:	d026      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c04:	d81c      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0a:	d010      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c10:	d816      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01d      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1a:	d111      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fcd2 	bl	80075cc <RCCEx_PLL2_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c2c:	e012      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3324      	adds	r3, #36	; 0x24
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fd7b 	bl	8007730 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c3e:	e009      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	e006      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c46:	bf00      	nop
 8006c48:	e004      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e002      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c5a:	4b65      	ldr	r3, [pc, #404]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c68:	4961      	ldr	r1, [pc, #388]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c6e:	e001      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d04b      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c8a:	d02e      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006c8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c90:	d828      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c96:	d02a      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9c:	d822      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ca2:	d026      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006ca4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ca8:	d81c      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cae:	d010      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb4:	d816      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbe:	d111      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fc80 	bl	80075cc <RCCEx_PLL2_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cd0:	e012      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3324      	adds	r3, #36	; 0x24
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fd29 	bl	8007730 <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ce2:	e009      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce8:	e006      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cea:	bf00      	nop
 8006cec:	e004      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cfe:	4b3c      	ldr	r3, [pc, #240]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d0c:	4938      	ldr	r1, [pc, #224]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	658b      	str	r3, [r1, #88]	; 0x58
 8006d12:	e001      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3324      	adds	r3, #36	; 0x24
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fcfa 	bl	8007730 <RCCEx_PLL3_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d46:	4b2a      	ldr	r3, [pc, #168]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d54:	4926      	ldr	r1, [pc, #152]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d70:	d10a      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3324      	adds	r3, #36	; 0x24
 8006d76:	2102      	movs	r1, #2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fcd9 	bl	8007730 <RCCEx_PLL3_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d88:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d96:	4916      	ldr	r1, [pc, #88]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d036      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db2:	d01f      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db8:	d817      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc2:	d009      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006dc4:	e011      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fbfd 	bl	80075cc <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dd6:	e00e      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3324      	adds	r3, #36	; 0x24
 8006ddc:	2102      	movs	r1, #2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fca6 	bl	8007730 <RCCEx_PLL3_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006de8:	e005      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	e002      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006df0:	58024400 	.word	0x58024400
      break;
 8006df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dfc:	4b93      	ldr	r3, [pc, #588]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e0a:	4990      	ldr	r1, [pc, #576]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e10:	e001      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d033      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e2c:	d01c      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e32:	d816      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e38:	d003      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e3e:	d007      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e40:	e00f      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4b82      	ldr	r3, [pc, #520]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4a81      	ldr	r2, [pc, #516]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e4e:	e00c      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	2101      	movs	r1, #1
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fc6a 	bl	8007730 <RCCEx_PLL3_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e60:	e003      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e70:	4b76      	ldr	r3, [pc, #472]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e7e:	4973      	ldr	r1, [pc, #460]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	654b      	str	r3, [r1, #84]	; 0x54
 8006e84:	e001      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d029      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d007      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006ea4:	e00f      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea6:	4b69      	ldr	r3, [pc, #420]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	4a68      	ldr	r2, [pc, #416]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006eb2:	e00b      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	2102      	movs	r1, #2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fb86 	bl	80075cc <RCCEx_PLL2_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ec4:	e002      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ed2:	4b5e      	ldr	r3, [pc, #376]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	495b      	ldr	r1, [pc, #364]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ee4:	e001      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3324      	adds	r3, #36	; 0x24
 8006efa:	2102      	movs	r1, #2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fc17 	bl	8007730 <RCCEx_PLL3_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d030      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f20:	d017      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f26:	d811      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f2c:	d013      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f32:	d80b      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3c:	d106      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3e:	4b43      	ldr	r3, [pc, #268]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a42      	ldr	r2, [pc, #264]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f4a:	e007      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f50:	e004      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f52:	bf00      	nop
 8006f54:	e002      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f56:	bf00      	nop
 8006f58:	e000      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f62:	4b3a      	ldr	r3, [pc, #232]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6e:	4937      	ldr	r1, [pc, #220]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	654b      	str	r3, [r1, #84]	; 0x54
 8006f74:	e001      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	492e      	ldr	r1, [pc, #184]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fa4:	4b29      	ldr	r3, [pc, #164]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fb2:	4926      	ldr	r1, [pc, #152]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd0:	491e      	ldr	r1, [pc, #120]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fe2:	4b1a      	ldr	r3, [pc, #104]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	4a19      	ldr	r2, [pc, #100]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fec:	6113      	str	r3, [r2, #16]
 8006fee:	4b17      	ldr	r3, [pc, #92]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ff8:	4914      	ldr	r1, [pc, #80]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	da08      	bge.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	490e      	ldr	r1, [pc, #56]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007032:	4906      	ldr	r1, [pc, #24]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007034:	4313      	orrs	r3, r2
 8007036:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007038:	7dbb      	ldrb	r3, [r7, #22]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e000      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	58024400 	.word	0x58024400

08007050 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007054:	f7ff f860 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8007058:	4602      	mov	r2, r0
 800705a:	4b06      	ldr	r3, [pc, #24]	; (8007074 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	091b      	lsrs	r3, r3, #4
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	4904      	ldr	r1, [pc, #16]	; (8007078 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007066:	5ccb      	ldrb	r3, [r1, r3]
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007070:	4618      	mov	r0, r3
 8007072:	bd80      	pop	{r7, pc}
 8007074:	58024400 	.word	0x58024400
 8007078:	080099cc 	.word	0x080099cc

0800707c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800707c:	b480      	push	{r7}
 800707e:	b089      	sub	sp, #36	; 0x24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007084:	4ba1      	ldr	r3, [pc, #644]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800708e:	4b9f      	ldr	r3, [pc, #636]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	0b1b      	lsrs	r3, r3, #12
 8007094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007098:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800709a:	4b9c      	ldr	r3, [pc, #624]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070a6:	4b99      	ldr	r3, [pc, #612]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	08db      	lsrs	r3, r3, #3
 80070ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8111 	beq.w	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	f000 8083 	beq.w	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	f200 80a1 	bhi.w	800721c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d056      	beq.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070e6:	e099      	b.n	800721c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e8:	4b88      	ldr	r3, [pc, #544]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02d      	beq.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070f4:	4b85      	ldr	r3, [pc, #532]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	08db      	lsrs	r3, r3, #3
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	4a84      	ldr	r2, [pc, #528]	; (8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
 8007104:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b7b      	ldr	r3, [pc, #492]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007132:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800714e:	e087      	b.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b6a      	ldr	r3, [pc, #424]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007192:	e065      	b.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800731c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b59      	ldr	r3, [pc, #356]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d6:	e043      	b.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ea:	4b48      	ldr	r3, [pc, #288]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800721a:	e021      	b.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800731c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b37      	ldr	r3, [pc, #220]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007260:	4b2a      	ldr	r3, [pc, #168]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	0a5b      	lsrs	r3, r3, #9
 8007266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800727a:	edd7 6a07 	vldr	s13, [r7, #28]
 800727e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007286:	ee17 2a90 	vmov	r2, s15
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800728e:	4b1f      	ldr	r3, [pc, #124]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007298:	ee07 3a90 	vmov	s15, r3
 800729c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b4:	ee17 2a90 	vmov	r2, s15
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80072bc:	4b13      	ldr	r3, [pc, #76]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	0e1b      	lsrs	r3, r3, #24
 80072c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e2:	ee17 2a90 	vmov	r2, s15
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072ea:	e008      	b.n	80072fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	609a      	str	r2, [r3, #8]
}
 80072fe:	bf00      	nop
 8007300:	3724      	adds	r7, #36	; 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	03d09000 	.word	0x03d09000
 8007314:	46000000 	.word	0x46000000
 8007318:	4c742400 	.word	0x4c742400
 800731c:	4a742400 	.word	0x4a742400
 8007320:	4afe502a 	.word	0x4afe502a

08007324 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800732c:	4ba1      	ldr	r3, [pc, #644]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007336:	4b9f      	ldr	r3, [pc, #636]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	0d1b      	lsrs	r3, r3, #20
 800733c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007340:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007342:	4b9c      	ldr	r3, [pc, #624]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	0a1b      	lsrs	r3, r3, #8
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800734e:	4b99      	ldr	r3, [pc, #612]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	08db      	lsrs	r3, r3, #3
 8007354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8111 	beq.w	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b02      	cmp	r3, #2
 8007376:	f000 8083 	beq.w	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b02      	cmp	r3, #2
 800737e:	f200 80a1 	bhi.w	80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d056      	beq.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800738e:	e099      	b.n	80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007390:	4b88      	ldr	r3, [pc, #544]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d02d      	beq.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800739c:	4b85      	ldr	r3, [pc, #532]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	08db      	lsrs	r3, r3, #3
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	4a84      	ldr	r2, [pc, #528]	; (80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b7b      	ldr	r3, [pc, #492]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073f6:	e087      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b6a      	ldr	r3, [pc, #424]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800743a:	e065      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b59      	ldr	r3, [pc, #356]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800747e:	e043      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b48      	ldr	r3, [pc, #288]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c2:	e021      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b37      	ldr	r3, [pc, #220]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007506:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007508:	4b2a      	ldr	r3, [pc, #168]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	0a5b      	lsrs	r3, r3, #9
 800750e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800751e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007522:	edd7 6a07 	vldr	s13, [r7, #28]
 8007526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752e:	ee17 2a90 	vmov	r2, s15
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007536:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	0c1b      	lsrs	r3, r3, #16
 800753c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800754c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007550:	edd7 6a07 	vldr	s13, [r7, #28]
 8007554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755c:	ee17 2a90 	vmov	r2, s15
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007564:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800757a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758a:	ee17 2a90 	vmov	r2, s15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007592:	e008      	b.n	80075a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]
}
 80075a6:	bf00      	nop
 80075a8:	3724      	adds	r7, #36	; 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	58024400 	.word	0x58024400
 80075b8:	03d09000 	.word	0x03d09000
 80075bc:	46000000 	.word	0x46000000
 80075c0:	4c742400 	.word	0x4c742400
 80075c4:	4a742400 	.word	0x4a742400
 80075c8:	4afe502a 	.word	0x4afe502a

080075cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075da:	4b53      	ldr	r3, [pc, #332]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d101      	bne.n	80075ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e099      	b.n	800771e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075ea:	4b4f      	ldr	r3, [pc, #316]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a4e      	ldr	r2, [pc, #312]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80075f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f6:	f7fa fafb 	bl	8001bf0 <HAL_GetTick>
 80075fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075fc:	e008      	b.n	8007610 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075fe:	f7fa faf7 	bl	8001bf0 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e086      	b.n	800771e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007610:	4b45      	ldr	r3, [pc, #276]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f0      	bne.n	80075fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800761c:	4b42      	ldr	r3, [pc, #264]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	031b      	lsls	r3, r3, #12
 800762a:	493f      	ldr	r1, [pc, #252]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 800762c:	4313      	orrs	r3, r2
 800762e:	628b      	str	r3, [r1, #40]	; 0x28
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	3b01      	subs	r3, #1
 8007636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	3b01      	subs	r3, #1
 8007640:	025b      	lsls	r3, r3, #9
 8007642:	b29b      	uxth	r3, r3
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	3b01      	subs	r3, #1
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	3b01      	subs	r3, #1
 800765a:	061b      	lsls	r3, r3, #24
 800765c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007660:	4931      	ldr	r1, [pc, #196]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007666:	4b30      	ldr	r3, [pc, #192]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	492d      	ldr	r1, [pc, #180]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007674:	4313      	orrs	r3, r2
 8007676:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007678:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	f023 0220 	bic.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	4928      	ldr	r1, [pc, #160]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007686:	4313      	orrs	r3, r2
 8007688:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800768a:	4b27      	ldr	r3, [pc, #156]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a26      	ldr	r2, [pc, #152]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007690:	f023 0310 	bic.w	r3, r3, #16
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007696:	4b24      	ldr	r3, [pc, #144]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <RCCEx_PLL2_Config+0x160>)
 800769c:	4013      	ands	r3, r2
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	69d2      	ldr	r2, [r2, #28]
 80076a2:	00d2      	lsls	r2, r2, #3
 80076a4:	4920      	ldr	r1, [pc, #128]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076aa:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	f043 0310 	orr.w	r3, r3, #16
 80076b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076bc:	4b1a      	ldr	r3, [pc, #104]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076c8:	e00f      	b.n	80076ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d106      	bne.n	80076de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076d0:	4b15      	ldr	r3, [pc, #84]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a14      	ldr	r2, [pc, #80]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076dc:	e005      	b.n	80076ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	4a11      	ldr	r2, [pc, #68]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a0e      	ldr	r2, [pc, #56]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 80076f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f6:	f7fa fa7b 	bl	8001bf0 <HAL_GetTick>
 80076fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076fc:	e008      	b.n	8007710 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076fe:	f7fa fa77 	bl	8001bf0 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e006      	b.n	800771e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <RCCEx_PLL2_Config+0x15c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0f0      	beq.n	80076fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	58024400 	.word	0x58024400
 800772c:	ffff0007 	.word	0xffff0007

08007730 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773e:	4b53      	ldr	r3, [pc, #332]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d101      	bne.n	800774e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e099      	b.n	8007882 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800774e:	4b4f      	ldr	r3, [pc, #316]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a4e      	ldr	r2, [pc, #312]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775a:	f7fa fa49 	bl	8001bf0 <HAL_GetTick>
 800775e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007760:	e008      	b.n	8007774 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007762:	f7fa fa45 	bl	8001bf0 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e086      	b.n	8007882 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007774:	4b45      	ldr	r3, [pc, #276]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f0      	bne.n	8007762 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007780:	4b42      	ldr	r3, [pc, #264]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	051b      	lsls	r3, r3, #20
 800778e:	493f      	ldr	r1, [pc, #252]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007790:	4313      	orrs	r3, r2
 8007792:	628b      	str	r3, [r1, #40]	; 0x28
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	3b01      	subs	r3, #1
 800779a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	025b      	lsls	r3, r3, #9
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	041b      	lsls	r3, r3, #16
 80077b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	3b01      	subs	r3, #1
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077c4:	4931      	ldr	r1, [pc, #196]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077ca:	4b30      	ldr	r3, [pc, #192]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	492d      	ldr	r1, [pc, #180]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	4928      	ldr	r1, [pc, #160]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077ee:	4b27      	ldr	r3, [pc, #156]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a26      	ldr	r2, [pc, #152]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 80077fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077fe:	4b24      	ldr	r3, [pc, #144]	; (8007890 <RCCEx_PLL3_Config+0x160>)
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	69d2      	ldr	r2, [r2, #28]
 8007806:	00d2      	lsls	r2, r2, #3
 8007808:	4920      	ldr	r1, [pc, #128]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007820:	4b1a      	ldr	r3, [pc, #104]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800782a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800782c:	e00f      	b.n	800784e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d106      	bne.n	8007842 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	4a14      	ldr	r2, [pc, #80]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 800783a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800783e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007840:	e005      	b.n	800784e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a0e      	ldr	r2, [pc, #56]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785a:	f7fa f9c9 	bl	8001bf0 <HAL_GetTick>
 800785e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007860:	e008      	b.n	8007874 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007862:	f7fa f9c5 	bl	8001bf0 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <RCCEx_PLL3_Config+0x15c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	58024400 	.word	0x58024400
 8007890:	ffff0007 	.word	0xffff0007

08007894 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e0eb      	b.n	8007a82 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a75      	ldr	r2, [pc, #468]	; (8007a8c <HAL_SPI_Init+0x1f8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00f      	beq.n	80078da <HAL_SPI_Init+0x46>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a74      	ldr	r2, [pc, #464]	; (8007a90 <HAL_SPI_Init+0x1fc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00a      	beq.n	80078da <HAL_SPI_Init+0x46>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a72      	ldr	r2, [pc, #456]	; (8007a94 <HAL_SPI_Init+0x200>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d005      	beq.n	80078da <HAL_SPI_Init+0x46>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2b0f      	cmp	r3, #15
 80078d4:	d901      	bls.n	80078da <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e0d3      	b.n	8007a82 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fb94 	bl	8008008 <SPI_GetPacketSize>
 80078e0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a69      	ldr	r2, [pc, #420]	; (8007a8c <HAL_SPI_Init+0x1f8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00c      	beq.n	8007906 <HAL_SPI_Init+0x72>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a67      	ldr	r2, [pc, #412]	; (8007a90 <HAL_SPI_Init+0x1fc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <HAL_SPI_Init+0x72>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a66      	ldr	r2, [pc, #408]	; (8007a94 <HAL_SPI_Init+0x200>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d002      	beq.n	8007906 <HAL_SPI_Init+0x72>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b08      	cmp	r3, #8
 8007904:	d811      	bhi.n	800792a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800790a:	4a60      	ldr	r2, [pc, #384]	; (8007a8c <HAL_SPI_Init+0x1f8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d009      	beq.n	8007924 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5e      	ldr	r2, [pc, #376]	; (8007a90 <HAL_SPI_Init+0x1fc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_SPI_Init+0x90>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5d      	ldr	r2, [pc, #372]	; (8007a94 <HAL_SPI_Init+0x200>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d104      	bne.n	800792e <HAL_SPI_Init+0x9a>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b10      	cmp	r3, #16
 8007928:	d901      	bls.n	800792e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e0a9      	b.n	8007a82 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7f9 fb7a 	bl	800103c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0201 	bic.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007968:	d119      	bne.n	800799e <HAL_SPI_Init+0x10a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007972:	d103      	bne.n	800797c <HAL_SPI_Init+0xe8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10c      	bne.n	800799e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798c:	d107      	bne.n	800799e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800799c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	431a      	orrs	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b0:	ea42 0103 	orr.w	r1, r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	ea42 0103 	orr.w	r1, r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d113      	bne.n	8007a3e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40013000 	.word	0x40013000
 8007a90:	40003800 	.word	0x40003800
 8007a94:	40003c00 	.word	0x40003c00

08007a98 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007ab0:	6a3a      	ldr	r2, [r7, #32]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007aca:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3330      	adds	r3, #48	; 0x30
 8007ad2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d113      	bne.n	8007b06 <HAL_SPI_IRQHandler+0x6e>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10e      	bne.n	8007b06 <HAL_SPI_IRQHandler+0x6e>
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d009      	beq.n	8007b06 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
    handled = 1UL;
 8007b02:	2301      	movs	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10f      	bne.n	8007b30 <HAL_SPI_IRQHandler+0x98>
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <HAL_SPI_IRQHandler+0x98>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	4798      	blx	r3
    handled = 1UL;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10f      	bne.n	8007b5a <HAL_SPI_IRQHandler+0xc2>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <HAL_SPI_IRQHandler+0xc2>
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
    handled = 1UL;
 8007b56:	2301      	movs	r3, #1
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 816f 	bne.w	8007e40 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a0 	beq.w	8007cae <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0208 	orr.w	r2, r2, #8
 8007b7c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699a      	ldr	r2, [r3, #24]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0210 	orr.w	r2, r2, #16
 8007b8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b9c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691a      	ldr	r2, [r3, #16]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0208 	bic.w	r2, r2, #8
 8007bac:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00f      	beq.n	8007bd8 <HAL_SPI_IRQHandler+0x140>
 8007bb8:	7cfb      	ldrb	r3, [r7, #19]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d004      	beq.n	8007bc8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <HAL_SPI_IRQHandler+0x140>
 8007bc8:	7cfb      	ldrb	r3, [r7, #19]
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d059      	beq.n	8007c82 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d154      	bne.n	8007c82 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d13d      	bne.n	8007c62 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007be6:	e036      	b.n	8007c56 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b0f      	cmp	r3, #15
 8007bee:	d90b      	bls.n	8007c08 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007bfa:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	665a      	str	r2, [r3, #100]	; 0x64
 8007c06:	e01d      	b.n	8007c44 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b07      	cmp	r3, #7
 8007c0e:	d90b      	bls.n	8007c28 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	8812      	ldrh	r2, [r2, #0]
 8007c18:	b292      	uxth	r2, r2
 8007c1a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c20:	1c9a      	adds	r2, r3, #2
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	665a      	str	r2, [r3, #100]	; 0x64
 8007c26:	e00d      	b.n	8007c44 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1c2      	bne.n	8007be8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f930 	bl	8007ec8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7f9 f98c 	bl	8000f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007c80:	e0e3      	b.n	8007e4a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c82:	7cfb      	ldrb	r3, [r7, #19]
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	d103      	bne.n	8007c90 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8f9 	bl	8007e80 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007c8e:	e0d9      	b.n	8007e44 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d103      	bne.n	8007c9e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f8e8 	bl	8007e6c <HAL_SPI_RxCpltCallback>
    return;
 8007c9c:	e0d2      	b.n	8007e44 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007c9e:	7cfb      	ldrb	r3, [r7, #19]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	f040 80cf 	bne.w	8007e44 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8d6 	bl	8007e58 <HAL_SPI_TxCpltCallback>
    return;
 8007cac:	e0ca      	b.n	8007e44 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <HAL_SPI_IRQHandler+0x23c>
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d008      	beq.n	8007cd4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd0:	619a      	str	r2, [r3, #24]

    return;
 8007cd2:	e0ba      	b.n	8007e4a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80b5 	beq.w	8007e4a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00f      	beq.n	8007d0a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf0:	f043 0204 	orr.w	r2, r3, #4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d08:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00f      	beq.n	8007d34 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1a:	f043 0201 	orr.w	r2, r3, #1
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d32:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00f      	beq.n	8007d5e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d44:	f043 0208 	orr.w	r2, r3, #8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	699a      	ldr	r2, [r3, #24]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d5c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00f      	beq.n	8007d88 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0220 	orr.w	r2, r2, #32
 8007d86:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05a      	beq.n	8007e48 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6919      	ldr	r1, [r3, #16]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <HAL_SPI_IRQHandler+0x3b8>)
 8007dae:	400b      	ands	r3, r1
 8007db0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007db8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dbc:	d138      	bne.n	8007e30 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007dcc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d013      	beq.n	8007dfe <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dda:	4a1e      	ldr	r2, [pc, #120]	; (8007e54 <HAL_SPI_IRQHandler+0x3bc>)
 8007ddc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fb fa96 	bl	8003314 <HAL_DMA_Abort_IT>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d020      	beq.n	8007e48 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <HAL_SPI_IRQHandler+0x3bc>)
 8007e0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fb fa7e 	bl	8003314 <HAL_DMA_Abort_IT>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d014      	beq.n	8007e48 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e2e:	e00b      	b.n	8007e48 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7f9 f8ad 	bl	8000f98 <HAL_SPI_ErrorCallback>
    return;
 8007e3e:	e003      	b.n	8007e48 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007e40:	bf00      	nop
 8007e42:	e002      	b.n	8007e4a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e48:	bf00      	nop
  }
}
 8007e4a:	3728      	adds	r7, #40	; 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	fffffc94 	.word	0xfffffc94
 8007e54:	08007e95 	.word	0x08007e95

08007e58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7f9 f86c 	bl	8000f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ec0:	bf00      	nop
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699a      	ldr	r2, [r3, #24]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0208 	orr.w	r2, r2, #8
 8007ee6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0210 	orr.w	r2, r2, #16
 8007ef6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6919      	ldr	r1, [r3, #16]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b3c      	ldr	r3, [pc, #240]	; (8008004 <SPI_CloseTransfer+0x13c>)
 8007f14:	400b      	ands	r3, r1
 8007f16:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d014      	beq.n	8007f5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00f      	beq.n	8007f5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0220 	orr.w	r2, r2, #32
 8007f5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d014      	beq.n	8007f94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00f      	beq.n	8007f94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00f      	beq.n	8007fbe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa4:	f043 0201 	orr.w	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00f      	beq.n	8007fe8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fce:	f043 0208 	orr.w	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fe6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	fffffc90 	.word	0xfffffc90

08008008 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	3307      	adds	r3, #7
 8008026:	08db      	lsrs	r3, r3, #3
 8008028:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e042      	b.n	80080d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7f9 f952 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2224      	movs	r2, #36	; 0x24
 800806c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0201 	bic.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb7d 	bl	8008780 <UART_SetConfig>
 8008086:	4603      	mov	r3, r0
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e022      	b.n	80080d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f8d1 	bl	8009240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 f958 	bl	8009384 <UART_CheckIdleState>
 80080d4:	4603      	mov	r3, r0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d168      	bne.n	80081ca <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_UART_Transmit_DMA+0x24>
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e061      	b.n	80081cc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_UART_Transmit_DMA+0x36>
 8008112:	2302      	movs	r3, #2
 8008114:	e05a      	b.n	80081cc <HAL_UART_Transmit_DMA+0xec>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	88fa      	ldrh	r2, [r7, #6]
 8008128:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2221      	movs	r2, #33	; 0x21
 8008140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008148:	2b00      	cmp	r3, #0
 800814a:	d02c      	beq.n	80081a6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008150:	4a20      	ldr	r2, [pc, #128]	; (80081d4 <HAL_UART_Transmit_DMA+0xf4>)
 8008152:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008158:	4a1f      	ldr	r2, [pc, #124]	; (80081d8 <HAL_UART_Transmit_DMA+0xf8>)
 800815a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008160:	4a1e      	ldr	r2, [pc, #120]	; (80081dc <HAL_UART_Transmit_DMA+0xfc>)
 8008162:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008168:	2200      	movs	r2, #0
 800816a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008174:	4619      	mov	r1, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3328      	adds	r3, #40	; 0x28
 800817c:	461a      	mov	r2, r3
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	f7fa fb40 	bl	8002804 <HAL_DMA_Start_IT>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00d      	beq.n	80081a6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2210      	movs	r2, #16
 800818e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e012      	b.n	80081cc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2240      	movs	r2, #64	; 0x40
 80081ac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081c4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	080095bd 	.word	0x080095bd
 80081d8:	0800960d 	.word	0x0800960d
 80081dc:	08009629 	.word	0x08009629

080081e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	f640 030f 	movw	r3, #2063	; 0x80f
 8008206:	4013      	ands	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d118      	bne.n	8008242 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d013      	beq.n	8008242 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8282 	beq.w	800873c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
      }
      return;
 8008240:	e27c      	b.n	800873c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80ef 	beq.w	8008428 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4b73      	ldr	r3, [pc, #460]	; (800841c <HAL_UART_IRQHandler+0x23c>)
 800824e:	4013      	ands	r3, r2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4b72      	ldr	r3, [pc, #456]	; (8008420 <HAL_UART_IRQHandler+0x240>)
 8008258:	4013      	ands	r3, r2
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80e4 	beq.w	8008428 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d010      	beq.n	800828c <HAL_UART_IRQHandler+0xac>
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2201      	movs	r2, #1
 800827a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d010      	beq.n	80082b8 <HAL_UART_IRQHandler+0xd8>
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00b      	beq.n	80082b8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2202      	movs	r2, #2
 80082a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ae:	f043 0204 	orr.w	r2, r3, #4
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d010      	beq.n	80082e4 <HAL_UART_IRQHandler+0x104>
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2204      	movs	r2, #4
 80082d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082da:	f043 0202 	orr.w	r2, r3, #2
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d015      	beq.n	800831a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	4b48      	ldr	r3, [pc, #288]	; (800841c <HAL_UART_IRQHandler+0x23c>)
 80082fc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2208      	movs	r2, #8
 8008308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008310:	f043 0208 	orr.w	r2, r3, #8
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008320:	2b00      	cmp	r3, #0
 8008322:	d011      	beq.n	8008348 <HAL_UART_IRQHandler+0x168>
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 81f6 	beq.w	8008740 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b00      	cmp	r3, #0
 800835c:	d011      	beq.n	8008382 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008388:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d004      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d031      	beq.n	8008406 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f8d8 	bl	8009558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d123      	bne.n	80083fe <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d013      	beq.n	80083f6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d2:	4a14      	ldr	r2, [pc, #80]	; (8008424 <HAL_UART_IRQHandler+0x244>)
 80083d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fa ff9a 	bl	8003314 <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d017      	beq.n	8008416 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	e00f      	b.n	8008416 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f8 fdee 	bl	8000fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	e00b      	b.n	8008416 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7f8 fdea 	bl	8000fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	e007      	b.n	8008416 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7f8 fde6 	bl	8000fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008414:	e194      	b.n	8008740 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008416:	bf00      	nop
    return;
 8008418:	e192      	b.n	8008740 <HAL_UART_IRQHandler+0x560>
 800841a:	bf00      	nop
 800841c:	10000001 	.word	0x10000001
 8008420:	04000120 	.word	0x04000120
 8008424:	080096a9 	.word	0x080096a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 810f 	bne.w	8008650 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8109 	beq.w	8008650 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8103 	beq.w	8008650 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2210      	movs	r2, #16
 8008450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	f040 80bb 	bne.w	80085d8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a96      	ldr	r2, [pc, #600]	; (80086c4 <HAL_UART_IRQHandler+0x4e4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d059      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a94      	ldr	r2, [pc, #592]	; (80086c8 <HAL_UART_IRQHandler+0x4e8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d053      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a92      	ldr	r2, [pc, #584]	; (80086cc <HAL_UART_IRQHandler+0x4ec>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d04d      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a90      	ldr	r2, [pc, #576]	; (80086d0 <HAL_UART_IRQHandler+0x4f0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d047      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a8e      	ldr	r2, [pc, #568]	; (80086d4 <HAL_UART_IRQHandler+0x4f4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d041      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a8c      	ldr	r2, [pc, #560]	; (80086d8 <HAL_UART_IRQHandler+0x4f8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d03b      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a8a      	ldr	r2, [pc, #552]	; (80086dc <HAL_UART_IRQHandler+0x4fc>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d035      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a88      	ldr	r2, [pc, #544]	; (80086e0 <HAL_UART_IRQHandler+0x500>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d02f      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a86      	ldr	r2, [pc, #536]	; (80086e4 <HAL_UART_IRQHandler+0x504>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d029      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a84      	ldr	r2, [pc, #528]	; (80086e8 <HAL_UART_IRQHandler+0x508>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d023      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a82      	ldr	r2, [pc, #520]	; (80086ec <HAL_UART_IRQHandler+0x50c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01d      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a80      	ldr	r2, [pc, #512]	; (80086f0 <HAL_UART_IRQHandler+0x510>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d017      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a7e      	ldr	r2, [pc, #504]	; (80086f4 <HAL_UART_IRQHandler+0x514>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d011      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a7c      	ldr	r2, [pc, #496]	; (80086f8 <HAL_UART_IRQHandler+0x518>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00b      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a7a      	ldr	r2, [pc, #488]	; (80086fc <HAL_UART_IRQHandler+0x51c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d005      	beq.n	8008522 <HAL_UART_IRQHandler+0x342>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a78      	ldr	r2, [pc, #480]	; (8008700 <HAL_UART_IRQHandler+0x520>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d105      	bne.n	800852e <HAL_UART_IRQHandler+0x34e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b29b      	uxth	r3, r3
 800852c:	e004      	b.n	8008538 <HAL_UART_IRQHandler+0x358>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b29b      	uxth	r3, r3
 8008538:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800853a:	893b      	ldrh	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8101 	beq.w	8008744 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008548:	893a      	ldrh	r2, [r7, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	f080 80fa 	bcs.w	8008744 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	893a      	ldrh	r2, [r7, #8]
 8008554:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008562:	d02b      	beq.n	80085bc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008572:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0201 	bic.w	r2, r2, #1
 8008582:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008592:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0210 	bic.w	r2, r2, #16
 80085b0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fa fb8e 	bl	8002cd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f8c9 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085d6:	e0b5      	b.n	8008744 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80a8 	beq.w	8008748 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80085f8:	897b      	ldrh	r3, [r7, #10]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 80a4 	beq.w	8008748 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800860e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6899      	ldr	r1, [r3, #8]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <HAL_UART_IRQHandler+0x524>)
 800861c:	400b      	ands	r3, r1
 800861e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0210 	bic.w	r2, r2, #16
 8008642:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008644:	897b      	ldrh	r3, [r7, #10]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f88d 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800864e:	e07b      	b.n	8008748 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00d      	beq.n	8008676 <HAL_UART_IRQHandler+0x496>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800866c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 f84a 	bl	8009708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008674:	e06b      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008686:	2b00      	cmp	r3, #0
 8008688:	d104      	bne.n	8008694 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d008      	beq.n	80086a6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008698:	2b00      	cmp	r3, #0
 800869a:	d057      	beq.n	800874c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
    }
    return;
 80086a4:	e052      	b.n	800874c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d02b      	beq.n	8008708 <HAL_UART_IRQHandler+0x528>
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d026      	beq.n	8008708 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 f80a 	bl	80096d4 <UART_EndTransmit_IT>
    return;
 80086c0:	e045      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
 80086c2:	bf00      	nop
 80086c4:	40020010 	.word	0x40020010
 80086c8:	40020028 	.word	0x40020028
 80086cc:	40020040 	.word	0x40020040
 80086d0:	40020058 	.word	0x40020058
 80086d4:	40020070 	.word	0x40020070
 80086d8:	40020088 	.word	0x40020088
 80086dc:	400200a0 	.word	0x400200a0
 80086e0:	400200b8 	.word	0x400200b8
 80086e4:	40020410 	.word	0x40020410
 80086e8:	40020428 	.word	0x40020428
 80086ec:	40020440 	.word	0x40020440
 80086f0:	40020458 	.word	0x40020458
 80086f4:	40020470 	.word	0x40020470
 80086f8:	40020488 	.word	0x40020488
 80086fc:	400204a0 	.word	0x400204a0
 8008700:	400204b8 	.word	0x400204b8
 8008704:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <HAL_UART_IRQHandler+0x544>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 f807 	bl	8009730 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008722:	e014      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <HAL_UART_IRQHandler+0x56e>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	da0c      	bge.n	800874e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fff1 	bl	800971c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873a:	e008      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
      return;
 800873c:	bf00      	nop
 800873e:	e006      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
    return;
 8008740:	bf00      	nop
 8008742:	e004      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
      return;
 8008744:	bf00      	nop
 8008746:	e002      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
      return;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <HAL_UART_IRQHandler+0x56e>
    return;
 800874c:	bf00      	nop
  }
}
 800874e:	3720      	adds	r7, #32
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008780:	b5b0      	push	{r4, r5, r7, lr}
 8008782:	b08e      	sub	sp, #56	; 0x38
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4bbf      	ldr	r3, [pc, #764]	; (8008aac <UART_SetConfig+0x32c>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6812      	ldr	r2, [r2, #0]
 80087b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087b6:	430b      	orrs	r3, r1
 80087b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4ab5      	ldr	r2, [pc, #724]	; (8008ab0 <UART_SetConfig+0x330>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d004      	beq.n	80087ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087e6:	4313      	orrs	r3, r2
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	4bb0      	ldr	r3, [pc, #704]	; (8008ab4 <UART_SetConfig+0x334>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087fa:	430b      	orrs	r3, r1
 80087fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	f023 010f 	bic.w	r1, r3, #15
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4aa7      	ldr	r2, [pc, #668]	; (8008ab8 <UART_SetConfig+0x338>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d176      	bne.n	800890c <UART_SetConfig+0x18c>
 800881e:	4ba7      	ldr	r3, [pc, #668]	; (8008abc <UART_SetConfig+0x33c>)
 8008820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008826:	2b28      	cmp	r3, #40	; 0x28
 8008828:	d86c      	bhi.n	8008904 <UART_SetConfig+0x184>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0xb0>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	080088d5 	.word	0x080088d5
 8008834:	08008905 	.word	0x08008905
 8008838:	08008905 	.word	0x08008905
 800883c:	08008905 	.word	0x08008905
 8008840:	08008905 	.word	0x08008905
 8008844:	08008905 	.word	0x08008905
 8008848:	08008905 	.word	0x08008905
 800884c:	08008905 	.word	0x08008905
 8008850:	080088dd 	.word	0x080088dd
 8008854:	08008905 	.word	0x08008905
 8008858:	08008905 	.word	0x08008905
 800885c:	08008905 	.word	0x08008905
 8008860:	08008905 	.word	0x08008905
 8008864:	08008905 	.word	0x08008905
 8008868:	08008905 	.word	0x08008905
 800886c:	08008905 	.word	0x08008905
 8008870:	080088e5 	.word	0x080088e5
 8008874:	08008905 	.word	0x08008905
 8008878:	08008905 	.word	0x08008905
 800887c:	08008905 	.word	0x08008905
 8008880:	08008905 	.word	0x08008905
 8008884:	08008905 	.word	0x08008905
 8008888:	08008905 	.word	0x08008905
 800888c:	08008905 	.word	0x08008905
 8008890:	080088ed 	.word	0x080088ed
 8008894:	08008905 	.word	0x08008905
 8008898:	08008905 	.word	0x08008905
 800889c:	08008905 	.word	0x08008905
 80088a0:	08008905 	.word	0x08008905
 80088a4:	08008905 	.word	0x08008905
 80088a8:	08008905 	.word	0x08008905
 80088ac:	08008905 	.word	0x08008905
 80088b0:	080088f5 	.word	0x080088f5
 80088b4:	08008905 	.word	0x08008905
 80088b8:	08008905 	.word	0x08008905
 80088bc:	08008905 	.word	0x08008905
 80088c0:	08008905 	.word	0x08008905
 80088c4:	08008905 	.word	0x08008905
 80088c8:	08008905 	.word	0x08008905
 80088cc:	08008905 	.word	0x08008905
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e222      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80088dc:	2304      	movs	r3, #4
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e21e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80088e4:	2308      	movs	r3, #8
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e21a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80088ec:	2310      	movs	r3, #16
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e216      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80088f4:	2320      	movs	r3, #32
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e212      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e20e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008904:	2380      	movs	r3, #128	; 0x80
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e20a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a6b      	ldr	r2, [pc, #428]	; (8008ac0 <UART_SetConfig+0x340>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d130      	bne.n	8008978 <UART_SetConfig+0x1f8>
 8008916:	4b69      	ldr	r3, [pc, #420]	; (8008abc <UART_SetConfig+0x33c>)
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	2b05      	cmp	r3, #5
 8008920:	d826      	bhi.n	8008970 <UART_SetConfig+0x1f0>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <UART_SetConfig+0x1a8>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008941 	.word	0x08008941
 800892c:	08008949 	.word	0x08008949
 8008930:	08008951 	.word	0x08008951
 8008934:	08008959 	.word	0x08008959
 8008938:	08008961 	.word	0x08008961
 800893c:	08008969 	.word	0x08008969
 8008940:	2300      	movs	r3, #0
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e1ec      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008948:	2304      	movs	r3, #4
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e1e8      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008950:	2308      	movs	r3, #8
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e1e4      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008958:	2310      	movs	r3, #16
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e1e0      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008960:	2320      	movs	r3, #32
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e1dc      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008968:	2340      	movs	r3, #64	; 0x40
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e1d8      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	e1d4      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a51      	ldr	r2, [pc, #324]	; (8008ac4 <UART_SetConfig+0x344>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d130      	bne.n	80089e4 <UART_SetConfig+0x264>
 8008982:	4b4e      	ldr	r3, [pc, #312]	; (8008abc <UART_SetConfig+0x33c>)
 8008984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b05      	cmp	r3, #5
 800898c:	d826      	bhi.n	80089dc <UART_SetConfig+0x25c>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0x214>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089ad 	.word	0x080089ad
 8008998:	080089b5 	.word	0x080089b5
 800899c:	080089bd 	.word	0x080089bd
 80089a0:	080089c5 	.word	0x080089c5
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089d5 	.word	0x080089d5
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b2:	e1b6      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089b4:	2304      	movs	r3, #4
 80089b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ba:	e1b2      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089bc:	2308      	movs	r3, #8
 80089be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c2:	e1ae      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089c4:	2310      	movs	r3, #16
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ca:	e1aa      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089cc:	2320      	movs	r3, #32
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e1a6      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089d4:	2340      	movs	r3, #64	; 0x40
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e1a2      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089dc:	2380      	movs	r3, #128	; 0x80
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	e19e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a37      	ldr	r2, [pc, #220]	; (8008ac8 <UART_SetConfig+0x348>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d130      	bne.n	8008a50 <UART_SetConfig+0x2d0>
 80089ee:	4b33      	ldr	r3, [pc, #204]	; (8008abc <UART_SetConfig+0x33c>)
 80089f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b05      	cmp	r3, #5
 80089f8:	d826      	bhi.n	8008a48 <UART_SetConfig+0x2c8>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x280>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a19 	.word	0x08008a19
 8008a04:	08008a21 	.word	0x08008a21
 8008a08:	08008a29 	.word	0x08008a29
 8008a0c:	08008a31 	.word	0x08008a31
 8008a10:	08008a39 	.word	0x08008a39
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1e:	e180      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a20:	2304      	movs	r3, #4
 8008a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a26:	e17c      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a28:	2308      	movs	r3, #8
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e178      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a30:	2310      	movs	r3, #16
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a36:	e174      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a38:	2320      	movs	r3, #32
 8008a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3e:	e170      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a40:	2340      	movs	r3, #64	; 0x40
 8008a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a46:	e16c      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a48:	2380      	movs	r3, #128	; 0x80
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e168      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1d      	ldr	r2, [pc, #116]	; (8008acc <UART_SetConfig+0x34c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d142      	bne.n	8008ae0 <UART_SetConfig+0x360>
 8008a5a:	4b18      	ldr	r3, [pc, #96]	; (8008abc <UART_SetConfig+0x33c>)
 8008a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	2b05      	cmp	r3, #5
 8008a64:	d838      	bhi.n	8008ad8 <UART_SetConfig+0x358>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <UART_SetConfig+0x2ec>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008a85 	.word	0x08008a85
 8008a70:	08008a8d 	.word	0x08008a8d
 8008a74:	08008a95 	.word	0x08008a95
 8008a78:	08008a9d 	.word	0x08008a9d
 8008a7c:	08008aa5 	.word	0x08008aa5
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a8a:	e14a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a92:	e146      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a94:	2308      	movs	r3, #8
 8008a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9a:	e142      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008a9c:	2310      	movs	r3, #16
 8008a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa2:	e13e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008aa4:	2320      	movs	r3, #32
 8008aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aaa:	e13a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008aac:	cfff69f3 	.word	0xcfff69f3
 8008ab0:	58000c00 	.word	0x58000c00
 8008ab4:	11fff4ff 	.word	0x11fff4ff
 8008ab8:	40011000 	.word	0x40011000
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	40004400 	.word	0x40004400
 8008ac4:	40004800 	.word	0x40004800
 8008ac8:	40004c00 	.word	0x40004c00
 8008acc:	40005000 	.word	0x40005000
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e124      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	e120      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4acc      	ldr	r2, [pc, #816]	; (8008e18 <UART_SetConfig+0x698>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d176      	bne.n	8008bd8 <UART_SetConfig+0x458>
 8008aea:	4bcc      	ldr	r3, [pc, #816]	; (8008e1c <UART_SetConfig+0x69c>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008af2:	2b28      	cmp	r3, #40	; 0x28
 8008af4:	d86c      	bhi.n	8008bd0 <UART_SetConfig+0x450>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <UART_SetConfig+0x37c>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008ba1 	.word	0x08008ba1
 8008b00:	08008bd1 	.word	0x08008bd1
 8008b04:	08008bd1 	.word	0x08008bd1
 8008b08:	08008bd1 	.word	0x08008bd1
 8008b0c:	08008bd1 	.word	0x08008bd1
 8008b10:	08008bd1 	.word	0x08008bd1
 8008b14:	08008bd1 	.word	0x08008bd1
 8008b18:	08008bd1 	.word	0x08008bd1
 8008b1c:	08008ba9 	.word	0x08008ba9
 8008b20:	08008bd1 	.word	0x08008bd1
 8008b24:	08008bd1 	.word	0x08008bd1
 8008b28:	08008bd1 	.word	0x08008bd1
 8008b2c:	08008bd1 	.word	0x08008bd1
 8008b30:	08008bd1 	.word	0x08008bd1
 8008b34:	08008bd1 	.word	0x08008bd1
 8008b38:	08008bd1 	.word	0x08008bd1
 8008b3c:	08008bb1 	.word	0x08008bb1
 8008b40:	08008bd1 	.word	0x08008bd1
 8008b44:	08008bd1 	.word	0x08008bd1
 8008b48:	08008bd1 	.word	0x08008bd1
 8008b4c:	08008bd1 	.word	0x08008bd1
 8008b50:	08008bd1 	.word	0x08008bd1
 8008b54:	08008bd1 	.word	0x08008bd1
 8008b58:	08008bd1 	.word	0x08008bd1
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bd1 	.word	0x08008bd1
 8008b64:	08008bd1 	.word	0x08008bd1
 8008b68:	08008bd1 	.word	0x08008bd1
 8008b6c:	08008bd1 	.word	0x08008bd1
 8008b70:	08008bd1 	.word	0x08008bd1
 8008b74:	08008bd1 	.word	0x08008bd1
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bd1 	.word	0x08008bd1
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008bd1 	.word	0x08008bd1
 8008b8c:	08008bd1 	.word	0x08008bd1
 8008b90:	08008bd1 	.word	0x08008bd1
 8008b94:	08008bd1 	.word	0x08008bd1
 8008b98:	08008bd1 	.word	0x08008bd1
 8008b9c:	08008bc9 	.word	0x08008bc9
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba6:	e0bc      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008ba8:	2304      	movs	r3, #4
 8008baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bae:	e0b8      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008bb0:	2308      	movs	r3, #8
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e0b4      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008bb8:	2310      	movs	r3, #16
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e0b0      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e0ac      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008bc8:	2340      	movs	r3, #64	; 0x40
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e0a8      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e0a4      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a90      	ldr	r2, [pc, #576]	; (8008e20 <UART_SetConfig+0x6a0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d130      	bne.n	8008c44 <UART_SetConfig+0x4c4>
 8008be2:	4b8e      	ldr	r3, [pc, #568]	; (8008e1c <UART_SetConfig+0x69c>)
 8008be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	d826      	bhi.n	8008c3c <UART_SetConfig+0x4bc>
 8008bee:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <UART_SetConfig+0x474>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c0d 	.word	0x08008c0d
 8008bf8:	08008c15 	.word	0x08008c15
 8008bfc:	08008c1d 	.word	0x08008c1d
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c12:	e086      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c14:	2304      	movs	r3, #4
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e082      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e07e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c24:	2310      	movs	r3, #16
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e07a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e076      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e072      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c3c:	2380      	movs	r3, #128	; 0x80
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e06e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a76      	ldr	r2, [pc, #472]	; (8008e24 <UART_SetConfig+0x6a4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d130      	bne.n	8008cb0 <UART_SetConfig+0x530>
 8008c4e:	4b73      	ldr	r3, [pc, #460]	; (8008e1c <UART_SetConfig+0x69c>)
 8008c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d826      	bhi.n	8008ca8 <UART_SetConfig+0x528>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <UART_SetConfig+0x4e0>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c79 	.word	0x08008c79
 8008c64:	08008c81 	.word	0x08008c81
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c99 	.word	0x08008c99
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	e050      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c80:	2304      	movs	r3, #4
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e04c      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c88:	2308      	movs	r3, #8
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e048      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c90:	2310      	movs	r3, #16
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e044      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008c98:	2320      	movs	r3, #32
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e040      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008ca0:	2340      	movs	r3, #64	; 0x40
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e03c      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008ca8:	2380      	movs	r3, #128	; 0x80
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e038      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a5c      	ldr	r2, [pc, #368]	; (8008e28 <UART_SetConfig+0x6a8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d130      	bne.n	8008d1c <UART_SetConfig+0x59c>
 8008cba:	4b58      	ldr	r3, [pc, #352]	; (8008e1c <UART_SetConfig+0x69c>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	f003 0307 	and.w	r3, r3, #7
 8008cc2:	2b05      	cmp	r3, #5
 8008cc4:	d826      	bhi.n	8008d14 <UART_SetConfig+0x594>
 8008cc6:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <UART_SetConfig+0x54c>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008ce5 	.word	0x08008ce5
 8008cd0:	08008ced 	.word	0x08008ced
 8008cd4:	08008cf5 	.word	0x08008cf5
 8008cd8:	08008cfd 	.word	0x08008cfd
 8008cdc:	08008d05 	.word	0x08008d05
 8008ce0:	08008d0d 	.word	0x08008d0d
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cea:	e01a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008cec:	2304      	movs	r3, #4
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf2:	e016      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e012      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d02:	e00e      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008d04:	2320      	movs	r3, #32
 8008d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0a:	e00a      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d12:	e006      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008d14:	2380      	movs	r3, #128	; 0x80
 8008d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1a:	e002      	b.n	8008d22 <UART_SetConfig+0x5a2>
 8008d1c:	2380      	movs	r3, #128	; 0x80
 8008d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a40      	ldr	r2, [pc, #256]	; (8008e28 <UART_SetConfig+0x6a8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	f040 80ef 	bne.w	8008f0c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	dc46      	bgt.n	8008dc4 <UART_SetConfig+0x644>
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	f2c0 8081 	blt.w	8008e3e <UART_SetConfig+0x6be>
 8008d3c:	3b02      	subs	r3, #2
 8008d3e:	2b1e      	cmp	r3, #30
 8008d40:	d87d      	bhi.n	8008e3e <UART_SetConfig+0x6be>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0x5c8>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008dcb 	.word	0x08008dcb
 8008d4c:	08008e3f 	.word	0x08008e3f
 8008d50:	08008dd3 	.word	0x08008dd3
 8008d54:	08008e3f 	.word	0x08008e3f
 8008d58:	08008e3f 	.word	0x08008e3f
 8008d5c:	08008e3f 	.word	0x08008e3f
 8008d60:	08008de3 	.word	0x08008de3
 8008d64:	08008e3f 	.word	0x08008e3f
 8008d68:	08008e3f 	.word	0x08008e3f
 8008d6c:	08008e3f 	.word	0x08008e3f
 8008d70:	08008e3f 	.word	0x08008e3f
 8008d74:	08008e3f 	.word	0x08008e3f
 8008d78:	08008e3f 	.word	0x08008e3f
 8008d7c:	08008e3f 	.word	0x08008e3f
 8008d80:	08008df3 	.word	0x08008df3
 8008d84:	08008e3f 	.word	0x08008e3f
 8008d88:	08008e3f 	.word	0x08008e3f
 8008d8c:	08008e3f 	.word	0x08008e3f
 8008d90:	08008e3f 	.word	0x08008e3f
 8008d94:	08008e3f 	.word	0x08008e3f
 8008d98:	08008e3f 	.word	0x08008e3f
 8008d9c:	08008e3f 	.word	0x08008e3f
 8008da0:	08008e3f 	.word	0x08008e3f
 8008da4:	08008e3f 	.word	0x08008e3f
 8008da8:	08008e3f 	.word	0x08008e3f
 8008dac:	08008e3f 	.word	0x08008e3f
 8008db0:	08008e3f 	.word	0x08008e3f
 8008db4:	08008e3f 	.word	0x08008e3f
 8008db8:	08008e3f 	.word	0x08008e3f
 8008dbc:	08008e3f 	.word	0x08008e3f
 8008dc0:	08008e31 	.word	0x08008e31
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	d036      	beq.n	8008e36 <UART_SetConfig+0x6b6>
 8008dc8:	e039      	b.n	8008e3e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dca:	f7fe f941 	bl	8007050 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008dd0:	e03b      	b.n	8008e4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd2:	f107 0314 	add.w	r3, r7, #20
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe f950 	bl	800707c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008de0:	e033      	b.n	8008e4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fa9c 	bl	8007324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008df0:	e02b      	b.n	8008e4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <UART_SetConfig+0x69c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dfe:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <UART_SetConfig+0x69c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	08db      	lsrs	r3, r3, #3
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	4a08      	ldr	r2, [pc, #32]	; (8008e2c <UART_SetConfig+0x6ac>)
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e10:	e01b      	b.n	8008e4a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <UART_SetConfig+0x6ac>)
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e16:	e018      	b.n	8008e4a <UART_SetConfig+0x6ca>
 8008e18:	40011400 	.word	0x40011400
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	40007800 	.word	0x40007800
 8008e24:	40007c00 	.word	0x40007c00
 8008e28:	58000c00 	.word	0x58000c00
 8008e2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e30:	4bc4      	ldr	r3, [pc, #784]	; (8009144 <UART_SetConfig+0x9c4>)
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e34:	e009      	b.n	8008e4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e3c:	e005      	b.n	8008e4a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 81da 	beq.w	8009206 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	4abc      	ldr	r2, [pc, #752]	; (8009148 <UART_SetConfig+0x9c8>)
 8008e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e64:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	4413      	add	r3, r2
 8008e70:	6a3a      	ldr	r2, [r7, #32]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d305      	bcc.n	8008e82 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e7c:	6a3a      	ldr	r2, [r7, #32]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d903      	bls.n	8008e8a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e88:	e1bd      	b.n	8009206 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f04f 0100 	mov.w	r1, #0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	4aac      	ldr	r2, [pc, #688]	; (8009148 <UART_SetConfig+0x9c8>)
 8008e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	f04f 0300 	mov.w	r3, #0
 8008ea2:	f7f7 fa19 	bl	80002d8 <__aeabi_uldivmod>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4619      	mov	r1, r3
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	020b      	lsls	r3, r1, #8
 8008eb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ebc:	0202      	lsls	r2, r0, #8
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	6849      	ldr	r1, [r1, #4]
 8008ec2:	0849      	lsrs	r1, r1, #1
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	f04f 0100 	mov.w	r1, #0
 8008eca:	1814      	adds	r4, r2, r0
 8008ecc:	eb43 0501 	adc.w	r5, r3, r1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	4620      	mov	r0, r4
 8008edc:	4629      	mov	r1, r5
 8008ede:	f7f7 f9fb 	bl	80002d8 <__aeabi_uldivmod>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ef0:	d308      	bcc.n	8008f04 <UART_SetConfig+0x784>
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ef8:	d204      	bcs.n	8008f04 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f00:	60da      	str	r2, [r3, #12]
 8008f02:	e180      	b.n	8009206 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f0a:	e17c      	b.n	8009206 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f14:	f040 80bf 	bne.w	8009096 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	dc49      	bgt.n	8008fb4 <UART_SetConfig+0x834>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db7c      	blt.n	800901e <UART_SetConfig+0x89e>
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	d87a      	bhi.n	800901e <UART_SetConfig+0x89e>
 8008f28:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <UART_SetConfig+0x7b0>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008fbb 	.word	0x08008fbb
 8008f34:	08008fc3 	.word	0x08008fc3
 8008f38:	0800901f 	.word	0x0800901f
 8008f3c:	0800901f 	.word	0x0800901f
 8008f40:	08008fcb 	.word	0x08008fcb
 8008f44:	0800901f 	.word	0x0800901f
 8008f48:	0800901f 	.word	0x0800901f
 8008f4c:	0800901f 	.word	0x0800901f
 8008f50:	08008fdb 	.word	0x08008fdb
 8008f54:	0800901f 	.word	0x0800901f
 8008f58:	0800901f 	.word	0x0800901f
 8008f5c:	0800901f 	.word	0x0800901f
 8008f60:	0800901f 	.word	0x0800901f
 8008f64:	0800901f 	.word	0x0800901f
 8008f68:	0800901f 	.word	0x0800901f
 8008f6c:	0800901f 	.word	0x0800901f
 8008f70:	08008feb 	.word	0x08008feb
 8008f74:	0800901f 	.word	0x0800901f
 8008f78:	0800901f 	.word	0x0800901f
 8008f7c:	0800901f 	.word	0x0800901f
 8008f80:	0800901f 	.word	0x0800901f
 8008f84:	0800901f 	.word	0x0800901f
 8008f88:	0800901f 	.word	0x0800901f
 8008f8c:	0800901f 	.word	0x0800901f
 8008f90:	0800901f 	.word	0x0800901f
 8008f94:	0800901f 	.word	0x0800901f
 8008f98:	0800901f 	.word	0x0800901f
 8008f9c:	0800901f 	.word	0x0800901f
 8008fa0:	0800901f 	.word	0x0800901f
 8008fa4:	0800901f 	.word	0x0800901f
 8008fa8:	0800901f 	.word	0x0800901f
 8008fac:	0800901f 	.word	0x0800901f
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d02e      	beq.n	8009016 <UART_SetConfig+0x896>
 8008fb8:	e031      	b.n	800901e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fba:	f7fd f8dd 	bl	8006178 <HAL_RCC_GetPCLK1Freq>
 8008fbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fc0:	e033      	b.n	800902a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc2:	f7fd f8ef 	bl	80061a4 <HAL_RCC_GetPCLK2Freq>
 8008fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fc8:	e02f      	b.n	800902a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe f854 	bl	800707c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fd8:	e027      	b.n	800902a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe f9a0 	bl	8007324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fe8:	e01f      	b.n	800902a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fea:	4b58      	ldr	r3, [pc, #352]	; (800914c <UART_SetConfig+0x9cc>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ff6:	4b55      	ldr	r3, [pc, #340]	; (800914c <UART_SetConfig+0x9cc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	08db      	lsrs	r3, r3, #3
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	4a53      	ldr	r2, [pc, #332]	; (8009150 <UART_SetConfig+0x9d0>)
 8009002:	fa22 f303 	lsr.w	r3, r2, r3
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009008:	e00f      	b.n	800902a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800900a:	4b51      	ldr	r3, [pc, #324]	; (8009150 <UART_SetConfig+0x9d0>)
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800900e:	e00c      	b.n	800902a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009010:	4b4c      	ldr	r3, [pc, #304]	; (8009144 <UART_SetConfig+0x9c4>)
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009014:	e009      	b.n	800902a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800901c:	e005      	b.n	800902a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80ea 	beq.w	8009206 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	4a44      	ldr	r2, [pc, #272]	; (8009148 <UART_SetConfig+0x9c8>)
 8009038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800903c:	461a      	mov	r2, r3
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	fbb3 f3f2 	udiv	r3, r3, r2
 8009044:	005a      	lsls	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	441a      	add	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	fbb2 f3f3 	udiv	r3, r2, r3
 8009056:	b29b      	uxth	r3, r3
 8009058:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	2b0f      	cmp	r3, #15
 800905e:	d916      	bls.n	800908e <UART_SetConfig+0x90e>
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009066:	d212      	bcs.n	800908e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	b29b      	uxth	r3, r3
 800906c:	f023 030f 	bic.w	r3, r3, #15
 8009070:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	085b      	lsrs	r3, r3, #1
 8009076:	b29b      	uxth	r3, r3
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	b29a      	uxth	r2, r3
 800907e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009080:	4313      	orrs	r3, r2
 8009082:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800908a:	60da      	str	r2, [r3, #12]
 800908c:	e0bb      	b.n	8009206 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009094:	e0b7      	b.n	8009206 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800909a:	2b20      	cmp	r3, #32
 800909c:	dc4a      	bgt.n	8009134 <UART_SetConfig+0x9b4>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f2c0 8086 	blt.w	80091b0 <UART_SetConfig+0xa30>
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	f200 8083 	bhi.w	80091b0 <UART_SetConfig+0xa30>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <UART_SetConfig+0x930>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	0800913b 	.word	0x0800913b
 80090b4:	08009155 	.word	0x08009155
 80090b8:	080091b1 	.word	0x080091b1
 80090bc:	080091b1 	.word	0x080091b1
 80090c0:	0800915d 	.word	0x0800915d
 80090c4:	080091b1 	.word	0x080091b1
 80090c8:	080091b1 	.word	0x080091b1
 80090cc:	080091b1 	.word	0x080091b1
 80090d0:	0800916d 	.word	0x0800916d
 80090d4:	080091b1 	.word	0x080091b1
 80090d8:	080091b1 	.word	0x080091b1
 80090dc:	080091b1 	.word	0x080091b1
 80090e0:	080091b1 	.word	0x080091b1
 80090e4:	080091b1 	.word	0x080091b1
 80090e8:	080091b1 	.word	0x080091b1
 80090ec:	080091b1 	.word	0x080091b1
 80090f0:	0800917d 	.word	0x0800917d
 80090f4:	080091b1 	.word	0x080091b1
 80090f8:	080091b1 	.word	0x080091b1
 80090fc:	080091b1 	.word	0x080091b1
 8009100:	080091b1 	.word	0x080091b1
 8009104:	080091b1 	.word	0x080091b1
 8009108:	080091b1 	.word	0x080091b1
 800910c:	080091b1 	.word	0x080091b1
 8009110:	080091b1 	.word	0x080091b1
 8009114:	080091b1 	.word	0x080091b1
 8009118:	080091b1 	.word	0x080091b1
 800911c:	080091b1 	.word	0x080091b1
 8009120:	080091b1 	.word	0x080091b1
 8009124:	080091b1 	.word	0x080091b1
 8009128:	080091b1 	.word	0x080091b1
 800912c:	080091b1 	.word	0x080091b1
 8009130:	080091a3 	.word	0x080091a3
 8009134:	2b40      	cmp	r3, #64	; 0x40
 8009136:	d037      	beq.n	80091a8 <UART_SetConfig+0xa28>
 8009138:	e03a      	b.n	80091b0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800913a:	f7fd f81d 	bl	8006178 <HAL_RCC_GetPCLK1Freq>
 800913e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009140:	e03c      	b.n	80091bc <UART_SetConfig+0xa3c>
 8009142:	bf00      	nop
 8009144:	003d0900 	.word	0x003d0900
 8009148:	080099e4 	.word	0x080099e4
 800914c:	58024400 	.word	0x58024400
 8009150:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009154:	f7fd f826 	bl	80061a4 <HAL_RCC_GetPCLK2Freq>
 8009158:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800915a:	e02f      	b.n	80091bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	4618      	mov	r0, r3
 8009162:	f7fd ff8b 	bl	800707c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800916a:	e027      	b.n	80091bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916c:	f107 0308 	add.w	r3, r7, #8
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe f8d7 	bl	8007324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800917a:	e01f      	b.n	80091bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <UART_SetConfig+0xab0>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0320 	and.w	r3, r3, #32
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009188:	4b29      	ldr	r3, [pc, #164]	; (8009230 <UART_SetConfig+0xab0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	08db      	lsrs	r3, r3, #3
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	4a28      	ldr	r2, [pc, #160]	; (8009234 <UART_SetConfig+0xab4>)
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800919a:	e00f      	b.n	80091bc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800919c:	4b25      	ldr	r3, [pc, #148]	; (8009234 <UART_SetConfig+0xab4>)
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091a0:	e00c      	b.n	80091bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091a2:	4b25      	ldr	r3, [pc, #148]	; (8009238 <UART_SetConfig+0xab8>)
 80091a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091a6:	e009      	b.n	80091bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091ae:	e005      	b.n	80091bc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091ba:	bf00      	nop
    }

    if (pclk != 0U)
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d021      	beq.n	8009206 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	4a1d      	ldr	r2, [pc, #116]	; (800923c <UART_SetConfig+0xabc>)
 80091c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	085b      	lsrs	r3, r3, #1
 80091da:	441a      	add	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	2b0f      	cmp	r3, #15
 80091ec:	d908      	bls.n	8009200 <UART_SetConfig+0xa80>
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f4:	d204      	bcs.n	8009200 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	e002      	b.n	8009206 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009222:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009226:	4618      	mov	r0, r3
 8009228:	3738      	adds	r7, #56	; 0x38
 800922a:	46bd      	mov	sp, r7
 800922c:	bdb0      	pop	{r4, r5, r7, pc}
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	003d0900 	.word	0x003d0900
 800923c:	080099e4 	.word	0x080099e4

08009240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	f003 0308 	and.w	r3, r3, #8
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d4:	f003 0310 	and.w	r3, r3, #16
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01a      	beq.n	8009356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800933e:	d10a      	bne.n	8009356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
  }
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af02      	add	r7, sp, #8
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009394:	f7f8 fc2c 	bl	8001bf0 <HAL_GetTick>
 8009398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d10e      	bne.n	80093c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f82f 	bl	800941a <UART_WaitOnFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e025      	b.n	8009412 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d10e      	bne.n	80093f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f819 	bl	800941a <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e00f      	b.n	8009412 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	603b      	str	r3, [r7, #0]
 8009426:	4613      	mov	r3, r2
 8009428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800942a:	e062      	b.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d05e      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009434:	f7f8 fbdc 	bl	8001bf0 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	429a      	cmp	r2, r3
 8009442:	d302      	bcc.n	800944a <UART_WaitOnFlagUntilTimeout+0x30>
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d11d      	bne.n	8009486 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009458:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0201 	bic.w	r2, r2, #1
 8009468:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2220      	movs	r2, #32
 800946e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e045      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d02e      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800949e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a2:	d126      	bne.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0201 	bic.w	r2, r2, #1
 80094cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2220      	movs	r2, #32
 80094da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e00f      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4013      	ands	r3, r2
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	bf0c      	ite	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	2300      	movne	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	461a      	mov	r2, r3
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	429a      	cmp	r2, r3
 800950e:	d08d      	beq.n	800942c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009530:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009540:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800956e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6899      	ldr	r1, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <UART_EndRxTransfer+0x60>)
 800957c:	400b      	ands	r3, r1
 800957e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d107      	bne.n	8009598 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0210 	bic.w	r2, r2, #16
 8009596:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	effffffe 	.word	0xeffffffe

080095bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095d2:	d014      	beq.n	80095fe <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ea:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095fa:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095fc:	e002      	b.n	8009604 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7f7 fcda 	bl	8000fb8 <HAL_UART_TxCpltCallback>
}
 8009604:	bf00      	nop
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009618:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f7ff f89a 	bl	8008754 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009644:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d109      	bne.n	8009668 <UART_DMAError+0x40>
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b21      	cmp	r3, #33	; 0x21
 8009658:	d106      	bne.n	8009668 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2200      	movs	r2, #0
 800965e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009662:	6978      	ldr	r0, [r7, #20]
 8009664:	f7ff ff59 	bl	800951a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009672:	2b40      	cmp	r3, #64	; 0x40
 8009674:	d109      	bne.n	800968a <UART_DMAError+0x62>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b22      	cmp	r3, #34	; 0x22
 800967a:	d106      	bne.n	800968a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2200      	movs	r2, #0
 8009680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009684:	6978      	ldr	r0, [r7, #20]
 8009686:	f7ff ff67 	bl	8009558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009690:	f043 0210 	orr.w	r2, r3, #16
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800969a:	6978      	ldr	r0, [r7, #20]
 800969c:	f7f7 fc9c 	bl	8000fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096a0:	bf00      	nop
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7f7 fc86 	bl	8000fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7f7 fc5c 	bl	8000fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_UARTEx_EnableFifoMode+0x16>
 8009756:	2302      	movs	r3, #2
 8009758:	e02b      	b.n	80097b2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2224      	movs	r2, #36	; 0x24
 8009766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0201 	bic.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009788:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009790:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f88a 	bl	80098b4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e02d      	b.n	800982e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2224      	movs	r2, #36	; 0x24
 80097de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f850 	bl	80098b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2220      	movs	r2, #32
 8009820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800984a:	2302      	movs	r3, #2
 800984c:	e02d      	b.n	80098aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2224      	movs	r2, #36	; 0x24
 800985a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0201 	bic.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f812 	bl	80098b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d108      	bne.n	80098d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098d4:	e031      	b.n	800993a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098d6:	2310      	movs	r3, #16
 80098d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098da:	2310      	movs	r3, #16
 80098dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	0e5b      	lsrs	r3, r3, #25
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	0f5b      	lsrs	r3, r3, #29
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	7b3a      	ldrb	r2, [r7, #12]
 8009902:	4911      	ldr	r1, [pc, #68]	; (8009948 <UARTEx_SetNbDataToProcess+0x94>)
 8009904:	5c8a      	ldrb	r2, [r1, r2]
 8009906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800990a:	7b3a      	ldrb	r2, [r7, #12]
 800990c:	490f      	ldr	r1, [pc, #60]	; (800994c <UARTEx_SetNbDataToProcess+0x98>)
 800990e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009910:	fb93 f3f2 	sdiv	r3, r3, r2
 8009914:	b29a      	uxth	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	7b7a      	ldrb	r2, [r7, #13]
 8009920:	4909      	ldr	r1, [pc, #36]	; (8009948 <UARTEx_SetNbDataToProcess+0x94>)
 8009922:	5c8a      	ldrb	r2, [r1, r2]
 8009924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009928:	7b7a      	ldrb	r2, [r7, #13]
 800992a:	4908      	ldr	r1, [pc, #32]	; (800994c <UARTEx_SetNbDataToProcess+0x98>)
 800992c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800992e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009932:	b29a      	uxth	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800993a:	bf00      	nop
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	080099fc 	.word	0x080099fc
 800994c:	08009a04 	.word	0x08009a04

08009950 <__libc_init_array>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	4d0d      	ldr	r5, [pc, #52]	; (8009988 <__libc_init_array+0x38>)
 8009954:	4c0d      	ldr	r4, [pc, #52]	; (800998c <__libc_init_array+0x3c>)
 8009956:	1b64      	subs	r4, r4, r5
 8009958:	10a4      	asrs	r4, r4, #2
 800995a:	2600      	movs	r6, #0
 800995c:	42a6      	cmp	r6, r4
 800995e:	d109      	bne.n	8009974 <__libc_init_array+0x24>
 8009960:	4d0b      	ldr	r5, [pc, #44]	; (8009990 <__libc_init_array+0x40>)
 8009962:	4c0c      	ldr	r4, [pc, #48]	; (8009994 <__libc_init_array+0x44>)
 8009964:	f000 f820 	bl	80099a8 <_init>
 8009968:	1b64      	subs	r4, r4, r5
 800996a:	10a4      	asrs	r4, r4, #2
 800996c:	2600      	movs	r6, #0
 800996e:	42a6      	cmp	r6, r4
 8009970:	d105      	bne.n	800997e <__libc_init_array+0x2e>
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	f855 3b04 	ldr.w	r3, [r5], #4
 8009978:	4798      	blx	r3
 800997a:	3601      	adds	r6, #1
 800997c:	e7ee      	b.n	800995c <__libc_init_array+0xc>
 800997e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009982:	4798      	blx	r3
 8009984:	3601      	adds	r6, #1
 8009986:	e7f2      	b.n	800996e <__libc_init_array+0x1e>
 8009988:	08009a14 	.word	0x08009a14
 800998c:	08009a14 	.word	0x08009a14
 8009990:	08009a14 	.word	0x08009a14
 8009994:	08009a18 	.word	0x08009a18

08009998 <memset>:
 8009998:	4402      	add	r2, r0
 800999a:	4603      	mov	r3, r0
 800999c:	4293      	cmp	r3, r2
 800999e:	d100      	bne.n	80099a2 <memset+0xa>
 80099a0:	4770      	bx	lr
 80099a2:	f803 1b01 	strb.w	r1, [r3], #1
 80099a6:	e7f9      	b.n	800999c <memset+0x4>

080099a8 <_init>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr

080099b4 <_fini>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	bf00      	nop
 80099b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ba:	bc08      	pop	{r3}
 80099bc:	469e      	mov	lr, r3
 80099be:	4770      	bx	lr
