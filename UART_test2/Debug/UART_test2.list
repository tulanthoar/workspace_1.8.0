
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009748  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d080  24000040  08009a64  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  2400d0c0  08009a64  0002d0c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dba7  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ff7  00000000  00000000  0003dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc8  00000000  00000000  00040bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf0  00000000  00000000  000419c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037505  00000000  00000000  000426b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013083  00000000  00000000  00079bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f7b8  00000000  00000000  0008cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec3f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e4  00000000  00000000  001ec444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080099c8 	.word	0x080099c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	080099c8 	.word	0x080099c8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	817b      	strh	r3, [r7, #10]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a9c      	ldr	r2, [pc, #624]	; (8000874 <main+0x2a4>)
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	3301      	adds	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b98      	ldr	r3, [pc, #608]	; (8000878 <main+0x2a8>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b92      	ldr	r3, [pc, #584]	; (8000878 <main+0x2a8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b8d      	ldr	r3, [pc, #564]	; (8000878 <main+0x2a8>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a8c      	ldr	r2, [pc, #560]	; (8000878 <main+0x2a8>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fa52 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 fa38 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fbae 	bl	8000dc4 <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 fb0e 	bl	8001c88 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fb6a 	bl	8000d44 <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 fb0e 	bl	8000c90 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fab4 	bl	8000be0 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f8de 	bl	800183c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fad1 	bl	8001c28 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b7d      	ldr	r3, [pc, #500]	; (800087c <main+0x2ac>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b7b      	ldr	r3, [pc, #492]	; (800087c <main+0x2ac>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 fabc 	bl	8001c10 <HAL_GetTick>
 8000698:	6038      	str	r0, [r7, #0]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	e032      	b.n	8000706 <main+0x136>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4874      	ldr	r0, [pc, #464]	; (8000880 <main+0x2b0>)
 80006ae:	f008 fec4 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e1f7      	b.n	8000aac <main+0x4dc>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a6d      	ldr	r2, [pc, #436]	; (8000874 <main+0x2a4>)
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b6d      	ldr	r3, [pc, #436]	; (8000880 <main+0x2b0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4868      	ldr	r0, [pc, #416]	; (8000880 <main+0x2b0>)
 80006de:	f008 feac 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <main+0x11c>
      {
        return HAL_TIMEOUT;
 80006e8:	2303      	movs	r3, #3
 80006ea:	e1df      	b.n	8000aac <main+0x4dc>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ec:	4a61      	ldr	r2, [pc, #388]	; (8000874 <main+0x2a4>)
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	0a1a      	lsrs	r2, r3, #8
 80006f8:	4b61      	ldr	r3, [pc, #388]	; (8000880 <main+0x2b0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	3301      	adds	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070c:	d3c8      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4859      	ldr	r0, [pc, #356]	; (8000880 <main+0x2b0>)
 800071c:	f008 fe8d 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <main+0x15a>
  {
    return HAL_TIMEOUT;
 8000726:	2303      	movs	r3, #3
 8000728:	e1c0      	b.n	8000aac <main+0x4dc>
  }
  BSP_LED_Off(LED1);
 800072a:	2000      	movs	r0, #0
 800072c:	f001 f85c 	bl	80017e8 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 8000730:	e005      	b.n	800073e <main+0x16e>
  {
    BSP_LED_Toggle(LED2);
 8000732:	2001      	movs	r0, #1
 8000734:	f001 f882 	bl	800183c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f001 fa75 	bl	8001c28 <HAL_Delay>
  while(UserButtonStatus == 0)
 800073e:	4b4f      	ldr	r3, [pc, #316]	; (800087c <main+0x2ac>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f5      	beq.n	8000732 <main+0x162>
  }
  UserButtonStatus = 0;
 8000746:	4b4d      	ldr	r3, [pc, #308]	; (800087c <main+0x2ac>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 800074c:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <main+0x2b4>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 8000752:	2000      	movs	r0, #0
 8000754:	f001 f848 	bl	80017e8 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 f845 	bl	80017e8 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <main+0x2b8>)
 8000760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000764:	2b01      	cmp	r3, #1
 8000766:	d101      	bne.n	800076c <main+0x19c>
 8000768:	2302      	movs	r3, #2
 800076a:	e19f      	b.n	8000aac <main+0x4dc>
 800076c:	4b46      	ldr	r3, [pc, #280]	; (8000888 <main+0x2b8>)
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000774:	4b44      	ldr	r3, [pc, #272]	; (8000888 <main+0x2b8>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800077c:	d107      	bne.n	800078e <main+0x1be>
    {
      SPI_1LINE_RX(&hspi1);
 800077e:	4b42      	ldr	r3, [pc, #264]	; (8000888 <main+0x2b8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b40      	ldr	r3, [pc, #256]	; (8000888 <main+0x2b8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800078c:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078e:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <main+0x2b8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <main+0x2b8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800079c:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079e:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <main+0x2b8>)
 80007a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a2:	4a3a      	ldr	r2, [pc, #232]	; (800088c <main+0x2bc>)
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <main+0x2b8>)
 80007a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007aa:	4a39      	ldr	r2, [pc, #228]	; (8000890 <main+0x2c0>)
 80007ac:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007ae:	4b39      	ldr	r3, [pc, #228]	; (8000894 <main+0x2c4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <main+0x2c4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0218 	orr.w	r2, r2, #24
 80007bc:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0x2b8>)
 80007c0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <main+0x2b8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3330      	adds	r3, #48	; 0x30
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <main+0x2c8>)
 80007cc:	897b      	ldrh	r3, [r7, #10]
 80007ce:	f001 ff09 	bl	80025e4 <HAL_DMA_Start>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <main+0x224>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <main+0x2b8>)
 80007da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	4a29      	ldr	r2, [pc, #164]	; (8000888 <main+0x2b8>)
 80007e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <main+0x2b8>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007f0:	f000 fc0f 	bl	8001012 <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x2b8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6859      	ldr	r1, [r3, #4]
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <main+0x2b8>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <main+0x2cc>)
 8000800:	400b      	ands	r3, r1
 8000802:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <main+0x2b8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <main+0x2b8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000812:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <main+0x2b8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	691a      	ldr	r2, [r3, #16]
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <main+0x2b8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000822:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <main+0x2b8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <main+0x2b8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <main+0x2b8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <main+0x2b8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000842:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000844:	e002      	b.n	800084c <main+0x27c>
  {
	    BSP_LED_Toggle(LED3);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fff8 	bl	800183c <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <main+0x2d0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d1f8      	bne.n	8000846 <main+0x276>
  }
  wTransferState = TRANSFER_WAIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <main+0x2d0>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  int j = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  aTxBuffer[0] = aRxBuffer[0];
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <main+0x2c8>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <main+0x2a4>)
 8000866:	801a      	strh	r2, [r3, #0]
  for( int i = 1; i < txCount; ++i){
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
 800086c:	e040      	b.n	80008f0 <main+0x320>
	  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	e02e      	b.n	80008d2 <main+0x302>
 8000874:	24000080 	.word	0x24000080
 8000878:	e000ed00 	.word	0xe000ed00
 800087c:	24000060 	.word	0x24000060
 8000880:	2400c90c 	.word	0x2400c90c
 8000884:	2400005c 	.word	0x2400005c
 8000888:	2400cf24 	.word	0x2400cf24
 800088c:	08000f79 	.word	0x08000f79
 8000890:	08000f99 	.word	0x08000f99
 8000894:	2400cfac 	.word	0x2400cfac
 8000898:	24000880 	.word	0x24000880
 800089c:	ffff0000 	.word	0xffff0000
 80008a0:	2400c880 	.word	0x2400c880
		  yi[j] = aRxBuffer[j] * 1.0;
 80008a4:	4a83      	ldr	r2, [pc, #524]	; (8000ab4 <main+0x4e4>)
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ba:	4a7f      	ldr	r2, [pc, #508]	; (8000ab8 <main+0x4e8>)
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	edc3 7a00 	vstr	s15, [r3]
	  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	3301      	adds	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	dde5      	ble.n	80008a4 <main+0x2d4>
	  }
	  aTxBuffer[i] = aRxBuffer[j];
 80008d8:	4a76      	ldr	r2, [pc, #472]	; (8000ab4 <main+0x4e4>)
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e0:	b299      	uxth	r1, r3
 80008e2:	4a76      	ldr	r2, [pc, #472]	; (8000abc <main+0x4ec>)
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 1; i < txCount; ++i){
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	3301      	adds	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	6a3a      	ldr	r2, [r7, #32]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbba      	blt.n	800086e <main+0x29e>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008fc:	496f      	ldr	r1, [pc, #444]	; (8000abc <main+0x4ec>)
 80008fe:	4870      	ldr	r0, [pc, #448]	; (8000ac0 <main+0x4f0>)
 8000900:	f007 fbfe 	bl	8008100 <HAL_UART_Transmit_DMA>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <main+0x33e>
  {
    Error_Handler();
 800090a:	f000 fb82 	bl	8001012 <Error_Handler>
  }
  HAL_NVIC_DisableIRQ(USART3_IRQn);
 800090e:	2027      	movs	r0, #39	; 0x27
 8000910:	f001 faf1 	bl	8001ef6 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 8000914:	200c      	movs	r0, #12
 8000916:	f001 faee 	bl	8001ef6 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 800091a:	2038      	movs	r0, #56	; 0x38
 800091c:	f001 faeb 	bl	8001ef6 <HAL_NVIC_DisableIRQ>
  CLEAR_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME ));
 8000920:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <main+0x4f4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a67      	ldr	r2, [pc, #412]	; (8000ac4 <main+0x4f4>)
 8000926:	f023 031e 	bic.w	r3, r3, #30
 800092a:	6013      	str	r3, [r2, #0]
  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800092c:	4b66      	ldr	r3, [pc, #408]	; (8000ac8 <main+0x4f8>)
 800092e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000932:	609a      	str	r2, [r3, #8]
  BSP_LED_Off(LED3);
 8000934:	2002      	movs	r0, #2
 8000936:	f000 ff57 	bl	80017e8 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4 ) {}
 800093a:	bf00      	nop
 800093c:	4b63      	ldr	r3, [pc, #396]	; (8000acc <main+0x4fc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b20      	cmp	r3, #32
 8000946:	d1f9      	bne.n	800093c <main+0x36c>
	  DMA2->LIFCR = DMA_FLAG_TCIF0_4;
 8000948:	4b60      	ldr	r3, [pc, #384]	; (8000acc <main+0x4fc>)
 800094a:	2220      	movs	r2, #32
 800094c:	609a      	str	r2, [r3, #8]
	  j = rxOffset;
 800094e:	893b      	ldrh	r3, [r7, #8]
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[j];
 8000952:	4a58      	ldr	r2, [pc, #352]	; (8000ab4 <main+0x4e4>)
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b57      	ldr	r3, [pc, #348]	; (8000abc <main+0x4ec>)
 800095e:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i ){
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	e028      	b.n	80009b8 <main+0x3e8>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e016      	b.n	800099a <main+0x3ca>
			  yi[j] = aRxBuffer[j] * 1.0;
 800096c:	4a51      	ldr	r2, [pc, #324]	; (8000ab4 <main+0x4e4>)
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000974:	b29b      	uxth	r3, r3
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800097e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000982:	4a4d      	ldr	r2, [pc, #308]	; (8000ab8 <main+0x4e8>)
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	3301      	adds	r3, #1
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	2b03      	cmp	r3, #3
 800099e:	dde5      	ble.n	800096c <main+0x39c>
		  }
//		  yi[j] = aRxBuffer[j] * 1.0;
//		  aTxBuffer[i] = (uint16_t)yi[j];
		  aTxBuffer[i] = aRxBuffer[j];
 80009a0:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <main+0x4e4>)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a8:	b299      	uxth	r1, r3
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <main+0x4ec>)
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i ){
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	3301      	adds	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dbd2      	blt.n	8000966 <main+0x396>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 80009c0:	bf00      	nop
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <main+0x500>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	2b40      	cmp	r3, #64	; 0x40
 80009cc:	d1f9      	bne.n	80009c2 <main+0x3f2>
	  USART3->ICR = UART_CLEAR_TCF;
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <main+0x500>)
 80009d0:	2240      	movs	r2, #64	; 0x40
 80009d2:	621a      	str	r2, [r3, #32]
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80009d4:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <main+0x4f8>)
 80009d6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009da:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <main+0x4f4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <main+0x4f4>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009e8:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <main+0x500>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	4a38      	ldr	r2, [pc, #224]	; (8000ad0 <main+0x500>)
 80009ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f2:	6093      	str	r3, [r2, #8]

	  while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4 ) {}
 80009f4:	bf00      	nop
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <main+0x4fc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	2b10      	cmp	r3, #16
 8000a00:	d1f9      	bne.n	80009f6 <main+0x426>
	  DMA2->LIFCR = DMA_FLAG_HTIF0_4;
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <main+0x4fc>)
 8000a04:	2210      	movs	r2, #16
 8000a06:	609a      	str	r2, [r3, #8]
	  j = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[0];
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <main+0x4e4>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <main+0x4ec>)
 8000a14:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i){
 8000a16:	2301      	movs	r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	e028      	b.n	8000a6e <main+0x49e>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e016      	b.n	8000a50 <main+0x480>
			  yi[j] = aRxBuffer[j] * 1.0;
 8000a22:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <main+0x4e4>)
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a38:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <main+0x4e8>)
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	dde5      	ble.n	8000a22 <main+0x452>
		  }
		  aTxBuffer[i] = aRxBuffer[j];
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <main+0x4e4>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <main+0x4ec>)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i){
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	dbd2      	blt.n	8000a1c <main+0x44c>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000a76:	bf00      	nop
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <main+0x500>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a80:	2b40      	cmp	r3, #64	; 0x40
 8000a82:	d1f9      	bne.n	8000a78 <main+0x4a8>
	  USART3->ICR = UART_CLEAR_TCF;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <main+0x500>)
 8000a86:	2240      	movs	r2, #64	; 0x40
 8000a88:	621a      	str	r2, [r3, #32]
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <main+0x4f8>)
 8000a8c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a90:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <main+0x4f4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <main+0x4f4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <main+0x500>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <main+0x500>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6093      	str	r3, [r2, #8]
	  while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4 ) {}
 8000aaa:	e746      	b.n	800093a <main+0x36a>
  }
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000880 	.word	0x24000880
 8000ab8:	24004880 	.word	0x24004880
 8000abc:	24000080 	.word	0x24000080
 8000ac0:	2400c90c 	.word	0x2400c90c
 8000ac4:	40020028 	.word	0x40020028
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40004800 	.word	0x40004800

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b09c      	sub	sp, #112	; 0x70
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	224c      	movs	r2, #76	; 0x4c
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f008 ff68 	bl	80099b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2220      	movs	r2, #32
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f008 ff62 	bl	80099b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000af4:	2002      	movs	r0, #2
 8000af6:	f004 fba5 	bl	8005244 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <SystemClock_Config+0x100>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <SystemClock_Config+0x100>)
 8000b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <SystemClock_Config+0x100>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <SystemClock_Config+0x104>)
 8000b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b18:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <SystemClock_Config+0x104>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <SystemClock_Config+0x104>)
 8000b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2c:	bf00      	nop
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <SystemClock_Config+0x100>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3a:	d1f8      	bne.n	8000b2e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <SystemClock_Config+0x108>)
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	f023 0303 	bic.w	r3, r3, #3
 8000b44:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <SystemClock_Config+0x108>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2321      	movs	r3, #33	; 0x21
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000b66:	2373      	movs	r3, #115	; 0x73
 8000b68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b76:	230c      	movs	r3, #12
 8000b78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 fb96 	bl	80052b8 <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b92:	f000 fa3e 	bl	8001012 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	233f      	movs	r3, #63	; 0x3f
 8000b98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bb4:	2340      	movs	r3, #64	; 0x40
 8000bb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 ff8b 	bl	8005ad8 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000bc8:	f000 fa23 	bl	8001012 <Error_Handler>
  }


}
 8000bcc:	bf00      	nop
 8000bce:	3770      	adds	r7, #112	; 0x70
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024800 	.word	0x58024800
 8000bd8:	58000400 	.word	0x58000400
 8000bdc:	58024400 	.word	0x58024400

08000be0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000be6:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <MX_SPI1_Init+0xac>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000bec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000bf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bf8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000bfc:	220d      	movs	r2, #13
 8000bfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_SPI1_Init+0xa8>)
 8000c74:	f006 fe1e 	bl	80078b4 <HAL_SPI_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c7e:	f000 f9c8 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2400cf24 	.word	0x2400cf24
 8000c8c:	40013000 	.word	0x40013000

08000c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000c96:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <MX_USART3_UART_Init+0xac>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <MX_USART3_UART_Init+0xb0>)
 8000c9e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4816      	ldr	r0, [pc, #88]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000ce0:	f007 f9bd 	bl	800805e <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000cea:	f000 f992 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000cf2:	f008 fd72 	bl	80097da <HAL_UARTEx_SetTxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f000 f989 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000d04:	f008 fda7 	bl	8009856 <HAL_UARTEx_SetRxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000d0e:	f000 f980 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <MX_USART3_UART_Init+0xa8>)
 8000d14:	f008 fd26 	bl	8009764 <HAL_UARTEx_EnableFifoMode>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000d1e:	f000 f978 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2100      	movs	r1, #0
 8000d26:	2027      	movs	r0, #39	; 0x27
 8000d28:	f001 f8bd 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d2c:	2027      	movs	r0, #39	; 0x27
 8000d2e:	f001 f8d4 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2400c90c 	.word	0x2400c90c
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	00b6c7c0 	.word	0x00b6c7c0

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200b      	movs	r0, #11
 8000d8c:	f001 f88b 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d90:	200b      	movs	r0, #11
 8000d92:	f001 f8a2 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200c      	movs	r0, #12
 8000d9c:	f001 f883 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000da0:	200c      	movs	r0, #12
 8000da2:	f001 f89a 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2100      	movs	r1, #0
 8000daa:	2038      	movs	r0, #56	; 0x38
 8000dac:	f001 f87b 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000db0:	2038      	movs	r0, #56	; 0x38
 8000db2:	f001 f892 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df8:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a46      	ldr	r2, [pc, #280]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a3f      	ldr	r2, [pc, #252]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a37      	ldr	r2, [pc, #220]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a28      	ldr	r2, [pc, #160]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_GPIO_Init+0x174>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f244 0101 	movw	r1, #16385	; 0x4001
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <MX_GPIO_Init+0x178>)
 8000eb4:	f004 f978 	bl	80051a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4820      	ldr	r0, [pc, #128]	; (8000f40 <MX_GPIO_Init+0x17c>)
 8000ebe:	f004 f973 	bl	80051a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481b      	ldr	r0, [pc, #108]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000ed8:	f003 ffb6 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000edc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_GPIO_Init+0x178>)
 8000ef6:	f003 ffa7 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <MX_GPIO_Init+0x17c>)
 8000f12:	f003 ff99 	bl	8004e48 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 fbc6 	bl	80016a8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 fbc3 	bl	80016a8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f000 fbc0 	bl	80016a8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 fcb0 	bl	8001890 <BSP_PB_Init>
}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	; 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020400 	.word	0x58020400
 8000f40:	58021000 	.word	0x58021000
 8000f44:	58020800 	.word	0x58020800

08000f48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f58:	d105      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f083 0301 	eor.w	r3, r3, #1
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f64:	6013      	str	r3, [r2, #0]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	24000060 	.word	0x24000060

08000f78 <tx_complete>:
//  BSP_LED_On(LED1);
//  wTransferState = TRANSFER_COMPLETE;
//}

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_COMPLETE;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <tx_complete+0x1c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2400c880 	.word	0x2400c880

08000f98 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_H_COMPLETE;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <tx_h_complete+0x1c>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2400c880 	.word	0x2400c880

08000fb8 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_SPI_ErrorCallback+0x1c>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	2400c880 	.word	0x2400c880

08000fd8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_UART_TxCpltCallback+0x1c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2400005c 	.word	0x2400005c

08000ff8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8001000:	2002      	movs	r0, #2
 8001002:	f000 fbc7 	bl	8001794 <BSP_LED_On>
  Error_Handler();
 8001006:	f000 f804 	bl	8001012 <Error_Handler>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001016:	b672      	cpsid	i
}
 8001018:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 800101a:	2002      	movs	r0, #2
 800101c:	f000 fc0e 	bl	800183c <BSP_LED_Toggle>
	    HAL_Delay(100);
 8001020:	2064      	movs	r0, #100	; 0x64
 8001022:	f000 fe01 	bl	8001c28 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8001026:	e7f8      	b.n	800101a <Error_Handler+0x8>

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_MspInit+0x30>)
 8001030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x30>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x30>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	58024400 	.word	0x58024400

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0bc      	sub	sp, #240	; 0xf0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	22bc      	movs	r2, #188	; 0xbc
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fc9b 	bl	80099b8 <memset>
  if(hspi->Instance==SPI1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4aa0      	ldr	r2, [pc, #640]	; (8001308 <HAL_SPI_MspInit+0x2ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	f040 8096 	bne.w	80011ba <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800109a:	2304      	movs	r3, #4
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800109e:	f240 1317 	movw	r3, #279	; 0x117
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80010a4:	2308      	movs	r3, #8
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80010a8:	2302      	movs	r3, #2
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f895 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 80010cc:	f7ff ffa1 	bl	8001012 <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 80010d0:	4b8e      	ldr	r3, [pc, #568]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 80010d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010d6:	4a8d      	ldr	r2, [pc, #564]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010e0:	4b8a      	ldr	r3, [pc, #552]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 80010e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b87      	ldr	r3, [pc, #540]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a85      	ldr	r2, [pc, #532]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 800110c:	f248 0360 	movw	r3, #32864	; 0x8060
 8001110:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001126:	2305      	movs	r3, #5
 8001128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001130:	4619      	mov	r1, r3
 8001132:	4877      	ldr	r0, [pc, #476]	; (8001310 <HAL_SPI_MspInit+0x2b4>)
 8001134:	f003 fe88 	bl	8004e48 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 800113a:	4a77      	ldr	r2, [pc, #476]	; (8001318 <HAL_SPI_MspInit+0x2bc>)
 800113c:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800113e:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001140:	2225      	movs	r2, #37	; 0x25
 8001142:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b73      	ldr	r3, [pc, #460]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b70      	ldr	r3, [pc, #448]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001156:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001158:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 800115a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800115e:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001160:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001168:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001176:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800117c:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001182:	4b64      	ldr	r3, [pc, #400]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800118e:	4861      	ldr	r0, [pc, #388]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 8001190:	f000 fecc 	bl	8001f2c <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 800119a:	f7ff ff3a 	bl	8001012 <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 80011a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80011a4:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_SPI_MspInit+0x2b8>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2023      	movs	r0, #35	; 0x23
 80011b0:	f000 fe79 	bl	8001ea6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011b4:	2023      	movs	r0, #35	; 0x23
 80011b6:	f000 fe90 	bl	8001eda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a57      	ldr	r2, [pc, #348]	; (800131c <HAL_SPI_MspInit+0x2c0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	f040 809d 	bne.w	8001300 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80011d2:	2304      	movs	r3, #4
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80011d6:	f240 1317 	movw	r3, #279	; 0x117
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80011dc:	2308      	movs	r3, #8
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80011e0:	2302      	movs	r3, #2
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80011e4:	2302      	movs	r3, #2
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fff9 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8001204:	f7ff ff05 	bl	8001012 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 800120a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800120e:	4a3f      	ldr	r2, [pc, #252]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 800121a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a37      	ldr	r2, [pc, #220]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a30      	ldr	r2, [pc, #192]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a28      	ldr	r2, [pc, #160]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_SPI_MspInit+0x2b0>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001280:	230c      	movs	r3, #12
 8001282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001298:	2305      	movs	r3, #5
 800129a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a2:	4619      	mov	r1, r3
 80012a4:	481e      	ldr	r0, [pc, #120]	; (8001320 <HAL_SPI_MspInit+0x2c4>)
 80012a6:	f003 fdcf 	bl	8004e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c4:	2305      	movs	r3, #5
 80012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ce:	4619      	mov	r1, r3
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <HAL_SPI_MspInit+0x2c8>)
 80012d2:	f003 fdb9 	bl	8004e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d6:	2308      	movs	r3, #8
 80012d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ee:	2305      	movs	r3, #5
 80012f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012f8:	4619      	mov	r1, r3
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_SPI_MspInit+0x2cc>)
 80012fc:	f003 fda4 	bl	8004e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	37f0      	adds	r7, #240	; 0xf0
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013000 	.word	0x40013000
 800130c:	58024400 	.word	0x58024400
 8001310:	58020000 	.word	0x58020000
 8001314:	2400cfac 	.word	0x2400cfac
 8001318:	40020410 	.word	0x40020410
 800131c:	40003800 	.word	0x40003800
 8001320:	58020800 	.word	0x58020800
 8001324:	58020400 	.word	0x58020400
 8001328:	58020c00 	.word	0x58020c00

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ba      	sub	sp, #232	; 0xe8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	22bc      	movs	r2, #188	; 0xbc
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f008 fb33 	bl	80099b8 <memset>
  if(huart->Instance==USART1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a94      	ldr	r2, [pc, #592]	; (80015a8 <HAL_UART_MspInit+0x27c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	f040 8098 	bne.w	800148e <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001362:	2304      	movs	r3, #4
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001366:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 800136c:	2309      	movs	r3, #9
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001370:	2308      	movs	r3, #8
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001374:	2302      	movs	r3, #2
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137c:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800137e:	2300      	movs	r3, #0
 8001380:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001386:	2310      	movs	r3, #16
 8001388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4618      	mov	r0, r3
 8001392:	f004 ff2d 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 800139c:	f7ff fe39 	bl	8001012 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a0:	4b82      	ldr	r3, [pc, #520]	; (80015ac <HAL_UART_MspInit+0x280>)
 80013a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a6:	4a81      	ldr	r2, [pc, #516]	; (80015ac <HAL_UART_MspInit+0x280>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013b0:	4b7e      	ldr	r3, [pc, #504]	; (80015ac <HAL_UART_MspInit+0x280>)
 80013b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b7b      	ldr	r3, [pc, #492]	; (80015ac <HAL_UART_MspInit+0x280>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a79      	ldr	r2, [pc, #484]	; (80015ac <HAL_UART_MspInit+0x280>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b77      	ldr	r3, [pc, #476]	; (80015ac <HAL_UART_MspInit+0x280>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013f6:	2304      	movs	r3, #4
 80013f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001400:	4619      	mov	r1, r3
 8001402:	486b      	ldr	r0, [pc, #428]	; (80015b0 <HAL_UART_MspInit+0x284>)
 8001404:	f003 fd20 	bl	8004e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001420:	2307      	movs	r3, #7
 8001422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142a:	4619      	mov	r1, r3
 800142c:	4860      	ldr	r0, [pc, #384]	; (80015b0 <HAL_UART_MspInit+0x284>)
 800142e:	f003 fd0b 	bl	8004e48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001432:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001434:	4a60      	ldr	r2, [pc, #384]	; (80015b8 <HAL_UART_MspInit+0x28c>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001438:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <HAL_UART_MspInit+0x288>)
 800143a:	222a      	movs	r2, #42	; 0x2a
 800143c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <HAL_UART_MspInit+0x288>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001458:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <HAL_UART_MspInit+0x288>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800145e:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001460:	2200      	movs	r2, #0
 8001462:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146a:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <HAL_UART_MspInit+0x288>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001470:	4850      	ldr	r0, [pc, #320]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001472:	f000 fd5b 	bl	8001f2c <HAL_DMA_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 800147c:	f7ff fdc9 	bl	8001012 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a4c      	ldr	r2, [pc, #304]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001484:	679a      	str	r2, [r3, #120]	; 0x78
 8001486:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <HAL_UART_MspInit+0x288>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800148c:	e088      	b.n	80015a0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a4a      	ldr	r2, [pc, #296]	; (80015bc <HAL_UART_MspInit+0x290>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 8083 	bne.w	80015a0 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800149e:	2304      	movs	r3, #4
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80014a2:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80014a8:	2309      	movs	r3, #9
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80014ac:	2308      	movs	r3, #8
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80014b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b8:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fe8f 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 80014d8:	f7ff fd9b 	bl	8001012 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_UART_MspInit+0x280>)
 80014de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_UART_MspInit+0x280>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <HAL_UART_MspInit+0x280>)
 80014ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <HAL_UART_MspInit+0x280>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <HAL_UART_MspInit+0x280>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_UART_MspInit+0x280>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001532:	2307      	movs	r3, #7
 8001534:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800153c:	4619      	mov	r1, r3
 800153e:	4820      	ldr	r0, [pc, #128]	; (80015c0 <HAL_UART_MspInit+0x294>)
 8001540:	f003 fc82 	bl	8004e48 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001546:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <HAL_UART_MspInit+0x29c>)
 8001548:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0x298>)
 800154c:	222e      	movs	r2, #46	; 0x2e
 800154e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0x298>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_UART_MspInit+0x298>)
 800156c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001570:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_UART_MspInit+0x298>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001586:	f000 fcd1 	bl	8001f2c <HAL_DMA_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001590:	f7ff fd3f 	bl	8001012 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_UART_MspInit+0x298>)
 8001598:	679a      	str	r2, [r3, #120]	; 0x78
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_UART_MspInit+0x298>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015a0:	bf00      	nop
 80015a2:	37e8      	adds	r7, #232	; 0xe8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40011000 	.word	0x40011000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020400 	.word	0x58020400
 80015b4:	2400ce1c 	.word	0x2400ce1c
 80015b8:	40020010 	.word	0x40020010
 80015bc:	40004800 	.word	0x40004800
 80015c0:	58020c00 	.word	0x58020c00
 80015c4:	2400cda4 	.word	0x2400cda4
 80015c8:	40020028 	.word	0x40020028

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 fae6 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Stream0_IRQHandler+0x10>)
 8001626:	f002 f8c9 	bl	80037bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2400ce1c 	.word	0x2400ce1c

08001634 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001638:	2002      	movs	r0, #2
 800163a:	f000 f8ab 	bl	8001794 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_usart3_tx);
	DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800163e:	4b03      	ldr	r3, [pc, #12]	; (800164c <DMA1_Stream1_IRQHandler+0x18>)
 8001640:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001644:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40020000 	.word	0x40020000

08001650 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED3);
 8001654:	2002      	movs	r0, #2
 8001656:	f000 f89d 	bl	8001794 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA2_Stream0_IRQHandler+0x14>)
 800165c:	f002 f8ae 	bl	80037bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2400cfac 	.word	0x2400cfac

08001668 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800166c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001670:	f003 fdcd 	bl	800520e <HAL_GPIO_EXTI_IRQHandler>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 800167c:	2002      	movs	r0, #2
 800167e:	f000 f889 	bl	8001794 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <USART3_IRQHandler+0x14>)
 8001684:	f006 fdbc 	bl	8008200 <HAL_UART_IRQHandler>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2400c90c 	.word	0x2400c90c

08001690 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	  BSP_LED_On(LED3);
 8001694:	2002      	movs	r0, #2
 8001696:	f000 f87d 	bl	8001794 <BSP_LED_On>
  HAL_SPI_IRQHandler(&hspi1);
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <SPI1_IRQHandler+0x14>)
 800169c:	f006 fa0c 	bl	8007ab8 <HAL_SPI_IRQHandler>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2400cf24 	.word	0x2400cf24

080016a8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d009      	beq.n	80016d0 <BSP_LED_Init+0x28>
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d006      	beq.n	80016d0 <BSP_LED_Init+0x28>
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d003      	beq.n	80016d0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016c8:	f06f 0301 	mvn.w	r3, #1
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	e055      	b.n	800177c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10f      	bne.n	80016f6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <BSP_LED_Init+0xe0>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	4a2a      	ldr	r2, [pc, #168]	; (8001788 <BSP_LED_Init+0xe0>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <BSP_LED_Init+0xe0>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	e021      	b.n	800173a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10f      	bne.n	800171c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <BSP_LED_Init+0xe0>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <BSP_LED_Init+0xe0>)
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <BSP_LED_Init+0xe0>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	e00e      	b.n	800173a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <BSP_LED_Init+0xe0>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	4a19      	ldr	r2, [pc, #100]	; (8001788 <BSP_LED_Init+0xe0>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <BSP_LED_Init+0xe0>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <BSP_LED_Init+0xe4>)
 800173e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001742:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <BSP_LED_Init+0xe8>)
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	f107 0218 	add.w	r2, r7, #24
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fb72 	bl	8004e48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <BSP_LED_Init+0xe8>)
 8001768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <BSP_LED_Init+0xe4>)
 8001770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	f003 fd16 	bl	80051a8 <HAL_GPIO_WritePin>
  }

  return ret;
 800177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800177e:	4618      	mov	r0, r3
 8001780:	3730      	adds	r7, #48	; 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	58024400 	.word	0x58024400
 800178c:	080099e0 	.word	0x080099e0
 8001790:	24000000 	.word	0x24000000

08001794 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <BSP_LED_On+0x28>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d006      	beq.n	80017bc <BSP_LED_On+0x28>
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d003      	beq.n	80017bc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017b4:	f06f 0301 	mvn.w	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e00b      	b.n	80017d4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <BSP_LED_On+0x4c>)
 80017c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <BSP_LED_On+0x50>)
 80017c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	f003 fcea 	bl	80051a8 <HAL_GPIO_WritePin>
  }

  return ret;
 80017d4:	68fb      	ldr	r3, [r7, #12]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000000 	.word	0x24000000
 80017e4:	080099e0 	.word	0x080099e0

080017e8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <BSP_LED_Off+0x28>
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d006      	beq.n	8001810 <BSP_LED_Off+0x28>
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d003      	beq.n	8001810 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001808:	f06f 0301 	mvn.w	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e00b      	b.n	8001828 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <BSP_LED_Off+0x4c>)
 8001814:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <BSP_LED_Off+0x50>)
 800181c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001820:	2200      	movs	r2, #0
 8001822:	4619      	mov	r1, r3
 8001824:	f003 fcc0 	bl	80051a8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001828:	68fb      	ldr	r3, [r7, #12]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	24000000 	.word	0x24000000
 8001838:	080099e0 	.word	0x080099e0

0800183c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <BSP_LED_Toggle+0x28>
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d006      	beq.n	8001864 <BSP_LED_Toggle+0x28>
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d003      	beq.n	8001864 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800185c:	f06f 0301 	mvn.w	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e00b      	b.n	800187c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <BSP_LED_Toggle+0x4c>)
 8001868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4907      	ldr	r1, [pc, #28]	; (800188c <BSP_LED_Toggle+0x50>)
 8001870:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f003 fcaf 	bl	80051da <HAL_GPIO_TogglePin>
  }

  return ret;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	24000000 	.word	0x24000000
 800188c:	080099e0 	.word	0x080099e0

08001890 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <BSP_PB_Init+0xc8>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a2c      	ldr	r2, [pc, #176]	; (8001958 <BSP_PB_Init+0xc8>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <BSP_PB_Init+0xc8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018c4:	2302      	movs	r3, #2
 80018c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <BSP_PB_Init+0xcc>)
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 faaf 	bl	8004e48 <HAL_GPIO_Init>
 80018ea:	e030      	b.n	800194e <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <BSP_PB_Init+0xd0>)
 80018ee:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a1a      	ldr	r2, [pc, #104]	; (800195c <BSP_PB_Init+0xcc>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 faa2 	bl	8004e48 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <BSP_PB_Init+0xd4>)
 800190a:	441a      	add	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4916      	ldr	r1, [pc, #88]	; (8001968 <BSP_PB_Init+0xd8>)
 8001910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f003 fa81 	bl	8004e1e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4a10      	ldr	r2, [pc, #64]	; (8001964 <BSP_PB_Init+0xd4>)
 8001922:	1898      	adds	r0, r3, r2
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <BSP_PB_Init+0xdc>)
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	461a      	mov	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	f003 fa56 	bl	8004de0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001934:	2028      	movs	r0, #40	; 0x28
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <BSP_PB_Init+0xe0>)
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	2200      	movs	r2, #0
 8001940:	4619      	mov	r1, r3
 8001942:	f000 fab0 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001946:	2328      	movs	r3, #40	; 0x28
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fac6 	bl	8001eda <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	58024400 	.word	0x58024400
 800195c:	2400000c 	.word	0x2400000c
 8001960:	11110000 	.word	0x11110000
 8001964:	2400d024 	.word	0x2400d024
 8001968:	080099e8 	.word	0x080099e8
 800196c:	24000010 	.word	0x24000010
 8001970:	24000014 	.word	0x24000014

08001974 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fff0 	bl	8001974 <BSP_PB_Callback>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <SystemInit+0xec>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a2:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <SystemInit+0xec>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <SystemInit+0xf0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d807      	bhi.n	80019c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <SystemInit+0xf0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 030f 	bic.w	r3, r3, #15
 80019c0:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <SystemInit+0xf0>)
 80019c2:	f043 0307 	orr.w	r3, r3, #7
 80019c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <SystemInit+0xf4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <SystemInit+0xf4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <SystemInit+0xf4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <SystemInit+0xf4>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	492b      	ldr	r1, [pc, #172]	; (8001a8c <SystemInit+0xf4>)
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <SystemInit+0xf8>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <SystemInit+0xf0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <SystemInit+0xf0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 030f 	bic.w	r3, r3, #15
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <SystemInit+0xf0>)
 80019fc:	f043 0307 	orr.w	r3, r3, #7
 8001a00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <SystemInit+0xf4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <SystemInit+0xf4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <SystemInit+0xf4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <SystemInit+0xf4>)
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <SystemInit+0xfc>)
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <SystemInit+0xf4>)
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <SystemInit+0x100>)
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <SystemInit+0xf4>)
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <SystemInit+0x104>)
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <SystemInit+0xf4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <SystemInit+0xf4>)
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <SystemInit+0x104>)
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <SystemInit+0xf4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <SystemInit+0xf4>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <SystemInit+0x104>)
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <SystemInit+0xf4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <SystemInit+0xf4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <SystemInit+0xf4>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <SystemInit+0xf4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <SystemInit+0x108>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <SystemInit+0x10c>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a62:	d202      	bcs.n	8001a6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <SystemInit+0x110>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <SystemInit+0x114>)
 8001a6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SystemInit+0xec>)
 8001a74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00
 8001a88:	52002000 	.word	0x52002000
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a94:	02020200 	.word	0x02020200
 8001a98:	01ff0000 	.word	0x01ff0000
 8001a9c:	01010280 	.word	0x01010280
 8001aa0:	5c001000 	.word	0x5c001000
 8001aa4:	ffff0000 	.word	0xffff0000
 8001aa8:	51008108 	.word	0x51008108
 8001aac:	52004000 	.word	0x52004000

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab4:	f7ff ff70 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f007 ff47 	bl	8009970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7fe fd75 	bl	80005d0 <main>
  bx  lr
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001aec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001af0:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001af4:	08009a3c 	.word	0x08009a3c
  ldr r2, =_sbss
 8001af8:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001afc:	2400d0c0 	.word	0x2400d0c0

08001b00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC3_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f000 f9c0 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b10:	f004 f998 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_Init+0x68>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	4913      	ldr	r1, [pc, #76]	; (8001b70 <HAL_Init+0x6c>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_Init+0x68>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_Init+0x6c>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_Init+0x70>)
 8001b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b48:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_Init+0x74>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f814 	bl	8001b7c <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e002      	b.n	8001b64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5e:	f7ff fa63 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	080099ec 	.word	0x080099ec
 8001b74:	2400001c 	.word	0x2400001c
 8001b78:	24000018 	.word	0x24000018

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_InitTick+0x60>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e021      	b.n	8001bd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_InitTick+0x64>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_InitTick+0x60>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f9b3 	bl	8001f12 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f96f 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x68>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000024 	.word	0x24000024
 8001be0:	24000018 	.word	0x24000018
 8001be4:	24000020 	.word	0x24000020

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	24000024 	.word	0x24000024
 8001c0c:	2400d0bc 	.word	0x2400d0bc

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2400d0bc 	.word	0x2400d0bc

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	24000024 	.word	0x24000024

08001c70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetREVID+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0c1b      	lsrs	r3, r3, #16
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	5c001000 	.word	0x5c001000

08001c88 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_EnableCompensationCell+0x1c>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_EnableCompensationCell+0x1c>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	58000400 	.word	0x58000400

08001ca8 <__NVIC_SetPriorityGrouping>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_DisableIRQ>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db12      	blt.n	8001d80 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	490a      	ldr	r1, [pc, #40]	; (8001d8c <__NVIC_DisableIRQ+0x44>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	3320      	adds	r3, #32
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
}
 8001d78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d7a:	f3bf 8f6f 	isb	sy
}
 8001d7e:	bf00      	nop
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff05 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff1c 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff90 	bl	8001de4 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff0f 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff1f 	bl	8001d48 <__NVIC_DisableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff96 	bl	8001e4c <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff fe6c 	bl	8001c10 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e316      	b.n	8002572 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a66      	ldr	r2, [pc, #408]	; (80020e4 <HAL_DMA_Init+0x1b8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d04a      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_DMA_Init+0x1bc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d045      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a63      	ldr	r2, [pc, #396]	; (80020ec <HAL_DMA_Init+0x1c0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d040      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a62      	ldr	r2, [pc, #392]	; (80020f0 <HAL_DMA_Init+0x1c4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d03b      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a60      	ldr	r2, [pc, #384]	; (80020f4 <HAL_DMA_Init+0x1c8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d036      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5f      	ldr	r2, [pc, #380]	; (80020f8 <HAL_DMA_Init+0x1cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d031      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <HAL_DMA_Init+0x1d0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d02c      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5c      	ldr	r2, [pc, #368]	; (8002100 <HAL_DMA_Init+0x1d4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d027      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5a      	ldr	r2, [pc, #360]	; (8002104 <HAL_DMA_Init+0x1d8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d022      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a59      	ldr	r2, [pc, #356]	; (8002108 <HAL_DMA_Init+0x1dc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d01d      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_DMA_Init+0x1e0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d018      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a56      	ldr	r2, [pc, #344]	; (8002110 <HAL_DMA_Init+0x1e4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_DMA_Init+0x1e8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a53      	ldr	r2, [pc, #332]	; (8002118 <HAL_DMA_Init+0x1ec>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_DMA_Init+0x1f0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_DMA_Init+0xb8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_DMA_Init+0x1f4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_DMA_Init+0xbc>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_DMA_Init+0xbe>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 813b 	beq.w	8002266 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <HAL_DMA_Init+0x1b8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d04a      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a36      	ldr	r2, [pc, #216]	; (80020e8 <HAL_DMA_Init+0x1bc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d045      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_DMA_Init+0x1c0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d040      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <HAL_DMA_Init+0x1c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d03b      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_DMA_Init+0x1c8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d036      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <HAL_DMA_Init+0x1cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d031      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_DMA_Init+0x1d0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02c      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <HAL_DMA_Init+0x1d4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d027      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <HAL_DMA_Init+0x1d8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d022      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <HAL_DMA_Init+0x1dc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d01d      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a28      	ldr	r2, [pc, #160]	; (800210c <HAL_DMA_Init+0x1e0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d018      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a27      	ldr	r2, [pc, #156]	; (8002110 <HAL_DMA_Init+0x1e4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <HAL_DMA_Init+0x1e8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00e      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a24      	ldr	r2, [pc, #144]	; (8002118 <HAL_DMA_Init+0x1ec>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <HAL_DMA_Init+0x1f0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_DMA_Init+0x174>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_DMA_Init+0x1f4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <HAL_DMA_Init+0x186>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e007      	b.n	80020c2 <HAL_DMA_Init+0x196>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020c2:	e02f      	b.n	8002124 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c4:	f7ff fda4 	bl	8001c10 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d928      	bls.n	8002124 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2203      	movs	r2, #3
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e246      	b.n	8002572 <HAL_DMA_Init+0x646>
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1c8      	bne.n	80020c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4b83      	ldr	r3, [pc, #524]	; (800234c <HAL_DMA_Init+0x420>)
 800213e:	4013      	ands	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800214a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	2b04      	cmp	r3, #4
 8002176:	d107      	bne.n	8002188 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4313      	orrs	r3, r2
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002188:	4b71      	ldr	r3, [pc, #452]	; (8002350 <HAL_DMA_Init+0x424>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_DMA_Init+0x428>)
 800218e:	4013      	ands	r3, r2
 8002190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002194:	d328      	bcc.n	80021e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b28      	cmp	r3, #40	; 0x28
 800219c:	d903      	bls.n	80021a6 <HAL_DMA_Init+0x27a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b2e      	cmp	r3, #46	; 0x2e
 80021a4:	d917      	bls.n	80021d6 <HAL_DMA_Init+0x2aa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b3e      	cmp	r3, #62	; 0x3e
 80021ac:	d903      	bls.n	80021b6 <HAL_DMA_Init+0x28a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b42      	cmp	r3, #66	; 0x42
 80021b4:	d90f      	bls.n	80021d6 <HAL_DMA_Init+0x2aa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b46      	cmp	r3, #70	; 0x46
 80021bc:	d903      	bls.n	80021c6 <HAL_DMA_Init+0x29a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b48      	cmp	r3, #72	; 0x48
 80021c4:	d907      	bls.n	80021d6 <HAL_DMA_Init+0x2aa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b4e      	cmp	r3, #78	; 0x4e
 80021cc:	d905      	bls.n	80021da <HAL_DMA_Init+0x2ae>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b52      	cmp	r3, #82	; 0x52
 80021d4:	d801      	bhi.n	80021da <HAL_DMA_Init+0x2ae>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_DMA_Init+0x2b0>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0307 	bic.w	r3, r3, #7
 80021fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2b04      	cmp	r3, #4
 8002210:	d117      	bne.n	8002242 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f002 fc51 	bl	8004acc <DMA_CheckFifoParam>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e197      	b.n	8002572 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f002 fb8c 	bl	8004968 <DMA_CalcBaseAndBitshift>
 8002250:	4603      	mov	r3, r0
 8002252:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	223f      	movs	r2, #63	; 0x3f
 800225e:	409a      	lsls	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e0cd      	b.n	8002402 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <HAL_DMA_Init+0x42c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d022      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a39      	ldr	r2, [pc, #228]	; (800235c <HAL_DMA_Init+0x430>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01d      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a38      	ldr	r2, [pc, #224]	; (8002360 <HAL_DMA_Init+0x434>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d018      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a36      	ldr	r2, [pc, #216]	; (8002364 <HAL_DMA_Init+0x438>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a35      	ldr	r2, [pc, #212]	; (8002368 <HAL_DMA_Init+0x43c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00e      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a33      	ldr	r2, [pc, #204]	; (800236c <HAL_DMA_Init+0x440>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d009      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_DMA_Init+0x444>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d004      	beq.n	80022b6 <HAL_DMA_Init+0x38a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a30      	ldr	r2, [pc, #192]	; (8002374 <HAL_DMA_Init+0x448>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_DMA_Init+0x38e>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_DMA_Init+0x390>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8097 	beq.w	80023f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a24      	ldr	r2, [pc, #144]	; (8002358 <HAL_DMA_Init+0x42c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d021      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a22      	ldr	r2, [pc, #136]	; (800235c <HAL_DMA_Init+0x430>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01c      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_DMA_Init+0x434>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d017      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_DMA_Init+0x438>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d012      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <HAL_DMA_Init+0x43c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_DMA_Init+0x440>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d008      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_DMA_Init+0x444>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <HAL_DMA_Init+0x3e4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_DMA_Init+0x448>)
 800230e:	4293      	cmp	r3, r2
 8002310:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_DMA_Init+0x44c>)
 800232e:	4013      	ands	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b40      	cmp	r3, #64	; 0x40
 8002338:	d020      	beq.n	800237c <HAL_DMA_Init+0x450>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b80      	cmp	r3, #128	; 0x80
 8002340:	d102      	bne.n	8002348 <HAL_DMA_Init+0x41c>
 8002342:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002346:	e01a      	b.n	800237e <HAL_DMA_Init+0x452>
 8002348:	2300      	movs	r3, #0
 800234a:	e018      	b.n	800237e <HAL_DMA_Init+0x452>
 800234c:	fe10803f 	.word	0xfe10803f
 8002350:	5c001000 	.word	0x5c001000
 8002354:	ffff0000 	.word	0xffff0000
 8002358:	58025408 	.word	0x58025408
 800235c:	5802541c 	.word	0x5802541c
 8002360:	58025430 	.word	0x58025430
 8002364:	58025444 	.word	0x58025444
 8002368:	58025458 	.word	0x58025458
 800236c:	5802546c 	.word	0x5802546c
 8002370:	58025480 	.word	0x58025480
 8002374:	58025494 	.word	0x58025494
 8002378:	fffe000f 	.word	0xfffe000f
 800237c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68d2      	ldr	r2, [r2, #12]
 8002382:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800238c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800239c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b6e      	ldr	r3, [pc, #440]	; (800257c <HAL_DMA_Init+0x650>)
 80023c4:	4413      	add	r3, r2
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_DMA_Init+0x654>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f002 fac7 	bl	8004968 <DMA_CalcBaseAndBitshift>
 80023da:	4603      	mov	r3, r0
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	e008      	b.n	8002402 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0b7      	b.n	8002572 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5f      	ldr	r2, [pc, #380]	; (8002584 <HAL_DMA_Init+0x658>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d072      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5d      	ldr	r2, [pc, #372]	; (8002588 <HAL_DMA_Init+0x65c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d06d      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5c      	ldr	r2, [pc, #368]	; (800258c <HAL_DMA_Init+0x660>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d068      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <HAL_DMA_Init+0x664>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d063      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a59      	ldr	r2, [pc, #356]	; (8002594 <HAL_DMA_Init+0x668>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d05e      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_DMA_Init+0x66c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d059      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a56      	ldr	r2, [pc, #344]	; (800259c <HAL_DMA_Init+0x670>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d054      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a54      	ldr	r2, [pc, #336]	; (80025a0 <HAL_DMA_Init+0x674>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d04f      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a53      	ldr	r2, [pc, #332]	; (80025a4 <HAL_DMA_Init+0x678>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d04a      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_DMA_Init+0x67c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d045      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_DMA_Init+0x680>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d040      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_DMA_Init+0x684>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d03b      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_DMA_Init+0x688>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d036      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <HAL_DMA_Init+0x68c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d031      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_DMA_Init+0x690>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d02c      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_DMA_Init+0x694>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d027      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <HAL_DMA_Init+0x698>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a45      	ldr	r2, [pc, #276]	; (80025c8 <HAL_DMA_Init+0x69c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01d      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a44      	ldr	r2, [pc, #272]	; (80025cc <HAL_DMA_Init+0x6a0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d018      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <HAL_DMA_Init+0x6a4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a41      	ldr	r2, [pc, #260]	; (80025d4 <HAL_DMA_Init+0x6a8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00e      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <HAL_DMA_Init+0x6ac>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3e      	ldr	r2, [pc, #248]	; (80025dc <HAL_DMA_Init+0x6b0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_DMA_Init+0x5c6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <HAL_DMA_Init+0x6b4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_Init+0x5ca>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_DMA_Init+0x5cc>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d032      	beq.n	8002562 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f002 fb61 	bl	8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d102      	bne.n	8002510 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002524:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_DMA_Init+0x624>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d80c      	bhi.n	8002550 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f002 fbde 	bl	8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e008      	b.n	8002562 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	a7fdabf8 	.word	0xa7fdabf8
 8002580:	cccccccd 	.word	0xcccccccd
 8002584:	40020010 	.word	0x40020010
 8002588:	40020028 	.word	0x40020028
 800258c:	40020040 	.word	0x40020040
 8002590:	40020058 	.word	0x40020058
 8002594:	40020070 	.word	0x40020070
 8002598:	40020088 	.word	0x40020088
 800259c:	400200a0 	.word	0x400200a0
 80025a0:	400200b8 	.word	0x400200b8
 80025a4:	40020410 	.word	0x40020410
 80025a8:	40020428 	.word	0x40020428
 80025ac:	40020440 	.word	0x40020440
 80025b0:	40020458 	.word	0x40020458
 80025b4:	40020470 	.word	0x40020470
 80025b8:	40020488 	.word	0x40020488
 80025bc:	400204a0 	.word	0x400204a0
 80025c0:	400204b8 	.word	0x400204b8
 80025c4:	58025408 	.word	0x58025408
 80025c8:	5802541c 	.word	0x5802541c
 80025cc:	58025430 	.word	0x58025430
 80025d0:	58025444 	.word	0x58025444
 80025d4:	58025458 	.word	0x58025458
 80025d8:	5802546c 	.word	0x5802546c
 80025dc:	58025480 	.word	0x58025480
 80025e0:	58025494 	.word	0x58025494

080025e4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0ec      	b.n	80027da <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_DMA_Start+0x2a>
 800260a:	2302      	movs	r3, #2
 800260c:	e0e5      	b.n	80027da <HAL_DMA_Start+0x1f6>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	f040 80d0 	bne.w	80027c4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6b      	ldr	r2, [pc, #428]	; (80027e4 <HAL_DMA_Start+0x200>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d04a      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_DMA_Start+0x204>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d045      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_DMA_Start+0x208>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d040      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a66      	ldr	r2, [pc, #408]	; (80027f0 <HAL_DMA_Start+0x20c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d03b      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_DMA_Start+0x210>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d036      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_DMA_Start+0x214>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d031      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a62      	ldr	r2, [pc, #392]	; (80027fc <HAL_DMA_Start+0x218>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d02c      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_DMA_Start+0x21c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d027      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5f      	ldr	r2, [pc, #380]	; (8002804 <HAL_DMA_Start+0x220>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_DMA_Start+0x224>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01d      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_DMA_Start+0x228>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d018      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_DMA_Start+0x22c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_DMA_Start+0x230>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_DMA_Start+0x234>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_DMA_Start+0x238>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_Start+0xee>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a54      	ldr	r2, [pc, #336]	; (8002820 <HAL_DMA_Start+0x23c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d108      	bne.n	80026e4 <HAL_DMA_Start+0x100>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_DMA_Start+0x110>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f001 ff88 	bl	8004610 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <HAL_DMA_Start+0x200>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d04a      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a36      	ldr	r2, [pc, #216]	; (80027e8 <HAL_DMA_Start+0x204>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d045      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_DMA_Start+0x208>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d040      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_DMA_Start+0x20c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d03b      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_DMA_Start+0x210>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d036      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a30      	ldr	r2, [pc, #192]	; (80027f8 <HAL_DMA_Start+0x214>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d031      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2e      	ldr	r2, [pc, #184]	; (80027fc <HAL_DMA_Start+0x218>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02c      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_DMA_Start+0x21c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d027      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <HAL_DMA_Start+0x220>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d022      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_DMA_Start+0x224>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d01d      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_DMA_Start+0x228>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_DMA_Start+0x22c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_DMA_Start+0x230>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_DMA_Start+0x234>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_DMA_Start+0x238>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_Start+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <HAL_DMA_Start+0x23c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <HAL_DMA_Start+0x1ce>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e012      	b.n	80027d8 <HAL_DMA_Start+0x1f4>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e009      	b.n	80027d8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40020010 	.word	0x40020010
 80027e8:	40020028 	.word	0x40020028
 80027ec:	40020040 	.word	0x40020040
 80027f0:	40020058 	.word	0x40020058
 80027f4:	40020070 	.word	0x40020070
 80027f8:	40020088 	.word	0x40020088
 80027fc:	400200a0 	.word	0x400200a0
 8002800:	400200b8 	.word	0x400200b8
 8002804:	40020410 	.word	0x40020410
 8002808:	40020428 	.word	0x40020428
 800280c:	40020440 	.word	0x40020440
 8002810:	40020458 	.word	0x40020458
 8002814:	40020470 	.word	0x40020470
 8002818:	40020488 	.word	0x40020488
 800281c:	400204a0 	.word	0x400204a0
 8002820:	400204b8 	.word	0x400204b8

08002824 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e226      	b.n	8002c8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_DMA_Start_IT+0x2a>
 800284a:	2302      	movs	r3, #2
 800284c:	e21f      	b.n	8002c8e <HAL_DMA_Start_IT+0x46a>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	f040 820a 	bne.w	8002c78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a68      	ldr	r2, [pc, #416]	; (8002a18 <HAL_DMA_Start_IT+0x1f4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d04a      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a66      	ldr	r2, [pc, #408]	; (8002a1c <HAL_DMA_Start_IT+0x1f8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d045      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_DMA_Start_IT+0x1fc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d040      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_DMA_Start_IT+0x200>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d03b      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a62      	ldr	r2, [pc, #392]	; (8002a28 <HAL_DMA_Start_IT+0x204>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d036      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a60      	ldr	r2, [pc, #384]	; (8002a2c <HAL_DMA_Start_IT+0x208>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d031      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5f      	ldr	r2, [pc, #380]	; (8002a30 <HAL_DMA_Start_IT+0x20c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d02c      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_DMA_Start_IT+0x210>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d027      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <HAL_DMA_Start_IT+0x214>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5a      	ldr	r2, [pc, #360]	; (8002a3c <HAL_DMA_Start_IT+0x218>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01d      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a59      	ldr	r2, [pc, #356]	; (8002a40 <HAL_DMA_Start_IT+0x21c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d018      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_DMA_Start_IT+0x220>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a56      	ldr	r2, [pc, #344]	; (8002a48 <HAL_DMA_Start_IT+0x224>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00e      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_DMA_Start_IT+0x228>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a53      	ldr	r2, [pc, #332]	; (8002a50 <HAL_DMA_Start_IT+0x22c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d004      	beq.n	8002912 <HAL_DMA_Start_IT+0xee>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a51      	ldr	r2, [pc, #324]	; (8002a54 <HAL_DMA_Start_IT+0x230>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d108      	bne.n	8002924 <HAL_DMA_Start_IT+0x100>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e007      	b.n	8002934 <HAL_DMA_Start_IT+0x110>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 fe68 	bl	8004610 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <HAL_DMA_Start_IT+0x1f4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04a      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <HAL_DMA_Start_IT+0x1f8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d045      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <HAL_DMA_Start_IT+0x1fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d040      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <HAL_DMA_Start_IT+0x200>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03b      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <HAL_DMA_Start_IT+0x204>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d036      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <HAL_DMA_Start_IT+0x208>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2b      	ldr	r2, [pc, #172]	; (8002a30 <HAL_DMA_Start_IT+0x20c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02c      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_DMA_Start_IT+0x210>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d027      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_DMA_Start_IT+0x214>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <HAL_DMA_Start_IT+0x218>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01d      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_DMA_Start_IT+0x21c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_DMA_Start_IT+0x220>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_DMA_Start_IT+0x224>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_DMA_Start_IT+0x228>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_DMA_Start_IT+0x22c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_Start_IT+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_DMA_Start_IT+0x230>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Start_IT+0x1c0>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_Start_IT+0x1c2>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 021e 	bic.w	r2, r3, #30
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0216 	orr.w	r2, r2, #22
 80029fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03e      	beq.n	8002a84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0208 	orr.w	r2, r2, #8
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e035      	b.n	8002a84 <HAL_DMA_Start_IT+0x260>
 8002a18:	40020010 	.word	0x40020010
 8002a1c:	40020028 	.word	0x40020028
 8002a20:	40020040 	.word	0x40020040
 8002a24:	40020058 	.word	0x40020058
 8002a28:	40020070 	.word	0x40020070
 8002a2c:	40020088 	.word	0x40020088
 8002a30:	400200a0 	.word	0x400200a0
 8002a34:	400200b8 	.word	0x400200b8
 8002a38:	40020410 	.word	0x40020410
 8002a3c:	40020428 	.word	0x40020428
 8002a40:	40020440 	.word	0x40020440
 8002a44:	40020458 	.word	0x40020458
 8002a48:	40020470 	.word	0x40020470
 8002a4c:	40020488 	.word	0x40020488
 8002a50:	400204a0 	.word	0x400204a0
 8002a54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 020e 	bic.w	r2, r3, #14
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 020a 	orr.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a83      	ldr	r2, [pc, #524]	; (8002c98 <HAL_DMA_Start_IT+0x474>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d072      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a82      	ldr	r2, [pc, #520]	; (8002c9c <HAL_DMA_Start_IT+0x478>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d06d      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <HAL_DMA_Start_IT+0x47c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d068      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7f      	ldr	r2, [pc, #508]	; (8002ca4 <HAL_DMA_Start_IT+0x480>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d063      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <HAL_DMA_Start_IT+0x484>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d05e      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7c      	ldr	r2, [pc, #496]	; (8002cac <HAL_DMA_Start_IT+0x488>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d059      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a7a      	ldr	r2, [pc, #488]	; (8002cb0 <HAL_DMA_Start_IT+0x48c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d054      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a79      	ldr	r2, [pc, #484]	; (8002cb4 <HAL_DMA_Start_IT+0x490>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d04f      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a77      	ldr	r2, [pc, #476]	; (8002cb8 <HAL_DMA_Start_IT+0x494>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d04a      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a76      	ldr	r2, [pc, #472]	; (8002cbc <HAL_DMA_Start_IT+0x498>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d045      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a74      	ldr	r2, [pc, #464]	; (8002cc0 <HAL_DMA_Start_IT+0x49c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d040      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a73      	ldr	r2, [pc, #460]	; (8002cc4 <HAL_DMA_Start_IT+0x4a0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d03b      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a71      	ldr	r2, [pc, #452]	; (8002cc8 <HAL_DMA_Start_IT+0x4a4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d036      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a70      	ldr	r2, [pc, #448]	; (8002ccc <HAL_DMA_Start_IT+0x4a8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d031      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_DMA_Start_IT+0x4ac>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02c      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6d      	ldr	r2, [pc, #436]	; (8002cd4 <HAL_DMA_Start_IT+0x4b0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d027      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6b      	ldr	r2, [pc, #428]	; (8002cd8 <HAL_DMA_Start_IT+0x4b4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d022      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_DMA_Start_IT+0x4b8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d01d      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_DMA_Start_IT+0x4bc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d018      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_DMA_Start_IT+0x4c0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a65      	ldr	r2, [pc, #404]	; (8002ce8 <HAL_DMA_Start_IT+0x4c4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00e      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a64      	ldr	r2, [pc, #400]	; (8002cec <HAL_DMA_Start_IT+0x4c8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a62      	ldr	r2, [pc, #392]	; (8002cf0 <HAL_DMA_Start_IT+0x4cc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a61      	ldr	r2, [pc, #388]	; (8002cf4 <HAL_DMA_Start_IT+0x4d0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_DMA_Start_IT+0x354>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_DMA_Start_IT+0x356>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01a      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a37      	ldr	r2, [pc, #220]	; (8002c98 <HAL_DMA_Start_IT+0x474>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04a      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a36      	ldr	r2, [pc, #216]	; (8002c9c <HAL_DMA_Start_IT+0x478>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d045      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <HAL_DMA_Start_IT+0x47c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d040      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a33      	ldr	r2, [pc, #204]	; (8002ca4 <HAL_DMA_Start_IT+0x480>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d03b      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <HAL_DMA_Start_IT+0x484>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a30      	ldr	r2, [pc, #192]	; (8002cac <HAL_DMA_Start_IT+0x488>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d031      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_DMA_Start_IT+0x48c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02c      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <HAL_DMA_Start_IT+0x490>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d027      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <HAL_DMA_Start_IT+0x494>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d022      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <HAL_DMA_Start_IT+0x498>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01d      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <HAL_DMA_Start_IT+0x49c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_DMA_Start_IT+0x4a0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <HAL_DMA_Start_IT+0x4a4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <HAL_DMA_Start_IT+0x4a8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_DMA_Start_IT+0x4ac>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_Start_IT+0x430>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_DMA_Start_IT+0x4b0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <HAL_DMA_Start_IT+0x442>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e012      	b.n	8002c8c <HAL_DMA_Start_IT+0x468>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e009      	b.n	8002c8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
 8002cd8:	58025408 	.word	0x58025408
 8002cdc:	5802541c 	.word	0x5802541c
 8002ce0:	58025430 	.word	0x58025430
 8002ce4:	58025444 	.word	0x58025444
 8002ce8:	58025458 	.word	0x58025458
 8002cec:	5802546c 	.word	0x5802546c
 8002cf0:	58025480 	.word	0x58025480
 8002cf4:	58025494 	.word	0x58025494

08002cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7fe ff86 	bl	8001c10 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e2dc      	b.n	80032ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d008      	beq.n	8002d2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e2cd      	b.n	80032ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a76      	ldr	r2, [pc, #472]	; (8002f0c <HAL_DMA_Abort+0x214>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d04a      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a74      	ldr	r2, [pc, #464]	; (8002f10 <HAL_DMA_Abort+0x218>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d045      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a73      	ldr	r2, [pc, #460]	; (8002f14 <HAL_DMA_Abort+0x21c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d040      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a71      	ldr	r2, [pc, #452]	; (8002f18 <HAL_DMA_Abort+0x220>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d03b      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <HAL_DMA_Abort+0x224>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d036      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6e      	ldr	r2, [pc, #440]	; (8002f20 <HAL_DMA_Abort+0x228>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d031      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6d      	ldr	r2, [pc, #436]	; (8002f24 <HAL_DMA_Abort+0x22c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d02c      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6b      	ldr	r2, [pc, #428]	; (8002f28 <HAL_DMA_Abort+0x230>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d027      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <HAL_DMA_Abort+0x234>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d022      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_DMA_Abort+0x238>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01d      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <HAL_DMA_Abort+0x23c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d018      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a65      	ldr	r2, [pc, #404]	; (8002f38 <HAL_DMA_Abort+0x240>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a64      	ldr	r2, [pc, #400]	; (8002f3c <HAL_DMA_Abort+0x244>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00e      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a62      	ldr	r2, [pc, #392]	; (8002f40 <HAL_DMA_Abort+0x248>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <HAL_DMA_Abort+0x24c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_DMA_Abort+0xd6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5f      	ldr	r2, [pc, #380]	; (8002f48 <HAL_DMA_Abort+0x250>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_DMA_Abort+0xda>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_DMA_Abort+0xdc>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 021e 	bic.w	r2, r2, #30
 8002de6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00a      	b.n	8002e16 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 020e 	bic.w	r2, r2, #14
 8002e0e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a3c      	ldr	r2, [pc, #240]	; (8002f0c <HAL_DMA_Abort+0x214>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d072      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3a      	ldr	r2, [pc, #232]	; (8002f10 <HAL_DMA_Abort+0x218>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d06d      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a39      	ldr	r2, [pc, #228]	; (8002f14 <HAL_DMA_Abort+0x21c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d068      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <HAL_DMA_Abort+0x220>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d063      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a36      	ldr	r2, [pc, #216]	; (8002f1c <HAL_DMA_Abort+0x224>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d05e      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <HAL_DMA_Abort+0x228>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d059      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a33      	ldr	r2, [pc, #204]	; (8002f24 <HAL_DMA_Abort+0x22c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d054      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a31      	ldr	r2, [pc, #196]	; (8002f28 <HAL_DMA_Abort+0x230>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d04f      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_DMA_Abort+0x234>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d04a      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <HAL_DMA_Abort+0x238>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d045      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_DMA_Abort+0x23c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2b      	ldr	r2, [pc, #172]	; (8002f38 <HAL_DMA_Abort+0x240>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d03b      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <HAL_DMA_Abort+0x244>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d036      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_DMA_Abort+0x248>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_DMA_Abort+0x24c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d02c      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <HAL_DMA_Abort+0x250>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d027      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_DMA_Abort+0x254>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <HAL_DMA_Abort+0x258>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <HAL_DMA_Abort+0x25c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_DMA_Abort+0x260>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_DMA_Abort+0x264>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_DMA_Abort+0x268>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_DMA_Abort+0x26c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_DMA_Abort+0x270>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d132      	bne.n	8002f6c <HAL_DMA_Abort+0x274>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e031      	b.n	8002f6e <HAL_DMA_Abort+0x276>
 8002f0a:	bf00      	nop
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
 8002f4c:	58025408 	.word	0x58025408
 8002f50:	5802541c 	.word	0x5802541c
 8002f54:	58025430 	.word	0x58025430
 8002f58:	58025444 	.word	0x58025444
 8002f5c:	58025458 	.word	0x58025458
 8002f60:	5802546c 	.word	0x5802546c
 8002f64:	58025480 	.word	0x58025480
 8002f68:	58025494 	.word	0x58025494
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6d      	ldr	r2, [pc, #436]	; (800313c <HAL_DMA_Abort+0x444>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04a      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6b      	ldr	r2, [pc, #428]	; (8003140 <HAL_DMA_Abort+0x448>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d045      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_DMA_Abort+0x44c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d040      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a68      	ldr	r2, [pc, #416]	; (8003148 <HAL_DMA_Abort+0x450>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d03b      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a67      	ldr	r2, [pc, #412]	; (800314c <HAL_DMA_Abort+0x454>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d036      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a65      	ldr	r2, [pc, #404]	; (8003150 <HAL_DMA_Abort+0x458>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d031      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a64      	ldr	r2, [pc, #400]	; (8003154 <HAL_DMA_Abort+0x45c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d02c      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a62      	ldr	r2, [pc, #392]	; (8003158 <HAL_DMA_Abort+0x460>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d027      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_DMA_Abort+0x464>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5f      	ldr	r2, [pc, #380]	; (8003160 <HAL_DMA_Abort+0x468>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5e      	ldr	r2, [pc, #376]	; (8003164 <HAL_DMA_Abort+0x46c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5c      	ldr	r2, [pc, #368]	; (8003168 <HAL_DMA_Abort+0x470>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	; (800316c <HAL_DMA_Abort+0x474>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a59      	ldr	r2, [pc, #356]	; (8003170 <HAL_DMA_Abort+0x478>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_DMA_Abort+0x47c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_Abort+0x32a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a56      	ldr	r2, [pc, #344]	; (8003178 <HAL_DMA_Abort+0x480>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d108      	bne.n	8003034 <HAL_DMA_Abort+0x33c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e007      	b.n	8003044 <HAL_DMA_Abort+0x34c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003044:	e013      	b.n	800306e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003046:	f7fe fde3 	bl	8001c10 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b05      	cmp	r3, #5
 8003052:	d90c      	bls.n	800306e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2203      	movs	r2, #3
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e12d      	b.n	80032ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e5      	bne.n	8003046 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <HAL_DMA_Abort+0x444>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_Abort+0x422>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <HAL_DMA_Abort+0x448>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_Abort+0x422>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <HAL_DMA_Abort+0x44c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_Abort+0x422>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <HAL_DMA_Abort+0x450>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_DMA_Abort+0x454>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <HAL_DMA_Abort+0x458>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_DMA_Abort+0x45c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <HAL_DMA_Abort+0x460>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a23      	ldr	r2, [pc, #140]	; (800315c <HAL_DMA_Abort+0x464>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <HAL_DMA_Abort+0x468>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_DMA_Abort+0x46c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_DMA_Abort+0x470>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_DMA_Abort+0x474>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_Abort+0x422>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_DMA_Abort+0x478>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_Abort+0x422>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_DMA_Abort+0x47c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_Abort+0x422>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_DMA_Abort+0x480>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_DMA_Abort+0x426>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_DMA_Abort+0x428>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d02b      	beq.n	800317c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	223f      	movs	r2, #63	; 0x3f
 8003134:	409a      	lsls	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	e02a      	b.n	8003192 <HAL_DMA_Abort+0x49a>
 800313c:	40020010 	.word	0x40020010
 8003140:	40020028 	.word	0x40020028
 8003144:	40020040 	.word	0x40020040
 8003148:	40020058 	.word	0x40020058
 800314c:	40020070 	.word	0x40020070
 8003150:	40020088 	.word	0x40020088
 8003154:	400200a0 	.word	0x400200a0
 8003158:	400200b8 	.word	0x400200b8
 800315c:	40020410 	.word	0x40020410
 8003160:	40020428 	.word	0x40020428
 8003164:	40020440 	.word	0x40020440
 8003168:	40020458 	.word	0x40020458
 800316c:	40020470 	.word	0x40020470
 8003170:	40020488 	.word	0x40020488
 8003174:	400204a0 	.word	0x400204a0
 8003178:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2201      	movs	r2, #1
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4f      	ldr	r2, [pc, #316]	; (80032d4 <HAL_DMA_Abort+0x5dc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d072      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a4d      	ldr	r2, [pc, #308]	; (80032d8 <HAL_DMA_Abort+0x5e0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d06d      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4c      	ldr	r2, [pc, #304]	; (80032dc <HAL_DMA_Abort+0x5e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d068      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <HAL_DMA_Abort+0x5e8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d063      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a49      	ldr	r2, [pc, #292]	; (80032e4 <HAL_DMA_Abort+0x5ec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d05e      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_DMA_Abort+0x5f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d059      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a46      	ldr	r2, [pc, #280]	; (80032ec <HAL_DMA_Abort+0x5f4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d054      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <HAL_DMA_Abort+0x5f8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d04f      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <HAL_DMA_Abort+0x5fc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d04a      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a41      	ldr	r2, [pc, #260]	; (80032f8 <HAL_DMA_Abort+0x600>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d045      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a40      	ldr	r2, [pc, #256]	; (80032fc <HAL_DMA_Abort+0x604>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d040      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <HAL_DMA_Abort+0x608>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d03b      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <HAL_DMA_Abort+0x60c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d036      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <HAL_DMA_Abort+0x610>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d031      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3a      	ldr	r2, [pc, #232]	; (800330c <HAL_DMA_Abort+0x614>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d02c      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_DMA_Abort+0x618>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d027      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a37      	ldr	r2, [pc, #220]	; (8003314 <HAL_DMA_Abort+0x61c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a35      	ldr	r2, [pc, #212]	; (8003318 <HAL_DMA_Abort+0x620>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01d      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_DMA_Abort+0x624>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d018      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a32      	ldr	r2, [pc, #200]	; (8003320 <HAL_DMA_Abort+0x628>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a31      	ldr	r2, [pc, #196]	; (8003324 <HAL_DMA_Abort+0x62c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00e      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <HAL_DMA_Abort+0x630>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2e      	ldr	r2, [pc, #184]	; (800332c <HAL_DMA_Abort+0x634>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d004      	beq.n	8003282 <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <HAL_DMA_Abort+0x638>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_DMA_Abort+0x58e>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_DMA_Abort+0x590>
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003294:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40020010 	.word	0x40020010
 80032d8:	40020028 	.word	0x40020028
 80032dc:	40020040 	.word	0x40020040
 80032e0:	40020058 	.word	0x40020058
 80032e4:	40020070 	.word	0x40020070
 80032e8:	40020088 	.word	0x40020088
 80032ec:	400200a0 	.word	0x400200a0
 80032f0:	400200b8 	.word	0x400200b8
 80032f4:	40020410 	.word	0x40020410
 80032f8:	40020428 	.word	0x40020428
 80032fc:	40020440 	.word	0x40020440
 8003300:	40020458 	.word	0x40020458
 8003304:	40020470 	.word	0x40020470
 8003308:	40020488 	.word	0x40020488
 800330c:	400204a0 	.word	0x400204a0
 8003310:	400204b8 	.word	0x400204b8
 8003314:	58025408 	.word	0x58025408
 8003318:	5802541c 	.word	0x5802541c
 800331c:	58025430 	.word	0x58025430
 8003320:	58025444 	.word	0x58025444
 8003324:	58025458 	.word	0x58025458
 8003328:	5802546c 	.word	0x5802546c
 800332c:	58025480 	.word	0x58025480
 8003330:	58025494 	.word	0x58025494

08003334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e205      	b.n	8003752 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d004      	beq.n	800335c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e1fa      	b.n	8003752 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a8c      	ldr	r2, [pc, #560]	; (8003594 <HAL_DMA_Abort_IT+0x260>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d04a      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a8b      	ldr	r2, [pc, #556]	; (8003598 <HAL_DMA_Abort_IT+0x264>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d045      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a89      	ldr	r2, [pc, #548]	; (800359c <HAL_DMA_Abort_IT+0x268>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d040      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a88      	ldr	r2, [pc, #544]	; (80035a0 <HAL_DMA_Abort_IT+0x26c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d03b      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a86      	ldr	r2, [pc, #536]	; (80035a4 <HAL_DMA_Abort_IT+0x270>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d036      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a85      	ldr	r2, [pc, #532]	; (80035a8 <HAL_DMA_Abort_IT+0x274>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d031      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a83      	ldr	r2, [pc, #524]	; (80035ac <HAL_DMA_Abort_IT+0x278>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02c      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a82      	ldr	r2, [pc, #520]	; (80035b0 <HAL_DMA_Abort_IT+0x27c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d027      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a80      	ldr	r2, [pc, #512]	; (80035b4 <HAL_DMA_Abort_IT+0x280>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7f      	ldr	r2, [pc, #508]	; (80035b8 <HAL_DMA_Abort_IT+0x284>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01d      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7d      	ldr	r2, [pc, #500]	; (80035bc <HAL_DMA_Abort_IT+0x288>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7c      	ldr	r2, [pc, #496]	; (80035c0 <HAL_DMA_Abort_IT+0x28c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <HAL_DMA_Abort_IT+0x290>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	; (80035c8 <HAL_DMA_Abort_IT+0x294>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_DMA_Abort_IT+0x298>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a76      	ldr	r2, [pc, #472]	; (80035d0 <HAL_DMA_Abort_IT+0x29c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Abort_IT+0xcc>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_DMA_Abort_IT+0xce>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d065      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a60      	ldr	r2, [pc, #384]	; (8003594 <HAL_DMA_Abort_IT+0x260>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04a      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5e      	ldr	r2, [pc, #376]	; (8003598 <HAL_DMA_Abort_IT+0x264>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d045      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_DMA_Abort_IT+0x268>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5b      	ldr	r2, [pc, #364]	; (80035a0 <HAL_DMA_Abort_IT+0x26c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d03b      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5a      	ldr	r2, [pc, #360]	; (80035a4 <HAL_DMA_Abort_IT+0x270>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d036      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_DMA_Abort_IT+0x274>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a57      	ldr	r2, [pc, #348]	; (80035ac <HAL_DMA_Abort_IT+0x278>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d02c      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a55      	ldr	r2, [pc, #340]	; (80035b0 <HAL_DMA_Abort_IT+0x27c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d027      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <HAL_DMA_Abort_IT+0x280>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_DMA_Abort_IT+0x284>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01d      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a51      	ldr	r2, [pc, #324]	; (80035bc <HAL_DMA_Abort_IT+0x288>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_DMA_Abort_IT+0x28c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a4e      	ldr	r2, [pc, #312]	; (80035c4 <HAL_DMA_Abort_IT+0x290>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a4c      	ldr	r2, [pc, #304]	; (80035c8 <HAL_DMA_Abort_IT+0x294>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4b      	ldr	r2, [pc, #300]	; (80035cc <HAL_DMA_Abort_IT+0x298>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_DMA_Abort_IT+0x17a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a49      	ldr	r2, [pc, #292]	; (80035d0 <HAL_DMA_Abort_IT+0x29c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <HAL_DMA_Abort_IT+0x18c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e147      	b.n	8003750 <HAL_DMA_Abort_IT+0x41c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e13e      	b.n	8003750 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 020e 	bic.w	r2, r2, #14
 80034e0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_DMA_Abort_IT+0x260>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <HAL_DMA_Abort_IT+0x264>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_DMA_Abort_IT+0x268>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <HAL_DMA_Abort_IT+0x26c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <HAL_DMA_Abort_IT+0x270>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <HAL_DMA_Abort_IT+0x274>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_DMA_Abort_IT+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <HAL_DMA_Abort_IT+0x27c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_DMA_Abort_IT+0x280>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_DMA_Abort_IT+0x284>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_DMA_Abort_IT+0x288>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <HAL_DMA_Abort_IT+0x28c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_DMA_Abort_IT+0x290>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_DMA_Abort_IT+0x294>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_DMA_Abort_IT+0x298>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_Abort_IT+0x24e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <HAL_DMA_Abort_IT+0x29c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d128      	bne.n	80035d4 <HAL_DMA_Abort_IT+0x2a0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e027      	b.n	80035e4 <HAL_DMA_Abort_IT+0x2b0>
 8003594:	40020010 	.word	0x40020010
 8003598:	40020028 	.word	0x40020028
 800359c:	40020040 	.word	0x40020040
 80035a0:	40020058 	.word	0x40020058
 80035a4:	40020070 	.word	0x40020070
 80035a8:	40020088 	.word	0x40020088
 80035ac:	400200a0 	.word	0x400200a0
 80035b0:	400200b8 	.word	0x400200b8
 80035b4:	40020410 	.word	0x40020410
 80035b8:	40020428 	.word	0x40020428
 80035bc:	40020440 	.word	0x40020440
 80035c0:	40020458 	.word	0x40020458
 80035c4:	40020470 	.word	0x40020470
 80035c8:	40020488 	.word	0x40020488
 80035cc:	400204a0 	.word	0x400204a0
 80035d0:	400204b8 	.word	0x400204b8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5c      	ldr	r2, [pc, #368]	; (800375c <HAL_DMA_Abort_IT+0x428>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d072      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5b      	ldr	r2, [pc, #364]	; (8003760 <HAL_DMA_Abort_IT+0x42c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d06d      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a59      	ldr	r2, [pc, #356]	; (8003764 <HAL_DMA_Abort_IT+0x430>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d068      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a58      	ldr	r2, [pc, #352]	; (8003768 <HAL_DMA_Abort_IT+0x434>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d063      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a56      	ldr	r2, [pc, #344]	; (800376c <HAL_DMA_Abort_IT+0x438>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d05e      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a55      	ldr	r2, [pc, #340]	; (8003770 <HAL_DMA_Abort_IT+0x43c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d059      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a53      	ldr	r2, [pc, #332]	; (8003774 <HAL_DMA_Abort_IT+0x440>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d054      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a52      	ldr	r2, [pc, #328]	; (8003778 <HAL_DMA_Abort_IT+0x444>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d04f      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a50      	ldr	r2, [pc, #320]	; (800377c <HAL_DMA_Abort_IT+0x448>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d04a      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a4f      	ldr	r2, [pc, #316]	; (8003780 <HAL_DMA_Abort_IT+0x44c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d045      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a4d      	ldr	r2, [pc, #308]	; (8003784 <HAL_DMA_Abort_IT+0x450>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d040      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4c      	ldr	r2, [pc, #304]	; (8003788 <HAL_DMA_Abort_IT+0x454>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d03b      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a4a      	ldr	r2, [pc, #296]	; (800378c <HAL_DMA_Abort_IT+0x458>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d036      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a49      	ldr	r2, [pc, #292]	; (8003790 <HAL_DMA_Abort_IT+0x45c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a47      	ldr	r2, [pc, #284]	; (8003794 <HAL_DMA_Abort_IT+0x460>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02c      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a46      	ldr	r2, [pc, #280]	; (8003798 <HAL_DMA_Abort_IT+0x464>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d027      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a44      	ldr	r2, [pc, #272]	; (800379c <HAL_DMA_Abort_IT+0x468>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a43      	ldr	r2, [pc, #268]	; (80037a0 <HAL_DMA_Abort_IT+0x46c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01d      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a41      	ldr	r2, [pc, #260]	; (80037a4 <HAL_DMA_Abort_IT+0x470>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d018      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <HAL_DMA_Abort_IT+0x474>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3e      	ldr	r2, [pc, #248]	; (80037ac <HAL_DMA_Abort_IT+0x478>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <HAL_DMA_Abort_IT+0x47c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <HAL_DMA_Abort_IT+0x480>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x3a0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3a      	ldr	r2, [pc, #232]	; (80037b8 <HAL_DMA_Abort_IT+0x484>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_DMA_Abort_IT+0x3a4>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <HAL_DMA_Abort_IT+0x3a6>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d028      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800370c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003724:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800372e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	58025408 	.word	0x58025408
 80037a0:	5802541c 	.word	0x5802541c
 80037a4:	58025430 	.word	0x58025430
 80037a8:	58025444 	.word	0x58025444
 80037ac:	58025458 	.word	0x58025458
 80037b0:	5802546c 	.word	0x5802546c
 80037b4:	58025480 	.word	0x58025480
 80037b8:	58025494 	.word	0x58025494

080037bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037c8:	4b67      	ldr	r3, [pc, #412]	; (8003968 <HAL_DMA_IRQHandler+0x1ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <HAL_DMA_IRQHandler+0x1b0>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5f      	ldr	r2, [pc, #380]	; (8003970 <HAL_DMA_IRQHandler+0x1b4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d04a      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_DMA_IRQHandler+0x1b8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d045      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_DMA_IRQHandler+0x1bc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d040      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5a      	ldr	r2, [pc, #360]	; (800397c <HAL_DMA_IRQHandler+0x1c0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d03b      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a59      	ldr	r2, [pc, #356]	; (8003980 <HAL_DMA_IRQHandler+0x1c4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d036      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a57      	ldr	r2, [pc, #348]	; (8003984 <HAL_DMA_IRQHandler+0x1c8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d031      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_DMA_IRQHandler+0x1cc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d02c      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a54      	ldr	r2, [pc, #336]	; (800398c <HAL_DMA_IRQHandler+0x1d0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d027      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a53      	ldr	r2, [pc, #332]	; (8003990 <HAL_DMA_IRQHandler+0x1d4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_DMA_IRQHandler+0x1d8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01d      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_DMA_IRQHandler+0x1dc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4e      	ldr	r2, [pc, #312]	; (800399c <HAL_DMA_IRQHandler+0x1e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4d      	ldr	r2, [pc, #308]	; (80039a0 <HAL_DMA_IRQHandler+0x1e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_DMA_IRQHandler+0xd2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a48      	ldr	r2, [pc, #288]	; (80039ac <HAL_DMA_IRQHandler+0x1f0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_DMA_IRQHandler+0xd6>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_DMA_IRQHandler+0xd8>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 842b 	beq.w	80040f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2208      	movs	r2, #8
 80038a4:	409a      	lsls	r2, r3
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80a2 	beq.w	80039f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a2e      	ldr	r2, [pc, #184]	; (8003970 <HAL_DMA_IRQHandler+0x1b4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <HAL_DMA_IRQHandler+0x1b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <HAL_DMA_IRQHandler+0x1bc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_DMA_IRQHandler+0x1c0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <HAL_DMA_IRQHandler+0x1c4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_DMA_IRQHandler+0x1c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <HAL_DMA_IRQHandler+0x1cc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a24      	ldr	r2, [pc, #144]	; (800398c <HAL_DMA_IRQHandler+0x1d0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	; (8003990 <HAL_DMA_IRQHandler+0x1d4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_DMA_IRQHandler+0x1d8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_DMA_IRQHandler+0x1dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_DMA_IRQHandler+0x1e0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_DMA_IRQHandler+0x1e4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_IRQHandler+0x194>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_DMA_IRQHandler+0x1f0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d12f      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x1f4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	e02e      	b.n	80039c4 <HAL_DMA_IRQHandler+0x208>
 8003966:	bf00      	nop
 8003968:	24000018 	.word	0x24000018
 800396c:	1b4e81b5 	.word	0x1b4e81b5
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d06e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_DMA_IRQHandler+0x3f8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a67      	ldr	r2, [pc, #412]	; (8003bb8 <HAL_DMA_IRQHandler+0x3fc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a66      	ldr	r2, [pc, #408]	; (8003bbc <HAL_DMA_IRQHandler+0x400>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a64      	ldr	r2, [pc, #400]	; (8003bc0 <HAL_DMA_IRQHandler+0x404>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a63      	ldr	r2, [pc, #396]	; (8003bc4 <HAL_DMA_IRQHandler+0x408>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <HAL_DMA_IRQHandler+0x40c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a60      	ldr	r2, [pc, #384]	; (8003bcc <HAL_DMA_IRQHandler+0x410>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <HAL_DMA_IRQHandler+0x414>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_DMA_IRQHandler+0x418>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5b      	ldr	r2, [pc, #364]	; (8003bd8 <HAL_DMA_IRQHandler+0x41c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5a      	ldr	r2, [pc, #360]	; (8003bdc <HAL_DMA_IRQHandler+0x420>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_DMA_IRQHandler+0x424>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a57      	ldr	r2, [pc, #348]	; (8003be4 <HAL_DMA_IRQHandler+0x428>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a55      	ldr	r2, [pc, #340]	; (8003be8 <HAL_DMA_IRQHandler+0x42c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a54      	ldr	r2, [pc, #336]	; (8003bec <HAL_DMA_IRQHandler+0x430>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2ee>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_DMA_IRQHandler+0x434>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x304>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e003      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x30c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f043 0202 	orr.w	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2204      	movs	r2, #4
 8003af2:	409a      	lsls	r2, r3
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808f 	beq.w	8003c1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <HAL_DMA_IRQHandler+0x3f8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d04a      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_DMA_IRQHandler+0x3fc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d045      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <HAL_DMA_IRQHandler+0x400>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d040      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <HAL_DMA_IRQHandler+0x404>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d03b      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <HAL_DMA_IRQHandler+0x408>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d036      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <HAL_DMA_IRQHandler+0x40c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d031      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_DMA_IRQHandler+0x410>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d02c      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <HAL_DMA_IRQHandler+0x414>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d027      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_DMA_IRQHandler+0x418>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_DMA_IRQHandler+0x41c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01d      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_DMA_IRQHandler+0x420>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_DMA_IRQHandler+0x424>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_DMA_IRQHandler+0x428>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_DMA_IRQHandler+0x42c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a17      	ldr	r2, [pc, #92]	; (8003bec <HAL_DMA_IRQHandler+0x430>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x3e2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_DMA_IRQHandler+0x434>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d12a      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x438>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e023      	b.n	8003bfc <HAL_DMA_IRQHandler+0x440>
 8003bb4:	40020010 	.word	0x40020010
 8003bb8:	40020028 	.word	0x40020028
 8003bbc:	40020040 	.word	0x40020040
 8003bc0:	40020058 	.word	0x40020058
 8003bc4:	40020070 	.word	0x40020070
 8003bc8:	40020088 	.word	0x40020088
 8003bcc:	400200a0 	.word	0x400200a0
 8003bd0:	400200b8 	.word	0x400200b8
 8003bd4:	40020410 	.word	0x40020410
 8003bd8:	40020428 	.word	0x40020428
 8003bdc:	40020440 	.word	0x40020440
 8003be0:	40020458 	.word	0x40020458
 8003be4:	40020470 	.word	0x40020470
 8003be8:	40020488 	.word	0x40020488
 8003bec:	400204a0 	.word	0x400204a0
 8003bf0:	400204b8 	.word	0x400204b8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2204      	movs	r2, #4
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2210      	movs	r2, #16
 8003c26:	409a      	lsls	r2, r3
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a6 	beq.w	8003d7e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a85      	ldr	r2, [pc, #532]	; (8003e4c <HAL_DMA_IRQHandler+0x690>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04a      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a83      	ldr	r2, [pc, #524]	; (8003e50 <HAL_DMA_IRQHandler+0x694>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d045      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a82      	ldr	r2, [pc, #520]	; (8003e54 <HAL_DMA_IRQHandler+0x698>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <HAL_DMA_IRQHandler+0x69c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d03b      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7f      	ldr	r2, [pc, #508]	; (8003e5c <HAL_DMA_IRQHandler+0x6a0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d036      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7d      	ldr	r2, [pc, #500]	; (8003e60 <HAL_DMA_IRQHandler+0x6a4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7c      	ldr	r2, [pc, #496]	; (8003e64 <HAL_DMA_IRQHandler+0x6a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02c      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a7a      	ldr	r2, [pc, #488]	; (8003e68 <HAL_DMA_IRQHandler+0x6ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d027      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a79      	ldr	r2, [pc, #484]	; (8003e6c <HAL_DMA_IRQHandler+0x6b0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a77      	ldr	r2, [pc, #476]	; (8003e70 <HAL_DMA_IRQHandler+0x6b4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a76      	ldr	r2, [pc, #472]	; (8003e74 <HAL_DMA_IRQHandler+0x6b8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a74      	ldr	r2, [pc, #464]	; (8003e78 <HAL_DMA_IRQHandler+0x6bc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a73      	ldr	r2, [pc, #460]	; (8003e7c <HAL_DMA_IRQHandler+0x6c0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a71      	ldr	r2, [pc, #452]	; (8003e80 <HAL_DMA_IRQHandler+0x6c4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a70      	ldr	r2, [pc, #448]	; (8003e84 <HAL_DMA_IRQHandler+0x6c8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x516>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6e      	ldr	r2, [pc, #440]	; (8003e88 <HAL_DMA_IRQHandler+0x6cc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x52c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e009      	b.n	8003cfc <HAL_DMA_IRQHandler+0x540>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf14      	ite	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	2300      	moveq	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d03e      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2210      	movs	r2, #16
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d108      	bne.n	8003d3e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d024      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
 8003d3c:	e01f      	b.n	8003d7e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01b      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
 8003d4e:	e016      	b.n	8003d7e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0208 	bic.w	r2, r2, #8
 8003d6c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2220      	movs	r2, #32
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8110 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <HAL_DMA_IRQHandler+0x690>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d04a      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <HAL_DMA_IRQHandler+0x694>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d045      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <HAL_DMA_IRQHandler+0x698>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d040      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_DMA_IRQHandler+0x69c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d03b      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_DMA_IRQHandler+0x6a0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d036      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <HAL_DMA_IRQHandler+0x6a4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d031      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <HAL_DMA_IRQHandler+0x6a8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <HAL_DMA_IRQHandler+0x6ac>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d027      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_DMA_IRQHandler+0x6b0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <HAL_DMA_IRQHandler+0x6b4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_DMA_IRQHandler+0x6b8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_DMA_IRQHandler+0x6bc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <HAL_DMA_IRQHandler+0x6c0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_DMA_IRQHandler+0x6c4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_DMA_IRQHandler+0x6c8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x678>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_DMA_IRQHandler+0x6cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d12b      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x6d0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e02a      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x6e4>
 8003e4a:	bf00      	nop
 8003e4c:	40020010 	.word	0x40020010
 8003e50:	40020028 	.word	0x40020028
 8003e54:	40020040 	.word	0x40020040
 8003e58:	40020058 	.word	0x40020058
 8003e5c:	40020070 	.word	0x40020070
 8003e60:	40020088 	.word	0x40020088
 8003e64:	400200a0 	.word	0x400200a0
 8003e68:	400200b8 	.word	0x400200b8
 8003e6c:	40020410 	.word	0x40020410
 8003e70:	40020428 	.word	0x40020428
 8003e74:	40020440 	.word	0x40020440
 8003e78:	40020458 	.word	0x40020458
 8003e7c:	40020470 	.word	0x40020470
 8003e80:	40020488 	.word	0x40020488
 8003e84:	400204a0 	.word	0x400204a0
 8003e88:	400204b8 	.word	0x400204b8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8087 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2220      	movs	r2, #32
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d139      	bne.n	8003f36 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0216 	bic.w	r2, r2, #22
 8003ed0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_DMA_IRQHandler+0x736>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0208 	bic.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	223f      	movs	r2, #63	; 0x3f
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 834a 	beq.w	80045c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
          }
          return;
 8003f34:	e344      	b.n	80045c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02c      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
 8003f62:	e027      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d023      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e01e      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0210 	bic.w	r2, r2, #16
 8003f92:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8306 	beq.w	80045ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8088 	beq.w	80040dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a7a      	ldr	r2, [pc, #488]	; (80041c4 <HAL_DMA_IRQHandler+0xa08>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d04a      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a79      	ldr	r2, [pc, #484]	; (80041c8 <HAL_DMA_IRQHandler+0xa0c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d045      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a77      	ldr	r2, [pc, #476]	; (80041cc <HAL_DMA_IRQHandler+0xa10>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d040      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <HAL_DMA_IRQHandler+0xa14>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d03b      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a74      	ldr	r2, [pc, #464]	; (80041d4 <HAL_DMA_IRQHandler+0xa18>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d036      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a73      	ldr	r2, [pc, #460]	; (80041d8 <HAL_DMA_IRQHandler+0xa1c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d031      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a71      	ldr	r2, [pc, #452]	; (80041dc <HAL_DMA_IRQHandler+0xa20>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02c      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a70      	ldr	r2, [pc, #448]	; (80041e0 <HAL_DMA_IRQHandler+0xa24>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d027      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6e      	ldr	r2, [pc, #440]	; (80041e4 <HAL_DMA_IRQHandler+0xa28>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6d      	ldr	r2, [pc, #436]	; (80041e8 <HAL_DMA_IRQHandler+0xa2c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6b      	ldr	r2, [pc, #428]	; (80041ec <HAL_DMA_IRQHandler+0xa30>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a6a      	ldr	r2, [pc, #424]	; (80041f0 <HAL_DMA_IRQHandler+0xa34>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a68      	ldr	r2, [pc, #416]	; (80041f4 <HAL_DMA_IRQHandler+0xa38>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a67      	ldr	r2, [pc, #412]	; (80041f8 <HAL_DMA_IRQHandler+0xa3c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_DMA_IRQHandler+0xa40>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_DMA_IRQHandler+0x8b8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a64      	ldr	r2, [pc, #400]	; (8004200 <HAL_DMA_IRQHandler+0xa44>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d108      	bne.n	8004086 <HAL_DMA_IRQHandler+0x8ca>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e007      	b.n	8004096 <HAL_DMA_IRQHandler+0x8da>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	429a      	cmp	r2, r3
 80040a0:	d307      	bcc.n	80040b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f2      	bne.n	8004096 <HAL_DMA_IRQHandler+0x8da>
 80040b0:	e000      	b.n	80040b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040b2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2203      	movs	r2, #3
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040d2:	e003      	b.n	80040dc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8272 	beq.w	80045ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
 80040ee:	e26c      	b.n	80045ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a43      	ldr	r2, [pc, #268]	; (8004204 <HAL_DMA_IRQHandler+0xa48>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a42      	ldr	r2, [pc, #264]	; (8004208 <HAL_DMA_IRQHandler+0xa4c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01d      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a40      	ldr	r2, [pc, #256]	; (800420c <HAL_DMA_IRQHandler+0xa50>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a3f      	ldr	r2, [pc, #252]	; (8004210 <HAL_DMA_IRQHandler+0xa54>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a3d      	ldr	r2, [pc, #244]	; (8004214 <HAL_DMA_IRQHandler+0xa58>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3c      	ldr	r2, [pc, #240]	; (8004218 <HAL_DMA_IRQHandler+0xa5c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a3a      	ldr	r2, [pc, #232]	; (800421c <HAL_DMA_IRQHandler+0xa60>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x984>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a39      	ldr	r2, [pc, #228]	; (8004220 <HAL_DMA_IRQHandler+0xa64>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <HAL_DMA_IRQHandler+0x988>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <HAL_DMA_IRQHandler+0x98a>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 823f 	beq.w	80045ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	2204      	movs	r2, #4
 800415e:	409a      	lsls	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80cd 	beq.w	8004304 <HAL_DMA_IRQHandler+0xb48>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80c7 	beq.w	8004304 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2204      	movs	r2, #4
 8004180:	409a      	lsls	r2, r3
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d049      	beq.n	8004224 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8210 	beq.w	80045c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ac:	e20a      	b.n	80045c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8206 	beq.w	80045c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041c0:	e200      	b.n	80045c4 <HAL_DMA_IRQHandler+0xe08>
 80041c2:	bf00      	nop
 80041c4:	40020010 	.word	0x40020010
 80041c8:	40020028 	.word	0x40020028
 80041cc:	40020040 	.word	0x40020040
 80041d0:	40020058 	.word	0x40020058
 80041d4:	40020070 	.word	0x40020070
 80041d8:	40020088 	.word	0x40020088
 80041dc:	400200a0 	.word	0x400200a0
 80041e0:	400200b8 	.word	0x400200b8
 80041e4:	40020410 	.word	0x40020410
 80041e8:	40020428 	.word	0x40020428
 80041ec:	40020440 	.word	0x40020440
 80041f0:	40020458 	.word	0x40020458
 80041f4:	40020470 	.word	0x40020470
 80041f8:	40020488 	.word	0x40020488
 80041fc:	400204a0 	.word	0x400204a0
 8004200:	400204b8 	.word	0x400204b8
 8004204:	58025408 	.word	0x58025408
 8004208:	5802541c 	.word	0x5802541c
 800420c:	58025430 	.word	0x58025430
 8004210:	58025444 	.word	0x58025444
 8004214:	58025458 	.word	0x58025458
 8004218:	5802546c 	.word	0x5802546c
 800421c:	58025480 	.word	0x58025480
 8004220:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d160      	bne.n	80042f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a8c      	ldr	r2, [pc, #560]	; (8004464 <HAL_DMA_IRQHandler+0xca8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04a      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a8a      	ldr	r2, [pc, #552]	; (8004468 <HAL_DMA_IRQHandler+0xcac>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d045      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a89      	ldr	r2, [pc, #548]	; (800446c <HAL_DMA_IRQHandler+0xcb0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d040      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a87      	ldr	r2, [pc, #540]	; (8004470 <HAL_DMA_IRQHandler+0xcb4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a86      	ldr	r2, [pc, #536]	; (8004474 <HAL_DMA_IRQHandler+0xcb8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d036      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a84      	ldr	r2, [pc, #528]	; (8004478 <HAL_DMA_IRQHandler+0xcbc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a83      	ldr	r2, [pc, #524]	; (800447c <HAL_DMA_IRQHandler+0xcc0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d02c      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a81      	ldr	r2, [pc, #516]	; (8004480 <HAL_DMA_IRQHandler+0xcc4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d027      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_DMA_IRQHandler+0xcc8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7e      	ldr	r2, [pc, #504]	; (8004488 <HAL_DMA_IRQHandler+0xccc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7d      	ldr	r2, [pc, #500]	; (800448c <HAL_DMA_IRQHandler+0xcd0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7b      	ldr	r2, [pc, #492]	; (8004490 <HAL_DMA_IRQHandler+0xcd4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7a      	ldr	r2, [pc, #488]	; (8004494 <HAL_DMA_IRQHandler+0xcd8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a78      	ldr	r2, [pc, #480]	; (8004498 <HAL_DMA_IRQHandler+0xcdc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a77      	ldr	r2, [pc, #476]	; (800449c <HAL_DMA_IRQHandler+0xce0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_IRQHandler+0xb12>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a75      	ldr	r2, [pc, #468]	; (80044a0 <HAL_DMA_IRQHandler+0xce4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_DMA_IRQHandler+0xb24>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0208 	bic.w	r2, r2, #8
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <HAL_DMA_IRQHandler+0xb34>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8165 	beq.w	80045c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004302:	e15f      	b.n	80045c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2202      	movs	r2, #2
 800430e:	409a      	lsls	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80c5 	beq.w	80044a4 <HAL_DMA_IRQHandler+0xce8>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80bf 	beq.w	80044a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2202      	movs	r2, #2
 8004330:	409a      	lsls	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d018      	beq.n	8004372 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 813a 	beq.w	80045c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800435c:	e134      	b.n	80045c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8130 	beq.w	80045c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004370:	e12a      	b.n	80045c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d168      	bne.n	800444e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a38      	ldr	r2, [pc, #224]	; (8004464 <HAL_DMA_IRQHandler+0xca8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d04a      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a37      	ldr	r2, [pc, #220]	; (8004468 <HAL_DMA_IRQHandler+0xcac>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d045      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a35      	ldr	r2, [pc, #212]	; (800446c <HAL_DMA_IRQHandler+0xcb0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d040      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a34      	ldr	r2, [pc, #208]	; (8004470 <HAL_DMA_IRQHandler+0xcb4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d03b      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a32      	ldr	r2, [pc, #200]	; (8004474 <HAL_DMA_IRQHandler+0xcb8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d036      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a31      	ldr	r2, [pc, #196]	; (8004478 <HAL_DMA_IRQHandler+0xcbc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d031      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a2f      	ldr	r2, [pc, #188]	; (800447c <HAL_DMA_IRQHandler+0xcc0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02c      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2e      	ldr	r2, [pc, #184]	; (8004480 <HAL_DMA_IRQHandler+0xcc4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d027      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <HAL_DMA_IRQHandler+0xcc8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_DMA_IRQHandler+0xccc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d01d      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_DMA_IRQHandler+0xcd0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a28      	ldr	r2, [pc, #160]	; (8004490 <HAL_DMA_IRQHandler+0xcd4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a26      	ldr	r2, [pc, #152]	; (8004494 <HAL_DMA_IRQHandler+0xcd8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <HAL_DMA_IRQHandler+0xcdc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <HAL_DMA_IRQHandler+0xce0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_DMA_IRQHandler+0xc60>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <HAL_DMA_IRQHandler+0xce4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <HAL_DMA_IRQHandler+0xc72>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0214 	bic.w	r2, r2, #20
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e007      	b.n	800443e <HAL_DMA_IRQHandler+0xc82>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 020a 	bic.w	r2, r2, #10
 800443c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80b8 	beq.w	80045c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004460:	e0b2      	b.n	80045c8 <HAL_DMA_IRQHandler+0xe0c>
 8004462:	bf00      	nop
 8004464:	40020010 	.word	0x40020010
 8004468:	40020028 	.word	0x40020028
 800446c:	40020040 	.word	0x40020040
 8004470:	40020058 	.word	0x40020058
 8004474:	40020070 	.word	0x40020070
 8004478:	40020088 	.word	0x40020088
 800447c:	400200a0 	.word	0x400200a0
 8004480:	400200b8 	.word	0x400200b8
 8004484:	40020410 	.word	0x40020410
 8004488:	40020428 	.word	0x40020428
 800448c:	40020440 	.word	0x40020440
 8004490:	40020458 	.word	0x40020458
 8004494:	40020470 	.word	0x40020470
 8004498:	40020488 	.word	0x40020488
 800449c:	400204a0 	.word	0x400204a0
 80044a0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2208      	movs	r2, #8
 80044ae:	409a      	lsls	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8088 	beq.w	80045ca <HAL_DMA_IRQHandler+0xe0e>
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8082 	beq.w	80045ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a41      	ldr	r2, [pc, #260]	; (80045d0 <HAL_DMA_IRQHandler+0xe14>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d04a      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3f      	ldr	r2, [pc, #252]	; (80045d4 <HAL_DMA_IRQHandler+0xe18>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d045      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3e      	ldr	r2, [pc, #248]	; (80045d8 <HAL_DMA_IRQHandler+0xe1c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d040      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3c      	ldr	r2, [pc, #240]	; (80045dc <HAL_DMA_IRQHandler+0xe20>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d03b      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <HAL_DMA_IRQHandler+0xe24>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d036      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a39      	ldr	r2, [pc, #228]	; (80045e4 <HAL_DMA_IRQHandler+0xe28>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d031      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a38      	ldr	r2, [pc, #224]	; (80045e8 <HAL_DMA_IRQHandler+0xe2c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d02c      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a36      	ldr	r2, [pc, #216]	; (80045ec <HAL_DMA_IRQHandler+0xe30>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d027      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <HAL_DMA_IRQHandler+0xe34>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d022      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <HAL_DMA_IRQHandler+0xe38>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01d      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <HAL_DMA_IRQHandler+0xe3c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d018      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a30      	ldr	r2, [pc, #192]	; (80045fc <HAL_DMA_IRQHandler+0xe40>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <HAL_DMA_IRQHandler+0xe44>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <HAL_DMA_IRQHandler+0xe48>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <HAL_DMA_IRQHandler+0xe4c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_DMA_IRQHandler+0xdaa>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2a      	ldr	r2, [pc, #168]	; (800460c <HAL_DMA_IRQHandler+0xe50>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <HAL_DMA_IRQHandler+0xdbc>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 021c 	bic.w	r2, r2, #28
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e007      	b.n	8004588 <HAL_DMA_IRQHandler+0xdcc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 020e 	bic.w	r2, r2, #14
 8004586:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
 80045be:	e004      	b.n	80045ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045c0:	bf00      	nop
 80045c2:	e002      	b.n	80045ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40020010 	.word	0x40020010
 80045d4:	40020028 	.word	0x40020028
 80045d8:	40020040 	.word	0x40020040
 80045dc:	40020058 	.word	0x40020058
 80045e0:	40020070 	.word	0x40020070
 80045e4:	40020088 	.word	0x40020088
 80045e8:	400200a0 	.word	0x400200a0
 80045ec:	400200b8 	.word	0x400200b8
 80045f0:	40020410 	.word	0x40020410
 80045f4:	40020428 	.word	0x40020428
 80045f8:	40020440 	.word	0x40020440
 80045fc:	40020458 	.word	0x40020458
 8004600:	40020470 	.word	0x40020470
 8004604:	40020488 	.word	0x40020488
 8004608:	400204a0 	.word	0x400204a0
 800460c:	400204b8 	.word	0x400204b8

08004610 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a84      	ldr	r2, [pc, #528]	; (8004840 <DMA_SetConfig+0x230>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d072      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a82      	ldr	r2, [pc, #520]	; (8004844 <DMA_SetConfig+0x234>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d06d      	beq.n	800471a <DMA_SetConfig+0x10a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a81      	ldr	r2, [pc, #516]	; (8004848 <DMA_SetConfig+0x238>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d068      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a7f      	ldr	r2, [pc, #508]	; (800484c <DMA_SetConfig+0x23c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d063      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a7e      	ldr	r2, [pc, #504]	; (8004850 <DMA_SetConfig+0x240>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d05e      	beq.n	800471a <DMA_SetConfig+0x10a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <DMA_SetConfig+0x244>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d059      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a7b      	ldr	r2, [pc, #492]	; (8004858 <DMA_SetConfig+0x248>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d054      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a79      	ldr	r2, [pc, #484]	; (800485c <DMA_SetConfig+0x24c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04f      	beq.n	800471a <DMA_SetConfig+0x10a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a78      	ldr	r2, [pc, #480]	; (8004860 <DMA_SetConfig+0x250>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d04a      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a76      	ldr	r2, [pc, #472]	; (8004864 <DMA_SetConfig+0x254>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d045      	beq.n	800471a <DMA_SetConfig+0x10a>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a75      	ldr	r2, [pc, #468]	; (8004868 <DMA_SetConfig+0x258>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d040      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a73      	ldr	r2, [pc, #460]	; (800486c <DMA_SetConfig+0x25c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d03b      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a72      	ldr	r2, [pc, #456]	; (8004870 <DMA_SetConfig+0x260>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d036      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a70      	ldr	r2, [pc, #448]	; (8004874 <DMA_SetConfig+0x264>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d031      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6f      	ldr	r2, [pc, #444]	; (8004878 <DMA_SetConfig+0x268>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d02c      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6d      	ldr	r2, [pc, #436]	; (800487c <DMA_SetConfig+0x26c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d027      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <DMA_SetConfig+0x270>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d022      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <DMA_SetConfig+0x274>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01d      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a69      	ldr	r2, [pc, #420]	; (8004888 <DMA_SetConfig+0x278>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d018      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a67      	ldr	r2, [pc, #412]	; (800488c <DMA_SetConfig+0x27c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a66      	ldr	r2, [pc, #408]	; (8004890 <DMA_SetConfig+0x280>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <DMA_SetConfig+0x10a>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a64      	ldr	r2, [pc, #400]	; (8004894 <DMA_SetConfig+0x284>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a63      	ldr	r2, [pc, #396]	; (8004898 <DMA_SetConfig+0x288>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <DMA_SetConfig+0x10a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a61      	ldr	r2, [pc, #388]	; (800489c <DMA_SetConfig+0x28c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <DMA_SetConfig+0x10e>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <DMA_SetConfig+0x110>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800472c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800473e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <DMA_SetConfig+0x230>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d04a      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3d      	ldr	r2, [pc, #244]	; (8004844 <DMA_SetConfig+0x234>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d045      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <DMA_SetConfig+0x238>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d040      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3a      	ldr	r2, [pc, #232]	; (800484c <DMA_SetConfig+0x23c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d03b      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a38      	ldr	r2, [pc, #224]	; (8004850 <DMA_SetConfig+0x240>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d036      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a37      	ldr	r2, [pc, #220]	; (8004854 <DMA_SetConfig+0x244>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d031      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a35      	ldr	r2, [pc, #212]	; (8004858 <DMA_SetConfig+0x248>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d02c      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a34      	ldr	r2, [pc, #208]	; (800485c <DMA_SetConfig+0x24c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d027      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a32      	ldr	r2, [pc, #200]	; (8004860 <DMA_SetConfig+0x250>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a31      	ldr	r2, [pc, #196]	; (8004864 <DMA_SetConfig+0x254>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d01d      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <DMA_SetConfig+0x258>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2e      	ldr	r2, [pc, #184]	; (800486c <DMA_SetConfig+0x25c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <DMA_SetConfig+0x260>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <DMA_SetConfig+0x264>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a29      	ldr	r2, [pc, #164]	; (8004878 <DMA_SetConfig+0x268>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <DMA_SetConfig+0x1d0>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a28      	ldr	r2, [pc, #160]	; (800487c <DMA_SetConfig+0x26c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <DMA_SetConfig+0x1d4>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <DMA_SetConfig+0x1d6>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d05a      	beq.n	80048a0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	223f      	movs	r2, #63	; 0x3f
 80047f4:	409a      	lsls	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004808:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d108      	bne.n	800482c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800482a:	e087      	b.n	800493c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	60da      	str	r2, [r3, #12]
}
 800483c:	e07e      	b.n	800493c <DMA_SetConfig+0x32c>
 800483e:	bf00      	nop
 8004840:	40020010 	.word	0x40020010
 8004844:	40020028 	.word	0x40020028
 8004848:	40020040 	.word	0x40020040
 800484c:	40020058 	.word	0x40020058
 8004850:	40020070 	.word	0x40020070
 8004854:	40020088 	.word	0x40020088
 8004858:	400200a0 	.word	0x400200a0
 800485c:	400200b8 	.word	0x400200b8
 8004860:	40020410 	.word	0x40020410
 8004864:	40020428 	.word	0x40020428
 8004868:	40020440 	.word	0x40020440
 800486c:	40020458 	.word	0x40020458
 8004870:	40020470 	.word	0x40020470
 8004874:	40020488 	.word	0x40020488
 8004878:	400204a0 	.word	0x400204a0
 800487c:	400204b8 	.word	0x400204b8
 8004880:	58025408 	.word	0x58025408
 8004884:	5802541c 	.word	0x5802541c
 8004888:	58025430 	.word	0x58025430
 800488c:	58025444 	.word	0x58025444
 8004890:	58025458 	.word	0x58025458
 8004894:	5802546c 	.word	0x5802546c
 8004898:	58025480 	.word	0x58025480
 800489c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a28      	ldr	r2, [pc, #160]	; (8004948 <DMA_SetConfig+0x338>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a27      	ldr	r2, [pc, #156]	; (800494c <DMA_SetConfig+0x33c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a25      	ldr	r2, [pc, #148]	; (8004950 <DMA_SetConfig+0x340>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a24      	ldr	r2, [pc, #144]	; (8004954 <DMA_SetConfig+0x344>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <DMA_SetConfig+0x348>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <DMA_SetConfig+0x34c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <DMA_SetConfig+0x350>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <DMA_SetConfig+0x2e0>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <DMA_SetConfig+0x354>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <DMA_SetConfig+0x2e4>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <DMA_SetConfig+0x2e6>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d108      	bne.n	800492c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	60da      	str	r2, [r3, #12]
}
 800492a:	e007      	b.n	800493c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	58025408 	.word	0x58025408
 800494c:	5802541c 	.word	0x5802541c
 8004950:	58025430 	.word	0x58025430
 8004954:	58025444 	.word	0x58025444
 8004958:	58025458 	.word	0x58025458
 800495c:	5802546c 	.word	0x5802546c
 8004960:	58025480 	.word	0x58025480
 8004964:	58025494 	.word	0x58025494

08004968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a42      	ldr	r2, [pc, #264]	; (8004a80 <DMA_CalcBaseAndBitshift+0x118>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d04a      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a41      	ldr	r2, [pc, #260]	; (8004a84 <DMA_CalcBaseAndBitshift+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d045      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a3f      	ldr	r2, [pc, #252]	; (8004a88 <DMA_CalcBaseAndBitshift+0x120>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d040      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a3e      	ldr	r2, [pc, #248]	; (8004a8c <DMA_CalcBaseAndBitshift+0x124>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d03b      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <DMA_CalcBaseAndBitshift+0x128>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d036      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <DMA_CalcBaseAndBitshift+0x12c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d031      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a39      	ldr	r2, [pc, #228]	; (8004a98 <DMA_CalcBaseAndBitshift+0x130>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02c      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a38      	ldr	r2, [pc, #224]	; (8004a9c <DMA_CalcBaseAndBitshift+0x134>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d027      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a36      	ldr	r2, [pc, #216]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x138>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d022      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a35      	ldr	r2, [pc, #212]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x13c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d01d      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a33      	ldr	r2, [pc, #204]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x140>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d018      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a32      	ldr	r2, [pc, #200]	; (8004aac <DMA_CalcBaseAndBitshift+0x144>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x148>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x14c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d009      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x150>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <DMA_CalcBaseAndBitshift+0xa8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <DMA_CalcBaseAndBitshift+0x154>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <DMA_CalcBaseAndBitshift+0xac>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <DMA_CalcBaseAndBitshift+0xae>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d024      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3b10      	subs	r3, #16
 8004a22:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x158>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d908      	bls.n	8004a54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	1d1a      	adds	r2, r3, #4
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58
 8004a52:	e00d      	b.n	8004a70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
 8004a62:	e005      	b.n	8004a70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40020010 	.word	0x40020010
 8004a84:	40020028 	.word	0x40020028
 8004a88:	40020040 	.word	0x40020040
 8004a8c:	40020058 	.word	0x40020058
 8004a90:	40020070 	.word	0x40020070
 8004a94:	40020088 	.word	0x40020088
 8004a98:	400200a0 	.word	0x400200a0
 8004a9c:	400200b8 	.word	0x400200b8
 8004aa0:	40020410 	.word	0x40020410
 8004aa4:	40020428 	.word	0x40020428
 8004aa8:	40020440 	.word	0x40020440
 8004aac:	40020458 	.word	0x40020458
 8004ab0:	40020470 	.word	0x40020470
 8004ab4:	40020488 	.word	0x40020488
 8004ab8:	400204a0 	.word	0x400204a0
 8004abc:	400204b8 	.word	0x400204b8
 8004ac0:	aaaaaaab 	.word	0xaaaaaaab
 8004ac4:	080099fc 	.word	0x080099fc
 8004ac8:	fffffc00 	.word	0xfffffc00

08004acc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d120      	bne.n	8004b22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d858      	bhi.n	8004b9a <DMA_CheckFifoParam+0xce>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <DMA_CheckFifoParam+0x24>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b01 	.word	0x08004b01
 8004af4:	08004b13 	.word	0x08004b13
 8004af8:	08004b01 	.word	0x08004b01
 8004afc:	08004b9b 	.word	0x08004b9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d048      	beq.n	8004b9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b10:	e045      	b.n	8004b9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b1a:	d142      	bne.n	8004ba2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b20:	e03f      	b.n	8004ba2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	d123      	bne.n	8004b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d838      	bhi.n	8004ba6 <DMA_CheckFifoParam+0xda>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <DMA_CheckFifoParam+0x70>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b53 	.word	0x08004b53
 8004b44:	08004b4d 	.word	0x08004b4d
 8004b48:	08004b65 	.word	0x08004b65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b50:	e030      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d025      	beq.n	8004baa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b62:	e022      	b.n	8004baa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b6c:	d11f      	bne.n	8004bae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b72:	e01c      	b.n	8004bae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d902      	bls.n	8004b82 <DMA_CheckFifoParam+0xb6>
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d003      	beq.n	8004b88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b80:	e018      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
        break;
 8004b86:	e015      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00e      	beq.n	8004bb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
    break;
 8004b98:	e00b      	b.n	8004bb2 <DMA_CheckFifoParam+0xe6>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e00a      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e008      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e006      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e004      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004baa:	bf00      	nop
 8004bac:	e002      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <DMA_CheckFifoParam+0xe8>
    break;
 8004bb2:	bf00      	nop
    }
  }

  return status;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a38      	ldr	r2, [pc, #224]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d022      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a36      	ldr	r2, [pc, #216]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01d      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a35      	ldr	r2, [pc, #212]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d018      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a33      	ldr	r2, [pc, #204]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a32      	ldr	r2, [pc, #200]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00e      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d101      	bne.n	8004c26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01a      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	3b08      	subs	r3, #8
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2201      	movs	r2, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c60:	e024      	b.n	8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3b10      	subs	r3, #16
 8004c6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d806      	bhi.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d902      	bls.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3308      	adds	r3, #8
 8004c88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494
 8004cd8:	cccccccd 	.word	0xcccccccd
 8004cdc:	16009600 	.word	0x16009600
 8004ce0:	58025880 	.word	0x58025880
 8004ce4:	aaaaaaab 	.word	0xaaaaaaab
 8004ce8:	400204b8 	.word	0x400204b8
 8004cec:	4002040f 	.word	0x4002040f
 8004cf0:	10008200 	.word	0x10008200
 8004cf4:	40020880 	.word	0x40020880

08004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04a      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d847      	bhi.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d80:	671a      	str	r2, [r3, #112]	; 0x70
 8004d82:	e009      	b.n	8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	58025408 	.word	0x58025408
 8004db4:	5802541c 	.word	0x5802541c
 8004db8:	58025430 	.word	0x58025430
 8004dbc:	58025444 	.word	0x58025444
 8004dc0:	58025458 	.word	0x58025458
 8004dc4:	5802546c 	.word	0x5802546c
 8004dc8:	58025480 	.word	0x58025480
 8004dcc:	58025494 	.word	0x58025494
 8004dd0:	1600963f 	.word	0x1600963f
 8004dd4:	58025940 	.word	0x58025940
 8004dd8:	1000823f 	.word	0x1000823f
 8004ddc:	40020940 	.word	0x40020940

08004de0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	460b      	mov	r3, r1
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e00a      	b.n	8004e12 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004dfc:	7afb      	ldrb	r3, [r7, #11]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
      break;
 8004e08:	e002      	b.n	8004e10 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0e:	bf00      	nop
  }

  return status;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e003      	b.n	8004e3a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	; 0x24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e56:	4b89      	ldr	r3, [pc, #548]	; (800507c <HAL_GPIO_Init+0x234>)
 8004e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e5a:	e194      	b.n	8005186 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	2101      	movs	r1, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8186 	beq.w	8005180 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d00b      	beq.n	8004e94 <HAL_GPIO_Init+0x4c>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d007      	beq.n	8004e94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e88:	2b11      	cmp	r3, #17
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b12      	cmp	r3, #18
 8004e92:	d130      	bne.n	8004ef6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eca:	2201      	movs	r2, #1
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	f003 0201 	and.w	r2, r3, #1
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	2203      	movs	r2, #3
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0xee>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b12      	cmp	r3, #18
 8004f34:	d123      	bne.n	8004f7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	08da      	lsrs	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3208      	adds	r2, #8
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	220f      	movs	r2, #15
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	08da      	lsrs	r2, r3, #3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3208      	adds	r2, #8
 8004f78:	69b9      	ldr	r1, [r7, #24]
 8004f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	2203      	movs	r2, #3
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0203 	and.w	r2, r3, #3
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80e0 	beq.w	8005180 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc0:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_GPIO_Init+0x238>)
 8004fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fc6:	4a2e      	ldr	r2, [pc, #184]	; (8005080 <HAL_GPIO_Init+0x238>)
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_GPIO_Init+0x238>)
 8004fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fde:	4a29      	ldr	r2, [pc, #164]	; (8005084 <HAL_GPIO_Init+0x23c>)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	089b      	lsrs	r3, r3, #2
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4013      	ands	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a20      	ldr	r2, [pc, #128]	; (8005088 <HAL_GPIO_Init+0x240>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d052      	beq.n	80050b0 <HAL_GPIO_Init+0x268>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_GPIO_Init+0x244>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d031      	beq.n	8005076 <HAL_GPIO_Init+0x22e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <HAL_GPIO_Init+0x248>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d02b      	beq.n	8005072 <HAL_GPIO_Init+0x22a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_GPIO_Init+0x24c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d025      	beq.n	800506e <HAL_GPIO_Init+0x226>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <HAL_GPIO_Init+0x250>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01f      	beq.n	800506a <HAL_GPIO_Init+0x222>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_GPIO_Init+0x254>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d019      	beq.n	8005066 <HAL_GPIO_Init+0x21e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <HAL_GPIO_Init+0x258>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_GPIO_Init+0x21a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <HAL_GPIO_Init+0x25c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00d      	beq.n	800505e <HAL_GPIO_Init+0x216>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_GPIO_Init+0x260>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <HAL_GPIO_Init+0x212>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_GPIO_Init+0x264>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_GPIO_Init+0x20e>
 8005052:	2309      	movs	r3, #9
 8005054:	e02d      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 8005056:	230a      	movs	r3, #10
 8005058:	e02b      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 800505a:	2308      	movs	r3, #8
 800505c:	e029      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 800505e:	2307      	movs	r3, #7
 8005060:	e027      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 8005062:	2306      	movs	r3, #6
 8005064:	e025      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 8005066:	2305      	movs	r3, #5
 8005068:	e023      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 800506a:	2304      	movs	r3, #4
 800506c:	e021      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 800506e:	2303      	movs	r3, #3
 8005070:	e01f      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 8005072:	2302      	movs	r3, #2
 8005074:	e01d      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 8005076:	2301      	movs	r3, #1
 8005078:	e01b      	b.n	80050b2 <HAL_GPIO_Init+0x26a>
 800507a:	bf00      	nop
 800507c:	58000080 	.word	0x58000080
 8005080:	58024400 	.word	0x58024400
 8005084:	58000400 	.word	0x58000400
 8005088:	58020000 	.word	0x58020000
 800508c:	58020400 	.word	0x58020400
 8005090:	58020800 	.word	0x58020800
 8005094:	58020c00 	.word	0x58020c00
 8005098:	58021000 	.word	0x58021000
 800509c:	58021400 	.word	0x58021400
 80050a0:	58021800 	.word	0x58021800
 80050a4:	58021c00 	.word	0x58021c00
 80050a8:	58022000 	.word	0x58022000
 80050ac:	58022400 	.word	0x58022400
 80050b0:	2300      	movs	r3, #0
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	f002 0203 	and.w	r2, r2, #3
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	4093      	lsls	r3, r2
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050c2:	4938      	ldr	r1, [pc, #224]	; (80051a4 <HAL_GPIO_Init+0x35c>)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	3302      	adds	r3, #2
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800514a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f ae63 	bne.w	8004e5c <HAL_GPIO_Init+0x14>
  }
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	3724      	adds	r7, #36	; 0x24
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	58000400 	.word	0x58000400

080051a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
 80051b4:	4613      	mov	r3, r2
 80051b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051b8:	787b      	ldrb	r3, [r7, #1]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051c4:	e003      	b.n	80051ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051c6:	887b      	ldrh	r3, [r7, #2]
 80051c8:	041a      	lsls	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	619a      	str	r2, [r3, #24]
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051ec:	887a      	ldrh	r2, [r7, #2]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4013      	ands	r3, r2
 80051f2:	041a      	lsls	r2, r3, #16
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	43d9      	mvns	r1, r3
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	400b      	ands	r3, r1
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	619a      	str	r2, [r3, #24]
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	4603      	mov	r3, r0
 8005216:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb fe87 	bl	8000f48 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_PWREx_ConfigSupply+0x70>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d00a      	beq.n	800526e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005258:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <HAL_PWREx_ConfigSupply+0x70>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d001      	beq.n	800526a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e01f      	b.n	80052aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e01d      	b.n	80052aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_PWREx_ConfigSupply+0x70>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 0207 	bic.w	r2, r3, #7
 8005276:	490f      	ldr	r1, [pc, #60]	; (80052b4 <HAL_PWREx_ConfigSupply+0x70>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800527e:	f7fc fcc7 	bl	8001c10 <HAL_GetTick>
 8005282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005284:	e009      	b.n	800529a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005286:	f7fc fcc3 	bl	8001c10 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005294:	d901      	bls.n	800529a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_PWREx_ConfigSupply+0x70>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a6:	d1ee      	bne.n	8005286 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	58024800 	.word	0x58024800

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08c      	sub	sp, #48	; 0x30
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e3ff      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8087 	beq.w	80053e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d8:	4b99      	ldr	r3, [pc, #612]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052e2:	4b97      	ldr	r3, [pc, #604]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d007      	beq.n	80052fe <HAL_RCC_OscConfig+0x46>
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b18      	cmp	r3, #24
 80052f2:	d110      	bne.n	8005316 <HAL_RCC_OscConfig+0x5e>
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d10b      	bne.n	8005316 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fe:	4b90      	ldr	r3, [pc, #576]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x12c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d168      	bne.n	80053e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e3d9      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531e:	d106      	bne.n	800532e <HAL_RCC_OscConfig+0x76>
 8005320:	4b87      	ldr	r3, [pc, #540]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a86      	ldr	r2, [pc, #536]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e02e      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0x98>
 8005336:	4b82      	ldr	r3, [pc, #520]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a81      	ldr	r2, [pc, #516]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800533c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7e      	ldr	r2, [pc, #504]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e01d      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0xbc>
 800535a:	4b79      	ldr	r3, [pc, #484]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a78      	ldr	r2, [pc, #480]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a75      	ldr	r2, [pc, #468]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00b      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 8005374:	4b72      	ldr	r3, [pc, #456]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a71      	ldr	r2, [pc, #452]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b6f      	ldr	r3, [pc, #444]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6e      	ldr	r2, [pc, #440]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800538a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fc fc3c 	bl	8001c10 <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800539c:	f7fc fc38 	bl	8001c10 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e38d      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053ae:	4b64      	ldr	r3, [pc, #400]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0xe4>
 80053ba:	e014      	b.n	80053e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fc fc28 	bl	8001c10 <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fc fc24 	bl	8001c10 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e379      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053d6:	4b5a      	ldr	r3, [pc, #360]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x10c>
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80ae 	beq.w	8005550 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f4:	4b52      	ldr	r3, [pc, #328]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053fe:	4b50      	ldr	r3, [pc, #320]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <HAL_RCC_OscConfig+0x162>
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	2b18      	cmp	r3, #24
 800540e:	d13a      	bne.n	8005486 <HAL_RCC_OscConfig+0x1ce>
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d135      	bne.n	8005486 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800541a:	4b49      	ldr	r3, [pc, #292]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_RCC_OscConfig+0x17a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e34b      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005432:	f7fc fc1d 	bl	8001c70 <HAL_GetREVID>
 8005436:	4603      	mov	r3, r0
 8005438:	f241 0203 	movw	r2, #4099	; 0x1003
 800543c:	4293      	cmp	r3, r2
 800543e:	d817      	bhi.n	8005470 <HAL_RCC_OscConfig+0x1b8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d108      	bne.n	800545a <HAL_RCC_OscConfig+0x1a2>
 8005448:	4b3d      	ldr	r3, [pc, #244]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005450:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005456:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005458:	e07a      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545a:	4b39      	ldr	r3, [pc, #228]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	031b      	lsls	r3, r3, #12
 8005468:	4935      	ldr	r1, [pc, #212]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800546a:	4313      	orrs	r3, r2
 800546c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800546e:	e06f      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005470:	4b33      	ldr	r3, [pc, #204]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	4930      	ldr	r1, [pc, #192]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005480:	4313      	orrs	r3, r2
 8005482:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005484:	e064      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d045      	beq.n	800551a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0219 	bic.w	r2, r3, #25
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4929      	ldr	r1, [pc, #164]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fc fbb6 	bl	8001c10 <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fc fbb2 	bl	8001c10 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e307      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ba:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c6:	f7fc fbd3 	bl	8001c70 <HAL_GetREVID>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d817      	bhi.n	8005504 <HAL_RCC_OscConfig+0x24c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d108      	bne.n	80054ee <HAL_RCC_OscConfig+0x236>
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054e4:	4a16      	ldr	r2, [pc, #88]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80054e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ea:	6053      	str	r3, [r2, #4]
 80054ec:	e030      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	031b      	lsls	r3, r3, #12
 80054fc:	4910      	ldr	r1, [pc, #64]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
 8005502:	e025      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
 8005504:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	490b      	ldr	r1, [pc, #44]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	e01a      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <HAL_RCC_OscConfig+0x288>)
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fc fb73 	bl	8001c10 <HAL_GetTick>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800552e:	f7fc fb6f 	bl	8001c10 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d903      	bls.n	8005544 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e2c4      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
 8005540:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005544:	4ba4      	ldr	r3, [pc, #656]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1ee      	bne.n	800552e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80a9 	beq.w	80056b0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555e:	4b9e      	ldr	r3, [pc, #632]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005566:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005568:	4b9b      	ldr	r3, [pc, #620]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d007      	beq.n	8005584 <HAL_RCC_OscConfig+0x2cc>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b18      	cmp	r3, #24
 8005578:	d13a      	bne.n	80055f0 <HAL_RCC_OscConfig+0x338>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d135      	bne.n	80055f0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005584:	4b94      	ldr	r3, [pc, #592]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCC_OscConfig+0x2e4>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	2b80      	cmp	r3, #128	; 0x80
 8005596:	d001      	beq.n	800559c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e296      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800559c:	f7fc fb68 	bl	8001c70 <HAL_GetREVID>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d817      	bhi.n	80055da <HAL_RCC_OscConfig+0x322>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d108      	bne.n	80055c4 <HAL_RCC_OscConfig+0x30c>
 80055b2:	4b89      	ldr	r3, [pc, #548]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055ba:	4a87      	ldr	r2, [pc, #540]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055c2:	e075      	b.n	80056b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c4:	4b84      	ldr	r3, [pc, #528]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	069b      	lsls	r3, r3, #26
 80055d2:	4981      	ldr	r1, [pc, #516]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d8:	e06a      	b.n	80056b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055da:	4b7f      	ldr	r3, [pc, #508]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	497b      	ldr	r1, [pc, #492]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ee:	e05f      	b.n	80056b0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d042      	beq.n	800567e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055f8:	4b77      	ldr	r3, [pc, #476]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a76      	ldr	r2, [pc, #472]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc fb04 	bl	8001c10 <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800560c:	f7fc fb00 	bl	8001c10 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e255      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800561e:	4b6e      	ldr	r3, [pc, #440]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800562a:	f7fc fb21 	bl	8001c70 <HAL_GetREVID>
 800562e:	4603      	mov	r3, r0
 8005630:	f241 0203 	movw	r2, #4099	; 0x1003
 8005634:	4293      	cmp	r3, r2
 8005636:	d817      	bhi.n	8005668 <HAL_RCC_OscConfig+0x3b0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	2b20      	cmp	r3, #32
 800563e:	d108      	bne.n	8005652 <HAL_RCC_OscConfig+0x39a>
 8005640:	4b65      	ldr	r3, [pc, #404]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005648:	4a63      	ldr	r2, [pc, #396]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 800564a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564e:	6053      	str	r3, [r2, #4]
 8005650:	e02e      	b.n	80056b0 <HAL_RCC_OscConfig+0x3f8>
 8005652:	4b61      	ldr	r3, [pc, #388]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	069b      	lsls	r3, r3, #26
 8005660:	495d      	ldr	r1, [pc, #372]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
 8005666:	e023      	b.n	80056b0 <HAL_RCC_OscConfig+0x3f8>
 8005668:	4b5b      	ldr	r3, [pc, #364]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	061b      	lsls	r3, r3, #24
 8005676:	4958      	ldr	r1, [pc, #352]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005678:	4313      	orrs	r3, r2
 800567a:	60cb      	str	r3, [r1, #12]
 800567c:	e018      	b.n	80056b0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800567e:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a55      	ldr	r2, [pc, #340]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568a:	f7fc fac1 	bl	8001c10 <HAL_GetTick>
 800568e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005692:	f7fc fabd 	bl	8001c10 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e212      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056a4:	4b4c      	ldr	r3, [pc, #304]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d036      	beq.n	800572a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d019      	beq.n	80056f8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c4:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80056c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c8:	4a43      	ldr	r2, [pc, #268]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fc fa9e 	bl	8001c10 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d8:	f7fc fa9a 	bl	8001c10 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1ef      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80056ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x420>
 80056f6:	e018      	b.n	800572a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f8:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80056fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fc:	4a36      	ldr	r2, [pc, #216]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc fa84 	bl	8001c10 <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570c:	f7fc fa80 	bl	8001c10 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1d5      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800571e:	4b2e      	ldr	r3, [pc, #184]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d036      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d019      	beq.n	8005772 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005748:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800574a:	f7fc fa61 	bl	8001c10 <HAL_GetTick>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005752:	f7fc fa5d 	bl	8001c10 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e1b2      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005764:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f0      	beq.n	8005752 <HAL_RCC_OscConfig+0x49a>
 8005770:	e018      	b.n	80057a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005772:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 8005778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800577e:	f7fc fa47 	bl	8001c10 <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005786:	f7fc fa43 	bl	8001c10 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e198      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_RCC_OscConfig+0x520>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f0      	bne.n	8005786 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8085 	beq.w	80058bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057b2:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <HAL_RCC_OscConfig+0x524>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a09      	ldr	r2, [pc, #36]	; (80057dc <HAL_RCC_OscConfig+0x524>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057be:	f7fc fa27 	bl	8001c10 <HAL_GetTick>
 80057c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c4:	e00c      	b.n	80057e0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7fc fa23 	bl	8001c10 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b64      	cmp	r3, #100	; 0x64
 80057d2:	d905      	bls.n	80057e0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e178      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
 80057d8:	58024400 	.word	0x58024400
 80057dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e0:	4b96      	ldr	r3, [pc, #600]	; (8005a3c <HAL_RCC_OscConfig+0x784>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ec      	beq.n	80057c6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <HAL_RCC_OscConfig+0x54a>
 80057f4:	4b92      	ldr	r3, [pc, #584]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a91      	ldr	r2, [pc, #580]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	e02d      	b.n	800585e <HAL_RCC_OscConfig+0x5a6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0x56c>
 800580a:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a8c      	ldr	r2, [pc, #560]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	4b8a      	ldr	r3, [pc, #552]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a89      	ldr	r2, [pc, #548]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800581c:	f023 0304 	bic.w	r3, r3, #4
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	e01c      	b.n	800585e <HAL_RCC_OscConfig+0x5a6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b05      	cmp	r3, #5
 800582a:	d10c      	bne.n	8005846 <HAL_RCC_OscConfig+0x58e>
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	4a83      	ldr	r2, [pc, #524]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005832:	f043 0304 	orr.w	r3, r3, #4
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
 8005838:	4b81      	ldr	r3, [pc, #516]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	4a80      	ldr	r2, [pc, #512]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	6713      	str	r3, [r2, #112]	; 0x70
 8005844:	e00b      	b.n	800585e <HAL_RCC_OscConfig+0x5a6>
 8005846:	4b7e      	ldr	r3, [pc, #504]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	4a7d      	ldr	r2, [pc, #500]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	6713      	str	r3, [r2, #112]	; 0x70
 8005852:	4b7b      	ldr	r3, [pc, #492]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005856:	4a7a      	ldr	r2, [pc, #488]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005858:	f023 0304 	bic.w	r3, r3, #4
 800585c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d015      	beq.n	8005892 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005866:	f7fc f9d3 	bl	8001c10 <HAL_GetTick>
 800586a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800586c:	e00a      	b.n	8005884 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fc f9cf 	bl	8001c10 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e122      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005884:	4b6e      	ldr	r3, [pc, #440]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ee      	beq.n	800586e <HAL_RCC_OscConfig+0x5b6>
 8005890:	e014      	b.n	80058bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005892:	f7fc f9bd 	bl	8001c10 <HAL_GetTick>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005898:	e00a      	b.n	80058b0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800589a:	f7fc f9b9 	bl	8001c10 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e10c      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058b0:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ee      	bne.n	800589a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8101 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058c6:	4b5e      	ldr	r3, [pc, #376]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ce:	2b18      	cmp	r3, #24
 80058d0:	f000 80bc 	beq.w	8005a4c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b02      	cmp	r3, #2
 80058da:	f040 8095 	bne.w	8005a08 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058de:	4b58      	ldr	r3, [pc, #352]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a57      	ldr	r2, [pc, #348]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80058e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ea:	f7fc f991 	bl	8001c10 <HAL_GetTick>
 80058ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f2:	f7fc f98d 	bl	8001c10 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e0e2      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005904:	4b4e      	ldr	r3, [pc, #312]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005910:	4b4b      	ldr	r3, [pc, #300]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005914:	4b4b      	ldr	r3, [pc, #300]	; (8005a44 <HAL_RCC_OscConfig+0x78c>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	430a      	orrs	r2, r1
 8005924:	4946      	ldr	r1, [pc, #280]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005926:	4313      	orrs	r3, r2
 8005928:	628b      	str	r3, [r1, #40]	; 0x28
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	3b01      	subs	r3, #1
 8005930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	3b01      	subs	r3, #1
 800593a:	025b      	lsls	r3, r3, #9
 800593c:	b29b      	uxth	r3, r3
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	3b01      	subs	r3, #1
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	3b01      	subs	r3, #1
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800595a:	4939      	ldr	r1, [pc, #228]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800595c:	4313      	orrs	r3, r2
 800595e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005960:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a36      	ldr	r2, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800596c:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800596e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005970:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <HAL_RCC_OscConfig+0x790>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005978:	00d2      	lsls	r2, r2, #3
 800597a:	4931      	ldr	r1, [pc, #196]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800597c:	4313      	orrs	r3, r2
 800597e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005980:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f023 020c 	bic.w	r2, r3, #12
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	492c      	ldr	r1, [pc, #176]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 800598e:	4313      	orrs	r3, r2
 8005990:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	f023 0202 	bic.w	r2, r3, #2
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	4928      	ldr	r1, [pc, #160]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059a4:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4a25      	ldr	r2, [pc, #148]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059bc:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fc f916 	bl	8001c10 <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fc f912 	bl	8001c10 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e067      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x730>
 8005a06:	e05f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fc f8fc 	bl	8001c10 <HAL_GetTick>
 8005a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fc f8f8 	bl	8001c10 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e04d      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a2e:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <HAL_RCC_OscConfig+0x788>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x764>
 8005a3a:	e045      	b.n	8005ac8 <HAL_RCC_OscConfig+0x810>
 8005a3c:	58024800 	.word	0x58024800
 8005a40:	58024400 	.word	0x58024400
 8005a44:	fffffc0c 	.word	0xfffffc0c
 8005a48:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a4c:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <HAL_RCC_OscConfig+0x81c>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_OscConfig+0x81c>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d031      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f003 0203 	and.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d12a      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d122      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d11a      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	0a5b      	lsrs	r3, r3, #9
 8005a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d111      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3730      	adds	r7, #48	; 0x30
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	58024400 	.word	0x58024400

08005ad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e19c      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b8a      	ldr	r3, [pc, #552]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b87      	ldr	r3, [pc, #540]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	4985      	ldr	r1, [pc, #532]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b83      	ldr	r3, [pc, #524]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e184      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	4b7b      	ldr	r3, [pc, #492]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d908      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b38:	4b78      	ldr	r3, [pc, #480]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	4975      	ldr	r1, [pc, #468]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	4b70      	ldr	r3, [pc, #448]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d908      	bls.n	8005b78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b66:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	496a      	ldr	r1, [pc, #424]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	4b64      	ldr	r3, [pc, #400]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d908      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b94:	4b61      	ldr	r3, [pc, #388]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	495e      	ldr	r1, [pc, #376]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d908      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bc2:	4b56      	ldr	r3, [pc, #344]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4953      	ldr	r1, [pc, #332]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4b4d      	ldr	r3, [pc, #308]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d908      	bls.n	8005c02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f023 020f 	bic.w	r2, r3, #15
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4947      	ldr	r1, [pc, #284]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d055      	beq.n	8005cba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c0e:	4b43      	ldr	r3, [pc, #268]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4940      	ldr	r1, [pc, #256]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c28:	4b3c      	ldr	r3, [pc, #240]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d121      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0f6      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c40:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d115      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0ea      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c58:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0de      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c68:	4b2c      	ldr	r3, [pc, #176]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0d6      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c78:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f023 0207 	bic.w	r2, r3, #7
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4925      	ldr	r1, [pc, #148]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8a:	f7fb ffc1 	bl	8001c10 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c90:	e00a      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c92:	f7fb ffbd 	bl	8001c10 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e0be      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d1eb      	bne.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d010      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d208      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	490e      	ldr	r1, [pc, #56]	; (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d214      	bcs.n	8005d20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 020f 	bic.w	r2, r3, #15
 8005cfe:	4906      	ldr	r1, [pc, #24]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d005      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e086      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
 8005d18:	52002000 	.word	0x52002000
 8005d1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d208      	bcs.n	8005d4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	4939      	ldr	r1, [pc, #228]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d208      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d6a:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	492e      	ldr	r1, [pc, #184]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d208      	bcs.n	8005daa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	4922      	ldr	r1, [pc, #136]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d010      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d208      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4917      	ldr	r1, [pc, #92]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dd8:	f000 f834 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	4912      	ldr	r1, [pc, #72]	; (8005e34 <HAL_RCC_ClockConfig+0x35c>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	; (8005e34 <HAL_RCC_ClockConfig+0x35c>)
 8005e00:	5cd3      	ldrb	r3, [r2, r3]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x360>)
 8005e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <HAL_RCC_ClockConfig+0x364>)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_RCC_ClockConfig+0x368>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fb feae 	bl	8001b7c <HAL_InitTick>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	58024400 	.word	0x58024400
 8005e34:	080099ec 	.word	0x080099ec
 8005e38:	2400001c 	.word	0x2400001c
 8005e3c:	24000018 	.word	0x24000018
 8005e40:	24000020 	.word	0x24000020

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4a:	4bb3      	ldr	r3, [pc, #716]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e52:	2b18      	cmp	r3, #24
 8005e54:	f200 8155 	bhi.w	8006102 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	08006103 	.word	0x08006103
 8005e68:	08006103 	.word	0x08006103
 8005e6c:	08006103 	.word	0x08006103
 8005e70:	08006103 	.word	0x08006103
 8005e74:	08006103 	.word	0x08006103
 8005e78:	08006103 	.word	0x08006103
 8005e7c:	08006103 	.word	0x08006103
 8005e80:	08005eeb 	.word	0x08005eeb
 8005e84:	08006103 	.word	0x08006103
 8005e88:	08006103 	.word	0x08006103
 8005e8c:	08006103 	.word	0x08006103
 8005e90:	08006103 	.word	0x08006103
 8005e94:	08006103 	.word	0x08006103
 8005e98:	08006103 	.word	0x08006103
 8005e9c:	08006103 	.word	0x08006103
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	08006103 	.word	0x08006103
 8005ea8:	08006103 	.word	0x08006103
 8005eac:	08006103 	.word	0x08006103
 8005eb0:	08006103 	.word	0x08006103
 8005eb4:	08006103 	.word	0x08006103
 8005eb8:	08006103 	.word	0x08006103
 8005ebc:	08006103 	.word	0x08006103
 8005ec0:	08005ef7 	.word	0x08005ef7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec4:	4b94      	ldr	r3, [pc, #592]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ed0:	4b91      	ldr	r3, [pc, #580]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	4a90      	ldr	r2, [pc, #576]	; (800611c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ee2:	e111      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	; (800611c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ee6:	61bb      	str	r3, [r7, #24]
    break;
 8005ee8:	e10e      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005eea:	4b8d      	ldr	r3, [pc, #564]	; (8006120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eec:	61bb      	str	r3, [r7, #24]
    break;
 8005eee:	e10b      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ef0:	4b8c      	ldr	r3, [pc, #560]	; (8006124 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ef2:	61bb      	str	r3, [r7, #24]
    break;
 8005ef4:	e108      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef6:	4b88      	ldr	r3, [pc, #544]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f00:	4b85      	ldr	r3, [pc, #532]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f0c:	4b82      	ldr	r3, [pc, #520]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f16:	4b80      	ldr	r3, [pc, #512]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80e1 	beq.w	80060fc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f000 8083 	beq.w	8006048 <HAL_RCC_GetSysClockFreq+0x204>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f200 80a1 	bhi.w	800608c <HAL_RCC_GetSysClockFreq+0x248>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCC_GetSysClockFreq+0x114>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d056      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f56:	e099      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f58:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02d      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f64:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	4a6b      	ldr	r2, [pc, #428]	; (800611c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b62      	ldr	r3, [pc, #392]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fbe:	e087      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800612c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b51      	ldr	r3, [pc, #324]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fe6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006002:	e065      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006130 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b40      	ldr	r3, [pc, #256]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a02 	vldr	s12, [r7, #8]
 800602a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	e043      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006134 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a02 	vldr	s12, [r7, #8]
 800606e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608a:	e021      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006130 <HAL_RCC_GetSysClockFreq+0x2ec>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060d0:	4b11      	ldr	r3, [pc, #68]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	0a5b      	lsrs	r3, r3, #9
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	3301      	adds	r3, #1
 80060dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f4:	ee17 3a90 	vmov	r3, s15
 80060f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060fa:	e005      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
    break;
 8006100:	e002      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006102:	4b07      	ldr	r3, [pc, #28]	; (8006120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006104:	61bb      	str	r3, [r7, #24]
    break;
 8006106:	bf00      	nop
  }

  return sysclockfreq;
 8006108:	69bb      	ldr	r3, [r7, #24]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3724      	adds	r7, #36	; 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400
 800611c:	03d09000 	.word	0x03d09000
 8006120:	003d0900 	.word	0x003d0900
 8006124:	007f2815 	.word	0x007f2815
 8006128:	46000000 	.word	0x46000000
 800612c:	4c742400 	.word	0x4c742400
 8006130:	4a742400 	.word	0x4a742400
 8006134:	4afe502a 	.word	0x4afe502a

08006138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800613e:	f7ff fe81 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b10      	ldr	r3, [pc, #64]	; (8006188 <HAL_RCC_GetHCLKFreq+0x50>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	490f      	ldr	r1, [pc, #60]	; (800618c <HAL_RCC_GetHCLKFreq+0x54>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_RCC_GetHCLKFreq+0x50>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	4a09      	ldr	r2, [pc, #36]	; (800618c <HAL_RCC_GetHCLKFreq+0x54>)
 8006166:	5cd3      	ldrb	r3, [r2, r3]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	4a07      	ldr	r2, [pc, #28]	; (8006190 <HAL_RCC_GetHCLKFreq+0x58>)
 8006174:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006176:	4a07      	ldr	r2, [pc, #28]	; (8006194 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800617c:	4b04      	ldr	r3, [pc, #16]	; (8006190 <HAL_RCC_GetHCLKFreq+0x58>)
 800617e:	681b      	ldr	r3, [r3, #0]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	58024400 	.word	0x58024400
 800618c:	080099ec 	.word	0x080099ec
 8006190:	2400001c 	.word	0x2400001c
 8006194:	24000018 	.word	0x24000018

08006198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800619c:	f7ff ffcc 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4904      	ldr	r1, [pc, #16]	; (80061c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	58024400 	.word	0x58024400
 80061c0:	080099ec 	.word	0x080099ec

080061c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061c8:	f7ff ffb6 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 80061cc:	4602      	mov	r2, r0
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	4904      	ldr	r1, [pc, #16]	; (80061ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80061da:	5ccb      	ldrb	r3, [r1, r3]
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	58024400 	.word	0x58024400
 80061ec:	080099ec 	.word	0x080099ec

080061f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061f8:	2300      	movs	r3, #0
 80061fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061fc:	2300      	movs	r3, #0
 80061fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d03f      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006214:	d02a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800621a:	d824      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800621c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006220:	d018      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006226:	d81e      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800622c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006230:	d007      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006232:	e018      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4bab      	ldr	r3, [pc, #684]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4aaa      	ldr	r2, [pc, #680]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006240:	e015      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2102      	movs	r1, #2
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f9cf 	bl	80075ec <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006252:	e00c      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3324      	adds	r3, #36	; 0x24
 8006258:	2102      	movs	r1, #2
 800625a:	4618      	mov	r0, r3
 800625c:	f001 fa78 	bl	8007750 <RCCEx_PLL3_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006264:	e003      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
      break;
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800626c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006274:	4b9b      	ldr	r3, [pc, #620]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006280:	4998      	ldr	r1, [pc, #608]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006282:	4313      	orrs	r3, r2
 8006284:	650b      	str	r3, [r1, #80]	; 0x50
 8006286:	e001      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d03d      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629c:	2b04      	cmp	r3, #4
 800629e:	d826      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062bd 	.word	0x080062bd
 80062ac:	080062cb 	.word	0x080062cb
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062f5 	.word	0x080062f5
 80062b8:	080062f5 	.word	0x080062f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062bc:	4b89      	ldr	r3, [pc, #548]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	4a88      	ldr	r2, [pc, #544]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c8:	e015      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3304      	adds	r3, #4
 80062ce:	2100      	movs	r1, #0
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f98b 	bl	80075ec <RCCEx_PLL2_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062da:	e00c      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3324      	adds	r3, #36	; 0x24
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 fa34 	bl	8007750 <RCCEx_PLL3_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ec:	e003      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
      break;
 80062f2:	e000      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062fc:	4b79      	ldr	r3, [pc, #484]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006300:	f023 0207 	bic.w	r2, r3, #7
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	4976      	ldr	r1, [pc, #472]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800630a:	4313      	orrs	r3, r2
 800630c:	650b      	str	r3, [r1, #80]	; 0x50
 800630e:	e001      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631c:	2b00      	cmp	r3, #0
 800631e:	d042      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006328:	d02b      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d825      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006330:	2bc0      	cmp	r3, #192	; 0xc0
 8006332:	d028      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006334:	2bc0      	cmp	r3, #192	; 0xc0
 8006336:	d821      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d016      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d81d      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d007      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006348:	e018      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4b66      	ldr	r3, [pc, #408]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	4a65      	ldr	r2, [pc, #404]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006356:	e017      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f944 	bl	80075ec <RCCEx_PLL2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006368:	e00e      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3324      	adds	r3, #36	; 0x24
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f001 f9ed 	bl	8007750 <RCCEx_PLL3_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800637a:	e005      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
      break;
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006382:	bf00      	nop
 8006384:	e000      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800638e:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006392:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639a:	4952      	ldr	r1, [pc, #328]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639c:	4313      	orrs	r3, r2
 800639e:	650b      	str	r3, [r1, #80]	; 0x50
 80063a0:	e001      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d049      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063bc:	d030      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80063be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c2:	d82a      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063c8:	d02c      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80063ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063ce:	d824      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d4:	d018      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80063d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063da:	d81e      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063e4:	d007      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063e6:	e018      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e8:	4b3e      	ldr	r3, [pc, #248]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a3d      	ldr	r2, [pc, #244]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063f4:	e017      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 f8f5 	bl	80075ec <RCCEx_PLL2_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006406:	e00e      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3324      	adds	r3, #36	; 0x24
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f001 f99e 	bl	8007750 <RCCEx_PLL3_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006418:	e005      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
      break;
 800641e:	e002      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800642c:	4b2d      	ldr	r3, [pc, #180]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800642e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006430:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800643a:	492a      	ldr	r1, [pc, #168]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643c:	4313      	orrs	r3, r2
 800643e:	658b      	str	r3, [r1, #88]	; 0x58
 8006440:	e001      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04c      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800645c:	d030      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800645e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006462:	d82a      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006464:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006468:	d02c      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800646a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800646e:	d824      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006474:	d018      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800647a:	d81e      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006484:	d007      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006486:	e018      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006488:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006494:	e017      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f8a5 	bl	80075ec <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064a6:	e00e      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f94e 	bl	8007750 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064b8:	e005      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
      break;
 80064be:	e002      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064c0:	bf00      	nop
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10d      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064da:	4902      	ldr	r1, [pc, #8]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	658b      	str	r3, [r1, #88]	; 0x58
 80064e0:	e004      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d032      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d01c      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d817      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d00c      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d813      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d016      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d10f      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006514:	4baf      	ldr	r3, [pc, #700]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	4aae      	ldr	r2, [pc, #696]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800651a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800651e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006520:	e00e      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	2102      	movs	r1, #2
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f85f 	bl	80075ec <RCCEx_PLL2_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]
      break;
 8006538:	e002      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800653e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006546:	4ba3      	ldr	r3, [pc, #652]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006552:	49a0      	ldr	r1, [pc, #640]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006554:	4313      	orrs	r3, r2
 8006556:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006558:	e001      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d047      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006572:	d030      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006578:	d82a      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800657a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800657e:	d02c      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006584:	d824      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658a:	d018      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800658c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006590:	d81e      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d007      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800659c:	e018      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659e:	4b8d      	ldr	r3, [pc, #564]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	4a8c      	ldr	r2, [pc, #560]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065aa:	e017      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	2100      	movs	r1, #0
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 f81a 	bl	80075ec <RCCEx_PLL2_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065bc:	e00e      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3324      	adds	r3, #36	; 0x24
 80065c2:	2100      	movs	r1, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f8c3 	bl	8007750 <RCCEx_PLL3_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065ce:	e005      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065e2:	4b7c      	ldr	r3, [pc, #496]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ee:	4979      	ldr	r1, [pc, #484]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	650b      	str	r3, [r1, #80]	; 0x50
 80065f4:	e001      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d049      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800660e:	d02e      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006614:	d828      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800661a:	d02a      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800661c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006620:	d822      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006622:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006626:	d026      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006628:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800662c:	d81c      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800662e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006632:	d010      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006638:	d816      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01d      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006642:	d111      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f000 ffce 	bl	80075ec <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006654:	e012      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3324      	adds	r3, #36	; 0x24
 800665a:	2101      	movs	r1, #1
 800665c:	4618      	mov	r0, r3
 800665e:	f001 f877 	bl	8007750 <RCCEx_PLL3_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006666:	e009      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
      break;
 800666c:	e006      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800666e:	bf00      	nop
 8006670:	e004      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006672:	bf00      	nop
 8006674:	e002      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006676:	bf00      	nop
 8006678:	e000      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800667a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006682:	4b54      	ldr	r3, [pc, #336]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006686:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668e:	4951      	ldr	r1, [pc, #324]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	650b      	str	r3, [r1, #80]	; 0x50
 8006694:	e001      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d04b      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066b0:	d02e      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80066b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066b6:	d828      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066bc:	d02a      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c2:	d822      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c8:	d026      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066ce:	d81c      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d010      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80066d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066da:	d816      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01d      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80066e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e4:	d111      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2101      	movs	r1, #1
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 ff7d 	bl	80075ec <RCCEx_PLL2_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066f6:	e012      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	2101      	movs	r1, #1
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 f826 	bl	8007750 <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006708:	e009      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      break;
 800670e:	e006      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006710:	bf00      	nop
 8006712:	e004      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006714:	bf00      	nop
 8006716:	e002      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800671c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006724:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006732:	4928      	ldr	r1, [pc, #160]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006734:	4313      	orrs	r3, r2
 8006736:	658b      	str	r3, [r1, #88]	; 0x58
 8006738:	e001      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02f      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006752:	d00e      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006758:	d814      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d015      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800675e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006762:	d10f      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800676a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006770:	e00c      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	2101      	movs	r1, #1
 8006778:	4618      	mov	r0, r3
 800677a:	f000 ff37 	bl	80075ec <RCCEx_PLL2_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006782:	e003      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
      break;
 8006788:	e000      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800678a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679e:	490d      	ldr	r1, [pc, #52]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	650b      	str	r3, [r1, #80]	; 0x50
 80067a4:	e001      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d033      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d81c      	bhi.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067ff 	.word	0x080067ff
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067e7 	.word	0x080067e7
 80067d0:	080067ff 	.word	0x080067ff
 80067d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d8:	4bb8      	ldr	r3, [pc, #736]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	4ab7      	ldr	r2, [pc, #732]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067e4:	e00c      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3304      	adds	r3, #4
 80067ea:	2102      	movs	r1, #2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fefd 	bl	80075ec <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067f6:	e003      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006806:	4bad      	ldr	r3, [pc, #692]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680a:	f023 0203 	bic.w	r2, r3, #3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	49aa      	ldr	r1, [pc, #680]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006814:	4313      	orrs	r3, r2
 8006816:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006818:	e001      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8086 	beq.w	8006938 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800682c:	4ba4      	ldr	r3, [pc, #656]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4aa3      	ldr	r2, [pc, #652]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006838:	f7fb f9ea 	bl	8001c10 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800683e:	e009      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006840:	f7fb f9e6 	bl	8001c10 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b64      	cmp	r3, #100	; 0x64
 800684c:	d902      	bls.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	75fb      	strb	r3, [r7, #23]
        break;
 8006852:	e005      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006854:	4b9a      	ldr	r3, [pc, #616]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ef      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d166      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006866:	4b95      	ldr	r3, [pc, #596]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006870:	4053      	eors	r3, r2
 8006872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006876:	2b00      	cmp	r3, #0
 8006878:	d013      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800687a:	4b90      	ldr	r3, [pc, #576]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006882:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006884:	4b8d      	ldr	r3, [pc, #564]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a8c      	ldr	r2, [pc, #560]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006890:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a89      	ldr	r2, [pc, #548]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800689c:	4a87      	ldr	r2, [pc, #540]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ac:	d115      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ae:	f7fb f9af 	bl	8001c10 <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b4:	e00b      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b6:	f7fb f9ab 	bl	8001c10 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d902      	bls.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	75fb      	strb	r3, [r7, #23]
            break;
 80068cc:	e005      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ce:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ed      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d126      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ee:	d10d      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80068f0:	4b72      	ldr	r3, [pc, #456]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068fe:	0919      	lsrs	r1, r3, #4
 8006900:	4b70      	ldr	r3, [pc, #448]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006902:	400b      	ands	r3, r1
 8006904:	496d      	ldr	r1, [pc, #436]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006906:	4313      	orrs	r3, r2
 8006908:	610b      	str	r3, [r1, #16]
 800690a:	e005      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800690c:	4b6b      	ldr	r3, [pc, #428]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	4a6a      	ldr	r2, [pc, #424]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006912:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006916:	6113      	str	r3, [r2, #16]
 8006918:	4b68      	ldr	r3, [pc, #416]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800691a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006926:	4965      	ldr	r1, [pc, #404]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006928:	4313      	orrs	r3, r2
 800692a:	670b      	str	r3, [r1, #112]	; 0x70
 800692c:	e004      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	75bb      	strb	r3, [r7, #22]
 8006932:	e001      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d07e      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006948:	2b28      	cmp	r3, #40	; 0x28
 800694a:	d867      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006a23 	.word	0x08006a23
 8006958:	08006a1d 	.word	0x08006a1d
 800695c:	08006a1d 	.word	0x08006a1d
 8006960:	08006a1d 	.word	0x08006a1d
 8006964:	08006a1d 	.word	0x08006a1d
 8006968:	08006a1d 	.word	0x08006a1d
 800696c:	08006a1d 	.word	0x08006a1d
 8006970:	08006a1d 	.word	0x08006a1d
 8006974:	080069f9 	.word	0x080069f9
 8006978:	08006a1d 	.word	0x08006a1d
 800697c:	08006a1d 	.word	0x08006a1d
 8006980:	08006a1d 	.word	0x08006a1d
 8006984:	08006a1d 	.word	0x08006a1d
 8006988:	08006a1d 	.word	0x08006a1d
 800698c:	08006a1d 	.word	0x08006a1d
 8006990:	08006a1d 	.word	0x08006a1d
 8006994:	08006a0b 	.word	0x08006a0b
 8006998:	08006a1d 	.word	0x08006a1d
 800699c:	08006a1d 	.word	0x08006a1d
 80069a0:	08006a1d 	.word	0x08006a1d
 80069a4:	08006a1d 	.word	0x08006a1d
 80069a8:	08006a1d 	.word	0x08006a1d
 80069ac:	08006a1d 	.word	0x08006a1d
 80069b0:	08006a1d 	.word	0x08006a1d
 80069b4:	08006a23 	.word	0x08006a23
 80069b8:	08006a1d 	.word	0x08006a1d
 80069bc:	08006a1d 	.word	0x08006a1d
 80069c0:	08006a1d 	.word	0x08006a1d
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006a1d 	.word	0x08006a1d
 80069d0:	08006a1d 	.word	0x08006a1d
 80069d4:	08006a23 	.word	0x08006a23
 80069d8:	08006a1d 	.word	0x08006a1d
 80069dc:	08006a1d 	.word	0x08006a1d
 80069e0:	08006a1d 	.word	0x08006a1d
 80069e4:	08006a1d 	.word	0x08006a1d
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006a1d 	.word	0x08006a1d
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a23 	.word	0x08006a23
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3304      	adds	r3, #4
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fdf4 	bl	80075ec <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a08:	e00c      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3324      	adds	r3, #36	; 0x24
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fe9d 	bl	8007750 <RCCEx_PLL3_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a2a:	4b24      	ldr	r3, [pc, #144]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a36:	4921      	ldr	r1, [pc, #132]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	654b      	str	r3, [r1, #84]	; 0x54
 8006a3c:	e001      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d03e      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d820      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a9f 	.word	0x08006a9f
 8006a60:	08006a75 	.word	0x08006a75
 8006a64:	08006a87 	.word	0x08006a87
 8006a68:	08006a9f 	.word	0x08006a9f
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006a9f 	.word	0x08006a9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	2101      	movs	r1, #1
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fdb6 	bl	80075ec <RCCEx_PLL2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a84:	e00c      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3324      	adds	r3, #36	; 0x24
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fe5f 	bl	8007750 <RCCEx_PLL3_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a96:	e003      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d110      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	f023 0207 	bic.w	r2, r3, #7
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab2:	4902      	ldr	r1, [pc, #8]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ab8:	e008      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	58024800 	.word	0x58024800
 8006ac4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d039      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	d820      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b2b 	.word	0x08006b2b
 8006aec:	08006b01 	.word	0x08006b01
 8006af0:	08006b13 	.word	0x08006b13
 8006af4:	08006b2b 	.word	0x08006b2b
 8006af8:	08006b2b 	.word	0x08006b2b
 8006afc:	08006b2b 	.word	0x08006b2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fd70 	bl	80075ec <RCCEx_PLL2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b10:	e00c      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3324      	adds	r3, #36	; 0x24
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fe19 	bl	8007750 <RCCEx_PLL3_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b22:	e003      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	75fb      	strb	r3, [r7, #23]
      break;
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b32:	4bb7      	ldr	r3, [pc, #732]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f023 0207 	bic.w	r2, r3, #7
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	49b3      	ldr	r1, [pc, #716]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	658b      	str	r3, [r1, #88]	; 0x58
 8006b46:	e001      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d04b      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b62:	d02e      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b68:	d828      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d02a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d822      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b7a:	d026      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b80:	d81c      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b86:	d010      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b8c:	d816      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01d      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b96:	d111      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fd24 	bl	80075ec <RCCEx_PLL2_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ba8:	e012      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3324      	adds	r3, #36	; 0x24
 8006bae:	2102      	movs	r1, #2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fdcd 	bl	8007750 <RCCEx_PLL3_Config>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bba:	e009      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc0:	e006      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e004      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bd6:	4b8e      	ldr	r3, [pc, #568]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be4:	498a      	ldr	r1, [pc, #552]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	654b      	str	r3, [r1, #84]	; 0x54
 8006bea:	e001      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d04b      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c06:	d02e      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006c08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c0c:	d828      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c12:	d02a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	d822      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1e:	d026      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c24:	d81c      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2a:	d010      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d816      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01d      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d111      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fcd2 	bl	80075ec <RCCEx_PLL2_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c4c:	e012      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3324      	adds	r3, #36	; 0x24
 8006c52:	2102      	movs	r1, #2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fd7b 	bl	8007750 <RCCEx_PLL3_Config>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c5e:	e009      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
      break;
 8006c64:	e006      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c66:	bf00      	nop
 8006c68:	e004      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e002      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c6e:	bf00      	nop
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c7a:	4b65      	ldr	r3, [pc, #404]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c88:	4961      	ldr	r1, [pc, #388]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c8e:	e001      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d04b      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006caa:	d02e      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006cac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cb0:	d828      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb6:	d02a      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbc:	d822      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cc2:	d026      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006cc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cc8:	d81c      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cce:	d010      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd4:	d816      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01d      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cde:	d111      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fc80 	bl	80075ec <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e012      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3324      	adds	r3, #36	; 0x24
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fd29 	bl	8007750 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d02:	e009      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
      break;
 8006d08:	e006      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e004      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e002      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d1e:	4b3c      	ldr	r3, [pc, #240]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d2c:	4938      	ldr	r1, [pc, #224]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	658b      	str	r3, [r1, #88]	; 0x58
 8006d32:	e001      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4e:	d10a      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3324      	adds	r3, #36	; 0x24
 8006d54:	2102      	movs	r1, #2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fcfa 	bl	8007750 <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d66:	4b2a      	ldr	r3, [pc, #168]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	4926      	ldr	r1, [pc, #152]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01a      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	d10a      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3324      	adds	r3, #36	; 0x24
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fcd9 	bl	8007750 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db6:	4916      	ldr	r1, [pc, #88]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d036      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd2:	d01f      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd8:	d817      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de2:	d009      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006de4:	e011      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3304      	adds	r3, #4
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fbfd 	bl	80075ec <RCCEx_PLL2_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006df6:	e00e      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3324      	adds	r3, #36	; 0x24
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fca6 	bl	8007750 <RCCEx_PLL3_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e08:	e005      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0e:	e002      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e10:	58024400 	.word	0x58024400
      break;
 8006e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e1c:	4b93      	ldr	r3, [pc, #588]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e2a:	4990      	ldr	r1, [pc, #576]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d033      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e4c:	d01c      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e52:	d816      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e58:	d003      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e5e:	d007      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e60:	e00f      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e62:	4b82      	ldr	r3, [pc, #520]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	4a81      	ldr	r2, [pc, #516]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e6e:	e00c      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fc6a 	bl	8007750 <RCCEx_PLL3_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e80:	e003      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75fb      	strb	r3, [r7, #23]
      break;
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e90:	4b76      	ldr	r3, [pc, #472]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e9e:	4973      	ldr	r1, [pc, #460]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ea4:	e001      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d029      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec2:	d007      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006ec4:	e00f      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec6:	4b69      	ldr	r3, [pc, #420]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	4a68      	ldr	r2, [pc, #416]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ed2:	e00b      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fb86 	bl	80075ec <RCCEx_PLL2_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ee4:	e002      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ef2:	4b5e      	ldr	r3, [pc, #376]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efe:	495b      	ldr	r1, [pc, #364]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f04:	e001      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3324      	adds	r3, #36	; 0x24
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fc17 	bl	8007750 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d030      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f40:	d017      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f46:	d811      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4c:	d013      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f52:	d80b      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d010      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d106      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5e:	4b43      	ldr	r3, [pc, #268]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	4a42      	ldr	r2, [pc, #264]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f6a:	e007      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f70:	e004      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f72:	bf00      	nop
 8006f74:	e002      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f76:	bf00      	nop
 8006f78:	e000      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f82:	4b3a      	ldr	r3, [pc, #232]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8e:	4937      	ldr	r1, [pc, #220]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	654b      	str	r3, [r1, #84]	; 0x54
 8006f94:	e001      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fa6:	4b31      	ldr	r3, [pc, #196]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	492e      	ldr	r1, [pc, #184]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fc4:	4b29      	ldr	r3, [pc, #164]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fd2:	4926      	ldr	r1, [pc, #152]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fe4:	4b21      	ldr	r3, [pc, #132]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	491e      	ldr	r1, [pc, #120]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007002:	4b1a      	ldr	r3, [pc, #104]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800700c:	6113      	str	r3, [r2, #16]
 800700e:	4b17      	ldr	r3, [pc, #92]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007018:	4914      	ldr	r1, [pc, #80]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	da08      	bge.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	490e      	ldr	r1, [pc, #56]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007034:	4313      	orrs	r3, r2
 8007036:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007044:	4b09      	ldr	r3, [pc, #36]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007052:	4906      	ldr	r1, [pc, #24]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007054:	4313      	orrs	r3, r2
 8007056:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007058:	7dbb      	ldrb	r3, [r7, #22]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	e000      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	58024400 	.word	0x58024400

08007070 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007074:	f7ff f860 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 8007078:	4602      	mov	r2, r0
 800707a:	4b06      	ldr	r3, [pc, #24]	; (8007094 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	4904      	ldr	r1, [pc, #16]	; (8007098 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007086:	5ccb      	ldrb	r3, [r1, r3]
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400
 8007098:	080099ec 	.word	0x080099ec

0800709c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800709c:	b480      	push	{r7}
 800709e:	b089      	sub	sp, #36	; 0x24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a4:	4ba1      	ldr	r3, [pc, #644]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070ae:	4b9f      	ldr	r3, [pc, #636]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	0b1b      	lsrs	r3, r3, #12
 80070b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070ba:	4b9c      	ldr	r3, [pc, #624]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070c6:	4b99      	ldr	r3, [pc, #612]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	08db      	lsrs	r3, r3, #3
 80070cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8111 	beq.w	800730c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f000 8083 	beq.w	80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f200 80a1 	bhi.w	800723c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d056      	beq.n	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007106:	e099      	b.n	800723c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007108:	4b88      	ldr	r3, [pc, #544]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02d      	beq.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007114:	4b85      	ldr	r3, [pc, #532]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	4a84      	ldr	r2, [pc, #528]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b7b      	ldr	r3, [pc, #492]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007152:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800716e:	e087      	b.n	8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b6a      	ldr	r3, [pc, #424]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a03 	vldr	s12, [r7, #12]
 8007196:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071b2:	e065      	b.n	8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b59      	ldr	r3, [pc, #356]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071f6:	e043      	b.n	8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b48      	ldr	r3, [pc, #288]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800723a:	e021      	b.n	8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b37      	ldr	r3, [pc, #220]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007262:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800727e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007280:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	0a5b      	lsrs	r3, r3, #9
 8007286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800729a:	edd7 6a07 	vldr	s13, [r7, #28]
 800729e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a6:	ee17 2a90 	vmov	r2, s15
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072ae:	4b1f      	ldr	r3, [pc, #124]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d4:	ee17 2a90 	vmov	r2, s15
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800730a:	e008      	b.n	800731e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	58024400 	.word	0x58024400
 8007330:	03d09000 	.word	0x03d09000
 8007334:	46000000 	.word	0x46000000
 8007338:	4c742400 	.word	0x4c742400
 800733c:	4a742400 	.word	0x4a742400
 8007340:	4afe502a 	.word	0x4afe502a

08007344 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007344:	b480      	push	{r7}
 8007346:	b089      	sub	sp, #36	; 0x24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800734c:	4ba1      	ldr	r3, [pc, #644]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007356:	4b9f      	ldr	r3, [pc, #636]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	0d1b      	lsrs	r3, r3, #20
 800735c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007360:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007362:	4b9c      	ldr	r3, [pc, #624]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800736e:	4b99      	ldr	r3, [pc, #612]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007372:	08db      	lsrs	r3, r3, #3
 8007374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8111 	beq.w	80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b02      	cmp	r3, #2
 8007396:	f000 8083 	beq.w	80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b02      	cmp	r3, #2
 800739e:	f200 80a1 	bhi.w	80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d056      	beq.n	800745c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073ae:	e099      	b.n	80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073b0:	4b88      	ldr	r3, [pc, #544]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d02d      	beq.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073bc:	4b85      	ldr	r3, [pc, #532]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	08db      	lsrs	r3, r3, #3
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	4a84      	ldr	r2, [pc, #528]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
 80073cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b7b      	ldr	r3, [pc, #492]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007416:	e087      	b.n	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742a:	4b6a      	ldr	r3, [pc, #424]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	ed97 6a03 	vldr	s12, [r7, #12]
 800743e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800745a:	e065      	b.n	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800746a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746e:	4b59      	ldr	r3, [pc, #356]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007482:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800749e:	e043      	b.n	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b2:	4b48      	ldr	r3, [pc, #288]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074e2:	e021      	b.n	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b37      	ldr	r3, [pc, #220]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007526:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007528:	4b2a      	ldr	r3, [pc, #168]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	0a5b      	lsrs	r3, r3, #9
 800752e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800753e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007542:	edd7 6a07 	vldr	s13, [r7, #28]
 8007546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800754e:	ee17 2a90 	vmov	r2, s15
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007556:	4b1f      	ldr	r3, [pc, #124]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007570:	edd7 6a07 	vldr	s13, [r7, #28]
 8007574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757c:	ee17 2a90 	vmov	r2, s15
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007584:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	0e1b      	lsrs	r3, r3, #24
 800758a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759e:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075aa:	ee17 2a90 	vmov	r2, s15
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075b2:	e008      	b.n	80075c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
}
 80075c6:	bf00      	nop
 80075c8:	3724      	adds	r7, #36	; 0x24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58024400 	.word	0x58024400
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	46000000 	.word	0x46000000
 80075e0:	4c742400 	.word	0x4c742400
 80075e4:	4a742400 	.word	0x4a742400
 80075e8:	4afe502a 	.word	0x4afe502a

080075ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075fa:	4b53      	ldr	r3, [pc, #332]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d101      	bne.n	800760a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e099      	b.n	800773e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800760a:	4b4f      	ldr	r3, [pc, #316]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a4e      	ldr	r2, [pc, #312]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007610:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007616:	f7fa fafb 	bl	8001c10 <HAL_GetTick>
 800761a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800761c:	e008      	b.n	8007630 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800761e:	f7fa faf7 	bl	8001c10 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e086      	b.n	800773e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007630:	4b45      	ldr	r3, [pc, #276]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f0      	bne.n	800761e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800763c:	4b42      	ldr	r3, [pc, #264]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	031b      	lsls	r3, r3, #12
 800764a:	493f      	ldr	r1, [pc, #252]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	628b      	str	r3, [r1, #40]	; 0x28
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	3b01      	subs	r3, #1
 8007656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	025b      	lsls	r3, r3, #9
 8007662:	b29b      	uxth	r3, r3
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	3b01      	subs	r3, #1
 800767a:	061b      	lsls	r3, r3, #24
 800767c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007680:	4931      	ldr	r1, [pc, #196]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007682:	4313      	orrs	r3, r2
 8007684:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007686:	4b30      	ldr	r3, [pc, #192]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	492d      	ldr	r1, [pc, #180]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007698:	4b2b      	ldr	r3, [pc, #172]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f023 0220 	bic.w	r2, r3, #32
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	4928      	ldr	r1, [pc, #160]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076aa:	4b27      	ldr	r3, [pc, #156]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	4a26      	ldr	r2, [pc, #152]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076b6:	4b24      	ldr	r3, [pc, #144]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ba:	4b24      	ldr	r3, [pc, #144]	; (800774c <RCCEx_PLL2_Config+0x160>)
 80076bc:	4013      	ands	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	69d2      	ldr	r2, [r2, #28]
 80076c2:	00d2      	lsls	r2, r2, #3
 80076c4:	4920      	ldr	r1, [pc, #128]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076d0:	f043 0310 	orr.w	r3, r3, #16
 80076d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a19      	ldr	r2, [pc, #100]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e8:	e00f      	b.n	800770a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d106      	bne.n	80076fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076f0:	4b15      	ldr	r3, [pc, #84]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 80076f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076fc:	e005      	b.n	800770a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	4a11      	ldr	r2, [pc, #68]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a0e      	ldr	r2, [pc, #56]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007716:	f7fa fa7b 	bl	8001c10 <HAL_GetTick>
 800771a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800771c:	e008      	b.n	8007730 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800771e:	f7fa fa77 	bl	8001c10 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e006      	b.n	800773e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <RCCEx_PLL2_Config+0x15c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	ffff0007 	.word	0xffff0007

08007750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800775e:	4b53      	ldr	r3, [pc, #332]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d101      	bne.n	800776e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e099      	b.n	80078a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800776e:	4b4f      	ldr	r3, [pc, #316]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a4e      	ldr	r2, [pc, #312]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777a:	f7fa fa49 	bl	8001c10 <HAL_GetTick>
 800777e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007780:	e008      	b.n	8007794 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007782:	f7fa fa45 	bl	8001c10 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e086      	b.n	80078a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007794:	4b45      	ldr	r3, [pc, #276]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f0      	bne.n	8007782 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077a0:	4b42      	ldr	r3, [pc, #264]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	051b      	lsls	r3, r3, #20
 80077ae:	493f      	ldr	r1, [pc, #252]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	628b      	str	r3, [r1, #40]	; 0x28
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	025b      	lsls	r3, r3, #9
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	431a      	orrs	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	041b      	lsls	r3, r3, #16
 80077d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	3b01      	subs	r3, #1
 80077de:	061b      	lsls	r3, r3, #24
 80077e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077e4:	4931      	ldr	r1, [pc, #196]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077ea:	4b30      	ldr	r3, [pc, #192]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	492d      	ldr	r1, [pc, #180]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077fc:	4b2b      	ldr	r3, [pc, #172]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	4928      	ldr	r1, [pc, #160]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800780e:	4b27      	ldr	r3, [pc, #156]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	4a26      	ldr	r2, [pc, #152]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800781a:	4b24      	ldr	r3, [pc, #144]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 800781c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781e:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <RCCEx_PLL3_Config+0x160>)
 8007820:	4013      	ands	r3, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	69d2      	ldr	r2, [r2, #28]
 8007826:	00d2      	lsls	r2, r2, #3
 8007828:	4920      	ldr	r1, [pc, #128]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 800782a:	4313      	orrs	r3, r2
 800782c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800782e:	4b1f      	ldr	r3, [pc, #124]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d106      	bne.n	800784e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800784a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800784c:	e00f      	b.n	800786e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d106      	bne.n	8007862 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007854:	4b15      	ldr	r3, [pc, #84]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	4a14      	ldr	r2, [pc, #80]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 800785a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800785e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007860:	e005      	b.n	800786e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	4a11      	ldr	r2, [pc, #68]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800786c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a0e      	ldr	r2, [pc, #56]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787a:	f7fa f9c9 	bl	8001c10 <HAL_GetTick>
 800787e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007880:	e008      	b.n	8007894 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007882:	f7fa f9c5 	bl	8001c10 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e006      	b.n	80078a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <RCCEx_PLL3_Config+0x15c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f0      	beq.n	8007882 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	58024400 	.word	0x58024400
 80078b0:	ffff0007 	.word	0xffff0007

080078b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0eb      	b.n	8007aa2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a75      	ldr	r2, [pc, #468]	; (8007aac <HAL_SPI_Init+0x1f8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00f      	beq.n	80078fa <HAL_SPI_Init+0x46>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a74      	ldr	r2, [pc, #464]	; (8007ab0 <HAL_SPI_Init+0x1fc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00a      	beq.n	80078fa <HAL_SPI_Init+0x46>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a72      	ldr	r2, [pc, #456]	; (8007ab4 <HAL_SPI_Init+0x200>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d005      	beq.n	80078fa <HAL_SPI_Init+0x46>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d901      	bls.n	80078fa <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e0d3      	b.n	8007aa2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb94 	bl	8008028 <SPI_GetPacketSize>
 8007900:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a69      	ldr	r2, [pc, #420]	; (8007aac <HAL_SPI_Init+0x1f8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00c      	beq.n	8007926 <HAL_SPI_Init+0x72>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a67      	ldr	r2, [pc, #412]	; (8007ab0 <HAL_SPI_Init+0x1fc>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d007      	beq.n	8007926 <HAL_SPI_Init+0x72>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a66      	ldr	r2, [pc, #408]	; (8007ab4 <HAL_SPI_Init+0x200>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d002      	beq.n	8007926 <HAL_SPI_Init+0x72>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b08      	cmp	r3, #8
 8007924:	d811      	bhi.n	800794a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800792a:	4a60      	ldr	r2, [pc, #384]	; (8007aac <HAL_SPI_Init+0x1f8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d009      	beq.n	8007944 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a5e      	ldr	r2, [pc, #376]	; (8007ab0 <HAL_SPI_Init+0x1fc>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <HAL_SPI_Init+0x90>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a5d      	ldr	r2, [pc, #372]	; (8007ab4 <HAL_SPI_Init+0x200>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d104      	bne.n	800794e <HAL_SPI_Init+0x9a>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b10      	cmp	r3, #16
 8007948:	d901      	bls.n	800794e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0a9      	b.n	8007aa2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7f9 fb7a 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007988:	d119      	bne.n	80079be <HAL_SPI_Init+0x10a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007992:	d103      	bne.n	800799c <HAL_SPI_Init+0xe8>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d008      	beq.n	80079ae <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ac:	d107      	bne.n	80079be <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69da      	ldr	r2, [r3, #28]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	431a      	orrs	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d0:	ea42 0103 	orr.w	r1, r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1e:	ea42 0103 	orr.w	r1, r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d113      	bne.n	8007a5e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40013000 	.word	0x40013000
 8007ab0:	40003800 	.word	0x40003800
 8007ab4:	40003c00 	.word	0x40003c00

08007ab8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007ad0:	6a3a      	ldr	r2, [r7, #32]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007aea:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3330      	adds	r3, #48	; 0x30
 8007af2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d113      	bne.n	8007b26 <HAL_SPI_IRQHandler+0x6e>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10e      	bne.n	8007b26 <HAL_SPI_IRQHandler+0x6e>
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
    handled = 1UL;
 8007b22:	2301      	movs	r3, #1
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10f      	bne.n	8007b50 <HAL_SPI_IRQHandler+0x98>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <HAL_SPI_IRQHandler+0x98>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
    handled = 1UL;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10f      	bne.n	8007b7a <HAL_SPI_IRQHandler+0xc2>
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <HAL_SPI_IRQHandler+0xc2>
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
    handled = 1UL;
 8007b76:	2301      	movs	r3, #1
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 816f 	bne.w	8007e60 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80a0 	beq.w	8007cce <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0208 	orr.w	r2, r2, #8
 8007b9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0210 	orr.w	r2, r2, #16
 8007bac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bbc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0208 	bic.w	r2, r2, #8
 8007bcc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00f      	beq.n	8007bf8 <HAL_SPI_IRQHandler+0x140>
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d004      	beq.n	8007be8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <HAL_SPI_IRQHandler+0x140>
 8007be8:	7cfb      	ldrb	r3, [r7, #19]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d059      	beq.n	8007ca2 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d154      	bne.n	8007ca2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d13d      	bne.n	8007c82 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007c06:	e036      	b.n	8007c76 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b0f      	cmp	r3, #15
 8007c0e:	d90b      	bls.n	8007c28 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c1a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	665a      	str	r2, [r3, #100]	; 0x64
 8007c26:	e01d      	b.n	8007c64 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b07      	cmp	r3, #7
 8007c2e:	d90b      	bls.n	8007c48 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	8812      	ldrh	r2, [r2, #0]
 8007c38:	b292      	uxth	r2, r2
 8007c3a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c40:	1c9a      	adds	r2, r3, #2
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	665a      	str	r2, [r3, #100]	; 0x64
 8007c46:	e00d      	b.n	8007c64 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c54:	7812      	ldrb	r2, [r2, #0]
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1c2      	bne.n	8007c08 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f930 	bl	8007ee8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7f9 f98c 	bl	8000fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007ca0:	e0e3      	b.n	8007e6a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007ca2:	7cfb      	ldrb	r3, [r7, #19]
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	d103      	bne.n	8007cb0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f8f9 	bl	8007ea0 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007cae:	e0d9      	b.n	8007e64 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007cb0:	7cfb      	ldrb	r3, [r7, #19]
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d103      	bne.n	8007cbe <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8e8 	bl	8007e8c <HAL_SPI_RxCpltCallback>
    return;
 8007cbc:	e0d2      	b.n	8007e64 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007cbe:	7cfb      	ldrb	r3, [r7, #19]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	f040 80cf 	bne.w	8007e64 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f8d6 	bl	8007e78 <HAL_SPI_TxCpltCallback>
    return;
 8007ccc:	e0ca      	b.n	8007e64 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <HAL_SPI_IRQHandler+0x23c>
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d008      	beq.n	8007cf4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cf0:	619a      	str	r2, [r3, #24]

    return;
 8007cf2:	e0ba      	b.n	8007e6a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 80b5 	beq.w	8007e6a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d10:	f043 0204 	orr.w	r2, r3, #4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699a      	ldr	r2, [r3, #24]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d28:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00f      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d3a:	f043 0201 	orr.w	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d52:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00f      	beq.n	8007d7e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d64:	f043 0208 	orr.w	r2, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00f      	beq.n	8007da8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0220 	orr.w	r2, r2, #32
 8007da6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d05a      	beq.n	8007e68 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6919      	ldr	r1, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <HAL_SPI_IRQHandler+0x3b8>)
 8007dce:	400b      	ands	r3, r1
 8007dd0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ddc:	d138      	bne.n	8007e50 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007dec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d013      	beq.n	8007e1e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <HAL_SPI_IRQHandler+0x3bc>)
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fb fa96 	bl	8003334 <HAL_DMA_Abort_IT>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d020      	beq.n	8007e68 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e2a:	4a12      	ldr	r2, [pc, #72]	; (8007e74 <HAL_SPI_IRQHandler+0x3bc>)
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fb fa7e 	bl	8003334 <HAL_DMA_Abort_IT>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d014      	beq.n	8007e68 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e4e:	e00b      	b.n	8007e68 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7f9 f8ad 	bl	8000fb8 <HAL_SPI_ErrorCallback>
    return;
 8007e5e:	e003      	b.n	8007e68 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007e60:	bf00      	nop
 8007e62:	e002      	b.n	8007e6a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e64:	bf00      	nop
 8007e66:	e000      	b.n	8007e6a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e68:	bf00      	nop
  }
}
 8007e6a:	3728      	adds	r7, #40	; 0x28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	fffffc94 	.word	0xfffffc94
 8007e74:	08007eb5 	.word	0x08007eb5

08007e78 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7f9 f86c 	bl	8000fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0208 	orr.w	r2, r2, #8
 8007f06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0210 	orr.w	r2, r2, #16
 8007f16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6919      	ldr	r1, [r3, #16]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b3c      	ldr	r3, [pc, #240]	; (8008024 <SPI_CloseTransfer+0x13c>)
 8007f34:	400b      	ands	r3, r1
 8007f36:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d014      	beq.n	8007f7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00f      	beq.n	8007f7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 0220 	orr.w	r2, r2, #32
 8007f7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d014      	beq.n	8007fb4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00f      	beq.n	8007fb4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9a:	f043 0204 	orr.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00f      	beq.n	8007fde <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	699a      	ldr	r2, [r3, #24]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00f      	beq.n	8008008 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fee:	f043 0208 	orr.w	r2, r3, #8
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008006:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	fffffc90 	.word	0xfffffc90

08008028 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3307      	adds	r3, #7
 8008046:	08db      	lsrs	r3, r3, #3
 8008048:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e042      	b.n	80080f6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008076:	2b00      	cmp	r3, #0
 8008078:	d106      	bne.n	8008088 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7f9 f952 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	; 0x24
 800808c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fb7d 	bl	80087a0 <UART_SetConfig>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e022      	b.n	80080f6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 f8d1 	bl	8009260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f042 0201 	orr.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f958 	bl	80093a4 <UART_CheckIdleState>
 80080f4:	4603      	mov	r3, r0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008114:	2b20      	cmp	r3, #32
 8008116:	d168      	bne.n	80081ea <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_UART_Transmit_DMA+0x24>
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e061      	b.n	80081ec <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_UART_Transmit_DMA+0x36>
 8008132:	2302      	movs	r3, #2
 8008134:	e05a      	b.n	80081ec <HAL_UART_Transmit_DMA+0xec>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	88fa      	ldrh	r2, [r7, #6]
 8008148:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	88fa      	ldrh	r2, [r7, #6]
 8008150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2221      	movs	r2, #33	; 0x21
 8008160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008168:	2b00      	cmp	r3, #0
 800816a:	d02c      	beq.n	80081c6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008170:	4a20      	ldr	r2, [pc, #128]	; (80081f4 <HAL_UART_Transmit_DMA+0xf4>)
 8008172:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008178:	4a1f      	ldr	r2, [pc, #124]	; (80081f8 <HAL_UART_Transmit_DMA+0xf8>)
 800817a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008180:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <HAL_UART_Transmit_DMA+0xfc>)
 8008182:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008188:	2200      	movs	r2, #0
 800818a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008194:	4619      	mov	r1, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3328      	adds	r3, #40	; 0x28
 800819c:	461a      	mov	r2, r3
 800819e:	88fb      	ldrh	r3, [r7, #6]
 80081a0:	f7fa fb40 	bl	8002824 <HAL_DMA_Start_IT>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2210      	movs	r2, #16
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e012      	b.n	80081ec <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2240      	movs	r2, #64	; 0x40
 80081cc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081e4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e000      	b.n	80081ec <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80081ea:	2302      	movs	r3, #2
  }
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	080095dd 	.word	0x080095dd
 80081f8:	0800962d 	.word	0x0800962d
 80081fc:	08009649 	.word	0x08009649

08008200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	f640 030f 	movw	r3, #2063	; 0x80f
 8008226:	4013      	ands	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d118      	bne.n	8008262 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d013      	beq.n	8008262 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 8282 	beq.w	800875c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
      }
      return;
 8008260:	e27c      	b.n	800875c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 80ef 	beq.w	8008448 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4b73      	ldr	r3, [pc, #460]	; (800843c <HAL_UART_IRQHandler+0x23c>)
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d105      	bne.n	8008280 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	4b72      	ldr	r3, [pc, #456]	; (8008440 <HAL_UART_IRQHandler+0x240>)
 8008278:	4013      	ands	r3, r2
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80e4 	beq.w	8008448 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d010      	beq.n	80082ac <HAL_UART_IRQHandler+0xac>
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2201      	movs	r2, #1
 800829a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a2:	f043 0201 	orr.w	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d010      	beq.n	80082d8 <HAL_UART_IRQHandler+0xd8>
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2202      	movs	r2, #2
 80082c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ce:	f043 0204 	orr.w	r2, r3, #4
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <HAL_UART_IRQHandler+0x104>
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2204      	movs	r2, #4
 80082f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fa:	f043 0202 	orr.w	r2, r3, #2
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d015      	beq.n	800833a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4b48      	ldr	r3, [pc, #288]	; (800843c <HAL_UART_IRQHandler+0x23c>)
 800831c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00b      	beq.n	800833a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2208      	movs	r2, #8
 8008328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008330:	f043 0208 	orr.w	r2, r3, #8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008340:	2b00      	cmp	r3, #0
 8008342:	d011      	beq.n	8008368 <HAL_UART_IRQHandler+0x168>
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00c      	beq.n	8008368 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835e:	f043 0220 	orr.w	r2, r3, #32
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 81f6 	beq.w	8008760 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d011      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d004      	beq.n	80083c2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d031      	beq.n	8008426 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 f8d8 	bl	8009578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	d123      	bne.n	800841e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d013      	beq.n	8008416 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f2:	4a14      	ldr	r2, [pc, #80]	; (8008444 <HAL_UART_IRQHandler+0x244>)
 80083f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fa ff9a 	bl	8003334 <HAL_DMA_Abort_IT>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d017      	beq.n	8008436 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008414:	e00f      	b.n	8008436 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7f8 fdee 	bl	8000ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	e00b      	b.n	8008436 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f8 fdea 	bl	8000ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008424:	e007      	b.n	8008436 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7f8 fde6 	bl	8000ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008434:	e194      	b.n	8008760 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008436:	bf00      	nop
    return;
 8008438:	e192      	b.n	8008760 <HAL_UART_IRQHandler+0x560>
 800843a:	bf00      	nop
 800843c:	10000001 	.word	0x10000001
 8008440:	04000120 	.word	0x04000120
 8008444:	080096c9 	.word	0x080096c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 810f 	bne.w	8008670 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8109 	beq.w	8008670 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8103 	beq.w	8008670 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2210      	movs	r2, #16
 8008470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	f040 80bb 	bne.w	80085f8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a96      	ldr	r2, [pc, #600]	; (80086e4 <HAL_UART_IRQHandler+0x4e4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d059      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a94      	ldr	r2, [pc, #592]	; (80086e8 <HAL_UART_IRQHandler+0x4e8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d053      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a92      	ldr	r2, [pc, #584]	; (80086ec <HAL_UART_IRQHandler+0x4ec>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d04d      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a90      	ldr	r2, [pc, #576]	; (80086f0 <HAL_UART_IRQHandler+0x4f0>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d047      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a8e      	ldr	r2, [pc, #568]	; (80086f4 <HAL_UART_IRQHandler+0x4f4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d041      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a8c      	ldr	r2, [pc, #560]	; (80086f8 <HAL_UART_IRQHandler+0x4f8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d03b      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a8a      	ldr	r2, [pc, #552]	; (80086fc <HAL_UART_IRQHandler+0x4fc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d035      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a88      	ldr	r2, [pc, #544]	; (8008700 <HAL_UART_IRQHandler+0x500>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d02f      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a86      	ldr	r2, [pc, #536]	; (8008704 <HAL_UART_IRQHandler+0x504>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d029      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a84      	ldr	r2, [pc, #528]	; (8008708 <HAL_UART_IRQHandler+0x508>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d023      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a82      	ldr	r2, [pc, #520]	; (800870c <HAL_UART_IRQHandler+0x50c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d01d      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a80      	ldr	r2, [pc, #512]	; (8008710 <HAL_UART_IRQHandler+0x510>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d017      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a7e      	ldr	r2, [pc, #504]	; (8008714 <HAL_UART_IRQHandler+0x514>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d011      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a7c      	ldr	r2, [pc, #496]	; (8008718 <HAL_UART_IRQHandler+0x518>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00b      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a7a      	ldr	r2, [pc, #488]	; (800871c <HAL_UART_IRQHandler+0x51c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d005      	beq.n	8008542 <HAL_UART_IRQHandler+0x342>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a78      	ldr	r2, [pc, #480]	; (8008720 <HAL_UART_IRQHandler+0x520>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d105      	bne.n	800854e <HAL_UART_IRQHandler+0x34e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	b29b      	uxth	r3, r3
 800854c:	e004      	b.n	8008558 <HAL_UART_IRQHandler+0x358>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	b29b      	uxth	r3, r3
 8008558:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8101 	beq.w	8008764 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008568:	893a      	ldrh	r2, [r7, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	f080 80fa 	bcs.w	8008764 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	893a      	ldrh	r2, [r7, #8]
 8008574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008582:	d02b      	beq.n	80085dc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008592:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0210 	bic.w	r2, r2, #16
 80085d0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fa fb8e 	bl	8002cf8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8c9 	bl	8008788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085f6:	e0b5      	b.n	8008764 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008604:	b29b      	uxth	r3, r3
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 80a8 	beq.w	8008768 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008618:	897b      	ldrh	r3, [r7, #10]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80a4 	beq.w	8008768 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800862e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6899      	ldr	r1, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b3a      	ldr	r3, [pc, #232]	; (8008724 <HAL_UART_IRQHandler+0x524>)
 800863c:	400b      	ands	r3, r1
 800863e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0210 	bic.w	r2, r2, #16
 8008662:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008664:	897b      	ldrh	r3, [r7, #10]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f88d 	bl	8008788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800866e:	e07b      	b.n	8008768 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00d      	beq.n	8008696 <HAL_UART_IRQHandler+0x496>
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800868c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 f84a 	bl	8009728 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008694:	e06b      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869c:	2b00      	cmp	r3, #0
 800869e:	d012      	beq.n	80086c6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d057      	beq.n	800876c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4798      	blx	r3
    }
    return;
 80086c4:	e052      	b.n	800876c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02b      	beq.n	8008728 <HAL_UART_IRQHandler+0x528>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d026      	beq.n	8008728 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 f80a 	bl	80096f4 <UART_EndTransmit_IT>
    return;
 80086e0:	e045      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
 80086e2:	bf00      	nop
 80086e4:	40020010 	.word	0x40020010
 80086e8:	40020028 	.word	0x40020028
 80086ec:	40020040 	.word	0x40020040
 80086f0:	40020058 	.word	0x40020058
 80086f4:	40020070 	.word	0x40020070
 80086f8:	40020088 	.word	0x40020088
 80086fc:	400200a0 	.word	0x400200a0
 8008700:	400200b8 	.word	0x400200b8
 8008704:	40020410 	.word	0x40020410
 8008708:	40020428 	.word	0x40020428
 800870c:	40020440 	.word	0x40020440
 8008710:	40020458 	.word	0x40020458
 8008714:	40020470 	.word	0x40020470
 8008718:	40020488 	.word	0x40020488
 800871c:	400204a0 	.word	0x400204a0
 8008720:	400204b8 	.word	0x400204b8
 8008724:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d008      	beq.n	8008744 <HAL_UART_IRQHandler+0x544>
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f807 	bl	8009750 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008742:	e014      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00f      	beq.n	800876e <HAL_UART_IRQHandler+0x56e>
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da0c      	bge.n	800876e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fff1 	bl	800973c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800875a:	e008      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
      return;
 800875c:	bf00      	nop
 800875e:	e006      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
    return;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
      return;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
      return;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <HAL_UART_IRQHandler+0x56e>
    return;
 800876c:	bf00      	nop
  }
}
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087a0:	b5b0      	push	{r4, r5, r7, lr}
 80087a2:	b08e      	sub	sp, #56	; 0x38
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	431a      	orrs	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4bbf      	ldr	r3, [pc, #764]	; (8008acc <UART_SetConfig+0x32c>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087d6:	430b      	orrs	r3, r1
 80087d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4ab5      	ldr	r2, [pc, #724]	; (8008ad0 <UART_SetConfig+0x330>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d004      	beq.n	800880a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008806:	4313      	orrs	r3, r2
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	4bb0      	ldr	r3, [pc, #704]	; (8008ad4 <UART_SetConfig+0x334>)
 8008812:	4013      	ands	r3, r2
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800881a:	430b      	orrs	r3, r1
 800881c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	f023 010f 	bic.w	r1, r3, #15
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4aa7      	ldr	r2, [pc, #668]	; (8008ad8 <UART_SetConfig+0x338>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d176      	bne.n	800892c <UART_SetConfig+0x18c>
 800883e:	4ba7      	ldr	r3, [pc, #668]	; (8008adc <UART_SetConfig+0x33c>)
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008846:	2b28      	cmp	r3, #40	; 0x28
 8008848:	d86c      	bhi.n	8008924 <UART_SetConfig+0x184>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0xb0>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	080088f5 	.word	0x080088f5
 8008854:	08008925 	.word	0x08008925
 8008858:	08008925 	.word	0x08008925
 800885c:	08008925 	.word	0x08008925
 8008860:	08008925 	.word	0x08008925
 8008864:	08008925 	.word	0x08008925
 8008868:	08008925 	.word	0x08008925
 800886c:	08008925 	.word	0x08008925
 8008870:	080088fd 	.word	0x080088fd
 8008874:	08008925 	.word	0x08008925
 8008878:	08008925 	.word	0x08008925
 800887c:	08008925 	.word	0x08008925
 8008880:	08008925 	.word	0x08008925
 8008884:	08008925 	.word	0x08008925
 8008888:	08008925 	.word	0x08008925
 800888c:	08008925 	.word	0x08008925
 8008890:	08008905 	.word	0x08008905
 8008894:	08008925 	.word	0x08008925
 8008898:	08008925 	.word	0x08008925
 800889c:	08008925 	.word	0x08008925
 80088a0:	08008925 	.word	0x08008925
 80088a4:	08008925 	.word	0x08008925
 80088a8:	08008925 	.word	0x08008925
 80088ac:	08008925 	.word	0x08008925
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	08008925 	.word	0x08008925
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008925 	.word	0x08008925
 80088c0:	08008925 	.word	0x08008925
 80088c4:	08008925 	.word	0x08008925
 80088c8:	08008925 	.word	0x08008925
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008925 	.word	0x08008925
 80088d8:	08008925 	.word	0x08008925
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008925 	.word	0x08008925
 80088e8:	08008925 	.word	0x08008925
 80088ec:	08008925 	.word	0x08008925
 80088f0:	0800891d 	.word	0x0800891d
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e222      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e21e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e21a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008912:	e216      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008914:	2320      	movs	r3, #32
 8008916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891a:	e212      	b.n	8008d42 <UART_SetConfig+0x5a2>
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008922:	e20e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892a:	e20a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a6b      	ldr	r2, [pc, #428]	; (8008ae0 <UART_SetConfig+0x340>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d130      	bne.n	8008998 <UART_SetConfig+0x1f8>
 8008936:	4b69      	ldr	r3, [pc, #420]	; (8008adc <UART_SetConfig+0x33c>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b05      	cmp	r3, #5
 8008940:	d826      	bhi.n	8008990 <UART_SetConfig+0x1f0>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x1a8>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008961 	.word	0x08008961
 800894c:	08008969 	.word	0x08008969
 8008950:	08008971 	.word	0x08008971
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e1ec      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e1e8      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	e1e4      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897e:	e1e0      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008980:	2320      	movs	r3, #32
 8008982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008986:	e1dc      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898e:	e1d8      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008996:	e1d4      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a51      	ldr	r2, [pc, #324]	; (8008ae4 <UART_SetConfig+0x344>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d130      	bne.n	8008a04 <UART_SetConfig+0x264>
 80089a2:	4b4e      	ldr	r3, [pc, #312]	; (8008adc <UART_SetConfig+0x33c>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d826      	bhi.n	80089fc <UART_SetConfig+0x25c>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <UART_SetConfig+0x214>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e1b6      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e1b2      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	e1ae      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ea:	e1aa      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80089ec:	2320      	movs	r3, #32
 80089ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f2:	e1a6      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fa:	e1a2      	b.n	8008d42 <UART_SetConfig+0x5a2>
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a02:	e19e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a37      	ldr	r2, [pc, #220]	; (8008ae8 <UART_SetConfig+0x348>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d130      	bne.n	8008a70 <UART_SetConfig+0x2d0>
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <UART_SetConfig+0x33c>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d826      	bhi.n	8008a68 <UART_SetConfig+0x2c8>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x280>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3e:	e180      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a46:	e17c      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e178      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a56:	e174      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5e:	e170      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a60:	2340      	movs	r3, #64	; 0x40
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	e16c      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	e168      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1d      	ldr	r2, [pc, #116]	; (8008aec <UART_SetConfig+0x34c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d142      	bne.n	8008b00 <UART_SetConfig+0x360>
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <UART_SetConfig+0x33c>)
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d838      	bhi.n	8008af8 <UART_SetConfig+0x358>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <UART_SetConfig+0x2ec>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008aa5 	.word	0x08008aa5
 8008a90:	08008aad 	.word	0x08008aad
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ac5 	.word	0x08008ac5
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aaa:	e14a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008aac:	2304      	movs	r3, #4
 8008aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab2:	e146      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aba:	e142      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008abc:	2310      	movs	r3, #16
 8008abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac2:	e13e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008ac4:	2320      	movs	r3, #32
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e13a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008acc:	cfff69f3 	.word	0xcfff69f3
 8008ad0:	58000c00 	.word	0x58000c00
 8008ad4:	11fff4ff 	.word	0x11fff4ff
 8008ad8:	40011000 	.word	0x40011000
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	40004400 	.word	0x40004400
 8008ae4:	40004800 	.word	0x40004800
 8008ae8:	40004c00 	.word	0x40004c00
 8008aec:	40005000 	.word	0x40005000
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af6:	e124      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008af8:	2380      	movs	r3, #128	; 0x80
 8008afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008afe:	e120      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4acc      	ldr	r2, [pc, #816]	; (8008e38 <UART_SetConfig+0x698>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d176      	bne.n	8008bf8 <UART_SetConfig+0x458>
 8008b0a:	4bcc      	ldr	r3, [pc, #816]	; (8008e3c <UART_SetConfig+0x69c>)
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b12:	2b28      	cmp	r3, #40	; 0x28
 8008b14:	d86c      	bhi.n	8008bf0 <UART_SetConfig+0x450>
 8008b16:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <UART_SetConfig+0x37c>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008bc1 	.word	0x08008bc1
 8008b20:	08008bf1 	.word	0x08008bf1
 8008b24:	08008bf1 	.word	0x08008bf1
 8008b28:	08008bf1 	.word	0x08008bf1
 8008b2c:	08008bf1 	.word	0x08008bf1
 8008b30:	08008bf1 	.word	0x08008bf1
 8008b34:	08008bf1 	.word	0x08008bf1
 8008b38:	08008bf1 	.word	0x08008bf1
 8008b3c:	08008bc9 	.word	0x08008bc9
 8008b40:	08008bf1 	.word	0x08008bf1
 8008b44:	08008bf1 	.word	0x08008bf1
 8008b48:	08008bf1 	.word	0x08008bf1
 8008b4c:	08008bf1 	.word	0x08008bf1
 8008b50:	08008bf1 	.word	0x08008bf1
 8008b54:	08008bf1 	.word	0x08008bf1
 8008b58:	08008bf1 	.word	0x08008bf1
 8008b5c:	08008bd1 	.word	0x08008bd1
 8008b60:	08008bf1 	.word	0x08008bf1
 8008b64:	08008bf1 	.word	0x08008bf1
 8008b68:	08008bf1 	.word	0x08008bf1
 8008b6c:	08008bf1 	.word	0x08008bf1
 8008b70:	08008bf1 	.word	0x08008bf1
 8008b74:	08008bf1 	.word	0x08008bf1
 8008b78:	08008bf1 	.word	0x08008bf1
 8008b7c:	08008bd9 	.word	0x08008bd9
 8008b80:	08008bf1 	.word	0x08008bf1
 8008b84:	08008bf1 	.word	0x08008bf1
 8008b88:	08008bf1 	.word	0x08008bf1
 8008b8c:	08008bf1 	.word	0x08008bf1
 8008b90:	08008bf1 	.word	0x08008bf1
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	08008bf1 	.word	0x08008bf1
 8008ba8:	08008bf1 	.word	0x08008bf1
 8008bac:	08008bf1 	.word	0x08008bf1
 8008bb0:	08008bf1 	.word	0x08008bf1
 8008bb4:	08008bf1 	.word	0x08008bf1
 8008bb8:	08008bf1 	.word	0x08008bf1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e0bc      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e0b8      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e0b4      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e0b0      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	e0ac      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e0a8      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e0a4      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a90      	ldr	r2, [pc, #576]	; (8008e40 <UART_SetConfig+0x6a0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d130      	bne.n	8008c64 <UART_SetConfig+0x4c4>
 8008c02:	4b8e      	ldr	r3, [pc, #568]	; (8008e3c <UART_SetConfig+0x69c>)
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d826      	bhi.n	8008c5c <UART_SetConfig+0x4bc>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <UART_SetConfig+0x474>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c35 	.word	0x08008c35
 8008c1c:	08008c3d 	.word	0x08008c3d
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c4d 	.word	0x08008c4d
 8008c28:	08008c55 	.word	0x08008c55
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e086      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c34:	2304      	movs	r3, #4
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e082      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e07e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4a:	e07a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c52:	e076      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5a:	e072      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c62:	e06e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a76      	ldr	r2, [pc, #472]	; (8008e44 <UART_SetConfig+0x6a4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d130      	bne.n	8008cd0 <UART_SetConfig+0x530>
 8008c6e:	4b73      	ldr	r3, [pc, #460]	; (8008e3c <UART_SetConfig+0x69c>)
 8008c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	d826      	bhi.n	8008cc8 <UART_SetConfig+0x528>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <UART_SetConfig+0x4e0>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c99 	.word	0x08008c99
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008ca9 	.word	0x08008ca9
 8008c8c:	08008cb1 	.word	0x08008cb1
 8008c90:	08008cb9 	.word	0x08008cb9
 8008c94:	08008cc1 	.word	0x08008cc1
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e050      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e04c      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e048      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb6:	e044      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008cb8:	2320      	movs	r3, #32
 8008cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cbe:	e040      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc6:	e03c      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008cc8:	2380      	movs	r3, #128	; 0x80
 8008cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cce:	e038      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a5c      	ldr	r2, [pc, #368]	; (8008e48 <UART_SetConfig+0x6a8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d130      	bne.n	8008d3c <UART_SetConfig+0x59c>
 8008cda:	4b58      	ldr	r3, [pc, #352]	; (8008e3c <UART_SetConfig+0x69c>)
 8008cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	d826      	bhi.n	8008d34 <UART_SetConfig+0x594>
 8008ce6:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <UART_SetConfig+0x54c>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008d05 	.word	0x08008d05
 8008cf0:	08008d0d 	.word	0x08008d0d
 8008cf4:	08008d15 	.word	0x08008d15
 8008cf8:	08008d1d 	.word	0x08008d1d
 8008cfc:	08008d25 	.word	0x08008d25
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0a:	e01a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d12:	e016      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1a:	e012      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d22:	e00e      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d24:	2320      	movs	r3, #32
 8008d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2a:	e00a      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d2c:	2340      	movs	r3, #64	; 0x40
 8008d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d32:	e006      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d34:	2380      	movs	r3, #128	; 0x80
 8008d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3a:	e002      	b.n	8008d42 <UART_SetConfig+0x5a2>
 8008d3c:	2380      	movs	r3, #128	; 0x80
 8008d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a40      	ldr	r2, [pc, #256]	; (8008e48 <UART_SetConfig+0x6a8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	f040 80ef 	bne.w	8008f2c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	dc46      	bgt.n	8008de4 <UART_SetConfig+0x644>
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	f2c0 8081 	blt.w	8008e5e <UART_SetConfig+0x6be>
 8008d5c:	3b02      	subs	r3, #2
 8008d5e:	2b1e      	cmp	r3, #30
 8008d60:	d87d      	bhi.n	8008e5e <UART_SetConfig+0x6be>
 8008d62:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <UART_SetConfig+0x5c8>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008deb 	.word	0x08008deb
 8008d6c:	08008e5f 	.word	0x08008e5f
 8008d70:	08008df3 	.word	0x08008df3
 8008d74:	08008e5f 	.word	0x08008e5f
 8008d78:	08008e5f 	.word	0x08008e5f
 8008d7c:	08008e5f 	.word	0x08008e5f
 8008d80:	08008e03 	.word	0x08008e03
 8008d84:	08008e5f 	.word	0x08008e5f
 8008d88:	08008e5f 	.word	0x08008e5f
 8008d8c:	08008e5f 	.word	0x08008e5f
 8008d90:	08008e5f 	.word	0x08008e5f
 8008d94:	08008e5f 	.word	0x08008e5f
 8008d98:	08008e5f 	.word	0x08008e5f
 8008d9c:	08008e5f 	.word	0x08008e5f
 8008da0:	08008e13 	.word	0x08008e13
 8008da4:	08008e5f 	.word	0x08008e5f
 8008da8:	08008e5f 	.word	0x08008e5f
 8008dac:	08008e5f 	.word	0x08008e5f
 8008db0:	08008e5f 	.word	0x08008e5f
 8008db4:	08008e5f 	.word	0x08008e5f
 8008db8:	08008e5f 	.word	0x08008e5f
 8008dbc:	08008e5f 	.word	0x08008e5f
 8008dc0:	08008e5f 	.word	0x08008e5f
 8008dc4:	08008e5f 	.word	0x08008e5f
 8008dc8:	08008e5f 	.word	0x08008e5f
 8008dcc:	08008e5f 	.word	0x08008e5f
 8008dd0:	08008e5f 	.word	0x08008e5f
 8008dd4:	08008e5f 	.word	0x08008e5f
 8008dd8:	08008e5f 	.word	0x08008e5f
 8008ddc:	08008e5f 	.word	0x08008e5f
 8008de0:	08008e51 	.word	0x08008e51
 8008de4:	2b40      	cmp	r3, #64	; 0x40
 8008de6:	d036      	beq.n	8008e56 <UART_SetConfig+0x6b6>
 8008de8:	e039      	b.n	8008e5e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dea:	f7fe f941 	bl	8007070 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008df0:	e03b      	b.n	8008e6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df2:	f107 0314 	add.w	r3, r7, #20
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe f950 	bl	800709c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e00:	e033      	b.n	8008e6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fa9c 	bl	8007344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e10:	e02b      	b.n	8008e6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <UART_SetConfig+0x69c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d009      	beq.n	8008e32 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <UART_SetConfig+0x69c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	08db      	lsrs	r3, r3, #3
 8008e24:	f003 0303 	and.w	r3, r3, #3
 8008e28:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <UART_SetConfig+0x6ac>)
 8008e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e30:	e01b      	b.n	8008e6a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008e32:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <UART_SetConfig+0x6ac>)
 8008e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e36:	e018      	b.n	8008e6a <UART_SetConfig+0x6ca>
 8008e38:	40011400 	.word	0x40011400
 8008e3c:	58024400 	.word	0x58024400
 8008e40:	40007800 	.word	0x40007800
 8008e44:	40007c00 	.word	0x40007c00
 8008e48:	58000c00 	.word	0x58000c00
 8008e4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e50:	4bc4      	ldr	r3, [pc, #784]	; (8009164 <UART_SetConfig+0x9c4>)
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e54:	e009      	b.n	8008e6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e5c:	e005      	b.n	8008e6a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 81da 	beq.w	8009226 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	4abc      	ldr	r2, [pc, #752]	; (8009168 <UART_SetConfig+0x9c8>)
 8008e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	6a3a      	ldr	r2, [r7, #32]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d305      	bcc.n	8008ea2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e9c:	6a3a      	ldr	r2, [r7, #32]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d903      	bls.n	8008eaa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ea8:	e1bd      	b.n	8009226 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	4618      	mov	r0, r3
 8008eae:	f04f 0100 	mov.w	r1, #0
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	4aac      	ldr	r2, [pc, #688]	; (8009168 <UART_SetConfig+0x9c8>)
 8008eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	f04f 0300 	mov.w	r3, #0
 8008ec2:	f7f7 fa09 	bl	80002d8 <__aeabi_uldivmod>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	020b      	lsls	r3, r1, #8
 8008ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008edc:	0202      	lsls	r2, r0, #8
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	6849      	ldr	r1, [r1, #4]
 8008ee2:	0849      	lsrs	r1, r1, #1
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	f04f 0100 	mov.w	r1, #0
 8008eea:	1814      	adds	r4, r2, r0
 8008eec:	eb43 0501 	adc.w	r5, r3, r1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 f9eb 	bl	80002d8 <__aeabi_uldivmod>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4613      	mov	r3, r2
 8008f08:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f10:	d308      	bcc.n	8008f24 <UART_SetConfig+0x784>
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f18:	d204      	bcs.n	8008f24 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	e180      	b.n	8009226 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f2a:	e17c      	b.n	8009226 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f34:	f040 80bf 	bne.w	80090b6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f3c:	2b20      	cmp	r3, #32
 8008f3e:	dc49      	bgt.n	8008fd4 <UART_SetConfig+0x834>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	db7c      	blt.n	800903e <UART_SetConfig+0x89e>
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d87a      	bhi.n	800903e <UART_SetConfig+0x89e>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <UART_SetConfig+0x7b0>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008fdb 	.word	0x08008fdb
 8008f54:	08008fe3 	.word	0x08008fe3
 8008f58:	0800903f 	.word	0x0800903f
 8008f5c:	0800903f 	.word	0x0800903f
 8008f60:	08008feb 	.word	0x08008feb
 8008f64:	0800903f 	.word	0x0800903f
 8008f68:	0800903f 	.word	0x0800903f
 8008f6c:	0800903f 	.word	0x0800903f
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	0800903f 	.word	0x0800903f
 8008f78:	0800903f 	.word	0x0800903f
 8008f7c:	0800903f 	.word	0x0800903f
 8008f80:	0800903f 	.word	0x0800903f
 8008f84:	0800903f 	.word	0x0800903f
 8008f88:	0800903f 	.word	0x0800903f
 8008f8c:	0800903f 	.word	0x0800903f
 8008f90:	0800900b 	.word	0x0800900b
 8008f94:	0800903f 	.word	0x0800903f
 8008f98:	0800903f 	.word	0x0800903f
 8008f9c:	0800903f 	.word	0x0800903f
 8008fa0:	0800903f 	.word	0x0800903f
 8008fa4:	0800903f 	.word	0x0800903f
 8008fa8:	0800903f 	.word	0x0800903f
 8008fac:	0800903f 	.word	0x0800903f
 8008fb0:	0800903f 	.word	0x0800903f
 8008fb4:	0800903f 	.word	0x0800903f
 8008fb8:	0800903f 	.word	0x0800903f
 8008fbc:	0800903f 	.word	0x0800903f
 8008fc0:	0800903f 	.word	0x0800903f
 8008fc4:	0800903f 	.word	0x0800903f
 8008fc8:	0800903f 	.word	0x0800903f
 8008fcc:	0800903f 	.word	0x0800903f
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d02e      	beq.n	8009036 <UART_SetConfig+0x896>
 8008fd8:	e031      	b.n	800903e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fda:	f7fd f8dd 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 8008fde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fe0:	e033      	b.n	800904a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fe2:	f7fd f8ef 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 8008fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fe8:	e02f      	b.n	800904a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fea:	f107 0314 	add.w	r3, r7, #20
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe f854 	bl	800709c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ff8:	e027      	b.n	800904a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe f9a0 	bl	8007344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009008:	e01f      	b.n	800904a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900a:	4b58      	ldr	r3, [pc, #352]	; (800916c <UART_SetConfig+0x9cc>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009016:	4b55      	ldr	r3, [pc, #340]	; (800916c <UART_SetConfig+0x9cc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	08db      	lsrs	r3, r3, #3
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	4a53      	ldr	r2, [pc, #332]	; (8009170 <UART_SetConfig+0x9d0>)
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009028:	e00f      	b.n	800904a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800902a:	4b51      	ldr	r3, [pc, #324]	; (8009170 <UART_SetConfig+0x9d0>)
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800902e:	e00c      	b.n	800904a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009030:	4b4c      	ldr	r3, [pc, #304]	; (8009164 <UART_SetConfig+0x9c4>)
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009034:	e009      	b.n	800904a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800903a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800903c:	e005      	b.n	800904a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80ea 	beq.w	8009226 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	4a44      	ldr	r2, [pc, #272]	; (8009168 <UART_SetConfig+0x9c8>)
 8009058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905c:	461a      	mov	r2, r3
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	fbb3 f3f2 	udiv	r3, r3, r2
 8009064:	005a      	lsls	r2, r3, #1
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	441a      	add	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	fbb2 f3f3 	udiv	r3, r2, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	2b0f      	cmp	r3, #15
 800907e:	d916      	bls.n	80090ae <UART_SetConfig+0x90e>
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009086:	d212      	bcs.n	80090ae <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	b29b      	uxth	r3, r3
 800908c:	f023 030f 	bic.w	r3, r3, #15
 8009090:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	085b      	lsrs	r3, r3, #1
 8009096:	b29b      	uxth	r3, r3
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	b29a      	uxth	r2, r3
 800909e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090a0:	4313      	orrs	r3, r2
 80090a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090aa:	60da      	str	r2, [r3, #12]
 80090ac:	e0bb      	b.n	8009226 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090b4:	e0b7      	b.n	8009226 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	dc4a      	bgt.n	8009154 <UART_SetConfig+0x9b4>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f2c0 8086 	blt.w	80091d0 <UART_SetConfig+0xa30>
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	f200 8083 	bhi.w	80091d0 <UART_SetConfig+0xa30>
 80090ca:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <UART_SetConfig+0x930>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	0800915b 	.word	0x0800915b
 80090d4:	08009175 	.word	0x08009175
 80090d8:	080091d1 	.word	0x080091d1
 80090dc:	080091d1 	.word	0x080091d1
 80090e0:	0800917d 	.word	0x0800917d
 80090e4:	080091d1 	.word	0x080091d1
 80090e8:	080091d1 	.word	0x080091d1
 80090ec:	080091d1 	.word	0x080091d1
 80090f0:	0800918d 	.word	0x0800918d
 80090f4:	080091d1 	.word	0x080091d1
 80090f8:	080091d1 	.word	0x080091d1
 80090fc:	080091d1 	.word	0x080091d1
 8009100:	080091d1 	.word	0x080091d1
 8009104:	080091d1 	.word	0x080091d1
 8009108:	080091d1 	.word	0x080091d1
 800910c:	080091d1 	.word	0x080091d1
 8009110:	0800919d 	.word	0x0800919d
 8009114:	080091d1 	.word	0x080091d1
 8009118:	080091d1 	.word	0x080091d1
 800911c:	080091d1 	.word	0x080091d1
 8009120:	080091d1 	.word	0x080091d1
 8009124:	080091d1 	.word	0x080091d1
 8009128:	080091d1 	.word	0x080091d1
 800912c:	080091d1 	.word	0x080091d1
 8009130:	080091d1 	.word	0x080091d1
 8009134:	080091d1 	.word	0x080091d1
 8009138:	080091d1 	.word	0x080091d1
 800913c:	080091d1 	.word	0x080091d1
 8009140:	080091d1 	.word	0x080091d1
 8009144:	080091d1 	.word	0x080091d1
 8009148:	080091d1 	.word	0x080091d1
 800914c:	080091d1 	.word	0x080091d1
 8009150:	080091c3 	.word	0x080091c3
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d037      	beq.n	80091c8 <UART_SetConfig+0xa28>
 8009158:	e03a      	b.n	80091d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800915a:	f7fd f81d 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 800915e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009160:	e03c      	b.n	80091dc <UART_SetConfig+0xa3c>
 8009162:	bf00      	nop
 8009164:	003d0900 	.word	0x003d0900
 8009168:	08009a04 	.word	0x08009a04
 800916c:	58024400 	.word	0x58024400
 8009170:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009174:	f7fd f826 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 8009178:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800917a:	e02f      	b.n	80091dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917c:	f107 0314 	add.w	r3, r7, #20
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd ff8b 	bl	800709c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800918a:	e027      	b.n	80091dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918c:	f107 0308 	add.w	r3, r7, #8
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe f8d7 	bl	8007344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800919a:	e01f      	b.n	80091dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800919c:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <UART_SetConfig+0xab0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d009      	beq.n	80091bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091a8:	4b29      	ldr	r3, [pc, #164]	; (8009250 <UART_SetConfig+0xab0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	4a28      	ldr	r2, [pc, #160]	; (8009254 <UART_SetConfig+0xab4>)
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ba:	e00f      	b.n	80091dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80091bc:	4b25      	ldr	r3, [pc, #148]	; (8009254 <UART_SetConfig+0xab4>)
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c0:	e00c      	b.n	80091dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091c2:	4b25      	ldr	r3, [pc, #148]	; (8009258 <UART_SetConfig+0xab8>)
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c6:	e009      	b.n	80091dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091ce:	e005      	b.n	80091dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091da:	bf00      	nop
    }

    if (pclk != 0U)
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d021      	beq.n	8009226 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e6:	4a1d      	ldr	r2, [pc, #116]	; (800925c <UART_SetConfig+0xabc>)
 80091e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ec:	461a      	mov	r2, r3
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	085b      	lsrs	r3, r3, #1
 80091fa:	441a      	add	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	fbb2 f3f3 	udiv	r3, r2, r3
 8009204:	b29b      	uxth	r3, r3
 8009206:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	2b0f      	cmp	r3, #15
 800920c:	d908      	bls.n	8009220 <UART_SetConfig+0xa80>
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009214:	d204      	bcs.n	8009220 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	e002      	b.n	8009226 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009242:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009246:	4618      	mov	r0, r3
 8009248:	3738      	adds	r7, #56	; 0x38
 800924a:	46bd      	mov	sp, r7
 800924c:	bdb0      	pop	{r4, r5, r7, pc}
 800924e:	bf00      	nop
 8009250:	58024400 	.word	0x58024400
 8009254:	03d09000 	.word	0x03d09000
 8009258:	003d0900 	.word	0x003d0900
 800925c:	08009a04 	.word	0x08009a04

08009260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00a      	beq.n	8009312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	f003 0320 	and.w	r3, r3, #32
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01a      	beq.n	8009376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800935e:	d10a      	bne.n	8009376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00a      	beq.n	8009398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	605a      	str	r2, [r3, #4]
  }
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093b4:	f7f8 fc2c 	bl	8001c10 <HAL_GetTick>
 80093b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b08      	cmp	r3, #8
 80093c6:	d10e      	bne.n	80093e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f82f 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e025      	b.n	8009432 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d10e      	bne.n	8009412 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f819 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e00f      	b.n	8009432 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2220      	movs	r2, #32
 8009416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	603b      	str	r3, [r7, #0]
 8009446:	4613      	mov	r3, r2
 8009448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944a:	e062      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d05e      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009454:	f7f8 fbdc 	bl	8001c10 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	429a      	cmp	r2, r3
 8009462:	d302      	bcc.n	800946a <UART_WaitOnFlagUntilTimeout+0x30>
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d11d      	bne.n	80094a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009478:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0201 	bic.w	r2, r2, #1
 8009488:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e045      	b.n	8009532 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d02e      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094c2:	d126      	bne.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e00f      	b.n	8009532 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69da      	ldr	r2, [r3, #28]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4013      	ands	r3, r2
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	429a      	cmp	r2, r3
 8009520:	bf0c      	ite	eq
 8009522:	2301      	moveq	r3, #1
 8009524:	2300      	movne	r3, #0
 8009526:	b2db      	uxtb	r3, r3
 8009528:	461a      	mov	r2, r3
 800952a:	79fb      	ldrb	r3, [r7, #7]
 800952c:	429a      	cmp	r2, r3
 800952e:	d08d      	beq.n	800944c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009550:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009560:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
	...

08009578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800958e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6899      	ldr	r1, [r3, #8]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <UART_EndRxTransfer+0x60>)
 800959c:	400b      	ands	r3, r1
 800959e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d107      	bne.n	80095b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0210 	bic.w	r2, r2, #16
 80095b6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	effffffe 	.word	0xeffffffe

080095dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f2:	d014      	beq.n	800961e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800960a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800961a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800961c:	e002      	b.n	8009624 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7f7 fcda 	bl	8000fd8 <HAL_UART_TxCpltCallback>
}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff f89a 	bl	8008774 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800965c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009664:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009670:	2b80      	cmp	r3, #128	; 0x80
 8009672:	d109      	bne.n	8009688 <UART_DMAError+0x40>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2b21      	cmp	r3, #33	; 0x21
 8009678:	d106      	bne.n	8009688 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2200      	movs	r2, #0
 800967e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009682:	6978      	ldr	r0, [r7, #20]
 8009684:	f7ff ff59 	bl	800953a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d109      	bne.n	80096aa <UART_DMAError+0x62>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b22      	cmp	r3, #34	; 0x22
 800969a:	d106      	bne.n	80096aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80096a4:	6978      	ldr	r0, [r7, #20]
 80096a6:	f7ff ff67 	bl	8009578 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b0:	f043 0210 	orr.w	r2, r3, #16
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	f7f7 fc9c 	bl	8000ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096c0:	bf00      	nop
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7f7 fc86 	bl	8000ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800970a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2220      	movs	r2, #32
 8009710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7f7 fc5c 	bl	8000fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <HAL_UARTEx_EnableFifoMode+0x16>
 8009776:	2302      	movs	r3, #2
 8009778:	e02b      	b.n	80097d2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2224      	movs	r2, #36	; 0x24
 8009786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0201 	bic.w	r2, r2, #1
 80097a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80097b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f88a 	bl	80098d4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d101      	bne.n	80097f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097ee:	2302      	movs	r3, #2
 80097f0:	e02d      	b.n	800984e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2224      	movs	r2, #36	; 0x24
 80097fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f850 	bl	80098d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009866:	2b01      	cmp	r3, #1
 8009868:	d101      	bne.n	800986e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800986a:	2302      	movs	r3, #2
 800986c:	e02d      	b.n	80098ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2224      	movs	r2, #36	; 0x24
 800987a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0201 	bic.w	r2, r2, #1
 8009894:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f812 	bl	80098d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d108      	bne.n	80098f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098f4:	e031      	b.n	800995a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098f6:	2310      	movs	r3, #16
 80098f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098fa:	2310      	movs	r3, #16
 80098fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	0e5b      	lsrs	r3, r3, #25
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0307 	and.w	r3, r3, #7
 800990c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	0f5b      	lsrs	r3, r3, #29
 8009916:	b2db      	uxtb	r3, r3
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	7b3a      	ldrb	r2, [r7, #12]
 8009922:	4911      	ldr	r1, [pc, #68]	; (8009968 <UARTEx_SetNbDataToProcess+0x94>)
 8009924:	5c8a      	ldrb	r2, [r1, r2]
 8009926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800992a:	7b3a      	ldrb	r2, [r7, #12]
 800992c:	490f      	ldr	r1, [pc, #60]	; (800996c <UARTEx_SetNbDataToProcess+0x98>)
 800992e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009930:	fb93 f3f2 	sdiv	r3, r3, r2
 8009934:	b29a      	uxth	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	7b7a      	ldrb	r2, [r7, #13]
 8009940:	4909      	ldr	r1, [pc, #36]	; (8009968 <UARTEx_SetNbDataToProcess+0x94>)
 8009942:	5c8a      	ldrb	r2, [r1, r2]
 8009944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009948:	7b7a      	ldrb	r2, [r7, #13]
 800994a:	4908      	ldr	r1, [pc, #32]	; (800996c <UARTEx_SetNbDataToProcess+0x98>)
 800994c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800994e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800995a:	bf00      	nop
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	08009a1c 	.word	0x08009a1c
 800996c:	08009a24 	.word	0x08009a24

08009970 <__libc_init_array>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	4d0d      	ldr	r5, [pc, #52]	; (80099a8 <__libc_init_array+0x38>)
 8009974:	4c0d      	ldr	r4, [pc, #52]	; (80099ac <__libc_init_array+0x3c>)
 8009976:	1b64      	subs	r4, r4, r5
 8009978:	10a4      	asrs	r4, r4, #2
 800997a:	2600      	movs	r6, #0
 800997c:	42a6      	cmp	r6, r4
 800997e:	d109      	bne.n	8009994 <__libc_init_array+0x24>
 8009980:	4d0b      	ldr	r5, [pc, #44]	; (80099b0 <__libc_init_array+0x40>)
 8009982:	4c0c      	ldr	r4, [pc, #48]	; (80099b4 <__libc_init_array+0x44>)
 8009984:	f000 f820 	bl	80099c8 <_init>
 8009988:	1b64      	subs	r4, r4, r5
 800998a:	10a4      	asrs	r4, r4, #2
 800998c:	2600      	movs	r6, #0
 800998e:	42a6      	cmp	r6, r4
 8009990:	d105      	bne.n	800999e <__libc_init_array+0x2e>
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	f855 3b04 	ldr.w	r3, [r5], #4
 8009998:	4798      	blx	r3
 800999a:	3601      	adds	r6, #1
 800999c:	e7ee      	b.n	800997c <__libc_init_array+0xc>
 800999e:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a2:	4798      	blx	r3
 80099a4:	3601      	adds	r6, #1
 80099a6:	e7f2      	b.n	800998e <__libc_init_array+0x1e>
 80099a8:	08009a34 	.word	0x08009a34
 80099ac:	08009a34 	.word	0x08009a34
 80099b0:	08009a34 	.word	0x08009a34
 80099b4:	08009a38 	.word	0x08009a38

080099b8 <memset>:
 80099b8:	4402      	add	r2, r0
 80099ba:	4603      	mov	r3, r0
 80099bc:	4293      	cmp	r3, r2
 80099be:	d100      	bne.n	80099c2 <memset+0xa>
 80099c0:	4770      	bx	lr
 80099c2:	f803 1b01 	strb.w	r1, [r3], #1
 80099c6:	e7f9      	b.n	80099bc <memset+0x4>

080099c8 <_init>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr

080099d4 <_fini>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr
